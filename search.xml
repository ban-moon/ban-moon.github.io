<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>junit4整合PowerMockito进行单元测试</title>
      <link href="/archive/52e465da/"/>
      <url>/archive/52e465da/</url>
      
        <content type="html"><![CDATA[<h1>junit4整合PowerMockito进行单元测试</h1><h2 id="一、介绍">一、介绍</h2><p>在单元测试中，代码里面往往有一些需要连接数据库、调用第三方远程的代码。</p><p>由于没有环境，这些代码的存在，会给单元测试造成影响。</p><p>所以我们在单测中，往往会使用<code>mock</code>的方式对这些代码做一个数据的模拟，从而达到对代码进行测试的一个目的。</p><p>所以单测需要满足以下几点</p><ul class="lvl-0"><li class="lvl-2"><p>可复用：单测代码可以重复执行</p></li><li class="lvl-2"><p>无环境：不要依赖数据库，第三方接口等外部的环境依赖</p></li><li class="lvl-2"><p>方法级细粒度：单测代码应该针对具体一个方法的测试，</p></li><li class="lvl-2"><p>高覆盖率：如果代码中复杂度过高，单测要覆盖到方法中的每一行代码</p></li><li class="lvl-2"><p>自动断言：每一段单测代码都应该有自己的断言方法，而不是通过打印再人工查看正确性</p></li></ul><p>所以我们就有了<code>Mockito</code>，它可以模拟对象，模拟对象方法的返回值，来完成<code>mock</code>。</p><p>本文使用的是<code>PowerMockito</code>，它是由<code>Mockito</code>的基础上开发而来，语法规则基本一致，同时也有一些自己的增强，可以对静态方法，局部变量进行<code>mock</code>。</p><h2 id="二、初步入门">二、初步入门</h2><p>假设我们有下面这两段代码<code>PowerMockitoServiceImpl.java</code>和<code>PowerMockitoMapper.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.test.entity.PowerMockitoEntity;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.test.mapper.PowerMockitoMapper;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.test.service.PowerMockitoService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Optional;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PowerMockitoServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">PowerMockitoService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PowerMockitoMapper powerMockitoMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(PowerMockitoEntity entity)</span> &#123;</span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">status</span> <span class="operator">=</span> Optional.ofNullable(entity.getValue()).map(a -&gt; Boolean.TRUE).orElse(Boolean.FALSE);</span><br><span class="line">        entity.setStatus(status);</span><br><span class="line">        powerMockitoMapper.insert(entity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.test.entity.PowerMockitoEntity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PowerMockitoMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">insert</span><span class="params">(PowerMockitoEntity entity)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有一段<code>PowerMockitoEntity.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableId;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableName;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.EqualsAndHashCode;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.experimental.Accessors;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = false)</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span></span><br><span class="line"><span class="meta">@TableName(&quot;power_mockito&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PowerMockitoEntity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableId</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String value;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Boolean status;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码所做的功能就是，插入一个实体至数据库。</p><p>在插入前，我们根据<code>entity.value</code>是否有值，给予<code>entity.status</code>的值</p><hr /><p>故此，上面的代码需要连接数据库，我们在单测时，直接对<code>PowerMockitoMapper</code>进行<code>mock</code>即可</p><p>首先，先导入依赖，根据自己的需要进行删减使用</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- powermock --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mockito<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mockito-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.powermock<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>powermock-api-mockito2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.powermock<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>powermock-module-junit4<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.powermock<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>powermock-module-junit4-rule<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.powermock<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>powermock-classloading-xstream<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.test.entity.PowerMockitoEntity;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.test.mapper.PowerMockitoMapper;</span><br><span class="line"><span class="keyword">import</span> org.junit.Assert;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.mockito.InjectMocks;</span><br><span class="line"><span class="keyword">import</span> org.mockito.Mock;</span><br><span class="line"><span class="keyword">import</span> org.powermock.modules.junit4.PowerMockRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.mockito.Mockito.when;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith(PowerMockRunner.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PowerMockitoServiceImplTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Mock</span></span><br><span class="line">    <span class="keyword">private</span> PowerMockitoMapper mockPowerMockitoMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@InjectMocks</span></span><br><span class="line">    <span class="keyword">private</span> PowerMockitoServiceImpl powerMockitoServiceImplUnderTest;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 有值测试</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testInsert1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 设置参数</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">PowerMockitoEntity</span> <span class="variable">entity</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PowerMockitoEntity</span>();</span><br><span class="line">        entity.setId(<span class="number">1</span>);</span><br><span class="line">        entity.setValue(<span class="string">&quot;有值测试&quot;</span>);</span><br><span class="line">        when(mockPowerMockitoMapper.insert(entity)).thenReturn(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行测试</span></span><br><span class="line">        powerMockitoServiceImplUnderTest.insert(entity);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 校验结果</span></span><br><span class="line">        Assert.assertTrue(entity.getStatus());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 无值测试</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testInsert2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 设置参数</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">PowerMockitoEntity</span> <span class="variable">entity</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PowerMockitoEntity</span>();</span><br><span class="line">        entity.setId(<span class="number">1</span>);</span><br><span class="line">        entity.setValue(<span class="literal">null</span>);</span><br><span class="line">        when(mockPowerMockitoMapper.insert(entity)).thenReturn(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行测试</span></span><br><span class="line">        powerMockitoServiceImplUnderTest.insert(entity);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 校验结果</span></span><br><span class="line">        Assert.assertFalse(entity.getStatus());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果如下，保证两个测试方法如预期通过即可</p><p><img src="https://banmoon-blog.oss-cn-guangzhou.aliyuncs.com/images/20230917165202.png" alt="image-20230327213425469" /></p><h2 id="三、其他使用">三、其他使用</h2><h3 id="1）如何对无返回值的方法进行断言">1）如何对无返回值的方法进行断言</h3><p>假设有一个无返回值的方法，我们要针对它进行测试。由于它没有返回值，就没有办法对其返回值进行断言校验。</p><p>那么针对这种情况，一个方法，就算是无返回值的情况。内部一定做了一些什么操作。所以我们一般有两种方式</p><ul class="lvl-0"><li class="lvl-2"><p>这个方法做了设置某个对象的属性，我们可以校验对象属性是否符合预期</p><ul class="lvl-2"><li class="lvl-4">如第二章的初步使用就是如此</li></ul></li><li class="lvl-2"><p>如果这个方法执行了某段逻辑分支的代码，我们可以可以校验那段代码是否执行过</p></li></ul><p><code>PowerMockitoServiceImpl.java</code>上再加一个无返回值的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PowerMockitoServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">PowerMockitoService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PowerMockitoMapper powerMockitoMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveOrUpdate</span><span class="params">(PowerMockitoEntity entity)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (entity.getId() == <span class="literal">null</span>) &#123;</span><br><span class="line">            powerMockitoMapper.insert(entity);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            powerMockitoMapper.updateById(entity);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>PowerMockitoMapper.java</code>如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.test.entity.PowerMockitoEntity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PowerMockitoMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">insert</span><span class="params">(PowerMockitoEntity entity)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">updateById</span><span class="params">(PowerMockitoEntity entity)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么我们可以这样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.test.entity.PowerMockitoEntity;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.test.mapper.PowerMockitoMapper;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.mockito.InjectMocks;</span><br><span class="line"><span class="keyword">import</span> org.mockito.Mock;</span><br><span class="line"><span class="keyword">import</span> org.mockito.Mockito;</span><br><span class="line"><span class="keyword">import</span> org.powermock.modules.junit4.PowerMockRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.mockito.Mockito.when;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith(PowerMockRunner.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NoneReturnTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Mock</span></span><br><span class="line">    <span class="keyword">private</span> PowerMockitoMapper mockPowerMockitoMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@InjectMocks</span></span><br><span class="line">    <span class="keyword">private</span> PowerMockitoServiceImpl powerMockitoServiceImplUnderTest;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 有ID测试</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 设置参数</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">PowerMockitoEntity</span> <span class="variable">entity</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PowerMockitoEntity</span>();</span><br><span class="line">        entity.setId(<span class="number">1</span>);</span><br><span class="line">        entity.setValue(<span class="string">&quot;测试&quot;</span>);</span><br><span class="line">        when(mockPowerMockitoMapper.updateById(entity)).thenReturn(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行测试</span></span><br><span class="line">        powerMockitoServiceImplUnderTest.saveOrUpdate(entity);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 校验结果</span></span><br><span class="line">        Mockito.verify(mockPowerMockitoMapper).updateById(entity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 没有ID测试</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 设置参数</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">PowerMockitoEntity</span> <span class="variable">entity</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PowerMockitoEntity</span>();</span><br><span class="line">        entity.setId(<span class="literal">null</span>);</span><br><span class="line">        entity.setValue(<span class="string">&quot;测试&quot;</span>);</span><br><span class="line">        when(mockPowerMockitoMapper.insert(entity)).thenReturn(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行测试</span></span><br><span class="line">        powerMockitoServiceImplUnderTest.saveOrUpdate(entity);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 校验结果</span></span><br><span class="line">        Mockito.verify(mockPowerMockitoMapper).insert(entity);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2）对属局部对象进行mock并设置">2）对属局部对象进行mock并设置</h3><p>如果一个方法中，有一个自己实例化的一个局部变量，那么我们该如何对其进行<code>mock</code>呢？</p><p>例如下面这个方法，有一个自己的局部变量<code>tuple</code>，并返回了这个局部变量的数量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.service.PowerMockitoService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PowerMockitoServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">PowerMockitoService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">localVariable</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;E://abc.txt&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> file.length();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们只需要这样进行，即可以完成对局部变量的<code>mock</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test.powerMockitoTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.service.impl.PowerMockitoServiceImpl;</span><br><span class="line"><span class="keyword">import</span> org.junit.Assert;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.mockito.InjectMocks;</span><br><span class="line"><span class="keyword">import</span> org.powermock.api.mockito.PowerMockito;</span><br><span class="line"><span class="keyword">import</span> org.powermock.core.classloader.annotations.PrepareForTest;</span><br><span class="line"><span class="keyword">import</span> org.powermock.modules.junit4.PowerMockRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith(PowerMockRunner.class)</span></span><br><span class="line"><span class="meta">@PrepareForTest(&#123;PowerMockitoServiceImpl.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LocalVariableTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@InjectMocks</span></span><br><span class="line">    <span class="keyword">private</span> PowerMockitoServiceImpl powerMockitoServiceImplUnderTest;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">localVariableTest</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 设置参数</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> PowerMockito.mock(File.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// mock</span></span><br><span class="line">        PowerMockito.whenNew(File.class)</span><br><span class="line">                .withAnyArguments()</span><br><span class="line">                .thenReturn(file);</span><br><span class="line">        PowerMockito.when(file.length()).thenReturn(<span class="number">2L</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行测试</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">i</span> <span class="operator">=</span> powerMockitoServiceImplUnderTest.localVariable();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 校验结果</span></span><br><span class="line">        Assert.assertEquals(<span class="number">2L</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3）对静态方法mock">3）对静态方法mock</h3><p>如何对静态方法的返回值进行<code>mock</code></p><p>先在<code>PowerMockitoServiceImpl.java</code>添加一个静态方法，其中发现<code>HttpUtil.get()</code>是一个静态方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PowerMockitoServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">PowerMockitoService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PowerMockitoMapper powerMockitoMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">syncPowerMockitoEntity</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> HttpUtil.get(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (CharSequenceUtil.isNotBlank(result)) &#123;</span><br><span class="line">            List&lt;JSONObject&gt; list = JSON.parseObject(result, List.class);</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (JSONObject json : list) &#123;</span><br><span class="line">                <span class="type">PowerMockitoEntity</span> <span class="variable">entity</span> <span class="operator">=</span> json.toJavaObject(PowerMockitoEntity.class);</span><br><span class="line">                i += powerMockitoMapper.insert(entity);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BanmoonException</span>(<span class="number">1001</span>, <span class="string">&quot;同步出现异常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>针对上面的方法，我们可以这样进行<code>mock</code>，注意<code>@PrepareForTest</code>注解，一定要写上，改变了其中的字节码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.collection.CollUtil;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.http.HttpUtil;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.test.entity.PowerMockitoEntity;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.test.mapper.PowerMockitoMapper;</span><br><span class="line"><span class="keyword">import</span> org.junit.Assert;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.mockito.InjectMocks;</span><br><span class="line"><span class="keyword">import</span> org.mockito.Mock;</span><br><span class="line"><span class="keyword">import</span> org.powermock.api.mockito.PowerMockito;</span><br><span class="line"><span class="keyword">import</span> org.powermock.core.classloader.annotations.PrepareForTest;</span><br><span class="line"><span class="keyword">import</span> org.powermock.modules.junit4.PowerMockRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.mockito.ArgumentMatchers.any;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.mockito.Mockito.when;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith(PowerMockRunner.class)</span></span><br><span class="line"><span class="meta">@PrepareForTest(HttpUtil.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StaticMethodTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Mock</span></span><br><span class="line">    <span class="keyword">private</span> PowerMockitoMapper mockPowerMockitoMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@InjectMocks</span></span><br><span class="line">    <span class="keyword">private</span> PowerMockitoServiceImpl powerMockitoServiceImplUnderTest;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 静态方法mock</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 设置参数</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">PowerMockitoEntity</span> <span class="variable">entity1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PowerMockitoEntity</span>();</span><br><span class="line">        entity1.setId(<span class="number">1</span>);</span><br><span class="line">        entity1.setValue(<span class="string">&quot;测试1&quot;</span>);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">PowerMockitoEntity</span> <span class="variable">entity2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PowerMockitoEntity</span>();</span><br><span class="line">        entity2.setId(<span class="number">2</span>);</span><br><span class="line">        entity2.setValue(<span class="string">&quot;测试2&quot;</span>);</span><br><span class="line">        List&lt;PowerMockitoEntity&gt; list = CollUtil.newArrayList(entity1, entity2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// mock</span></span><br><span class="line">        PowerMockito.mockStatic(HttpUtil.class);</span><br><span class="line">        when(HttpUtil.get(any())).thenReturn(JSON.toJSONString(list));</span><br><span class="line">        when(mockPowerMockitoMapper.insert(any())).thenReturn(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行测试</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> powerMockitoServiceImplUnderTest.syncPowerMockitoEntity();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 校验结果</span></span><br><span class="line">        Assert.assertEquals(<span class="number">2</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4）mock-final修饰的类和方法">4）mock final修饰的类和方法</h3><p>首先我们先写一个工具类，这个工具类是<code>final</code>修饰的，里面的方法也是<code>final</code>的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.RandomUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">PowerMockitoUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> String <span class="title function_">finalMethod</span><span class="params">(<span class="type">int</span> length)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> RandomUtil.randomString(length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>单测这个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.service.PowerMockitoService;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.util.PowerMockitoUtil;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PowerMockitoServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">PowerMockitoService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">PowerMockitoUtil</span> <span class="variable">powerMockitoUtil</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PowerMockitoUtil</span>(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">finalMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">method</span> <span class="operator">=</span> powerMockitoUtil.finalMethod();</span><br><span class="line">        <span class="keyword">return</span> method.length();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test.powerMockitoTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.service.impl.PowerMockitoServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.util.PowerMockitoUtil;</span><br><span class="line"><span class="keyword">import</span> org.junit.Assert;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.mockito.InjectMocks;</span><br><span class="line"><span class="keyword">import</span> org.powermock.api.mockito.PowerMockito;</span><br><span class="line"><span class="keyword">import</span> org.powermock.core.classloader.annotations.PrepareForTest;</span><br><span class="line"><span class="keyword">import</span> org.powermock.modules.junit4.PowerMockRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith(PowerMockRunner.class)</span></span><br><span class="line"><span class="meta">@PrepareForTest(&#123;PowerMockitoServiceImpl.class, PowerMockitoUtil.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FinalMethodTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@InjectMocks</span></span><br><span class="line">    <span class="keyword">private</span> PowerMockitoServiceImpl powerMockitoServiceImplUnderTest;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">finalMethodTest</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 设置参数</span></span><br><span class="line">        <span class="type">PowerMockitoUtil</span> <span class="variable">util</span> <span class="operator">=</span> PowerMockito.mock(PowerMockitoUtil.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// mock</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> PowerMockito.field(PowerMockitoServiceImpl.class, <span class="string">&quot;powerMockitoUtil&quot;</span>);</span><br><span class="line">        field.set(powerMockitoServiceImplUnderTest, util);</span><br><span class="line">        PowerMockito.when(util.finalMethod()).thenReturn(<span class="string">&quot;abcde&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行测试</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> powerMockitoServiceImplUnderTest.finalMethod();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 校验结果</span></span><br><span class="line">        Assert.assertEquals(<span class="number">5</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5）异常的情况">5）异常的情况</h3><p>有些时候，代码是会发生异常的，那么在单测的环境下，我们需要判断这些异常是什么，是不是符合预期</p><p>如下这个方法，我们只需要传个<code>null</code>，就会发生<code>NullPointException</code>的异常</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">package com.banmoon.service.impl;</span><br><span class="line"></span><br><span class="line">import com.banmoon.service.PowerMockitoService;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line">@Service</span><br><span class="line">public class PowerMockitoServiceImpl implements PowerMockitoService &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int exceptionMethod(String name) &#123;</span><br><span class="line">        return name.length();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试用例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test.powerMockitoTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.service.impl.PowerMockitoServiceImpl;</span><br><span class="line"><span class="keyword">import</span> org.junit.Assert;</span><br><span class="line"><span class="keyword">import</span> org.junit.Rule;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.rules.ExpectedException;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.mockito.InjectMocks;</span><br><span class="line"><span class="keyword">import</span> org.powermock.core.classloader.annotations.PrepareForTest;</span><br><span class="line"><span class="keyword">import</span> org.powermock.modules.junit4.PowerMockRunner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith(PowerMockRunner.class)</span></span><br><span class="line"><span class="meta">@PrepareForTest(&#123;PowerMockitoServiceImpl.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExceptionMethodTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@InjectMocks</span></span><br><span class="line">    <span class="keyword">private</span> PowerMockitoServiceImpl powerMockitoServiceImplUnderTest;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Rule</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">ExpectedException</span> <span class="variable">thrown</span> <span class="operator">=</span> ExpectedException.none();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">exceptionMethodTest</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 校验结果</span></span><br><span class="line">        Assert.assertThrows(NullPointerException.class, () -&gt; &#123;</span><br><span class="line">            <span class="comment">// 执行测试</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> powerMockitoServiceImplUnderTest.exceptionMethod(<span class="literal">null</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">exceptionMethodTest2</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 校验结果</span></span><br><span class="line">        thrown.expect(NullPointerException.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行测试</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> powerMockitoServiceImplUnderTest.exceptionMethod(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、最后">四、最后</h2><p>推荐一个很好用的<code>IDEA</code>插件，这个插件可以快速生成单元测试代码</p><p><code>squaretest</code></p><p>我是半月，你我一同共勉！！！</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> demo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL的MVCC是什么，有什么用？</title>
      <link href="/archive/6e8819b6/"/>
      <url>/archive/6e8819b6/</url>
      
        <content type="html"><![CDATA[<h1>MySQL的MVCC是什么，有什么用？</h1><h2 id="一、介绍">一、介绍</h2><p>面试被问到了<code>MVCC</code>，我不知道啊，一脸懵逼！</p><p>于是回家查询了资料，记录一下</p><p>实际上，<code>MVCC</code>的全称是<code>Multi Version ConCurrency Control</code>，翻译过来就是多版本并发控制。</p><h2 id="二、概念">二、概念</h2><h3 id="1）隔离级别">1）隔离级别</h3><p>指的是一种提高并发的技术。最早的数据库系统，只有读读之间可以并发，读写，写读，写写都要阻塞。引入多版本之后，只有写写之间相互阻塞，其他三种操作都可以并行。在<code>MySQL</code>中，这样大幅度提高了<code>InnoDB</code>的并发度。在内部实现中，<code>InnoDB</code>通过<code>undo log</code>保存每条数据的多个版本，并且能够找回数据历史版本提供给用户读，每个事务读到的数据版本可能是不一样的。在同一个事务中，用户只能看到该事务创建快照之前已经提交的修改和该事务本身做的修改。</p><p>首先我们先了解一下数据库事务的隔离级别</p><ul class="lvl-0"><li class="lvl-2"><p><b>未提交读（READ UNCOMMITED）</b>：也就是脏读，当一个事务读取到另外一个事务修改但未提交的数据时</p></li><li class="lvl-2"><p><b>已提交读 （READ COMMITED）</b>：简称<code>RC</code></p></li><li class="lvl-2"><p><b>可重复读（REPEATABLE READ）</b>：简称<code>RR</code></p></li><li class="lvl-2"><p><b>可串行化（SERIALIZABLE）</b></p></li></ul><table><thead><tr><th>隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td>未提交读</td><td>可能</td><td>可能</td><td>可能</td></tr><tr><td>已提交读</td><td>不可能</td><td>可能</td><td>可能</td></tr><tr><td>可重复读</td><td>不可能</td><td>不可能</td><td>可能</td></tr><tr><td>可串行化</td><td>不可能</td><td>不可能</td><td>不可能</td></tr></tbody></table><p>那么先介绍下面的现象</p><ul class="lvl-0"><li class="lvl-2"><p><b>脏读</b>：当一个事务读取到另外一个事务修改但未提交的数据时</p></li><li class="lvl-2"><p><b>不可重复读</b>：在同一个事务中，同样的条件<code>SQL</code>查询出的结果不一致</p></li><li class="lvl-2"><p><b>幻读</b>：在同一个事务中，同样的条件<code>SQL</code>查询出的结果不一致==（重点在于，数据有新增或者删除，导致的结果不一致）==</p></li></ul><h3 id="2）undo-log">2）undo log</h3><p>在上面有提到<code>undo log</code>，那么这个<code>undo log</code>是什么呢？</p><p>实际上是当多个事务操作一条数据时，每个事务中的每个操作都会产生一条记录，比如说下面这样</p><p><img src="https://banmoon-blog.oss-cn-guangzhou.aliyuncs.com/images/20230909141722.png" alt="image-20230909130137655" /></p><p>可以看到，当一个事务<code>TX111</code>修改了数据值，就会产生一条<code>undo log</code>，并记录指向上一条最原始的这条<code>undo log</code>。</p><hr /><p>如果有多条事务，修改同一条数据，那么就会产生链表一样的结构，我们称为<code>undo log</code>版本链表，如下</p><p><img src="https://banmoon-blog.oss-cn-guangzhou.aliyuncs.com/images/20230909141729.png" alt="image-20230909130109990" /></p><blockquote><p><code>undo log</code>，会进行删除，但不是立即删除。</p><p>它会在确保，当前<code>undo log</code>不被引用后，再进行删除。也就是当事务所有完成后，也就是<code>commit</code>、<code>rollback</code>，保留最终确认下的<code>undo log</code>，并删除之前所有的版本链。</p></blockquote><h3 id="3）快照读、当前读">3）快照读、当前读</h3><p>好的，现在要介绍一下<mark>快照读</mark>和<mark>当前读</mark>，只要介绍了这个，我们就能了解<code>MVCC</code>到底是什么了</p><ul class="lvl-0"><li class="lvl-2"><p><b>快照读</b>（<code>readView</code>）：当执行查询<code>select</code>语句时，提取数据的一个记录</p></li><li class="lvl-2"><p><b>当前读</b>：当执行下面的语句时，提取数据的一个记录</p><ul class="lvl-2"><li class="lvl-4"><code>insert</code>、<code>update</code>、<code>delete</code>、<code>select...for update</code>、<code>select...lock in share mode</code></li></ul></li></ul><p>上面了解到他们是一个数据记录，那么其中他们有什么数据呢</p><table><thead><tr><th>字段</th><th>说明</th></tr></thead><tbody><tr><td>m_ids</td><td>当前活跃的事务编号集合，也就是还没有被提交回滚的事务集合</td></tr><tr><td>min_trx_id</td><td>最小的活跃事务编号</td></tr><tr><td>max_trx_id</td><td>预分配事务编号，当前最大事务编号+1</td></tr><tr><td>creator_trx_id</td><td>快照读创建者的事务编号</td></tr></tbody></table><p>好的，我们来进行理解一下这个快照读</p><p><img src="https://banmoon-blog.oss-cn-guangzhou.aliyuncs.com/images/20230909141738.png" alt="image-20230909125747658" /></p><h3 id="4）多版本并发控制流程">4）多版本并发控制流程</h3><p>上面的概念都看完了，接下来可以讲讲<code>MVCC</code>了，他是怎么使用<code>RR</code>、<code>RC</code>来影响事务读取的数据的呢？</p><p>快照读配合当前读会影响，读取的结果，我们看下面的<code>undo log</code>和<code>readView</code></p><p><img src="https://banmoon-blog.oss-cn-guangzhou.aliyuncs.com/images/20230909141743.png" alt="image-20230909130447845" /></p><p>我们要确定版本时，就是拿着快照读去匹配版本链上的每一个<code>undo log</code>，从最后往前进行判断</p><p>使用这些判断条件，<code>MySQL</code>就能确定要读取的版本了</p><ol><li class="lvl-3"><p>判断<code>undo log</code>的<code>trx_id == creator_trx_id</code></p><ol><li class="lvl-6">相等，则说明这条<code>undo log</code>修改，就是本事务自己更新修改的。可以访问</li></ol></li><li class="lvl-3"><p>判断<code>undo log</code>的<code>trx_id &lt; min_trx_id</code></p><ol><li class="lvl-6">成立，则说明当前判断的这个<code>undo log</code>已经提交。可以访问</li></ol></li><li class="lvl-3"><p>判断<code>undo log</code>的<code>trx_id &gt;= max_trx_id</code></p><ol><li class="lvl-6">成立，则说明当前判断的这个<code>undo log</code>，是在产生快照读之后创建的事务。所以不允许访问</li></ol></li><li class="lvl-3"><p>判断<code>min_trx_id &lt;= trx_id &lt; max_trx_id</code>，成立则继续判断，<code>trx_id</code>是否存在于<code>m_ids</code>里面</p><ol><li class="lvl-6">成立，则说明<code>undo log</code>的事务还没有提交。不允许访问</li><li class="lvl-6">不成立，则说明<code>undo log</code>的事务已经提交。允许访问</li></ol></li></ol><p><b>根据上面的判断条件，我们来进行判断</b></p><ul class="lvl-0"><li class="lvl-2"><p>首先是第一个<code>undo log</code></p><ol><li class="lvl-5"><code>trx_id == creator_trx_id</code>，即<code>TX222 == TX333</code>。不成立，继续下一个判断条件</li><li class="lvl-5"><code>trx_id &lt; min_trx_id</code>，即<code>TX222 &lt; TX222</code>。不成立，则继续下一个判断条件</li><li class="lvl-5"><code>trx_id &gt;= max_trx_id</code>，即<code>TX222 &gt;= TX334</code>。不成立，则继续向下判断</li><li class="lvl-5"><code>min_trx_id &lt;= trx_id &lt; max_trx_id</code>，即<code>TX222 &lt;= TX222 &lt;= TX334</code>。成立，则还要判断是否处于活跃事务集合中<ol><li class="lvl-8"><code>TX222</code>处于集合<code>[TX222, TX333]</code>之中，不允许访问</li></ol></li></ol></li><li class="lvl-2"><p><b>上面的条件都不满足后，我们将要继续下一个<code>undolog</code></b></p><ol><li class="lvl-5"><code>trx_id == creator_trx_id</code>，即<code>TX111 == TX333</code>。不成立，继续下一个判断条件</li><li class="lvl-5"><code>trx_id &lt; min_trx_id</code>，即<code>TX111 &lt; TX222</code>。<ol><li class="lvl-8">成立，则说明<code>TX111</code>的事务已经提交，允许访问，确定下来一个数据的访问</li></ol></li></ol></li></ul><hr /><p>按照上面的方法，进行判断</p><p><img src="https://banmoon-blog.oss-cn-guangzhou.aliyuncs.com/images/20230909141751.png" alt="image-20230909134721632" /></p><p>会读取到这样的一个结果，<mark>注意看，在<code>TX333</code>的事务下，三次读取出现了三次不同的结果</mark>，这便是<b>不可重复读</b>。</p><p>那么<code>MVCC</code>该如何控制呢，其实问题主要的发生原因，是每次的<code>readView</code>不一致导致的，既然快照读不一致，所查询的结果肯定也不一致。</p><p>那么只需要，将同一个事务中快照读，变成同一份，不就是<mark>可重复读</mark>的隔离级别了嘛。</p><p>故事务中，将第一次快照读进行保存，后面的读取都按照这份快照读进行复用。</p><p><img src="https://banmoon-blog.oss-cn-guangzhou.aliyuncs.com/images/20230909141901.png" alt="image-20230909135858466" /></p><hr /><p>那么为什么说可重复读<code>RR</code>，并不能完全解决幻读的问题呢？</p><p>因为，在同一个事务中，快照读是复用的，一旦事务中出现了一次当前读，也就是执行了<code>update</code>等语句，那么就会重新刷新快照读。一旦快照读发生了改变，幻读就有可能出现了。</p><p><img src="https://banmoon-blog.oss-cn-guangzhou.aliyuncs.com/images/20230909141906.png" alt="image-20230909141251609" /></p><blockquote><p>不可重复读，是指一个事务中，两次读取的结果不一致的现象。</p><p>但<b>同一个事务中，如果是因为自己修改了数据，从而导致两次查询结果不一致的情况，这是正常现象，不叫不可重复读</b></p><p>这也正是，为什么发生当前读后，快照读要重新进行生成的原因。因为要读取到自己事务上一刻修改的数据。</p></blockquote><h2 id="三、最后">三、最后</h2><p>好了，我是被面试问到的，真的是一脸懵逼，服了</p><p>我是半月，你我一同共勉！！！</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis相关底层面试题</title>
      <link href="/archive/ea96f55a/"/>
      <url>/archive/ea96f55a/</url>
      
        <content type="html"><![CDATA[<h1>Redis相关底层面试题</h1><h2 id="一、介绍">一、介绍</h2><p>Redis是一个开源的高性能键值对存储系统，具有快速、灵活和可扩展的特性。它是一个基于内存的数据结构存储系统，可以用作数据库、缓存和消息代理。Redis支持多种类型的数据结构，如字符串（strings），散列（hashes），列表（lists），集合（sets）等。</p><p>Redis支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用。同时，Redis还支持数据的备份，即master-slave模式的数据备份。</p><p>Redis的应用场景非常广泛。虽然Redis是一个key-value的内存数据库，但在实际场景中，Redis经常被作为缓存来使用，如面对数据高并发的读写、海量数据的读写等。具体而言，分布式缓存Redis可用于以下场景：</p><ol><li class="lvl-3"><p>页面缓存：Redis可将Web页面的内容片段，包括HTML，CSS和图片等静态数据，缓存到Redis实例，提高网站的访问性能。比如在电商类应用中，热销商品展示、秒杀推荐等数据面临高并发读的压力，分布式缓存Redis的高并发及灵活扩展，可轻松支持此类应用  。</p></li><li class="lvl-3"><p>消息队列：Redis可以作为消息代理，将消息存储在Redis中，然后由消费者来消费这些消息。这种方式可以很好地解决异步处理问题。</p></li><li class="lvl-3"><p>排行榜：Redis提供的有序集合数据类构能实现各种复杂的排行榜应用。</p></li><li class="lvl-3"><p>计数器：Redis提供了INCRBY命令来实现原子性的递增，因此可以运用于高并发的秒杀活动、分布式序列号的生成等业务场景。</p></li></ol><hr /><p>下面提供了<code>redis</code>的一些面试题，主要是记录，并在以后的面试中不再感到迷茫。</p><div id="banmoon-toc"><ul class="lvl-0"><li class="lvl-2"><p><a target="#1）持久化策略" data-pjax-state="anchor">持久化策略</a></p></li><li class="lvl-2"><p><a target="#2）redis是单线程还是多线程的" data-pjax-state="anchor">redis是单线程还是多线程的</a></p></li><li class="lvl-2"><p><a target="#3）redis的过期删除策略" data-pjax-state="anchor">redis的过期删除策略</a></p></li><li class="lvl-2"><p><a target="#4）缓存淘汰算策略哪些" data-pjax-state="anchor">缓存淘汰算策略哪些</a></p></li><li class="lvl-2"><p><a target="#5）主从、哨兵、集群的优缺点" data-pjax-state="anchor">主从、哨兵、集群的优缺点</a></p></li><li class="lvl-2"><p><a target="#6）简述主从同步机制" data-pjax-state="anchor">简述主从同步机制</a></p></li><li class="lvl-2"><p><a target="#7）缓存雪崩、缓存击穿、缓存穿透是什么，怎么避免" data-pjax-state="anchor">缓存雪崩、缓存击穿、缓存穿透是什么，怎么避免</a></p></li></ul></div><h2 id="二、面试题">二、面试题</h2><h3 id="1）持久化策略">1）持久化策略</h3><p>关于<code>redis</code>持久化的策略，分为两种一种是<code>RDB</code>、<code>AOF</code>，当然可以结合使用</p><p>在以前就讲述过</p><p><a href="https://www.banmoon.top/archive/8c746a2c/">Redis的持久化策略RDB和AOF | 半月无霜 (banmoon.top)</a></p><h3 id="2）redis是单线程还是多线程的">2）redis是单线程还是多线程的</h3><p>在<code>redis6.0</code>以前，单线程是指<code>网络IO</code>和键值对读写是由一个线程来完成。</p><p>在<code>redis6.0</code>以后，引入了多线程是为了处理<code>网络IO</code>，而键值对的读写还是单线程来进行执行的。</p><p>也就是说<code>redis</code>的缓存读写一定是单线程，<code>网络请求IO</code>可能是单线程的。除此以外，像其他的<b>第一节说的持久化，以及主从数据同步等</b>，是由其他额外的线程来完成的。</p><h3 id="3）redis的过期删除策略">3）redis的过期删除策略</h3><p>在使用中，我们可以设置<code>redis</code>缓存的过期时间。</p><p>而<code>redis</code>的过期删除策略就是指，当缓存过期后，<code>redis</code>应当如何处理。</p><p>一般来说，清除过期的缓存有三种</p><ul class="lvl-0"><li class="lvl-2"><p><b>惰性过期</b>：只有当访问一个<code>key</code>的时候，会判断这个<code>key</code>有没有过期，如果过期了，则进行清除。</p><ul class="lvl-2"><li class="lvl-4">这种策略可以最大的节省<code>CPU</code>的资源，对内存不太友好。极端情况下可能出现一大堆过期的<code>key</code>一直存在于内存中，正是因为没有再次访问这些<code>key</code>，导致他们没有清除</li></ul></li><li class="lvl-2"><p><b>定期过期</b>：每隔一段时间，<code>redis</code>会扫描数据库的<code>expires</code>字典中<b>一定数量的<code>key</code></b>，并清除其中已过期的<code>key</code>。</p><ul class="lvl-2"><li class="lvl-4">注意是一定数量的<code>key</code>，是可以使<code>CPU</code>和<code>memory</code>达到最优平衡的效果</li></ul></li><li class="lvl-2"><p><b>定时过期（redis不用）</b>：这种就是对每一个<code>key</code>来启动一个定时器，到时间了就进行清除。</p><ul class="lvl-2"><li class="lvl-4">由于<code>redis</code>中存在大量的<code>key</code>，这种方案肯定是不能用的，随时导致<code>CPU</code>到达<code>100%</code></li></ul></li></ul><p>综上所述，<code>redis</code>的最佳使用策略有两种，就是<b>惰性过期</b>和<b>定期过期</b>。并且在<code>redis</code>中，这两种过期策略同时在使用。</p><h3 id="4）缓存淘汰算策略哪些">4）缓存淘汰算策略哪些</h3><p>在上面一节讲述了，<code>redis</code>的过期删除策略，那么这一节则是<code>redis</code>的淘汰策略，这两种是不一样的。</p><ul class="lvl-0"><li class="lvl-2"><p><b>过期删除策略</b>：指的是缓存<code>key</code>过期后，<code>redis</code>对其删除的策略。</p></li><li class="lvl-2"><p><b>缓存淘汰策略</b>：指的是<code>redis</code>缓存使用的内存超过了<code>maxmemory</code>的设置，触发的一种策略。它会清除缓存，使其使用的内存小于设定的<code>maxmemory</code>。</p></li></ul><p>那么<b>缓存淘汰策略</b>一共有下面八种==（在<code>redis4.0</code>前一共有六种，在之后又添加了两种，现在版本一共八种）==</p><ul class="lvl-0"><li class="lvl-2"><p>不处理：</p><ol><li class="lvl-5"><b>noeviction</b>：不会剔除任何数据，拒绝所有写入操作，返回<code>(error)OOM command not allowed when used memory</code>。此时<code>redis</code>只响应读操作</li></ol></li><li class="lvl-2"><p>在淘汰时，仅针对设置过期时间的缓存做处理<br />2. <b>volatile-ttl</b>：根据过期时间的大小进行排序，越快过期的越先被删除（就算缓存还没有过期）<br />3. <b>volatile-random</b>：随机进行删除<br />4. <b>volatile-lru</b>：根据<code>LRU</code>算法进行筛选缓存进行删除<br />5. <b>volatile-lfu</b>：根据<code>LFU</code>算法进行筛选缓存进行删除</p></li><li class="lvl-2"><p>在淘汰时，针对所有的缓存<br />6. <b>allkey-random</b>：随机进行删除<br />7. <b>allkkey-lru</b>：根据<code>LRU</code>算法进行筛选缓存进行删除<br />8. <b>allkey-lfu</b>：根据<code>LFU</code>算法进行筛选缓存进行删除</p></li></ul><blockquote><p>从上面来看，有两个算法<code>LRU</code>和<code>LFU</code>，分别是什么</p><ul class="lvl-1"><li class="lvl-2"><b>LRU（Least Recently Used，最小的最近使用）</b>：根据访问时间做排序，淘汰掉访问时间越远的缓存</li><li class="lvl-2"><b>LFU（least Frequently Used，最小的频率使用）</b>：根据访问次数做排序，淘汰掉访问次数最小的缓存</li></ul></blockquote><h3 id="5）主从、哨兵、集群的优缺点">5）主从、哨兵、集群的优缺点</h3><h4 id="5-1）主从">5.1）主从</h4><p>主从模式是<code>redis</code>最基本的集群模式，它实现了数据的复制和读写分离。在主从模式中，有一个主服务器<code>master</code>和多个从服务器<code>slave</code>。主服务器负责处理写操作，并将数据变化同步给从服务器。从服务器一般只负责处理读操作，并接收主服务器的数据更新。一个主服务器可以有多个从服务器，但一个从服务器只能有一个主服务器。</p><ul class="lvl-0"><li class="lvl-2"><p>优点：</p><ol><li class="lvl-5">提提高了数据的可靠性，即使主服务器出现故障，也可以通过从服务器恢复数据</li><li class="lvl-5">分担了主服务器的压力，提高了数据的吞吐量和响应速度</li></ol></li><li class="lvl-2"><p>缺点：</p><ol><li class="lvl-5"><b>不具备自动容错和恢复的功能</b>，当主节点宕机，需要手动切换从节点进行顶替</li><li class="lvl-5"><b>可能出现数据不一致的情况</b>，写操作都在<code>master</code>，读操作在<code>slave</code>节点。由于同步需要时间，就会造成读取数据不一致的情况。</li><li class="lvl-5"><b><code>master</code>节点的压力会很大</b>，由于写操作全部在<code>master</code>，一旦写入请求过多，会导致<code>master</code>节点压力增大，从而导致宕机</li><li class="lvl-5"><b>不支持在线扩容</b>，在集群容量达到上限时，需要停止服务才能增加或减少节点</li></ol></li></ul><p>如下图</p><p><img src="https://banmoon-blog.oss-cn-guangzhou.aliyuncs.com/images/20230903230909.png" alt="image-20230826104646812" /></p><h4 id="5-2）哨兵">5.2）哨兵</h4><p>哨兵模式是在主从模式的基础上增加了哨兵<code>sentinel</code>进程来实现高可用性。哨兵是一个独立的进程，它可以监控多个<code>redis</code>服务器的运行状态，包括主服务器和从服务器。哨兵模式的作用有</p><ol><li class="lvl-3"><p>通过发送命令，让<code>redis</code>服务器返回监控其运行状态，包括主服务器和从服务器</p></li><li class="lvl-3"><p>当哨兵监测到主服务器宕机，会自动将从服务器切换为主服务器，并通过发布订阅模式通知其他从服务器和客户端，完成故障转移</p></li><li class="lvl-3"><p>为了避免单点故障，可以使用多个哨兵进行监控。各个哨兵之间也会相互监控，形成一个哨兵集群</p></li></ol><ul class="lvl-0"><li class="lvl-2"><p>优点</p><ol><li class="lvl-5">实现了高可用，当主节点出现宕机的情况，可以通知进行主从切换，无需人工干预</li><li class="lvl-5">支持了动态配置，当主从变化，哨兵会实现自动更新配置信息，并通知其他节点</li><li class="lvl-5">提供了事件通知机制，当监控的<code>redis</code>实例发生故障或恢复时，哨兵会执行指定的脚本或发送邮件等方式通知相关人员</li></ol></li><li class="lvl-2"><p>缺点</p><ol><li class="lvl-5"><b>缓存丢失</b>，同步需要时间，<code>slave</code>节点还没来得及同步缓存数据，<code>master</code>就宕机了。此时<code>sentinel</code>选举一个<code>slave</code>节点变成<code>master</code>，原先的<code>master</code>恢复后变成<code>slave</code>，会去新<code>master</code>同步数据，导致最近的一批缓存数据丢失</li><li class="lvl-5"><b>缓存不一致</b>，和主从结构一样，同步需要时间，可能会出现缓存不一致的情况</li><li class="lvl-5"><b><code>master</code>节点的压力会很大</b>，和主从结构一样，哨兵并没有解决<code>master</code>节点请求集中的问题，还是可能会造成<code>master</code>节点压力过大，导致宕机的问题</li></ol></li></ul><p>如下图</p><p><img src="https://banmoon-blog.oss-cn-guangzhou.aliyuncs.com/images/20230903230917.png" alt="image-20230826111352361" /></p><h4 id="5-3）集群">5.3）集群</h4><p>集群模式是Redis最高级的集群模式，它实现了数据的分片和负载均衡。在集群模式中，没有明确的主从关系，而是由多个相互协作的节点组成一个集群。每个节点都负责一部分数据，并且可以处理读写操作。当某个节点出现故障时，集群会自动进行数据迁移和故障转移。</p><p>引入和<code>hash slot</code>哈希槽，一共<code>16384</code>个，每一个写入的缓存<code>key</code>都会计算其<code>hash</code>值，从而决定写入到哪个集群节点</p><ul class="lvl-0"><li class="lvl-2"><p>优点</p><ol><li class="lvl-5">实现了分片存储，突破了<code>redis</code>单节点的限制，提高了系统扩展性</li><li class="lvl-5">实现了负载均衡，写请求压力不再是单节点，提高了系统的性能和吞吐量</li><li class="lvl-5">实现了高可用，当某个节点出现故障时，集群会自动进行数据迁移和故障转移，无需人工干预</li></ol></li><li class="lvl-2"><p>缺点</p><ol><li class="lvl-5">不支持多键操作，多键可能落在不同的集群节点上，故不支持操作</li><li class="lvl-5">不支持事务操作，因为要保证连接要在同一个节点上，而集群会导致连接到不同的节点，从而导致事务失效</li><li class="lvl-5">不支持数据库的切换操作，集群模式只能使用数据库<code>0</code></li></ol></li></ul><p><img src="https://banmoon-blog.oss-cn-guangzhou.aliyuncs.com/images/20230903230923.png" alt="image-20230826114519095" /></p><h3 id="6）简述主从同步机制">6）简述主从同步机制</h3><p>在<code>redis</code>中，主从同步主要经过了以下几个流程</p><p><img src="https://banmoon-blog.oss-cn-guangzhou.aliyuncs.com/images/20230823204705.png" alt="123" /></p><p>上面提到增量复制和全量复制，大家应该都知道是什么意思</p><ol><li class="lvl-3"><p><b>全量复制</b>：</p><ol><li class="lvl-6"><code>master</code>节点会通过<code> bgsave</code>命令启动子线程进行<code>RDB</code>的持久化</li><li class="lvl-6"><code>master</code>节点通过<code>网络IO</code>将文件发送给<code>slave</code>节点，这会对消耗网络带宽</li><li class="lvl-6"><code>slave</code>节点会清空原本的旧数据，将<code>RDB</code>快照文件进行载入。<b>注意了，在载入的过程中，整个<code>slave</code>节点是阻塞的，无法响应客户端的命令</b></li></ol></li><li class="lvl-3"><p><b>增量复制</b>：</p><ol><li class="lvl-6"><code>offset</code>：执行同步的两方节点，分别会维护一个复制偏移量<code>offset</code></li><li class="lvl-6"><code>runid</code>：每个<code>redis</code>实例节点，都有其运行<code>ID</code>。这个<code>ID</code>由节点在启动运行时自动生成。<code>master</code>节点会将自己的<code>runid</code>发送给<code>salve</code>节点，<code>salve</code>节点会将<code>master</code>节点的<code>runid</code>保存起来。当<code>master</code>节点发生变更后，<code>salve</code>节点请求复制时，会携带这个<code>runid</code>，新的<code>master</code>节点会进行判断。<ol><li class="lvl-9">如果<code>salve</code>发送过来的<code>runid</code>与自己的不同，那么只能进行全量复制</li><li class="lvl-9">如果<code>salve</code>发送过来的<code>runid</code>与自己的相同，那么就尝试进行增量复制**（进入第三点再进行判断，最终决定是否增量复制）**</li></ol></li><li class="lvl-6">复制积压缓冲区：在<code>master</code>节点中，维护了一个长度固定、先进先出的队列，作为复制积压缓冲区。<b>当主从节点<code>offset</code>的差距过大，超出了缓冲区大小时，那么<code>slave</code>节点将无法进行增量复制，只能进行全量复制</b></li></ol></li></ol><h3 id="7）缓存雪崩、缓存击穿、缓存穿透是什么，怎么避免">7）缓存雪崩、缓存击穿、缓存穿透是什么，怎么避免</h3><h4 id="7-1）缓存雪崩">7.1）缓存雪崩</h4><p>当雪崩来临，没有一片雪花是无辜的。当然缓存雪崩也一样，没有一个缓存<code>key</code>是无辜的。</p><p>它指的是，<b>大面积的缓存<code>key</code>同时过期，导致请求直接略过的缓存，打击到数据库上</b>。故此称为缓存雪崩。</p><p>针对上面的现象，我们可以这样进行解决</p><p><b>对于缓存<code>key</code>的过期时间，我们不要设置成固定统一的，而是在其基础上添加一定的随机值，从而避免大面积过期。</b></p><h4 id="7-2）缓存击穿">7.2）缓存击穿</h4><p><b>缓存击穿，指的是当一个缓存<code>key</code>存在时，它能抗住大量的请求。一旦缓存<code>key</code>过期，大量的请求直接击穿到数据库，导致数据库压力瞬间增加。</b></p><p>从上面来看，缓存<code>key</code>过期才会导致，大量的请求击穿到数据库。一般业务上来讲，这些数据都是高热点的数据，因为业务正常，且请求非常高。</p><p>针对上面的现象，我们可以这样进行解决</p><ul class="lvl-0"><li class="lvl-2"><p>热点缓存永不过期，后台一个线程自动更新缓存</p></li><li class="lvl-2"><p>添加互斥锁，对读写缓存的代码进行加锁，那么最多也只有一个请求能到数据库</p></li></ul><h4 id="7-3）缓存穿透">7.3）缓存穿透</h4><p><b>当访问一个不存在的缓存<code>key</code>时，<code>redis</code>根本拦不住，缓存都没有，所以这些请求都会到数据库。一旦这些请求是恶意大量的，就会使得数据库的压力增加。</b></p><p>比如说我想获取<code>ID=-1000</code>的用户信息，<code>1s</code>中请求了<code>3k</code>次，由于缓存没有拦下请求，就相当于进行了<code>3k</code>次的数据库查询。</p><p>针对上面的现象，我们可以这样进行解决</p><ul class="lvl-0"><li class="lvl-2"><p>对入参进行校验，对于不合理的入参直接进行过滤</p></li><li class="lvl-2"><p>如果数据库中查询出不存在的值，我们可以再缓存中设置为<code>null</code>，当然过期时间可以给短一下，避免恶意请求</p></li><li class="lvl-2"><p>采用布隆过滤器</p><ul class="lvl-2"><li class="lvl-4">当一个<code>ID</code>在过滤器中不存在，那么它一定不存在。直接过滤掉即可</li><li class="lvl-4">当一个<code>ID</code>在过滤器中存在，那么它可能存在，可能不存在。那么再去读取缓存，读取数据库即可。</li></ul></li><li class="lvl-2"><p>添加互斥锁，对读写缓存的代码进行加锁，那么最多也只有一个请求能到数据库</p></li></ul><h2 id="三、最后">三、最后</h2><p>如果有什么<code>redis</code>相关的面试题，我都会在此文章中更新。</p><p>我是半月，你我一同共勉！！！</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于JVM中的几大面试题</title>
      <link href="/archive/36bc8a47/"/>
      <url>/archive/36bc8a47/</url>
      
        <content type="html"><![CDATA[<h1>关于JVM中的几大面试题</h1><h2 id="一、介绍">一、介绍</h2><p>本文介绍<code>JVM</code>中的几个面试题，十分有用</p><p>主要有几题</p><div id="banmoon-toc"><ul class="lvl-0"><li class="lvl-2"><p><a target="#1%EF%BC%89Java%E7%B1%BB%E7%9A%84%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B" data-pjax-state="anchor">Java类的加载过程</a></p></li><li class="lvl-2"><p><a target="#2%EF%BC%89%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E6%9C%BA%E5%88%B6%E6%98%AF%E4%BB%80%E4%B9%88" data-pjax-state="anchor">双亲委派机制是什么</a></p></li><li class="lvl-2"><p><a target="#3%EF%BC%89JVM%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B" data-pjax-state="anchor">jvm内存模型</a></p></li></ul></div><h2 id="二、答疑">二、答疑</h2><h3 id="1）Java类的加载过程">1）Java类的加载过程</h3><p><img src="https://banmoon-blog.oss-cn-guangzhou.aliyuncs.com/images/20230830182105.png" alt="image-20230830182103851" /></p><p>简单来说，可以这样理解分类</p><ol><li class="lvl-3"><p>类的加载</p><ol><li class="lvl-6">获取二进制文件，将<code>.class</code>文件加载至<code>JVM</code>中</li></ol></li><li class="lvl-3"><p>类的连接，<b>验证，准备，解析</b>合称连接</p><ol><li class="lvl-6">分配空间</li><li class="lvl-6">静态属性赋值（赋初始值，而不是我们给予的值，如<code>int</code>是0，包装类为<code>null</code>）</li></ol></li><li class="lvl-3"><p>类的初始化，<mark>（是初始化，不是实例化）</mark></p><ol><li class="lvl-6">静态属性赋值，这时候就是赋我们给予的值了</li></ol></li></ol><hr /><blockquote><p>什么是符号引用，什么又是直接引用</p><p>可以这样进行理解，我们有一个<code>A</code>类和<code>B</code>类，<code>A</code>类中使用到了<code>B</code>类</p><p>在字节码中，会用一个符号代表这是<code>B</code>类，这就是符号引用</p><p>而在<code>B</code>类进行类加载后，<code>JVM</code>成功的加载了这个<code>B</code>类，使得堆内存中有对应的<code>B.class</code>的对象，同时方法区中有静态方法与属性。</p><p>这个时候，<code>A</code>类就会将之前的符号引用，改为直接引用，设置为上面堆内存的<code>B.class</code>对象，或者方法区中的静态方法与属性</p></blockquote><blockquote><p>类加载的时机</p><ol><li class="lvl-3">实例化类对象</li><li class="lvl-3">调用类的静态方法</li><li class="lvl-3">使用类的静态属性</li></ol></blockquote><h3 id="2）双亲委派机制是什么">2）双亲委派机制是什么</h3><p>在了解双亲委派机制之前，我们先设想一个问题，就是如果我们用户自己写一个<code>String</code>这样一个的类，会出现什么样的情况？</p><p>这个问题说简单也简单，说复杂就比较复杂了，这个问题正好是由双亲委派机制来进行解决的。</p><hr /><p>在了解双亲委派机制之前，我们先得了解几个<code>ClassLoader</code>类加载器</p><table><thead><tr><th>类加载器</th><th>说明</th><th>加载类的范围</th></tr></thead><tbody><tr><td><b>Bootstrap ClassLoader</b></td><td>启动类加载器，最顶层的类加载器，这个加载器，<code>Java</code>中不能获取，返回的是一个<code>null</code></td><td><code>&lt;JAVA HOME&gt;/lib</code></td></tr><tr><td><b>Extension ClassLoader</b></td><td>扩展类加载器</td><td><code>&lt;JAVA HOME&gt;/lib/ext</code></td></tr><tr><td><b>Application ClassLoader</b></td><td>应用程序类加载器，也是我们最常用的类加载器</td><td><code>classpath/java.class.path</code></td></tr><tr><td><b>User ClassLoader</b></td><td>用户自定义的类加载器</td><td>任意来源的类</td></tr></tbody></table><p>好的，当了解完上面的四种类加载器之后，我们将进行验证，看下面代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.parentsappoint;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ParentsAppointTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(java.lang.String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;java.lang.String：&quot;</span> + <span class="string">&quot;abc&quot;</span>.getClass().getClassLoader());</span><br><span class="line">        System.out.println(<span class="string">&quot;com.banmoon.parentsappoint.String：&quot;</span> + String.class.getClassLoader());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://banmoon-blog.oss-cn-guangzhou.aliyuncs.com/images/20230830181317.png" alt="image-20230812165237418" /></p><p>为什么，他们的类加载器是不同的呢。有人说了，是因为类加载器本身就是有不同的加载类职责范围。</p><p>那么当我们进行类加载的时候，程序怎么知道这个类要用什么类加载器。然而就是这段<mark>不同的类，确定使用不同类加载器的过程</mark>，就是我们将的双亲委派机制。</p><p>我们先看这段代码，正是双亲委派机制的代码，在<code>ClassLoader.java</code>中可以找到这段代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; loadClass(String name, <span class="type">boolean</span> resolve)</span><br><span class="line">    <span class="keyword">throws</span> ClassNotFoundException</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (getClassLoadingLock(name)) &#123;</span><br><span class="line">        <span class="comment">// 首先，先检查类是否已经被加载</span></span><br><span class="line">        Class&lt;?&gt; c = findLoadedClass(name);</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">t0</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// parent是父亲加载器，这里仅仅是逻辑层面上的，并不是指继承方面的父类</span></span><br><span class="line">                <span class="keyword">if</span> (parent != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// 如果父亲加载器不为空，则先交给父亲加载器进行类加载</span></span><br><span class="line">                    c = parent.loadClass(name, <span class="literal">false</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 如果父亲加载器为空，那说明接下来是Bootstrap ClassLoader了，直接交给特殊的方法进行加载</span></span><br><span class="line">                    c = findBootstrapClassOrNull(name);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                <span class="comment">// ClassNotFoundException thrown if class not found</span></span><br><span class="line">                <span class="comment">// from the non-null parent class loader</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (c == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// If still not found, then invoke findClass in order</span></span><br><span class="line">                <span class="comment">// to find the class.</span></span><br><span class="line">                <span class="type">long</span> <span class="variable">t1</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line">                <span class="comment">// 如果上面的父亲类加载器没有加载成功，那就自己查找</span></span><br><span class="line">                c = findClass(name);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// this is the defining class loader; record the stats</span></span><br><span class="line">                sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);</span><br><span class="line">                sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);</span><br><span class="line">                sun.misc.PerfCounter.getFindClasses().increment();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (resolve) &#123;</span><br><span class="line">            resolveClass(c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这就是双亲委派机制，下面可以画一个图</p><p><img src="https://banmoon-blog.oss-cn-guangzhou.aliyuncs.com/images/20230830181311.png" alt="image-20230812182014362" /></p><p>可以看到，类加载的时候，永远都是<code>Bootstrap ClassLoader</code>（启动类加载器）尝试去加载</p><p>当然，如果类不合适，将会向下进行委派加载</p><p>上面的这种行为可以这样概括，<mark>向上检查，向下委托加载</mark></p><h3 id="3）JVM内存模型">3）JVM内存模型</h3><p>下面这个就是JVM的内存模型，有些细节没有完全画出来，后续会补上</p><p><img src="https://banmoon-blog.oss-cn-guangzhou.aliyuncs.com/images/20230830181306.png" alt="image-20230813094052500" /></p><p>需要讲一下，其中的这些是什么意思</p><ul class="lvl-0"><li class="lvl-2"><p><b>堆内存</b>：这个先简单概括一下，基本对象的创建都会存储在该内存区域</p></li><li class="lvl-2"><p><b>方法区</b>：方法区是一个概念，然而不同的虚拟机会有不同的实现。在这里，我们只需要关注<mark>方法区究竟是干什么的即可</mark>。在方法区中，主要存储以下三个内容，</p><ul class="lvl-2"><li class="lvl-4"><b>类签名</b>：记录权限名，访问权限，版本号</li><li class="lvl-4"><b>属性</b>：记录类属性，访问权限</li><li class="lvl-4"><b>方法</b>：方法字节码记录</li></ul></li><li class="lvl-2"><p><b>常量池</b>：在上面讲到过<b>符号引用改为直接引用</b>，那些这一块常量池就是存储这一块东西的。可以理解为，他是由字节码中一个指针指向另一个字节码。比如说定义了一个<code>String</code>的属性，那么在类加载的连接阶段，常量池中会存储这么一个指针常量。</p></li><li class="lvl-2"><p><b>运行时常量池</b>：这是再上面模型图中没有体现的，需要单独讲解。它里面主要存储两个内容。可以看到的是，运行时常量池是包括了常量池的。所以这一块知识点，不需要额外去记忆。</p><ul class="lvl-2"><li class="lvl-4"><b>运行时产生的</b>：如字符串，如上面的<b>符号引用改为直接引用</b></li><li class="lvl-4"><b>编译期间产生的</b>：主要是字节码中定义的静态信息，各个类的<code>Class</code>对象。还有就是开发者编写的静态变量。</li></ul></li><li class="lvl-2"><p><b>堆</b>：对象主要存储在堆内存中，这里也是垃圾回收<code>GC</code>的主战场。下面篇幅会提到</p></li><li class="lvl-2"><p><b>程序计数器</b>：用来存储字节码的指令地址，提供给执行引擎去读取执行。简单的来说就是执行到哪一步了</p></li><li class="lvl-2"><p><b>虚拟机栈</b>：换个名字叫<code>Java</code>方法栈，这样好理解一下。<code>Java</code>在调用方法时，会将字节码方法入栈，这个东西叫做栈帧。栈这种数据结构，就是先入后出。类似的，一个<code>A</code>方法压入栈，这个方法调用一个<code>B</code>方法，就会将<code>B</code>方法压入栈。结构展示<code>A</code>在最底下，<code>B</code>在上。在结束的时候，是<code>B</code>方法栈帧先结束，然后才是<code>A</code>方法的栈帧。符合先入后出原则。在栈帧结构内部，我们可以如下进行划分，分别是</p><ul class="lvl-2"><li class="lvl-4"><b>局部变量表</b>：<ol><li class="lvl-7">主要存储方法的参数、定义在方法内的局部变量，包括八大基本数据类型，对象的引用地址，返回值地址。</li><li class="lvl-7">局部变量表中存储的基本单元为变量槽(Sot)，32位(4字节)以内的数据类型占一个slot，64位(long，double)的占两个slot。</li><li class="lvl-7">局部变量表是一个数字数组，byte、short、char都会被转化为int，boolean类型也会被转化为int，0代表alse、非0代表true。</li><li class="lvl-7">局部变量表的大小是在编译期间决定下来的，所以在运行时它的大小是不会变的。</li><li class="lvl-7">局部变量表中含有直接或者间接指向的引用类型变量时，不会被垃圾回收处理。</li></ol></li><li class="lvl-4"><b>操作数栈</b>：除了上面的局部变量表，还有一个操作数栈。这个操作数栈是在方法执行的过程中，根据字节码的指令，将上面的变量入栈，再执行指令。如执行复制、交换、求和等操作</li><li class="lvl-4"><b>动态链接</b>：每个栈帧都包含一个指向运行时常量池中该栈帧所属方法的引用，持有这个引用是为了支持方法调用过程中的动态链接。</li><li class="lvl-4"><b>方法出口</b>：存放调用该方法的计数器的值；有两种情况，一种是方法正常返回，另一种是方法出先异常的返回。存储在一个异常处理表，方便再发生异常的时候找到处理异常的代码。</li></ul></li><li class="lvl-2"><p><b>本地方法栈</b>：由于<code>Java</code>是由<code>C++语言</code>编写的，里面肯定会调用到<code>C++</code>，故本地方法栈就是存储的是调用<code>C++</code>方法时的变量存储。</p></li></ul><h2 id="三、最后">三、最后</h2><p>我是半月，你我一同共勉！！！</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> jdk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义枚举Validated校验注解</title>
      <link href="/archive/604b199/"/>
      <url>/archive/604b199/</url>
      
        <content type="html"><![CDATA[<h1>自定义枚举Validated校验注解</h1><h2 id="一、介绍">一、介绍</h2><p>在以前的文章中，有解释使用过<code>@Valid</code>注解的使用</p><p><a href="https://www.banmoon.top/archive/2b62f472/">Valid注解使用及扩展 | 半月无霜 (banmoon.top)</a></p><p><a href="https://www.banmoon.top/archive/a4ead5b7/">Validated分组校验及扩展 | 半月无霜 (banmoon.top)</a></p><p>本篇分享一个自定义校验注解，可以配合枚举使用，对入参的有效值进行校验。</p><p>比如说一些状态值，入参必须要符合定义的状态值</p><h2 id="二、代码">二、代码</h2><p>注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.validator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.business.enums.MyEnum;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.validation.Constraint;</span><br><span class="line"><span class="keyword">import</span> javax.validation.Payload;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Constraint(validatedBy = &#123;EnumValidValidator.class&#125;)</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD, ElementType.FIELD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnumValid &#123;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">message</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;不符合的枚举类型&quot;</span>;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt;[] groups() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    Class&lt;? <span class="keyword">extends</span> <span class="title class_">Payload</span>&gt;[] payload() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    Class&lt;? <span class="keyword">extends</span> <span class="title class_">MyEnum</span>&lt;?&gt;&gt; enumClass();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分隔符，作用于&#123;<span class="doctag">@link</span> java.lang.String&#125;上</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String <span class="title function_">separator</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;,&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>校验器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.validator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.collection.CollUtil;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.StrUtil;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.business.enums.MyEnum;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.utils.StreamUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.validation.ConstraintValidator;</span><br><span class="line"><span class="keyword">import</span> javax.validation.ConstraintValidatorContext;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Function;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EnumValidValidator</span> <span class="keyword">implements</span> <span class="title class_">ConstraintValidator</span>&lt;EnumValid, Object&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;?&gt; list;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String separator;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initialize</span><span class="params">(EnumValid constraintAnnotation)</span> &#123;</span><br><span class="line">        Class&lt;? <span class="keyword">extends</span> <span class="title class_">MyEnum</span>&lt;?&gt;&gt; enumClass = constraintAnnotation.enumClass();</span><br><span class="line">        MyEnum&lt;?&gt;[] enums = enumClass.getEnumConstants();</span><br><span class="line">        list = Arrays.stream(enums).map(MyEnum::getCode).collect(Collectors.toList());</span><br><span class="line">        separator = constraintAnnotation.separator();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(Object o, ConstraintValidatorContext constraintValidatorContext)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (Objects.isNull(o)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (o <span class="keyword">instanceof</span> Collection) &#123;</span><br><span class="line">            Collection&lt;?&gt; paramList = (Collection&lt;?&gt;) o;</span><br><span class="line">            <span class="keyword">return</span> list.containsAll(paramList);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (o <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">            List&lt;String&gt; paramList = StrUtil.split(((String) o), separator);</span><br><span class="line">            List&lt;?&gt; resultList = StreamUtil.difference(paramList, list, Objects::equals, Function.identity());</span><br><span class="line">            <span class="keyword">return</span> CollUtil.isEmpty(resultList);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> list.contains(o);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、使用">三、使用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.business.dto.ResultData;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.request.valid.MyEnumValidRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.annotation.Validated;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.validation.Valid;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Valid 校验</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> banmoon</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/valid&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ValidController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/myEnumValid&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResultData&lt;Void&gt; <span class="title function_">myEnumValid</span><span class="params">(<span class="meta">@Valid</span> <span class="meta">@RequestBody</span> MyEnumValidRequest request)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ResultData.success();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.request.valid;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.business.enums.MyEnum;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.validator.EnumValid;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModel;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModelProperty;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ApiModel(&quot;验证自定义校验注解-入参&quot;)</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyEnumValidRequest</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@EnumValid(enumClass = ValidEnum.class)</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;校验字符串&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String strParam;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@EnumValid(enumClass = ValidEnum.class, separator = &quot;,&quot;)</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;校验字符串List&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String strListParam;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@EnumValid(enumClass = ValidEnum.class)</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;校验List&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; listParam;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@EnumValid(enumClass = ValidEnum.class)</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;校验Set&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; setParam;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="meta">@AllArgsConstructor</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">ValidEnum</span> <span class="keyword">implements</span> <span class="title class_">MyEnum</span>&lt;String&gt; &#123;</span><br><span class="line"></span><br><span class="line">        NORMAL(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;未开始&quot;</span>),</span><br><span class="line">        WAIT(<span class="string">&quot;2&quot;</span>, <span class="string">&quot;等待运行&quot;</span>),</span><br><span class="line">        RUNNING(<span class="string">&quot;3&quot;</span>, <span class="string">&quot;正在运行&quot;</span>),</span><br><span class="line">        FINISH(<span class="string">&quot;4&quot;</span>, <span class="string">&quot;运行完成&quot;</span>),</span><br><span class="line">        ;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> String code;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> String msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请求接口</p><p><img src="https://banmoon-blog.oss-cn-guangzhou.aliyuncs.com/images/20230830142144.png" alt="image-20230830142142525" /></p><h2 id="四、最后">四、最后</h2><p>我是半月，你我一同共勉！！！</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> demo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kafka的架构及常见面试题</title>
      <link href="/archive/546690f2/"/>
      <url>/archive/546690f2/</url>
      
        <content type="html"><![CDATA[<h1>kafka的架构及常见面试题</h1><h2 id="一、介绍">一、介绍</h2><p>Kafka是一种高吞吐量、持久性、分布式的发布订阅的消息队列系统。它最初由LinkedIn(领英)公司发布，使用Scala语言编写，与2010年12月份开源，成为Apache的顶级子项目 。</p><p>Kafka是一个多分区、多副本且基于zookeeper协调的分布式消息系统。也是一个分布式流式处理平台，它以高吞吐、可持久化、可水平扩展、支持流数据处理等多种特性而被广泛使用 。</p><h2 id="二、架构">二、架构</h2><h3 id="1）生产、消费">1）生产、消费</h3><p><img src="https://banmoon-blog.oss-cn-guangzhou.aliyuncs.com/images/20230820153207.png" alt="image-20230819164024482" /></p><p>首先得了解这个，比较简单的一个集群图</p><ul class="lvl-0"><li class="lvl-2"><p><b>生产者（Producer）</b>：生产消息，发送消息的服务</p></li><li class="lvl-2"><p><b>消费者（Comsumer）</b>：消费消息，处理消息的服务</p></li></ul><h3 id="2）每一个kafka实例中有什么">2）每一个kafka实例中有什么</h3><p><img src="https://banmoon-blog.oss-cn-guangzhou.aliyuncs.com/images/20230820153203.png" alt="image-20230819165134280" /></p><p>如上图，只画了其中一个，具体看看里面是什么</p><ul class="lvl-0"><li class="lvl-2"><p><b>broker</b>：一个kafka进程就是一个<code>broker</code>，也就可以这样理解，集群中每一台kafka服务就是<code>broker</code></p></li><li class="lvl-2"><p><b>主题（topic）</b>：在发布订阅的模式下，我们需要对消息进行一个区分，同一个功能的消息，我们发往同一个主题下</p></li><li class="lvl-2"><p><b>分区（Partition）</b>：可以看到每一个<b>主题topic</b>下，有多个分区。消息会推送到这些分区里面，可以增加生产者，消费者的对消息生产处理的吞吐量</p></li></ul><blockquote><p>在没有画出来了另外两个kafka中，我们会推选出领导<code>Leader</code>，以及追随者<code>Follower</code>，这个我们后面再聊</p></blockquote><h3 id="3）简单的消费">3）简单的消费</h3><p><img src="https://banmoon-blog.oss-cn-guangzhou.aliyuncs.com/images/20230820153158.png" alt="image-20230819170659700" /></p><p>如上图，对于消费者如何消费分片中的消息的，其中有下面几点的解释</p><ol><li class="lvl-3"><p>一个<code>Partition</code>只能由一个<code>Consumer</code>来消费，一个<code>Consumer</code>可以消费多个不同的<code>Partition</code>。所以，我们应该保证每个主题的<code>Partition</code>的数量<b>大于</b><code>Consumer</code>的数量</p></li><li class="lvl-3"><p><code>Consumer</code>越多，则吞吐量越高，消费得越快。当然，要结合第一点</p></li><li class="lvl-3"><p><code>Consumer</code>增加或减少时，<code>Partition</code>和<code>Consumer</code>的消费关系会自动调整</p></li></ol><h3 id="4）带group的消费">4）带group的消费</h3><p>在上一节看到了简单的消费，那只不过是同一个<code>group</code>下，接下来引入<code>group</code>这个概念</p><p><img src="https://banmoon-blog.oss-cn-guangzhou.aliyuncs.com/images/20230820153152.png" alt="image-20230819172057856" /></p><p>上面第三节说的都不错，在这里就是要加一个前提条件，一个<code>Partition</code>的消息同一个<code>group</code>中的一个<code>Consumer</code>来消费，</p><p>交给了同组的某个<code>Consumer</code>，就不能交给同组的其他<code>Consumer</code>了</p><p><mark>每一个<code>group</code>都可以完整消费主题中的所有消息</mark></p><h3 id="5）消费partition里面的消息">5）消费<code>partition</code>里面的消息</h3><p><img src="https://banmoon-blog.oss-cn-guangzhou.aliyuncs.com/images/20230820153148.png" alt="image-20230819174659549" /></p><p>如上图，有以下几点特性</p><ul class="lvl-0"><li class="lvl-2"><p>一个Partition内部的消息是有序的，越新的消息<code>offset</code>越大。不同<code>partition</code>的消息根据<code>offset</code>无法比较新l旧</p></li><li class="lvl-2"><p><code>Consumer</code>顺序地消费<code>partition</code>里的每一条消息，可以每读一条就向kafka上报(commit)，当前读到了哪个位置(offset)，也可以间隔性上报</p><ul class="lvl-2"><li class="lvl-4">可以读几条再上报<code>offset</code>，比如说每读5条，上报更新一下<code>offset</code></li><li class="lvl-4">也可以时间间隔的方式上报<code>offset</code>，比如说每隔<code>5s</code>上报更新</li></ul></li><li class="lvl-2"><p><code>Consumer</code>重启时<code>kafka</code>根据该<code>group</code>上一次提交的最大<code>offset</code>来决定从哪个地方开始消费。</p><ul class="lvl-2"><li class="lvl-4"><mark>这里就会出现重复消费的问题，而解决这个重复消费的问题，是面试中的高频问题。</mark></li></ul></li><li class="lvl-2"><p>不同<code>group</code>之间，记录的<code>offset</code>是不同的，这也是上一节每个<code>group</code>独立消费<code>topic</code>的消息的原因</p></li></ul><h3 id="6）生产消息，写入Partition">6）生产消息，写入<code>Partition</code></h3><p><img src="https://banmoon-blog.oss-cn-guangzhou.aliyuncs.com/images/20230820153142.png" alt="image-20230819194314285" /></p><p>关于生产者生产消息至<code>Partition</code>，有三种情况，按照优先级这样排序</p><ol><li class="lvl-3"><p>生产者可以指定<code>Partition</code>进行写入</p></li><li class="lvl-3"><p>通过消息携带的<code>key</code>，再通过<code>hash</code>分发器计算得到结果，来决定去哪个<code>Partition</code></p></li><li class="lvl-3"><p>按照时间片轮动选择<code>Partition</code>。比如说当前<code>5</code>分钟，往<code>Partition 0</code>中写入；下一个<code>5</code>分钟，往<code>Partition 1</code>中写入</p></li></ol><h3 id="7）生产消息，写入Partition应答ack">7）生产消息，写入<code>Partition</code>应答<code>ack</code></h3><p>在上面一节，我们确定了<code>partition</code>存储是哪个，接下来还有一个问题，就是如果是<code>kafka</code>集群架构的话，我们会出现同个<code>Partition</code>，有一个<code>Leader</code>，多个<code>Follower</code>。</p><ol><li class="lvl-3"><p>在上面确定<code>partition</code>后，我们要去寻找它的<code>Leader</code></p></li><li class="lvl-3"><p><code>Leader partition</code>将消息写入本地磁盘</p><ol><li class="lvl-6">当写入完成后，向<code>Producer</code>进行应答响应</li></ol></li><li class="lvl-3"><p><code>Follower partition</code>会将消息从<code>Leader</code>那拉回来，写入自己的本地磁盘</p><ol><li class="lvl-6">当写入完成后，向<code>Leader</code>进行应答响应</li><li class="lvl-6">当<code>leader</code>收到所有的<code>Follower</code>应答后，再向<code>Producer</code>应答</li></ol></li></ol><p>那么在此刻，生产消息的应答<code>ack</code>有三种策略</p><ol><li class="lvl-3"><p>完全不管<code>ack</code>应答</p></li><li class="lvl-3"><p><code>Producer</code>只需要<code>Leader Partition</code>应答即可，不用管<code>Follower Partition</code>是否写入成功</p></li><li class="lvl-3"><p><code>partition</code>需要保证所有的<code>Follower</code>才进行应答</p></li></ol><h3 id="8）Partition备份机制">8）<code>Partition</code>备份机制</h3><p>在<code>kafka</code>集群中，我们有<code>Partition</code>的备份机制，如下</p><p><img src="https://banmoon-blog.oss-cn-guangzhou.aliyuncs.com/images/20230820153133.png" alt="image-20230819195525972" /></p><p>同一个主题下，集群中的每个<code>broker</code>，都会维护自己的<code>Partition</code>。</p><ol><li class="lvl-3"><p>其中，他们会选出<code>Leader</code>、<code>Follower</code>，生产者的数据优先推送给<code>Leader</code></p></li><li class="lvl-3"><p>每一个<code>Partition</code>都有自己的<code>Leader</code></p></li><li class="lvl-3"><p>同一个<code>Topic</code>下的，不同<code>Partition</code>尽量分布在不同的<code>broker</code></p></li></ol><p>当有<code>leader</code>的<code>broker</code>宕机后，<code>kafka</code>集群会重新竞选那台<code>broker</code>上原本是<code>leader</code>的<code>Partition</code>，和下面<code>ISR</code>队列有关。</p><h3 id="9）消息的磁盘存储文件结构">9）消息的磁盘存储文件结构</h3><ul class="lvl-0"><li class="lvl-2"><p><b>分区<code>Partition</code></b>，一个<code>Topic</code>中有多个<code>Partition</code>，可以有效地避免了消息的堆积</p></li><li class="lvl-2"><p><b>分段<code>segment</code></b>，消息在<code>Partition</code>里面，消息是分段来进行存储的，每次操作的消息读写都是针对<code>segmengt</code>一个<code>segment</code>包括一个<code>log</code>文件，两个<code>index</code>文件，三个文件成套出现。前面数字的文件名代表着<code>offset</code>偏移量开始索引位置</p><ul class="lvl-2"><li class="lvl-4"><b>000000101.log</b>：存储具体消息的数据文件</li><li class="lvl-4"><b>000000101.index</b>：存储<code>Consumer</code>的<code>offset</code>便宜量的索引文件</li><li class="lvl-4"><b>000000101.timeindex</b>：存储消息时间戳的索引文件</li></ul></li><li class="lvl-2"><p><b>索引<code>index</code></b>，<code>kafka</code>分段后的数据建立的索引文件</p></li></ul><p>如下图</p><p><img src="https://banmoon-blog.oss-cn-guangzhou.aliyuncs.com/images/20230820153129.png" alt="image-20230820142002237" /></p><p>可以看到上面有两个索引文件，</p><ul class="lvl-0"><li class="lvl-2"><p><code>index</code>文件是记录<code>offset</code>消息和<code>log</code>文件中消息位置的映射关系的文件</p></li><li class="lvl-2"><p><code>timeindex</code>文件时记录时间戳和<code>offset</code>关系的文件</p></li></ul><p>请注意，这边的索引并不会记录每一条消息的索引，而是采取<b>稀疏索引</b>，也就是隔一段消息才会记录消息的索引。</p><blockquote><p>这个消息索引的稠密程度，影响<code>kafka</code>存储读取的速度</p><p>索引越稠密，则读取的速度越快</p><p>索引越稀疏，则文件存储的空间越大</p></blockquote><p>由于上面存储文件都是采用<code>offset</code>偏移量来命名，所以<code>kafka</code>会采取二分查找方法，可以大大提交检索效率。</p><h2 id="三、面试题">三、面试题</h2><h3 id="1）如何避免kafka消息丢失">1）如何避免kafka消息丢失</h3><h4 id="1-1）出现消息丢失的原因">1.1）出现消息丢失的原因</h4><p>从上面架构上来看，<code>kafka</code>丢失消息的原因主要可以分为下面几个场景</p><ol><li class="lvl-3"><p><code>Producer</code>在把消息发送给<code>kafka</code>集群时，中间网络出现问题，导致消息无法到达</p><ol><li class="lvl-6">网络抖动原因</li><li class="lvl-6"><code>Producer</code>消息超出大小限制，<code>broker</code>收到以后没法进行存储</li></ol></li><li class="lvl-3"><p><code>kafka</code>集群接收到消息后，保存消息至本地磁盘出现异常</p><ol><li class="lvl-6">集群接收到数据后会将数据进行持久化存储到磁盘，消息都是先写入到页缓存，然后由操作系统负责具体的刷盘任务或者使用fsync强制刷盘。如果此时Broker宕机，且选举了一个落后<code>leader</code>副本限多的<code>follower</code>副本成为新的<code>leader</code>副本，那么落后的消息数据就会丢失。</li></ol></li><li class="lvl-3"><p><code>Consumer</code>在消费消息时发生异常，导致<code>Consumer</code>端消费失败</p><ol><li class="lvl-6">消费者配置了<code>offset</code>自动提交参数，<code>enable.auto.commit=true</code>。消费者接受到了消息，进行了自动提交。但其实消费者并没有处理完成，就宕机了，此时<code>kafka</code>认为<code>Consumer</code>已经消费了这条消息了，后续便不再分配，造成了消息的丢失</li></ol></li></ol><h4 id="1-2）解决方法——Producer消息发送消息失败">1.2）解决方法——<code>Producer</code>消息发送消息失败</h4><p>关于上面<code>Producer</code>消息发送消息失败的解决方法，总结归纳出五种，可以结合使用</p><ol><li class="lvl-3"><p>生产者调用异步回调消息。伪代码如下：<code>producer.send(msg, callback)</code></p></li><li class="lvl-3"><p>生产者增加消息确认机制，设置生产者参数：<code>acks=all</code>。<code>partition</code>的<code>leader</code>接收到消息，等待所有的<code>follower</code>副本都同步到了消息之后，才认为本次生产者发送消息成功了。</p></li><li class="lvl-3"><p>生产者设置重试次数。比如：<code>retrie&gt;=3</code>,增加重试次数以保证消息的不丢失</p></li><li class="lvl-3"><p>定义本地消息日志表，定时任务扫描这个表自动补偿，做好监控告警。</p></li><li class="lvl-3"><p>后台提供一个补偿消息的工具，可以手工补偿。</p></li></ol><h4 id="1-3）解决方法——broker写入磁盘失败">1.3）解决方法——<code>broker</code>写入磁盘失败</h4><ol><li class="lvl-3"><p>同步刷盘（不太建议）。同步刷盘可以提高消息的可靠性，防止由于机器没有及时写入磁盘的消息丢失。但是会严重影响性能</p></li><li class="lvl-3"><p>利用<code>Partition</code>的多副本机制（建议）。使用下面的这段配置，</p><ol><li class="lvl-6"><code>unclean.leader.election.enable=false</code>：表示不允许非<code>ISR</code>中的副本被选举为<code>leader</code>，以免数据丢失</li><li class="lvl-6"><code>replication.factor&gt;=3</code>：消息分区的副本个数，建议设置大于等于<code>3</code>个</li><li class="lvl-6"><code>min.insync.replicas&gt;1</code>：这个值大于<code>1</code>，要求<code>leader</code>至少能和一个<code>Follower</code>副本保证联系</li></ol></li></ol><h4 id="1-4）解决方法——Consumer消费异常">1.4）解决方法——<code>Consumer</code>消费异常</h4><ol><li class="lvl-3"><p>消费者需要关闭自动提交，采用手动提交<code>offset</code>，<code>enable.auto.commit=false</code>，并在代码中写入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 同步提交</span></span><br><span class="line">consumer.commitSync();</span><br><span class="line"><span class="comment">// 异步提交</span></span><br><span class="line">consumer.commitAsync();</span><br></pre></td></tr></table></figure></li></ol><h3 id="2）如何避免重复消费消息">2）如何避免重复消费消息</h3><p>这实际上是一个消息的幂等性问题</p><blockquote><p>幂等性是指一个操作可以被重复执行，但结果不会改变的特性。在消息队列中，幂等性是指在消息消费过程中，保证消息的唯一性，不会出现重复消费的情况  。</p></blockquote><p>我们有以下几个方案可以解决</p><ol><li class="lvl-3"><p>对于一些业务相关的消息，我们通常有需要处理的消息业务主键。比如说，发送短信的发送流水号，支付业务的订单流水号等。</p><ol><li class="lvl-6">当消费者接受到消息后，使用这个消息主键建立获取分布式锁，同时将消息业务主键写入库。</li><li class="lvl-6">如果第一步成功，消费者进行消费</li><li class="lvl-6">当消费者处理完成后，释放分布式锁</li><li class="lvl-6">如果有一条重复的消息进入，那么在第一步中就会失败，要么是分布式锁，要么是数据库主键冲突</li></ol></li><li class="lvl-3"><p>针对没有业务的消息，可以再生产消息的时候给予一个分布式全局ID，后面的处理方法与第一条类似</p></li><li class="lvl-3"><p>在有状态流转的业务当中，一个消费者只消费一种业务状态，当这个消息的业务状态已经更新、已经处理。那么直接丢弃掉此次消息即可</p></li><li class="lvl-3"><p>乐观锁，消息在生产的时候携带业务上一次查询出的版本号，在消费时携带版本号去更新数据库。如果乐观锁原因导致失败，那么不需要进行后续处理</p></li><li class="lvl-3"><p><code>insert ... on duplicate key update</code>，消费插入数据时，数据已存在则进行更新</p></li></ol><h3 id="3）kafka的零拷贝是什么原理">3）kafka的零拷贝是什么原理</h3><ol><li class="lvl-3"><p>第一次：将磁盘文件，读取到操作系统内核缓冲区；</p></li><li class="lvl-3"><p>第二次：将内核缓冲区的数据，copy 到 application 应用程序的 buffer；</p></li><li class="lvl-3"><p>第三步：将 application 应用程序 buffer 中的数据，copy 到 socket 网络发送缓冲区(属于操作系统内核的缓冲区)；</p></li><li class="lvl-3"><p>第四次：将 socket buffer 的数据，copy 到网卡，由网卡进行网络传输。</p></li></ol><p>如下图</p><p><img src="https://banmoon-blog.oss-cn-guangzhou.aliyuncs.com/images/20230820153118.png" alt="image-20230820130332350" /></p><p>取消掉两次<code>CPU</code>的拷贝，从而减小<code>CPU</code>的消耗。</p><p>零拷贝是操作系统提供的，如<code>Linux</code>上的<code>sendfile</code>命令，是将读到内核空间的数据，转到 <code>socket buffer</code>，进行网络发送</p><p>还有<code>Java NIO</code>中的<code>transferTo()</code>方法</p><h3 id="4）kafka如何在分布式的情况下保证顺序消费">4）kafka如何在分布式的情况下保证顺序消费</h3><p>在<code>kafka</code>的<code>broker</code>中，主题下可以设置多个不同的<code>partition</code>，而<code>kafka</code>只能保证<code>Partition</code>中的消息时有序的，但没法保证不同<code>Partition</code>的消息顺序性。</p><p>比如说，有一个主题<code>Topic A</code>，里面有两个<code>Partition</code>，但消费端只有一个<code>Consumer</code>。根据上面的架构可以知道，这个<code>Consumer</code>会消费两个<code>Partition</code>中的消息，这样就肯定会出现消费乱序的情况。</p><p>那么针对上面这种乱序的情况，我们可以这样进行设置</p><ol><li class="lvl-3"><p>一个主题只建立一个<code>Partition</code>，这样所有的消息也就只会发送到一个<code>Partition</code>中，也就保证了消息的顺序性。</p><ol><li class="lvl-6"><code>Producer</code>也可以指定往一个<code>partition</code>中发送消息。<span>具体可以查看<a target="#6）生产消息，写入Partition" data-pjax-state="anchor">第二章第6节</a></span></li></ol></li><li class="lvl-3"><p>可以保证一个<code>Partition</code>只能被一个<code>Consumer</code>消费，也可以保证消息的有序性消费。但也要避免<code>Rebalance</code>，原本一对一好好的，<code>Consumer</code>宕机或者下线导致<code>Rebalance</code>就会导致消费的乱序。</p></li></ol><h3 id="5）kafka为什么这么快">5）kafka为什么这么快</h3><p>主要原因有下面几个</p><ol><li class="lvl-3"><p>磁盘写入采用了顺序读写，保证了消息的堆积</p><ul class="lvl-2"><li class="lvl-5">顺序读写，磁盘会预读，预读即在读取的起始地址连续读取多个页面，主要时间花费在了传输时间，而这个时间两种读写可以认为是一样的。</li><li class="lvl-5">随机读写，因为数据没有在一起，将预读浪费掉了。需要多次寻道和旋转延迟。而这个时间可能是传输时间的许多倍。</li></ul></li><li class="lvl-3"><p>零拷贝：第3节提到过，避免了两次<code>CPU</code>拷贝，减少了<code>CPU</code>的消耗</p></li><li class="lvl-3"><p>分区、分段、索引，再配合二分查找检索，提高消息的检索效率</p><ul class="lvl-2"><li class="lvl-5"><b>分区<code>Partition</code></b>，有效避免了消息的堆积</li><li class="lvl-5"><b>分段<code>segment</code></b>，消息在<code>Partition</code>里面，消息是分段来进行存储的，每次操作的消息读写都是针对<code>segmengt</code></li><li class="lvl-5"><b>索引<code>index</code></b>，<code>kafka</code>分段后的数据建立的索引文件，就是第二章第9节的文件存储结构</li></ul></li><li class="lvl-3"><p>批量压缩读写</p><ul class="lvl-2"><li class="lvl-6">多条数据一起压缩，存储，读取</li><li class="lvl-6"><code>kafka</code>是直接操作的<code>page cache</code>，而不是堆内对象，读写速度更高。且进程重启后，缓存也不会丢失</li></ul></li></ol><h3 id="6）什么是ISR，它有什么用">6）什么是<code>ISR</code>，它有什么用</h3><p>在<code>kafka</code>中，除了有<code>ISR</code>，还有<code>OSR</code>，<code>AR</code>，功能如下</p><ul class="lvl-0"><li class="lvl-2"><p><b>ISR（InSyncRepli）</b>：在<code>kafka</code>中，当一个<code>broker</code>宕机挂掉的时候，原本在其<code>broker</code>的<code>Leader Partition</code>会重新进行竞选。这个竞选基本从<code>ISR</code>队列中选举。那么现在可以这样说，<code>ISR</code>是一个维护了<code>Follower Partition</code>的队列，其中的<code>Partition</code>都与<code>Leader Partition</code>消息保持一致。</p></li><li class="lvl-2"><p><b>OSR（OutSyncRepli）</b>：没在<code>ISR</code>队列中的其他<code>Follower Partition</code>组成的队列</p></li><li class="lvl-2"><p><b>AR（AllRepli）</b>：全部分区的<code>Follower Partition</code>，也就是<code>ISR</code>和<code>OSR</code>的<code>Partition</code>总和</p></li></ul><h3 id="7）kafka中的Rebalance是什么，什么时候会触发">7）kafka中的Rebalance是什么，什么时候会触发</h3><p><code>Rebalance</code>是指<code>Partition</code>与<code>Consumer</code>之间的关系需要重新调整分配，这个重新调整分配的动作称为<code>Rebalance</code>。</p><p>那么当出现下面几种情况的时候，会触发<code>Rebalance</code></p><ol><li class="lvl-3"><p>当一个<code>Group</code>中的<code>Consumer</code>新增后</p></li><li class="lvl-3"><p>当一个<code>Group</code>中的<code>Consumer</code>离开后，比如说宕机</p></li><li class="lvl-3"><p>当<code>Topic</code>下的<code>Partition</code>数量发生变化后</p></li></ol><p>总之，两边的关系数量发生变化的话，都会触发<code>Rebalance</code></p><h3 id="8）当kafka出现消息积压时，该怎么办">8）当kafka出现消息积压时，该怎么办</h3><p>当出现上面这种情况的时候，要么就是<code>Consumer</code>挂掉了或者消费水平太低，要么就是<code>Producer</code>消息太多，间接导致<code>Consumer</code>消费不及时。</p><p>针对上面这种情况，我们可以有以下的解决方案，可以结合使用</p><ol><li class="lvl-3"><p><b>提高<code>Consumer</code>的数量</b>，可以通过增加消费者组中的<code>Consumer</code>数量或者增加<code>Consumer</code>实例来实现。这样每个<code>Consumer</code>可以并行处理消息，提高整体消费能力。</p></li><li class="lvl-3"><p><b>增加<code>Partition</code>分区数量</b>，在<code>kafka</code>中，可以设置主题下的<code>Partition</code>，将消息分散至更多的<code>Partition</code>中，配合第一点方案提高整体的消费能力</p></li><li class="lvl-3"><p><b>提高<code>Consumer</code>的消费能力</b>，优化消费者的处理能力，确保<code>Consumer</code>能够快速处理每条消息。将<code>Consumer</code>处理消息的速度优化至高于<code>Producer</code>生产消息的速度。在不破坏代码业务逻辑的情况下，也可以使用异步处理来消费消息。</p></li></ol><p>在面试过程中，第三点方案是至关重要的，很多企业由于硬件资源的原因，没有增加<code>Consumer</code>的数量，没有增加<code>Partition</code>数量的空间。<b>故此，<code>Consumer</code>优秀的消费能力，就成了他们考察的目标了。</b></p><h2 id="四、最后">四、最后</h2><p>我是半月，你我一同共勉！！！</p>]]></content>
      
      
      <categories>
          
          <category> 程序人生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> 消息队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中关于线程池的几道面试题</title>
      <link href="/archive/742a330a/"/>
      <url>/archive/742a330a/</url>
      
        <content type="html"><![CDATA[<h1>Java中关于线程池的几道面试题</h1><h2 id="一、介绍">一、介绍</h2><p>以前就讲过线程池的使用，本文中介绍深挖线程池中的几道面试题</p><p><a href="https://www.banmoon.top/archive/2b9621c6/">Java线程池 | 半月无霜 (banmoon.top)</a></p><p>在上面可以找到</p><ul class="lvl-0"><li class="lvl-2"><p>线程池的核心参数都有什么，代表什么含义？</p></li><li class="lvl-2"><p>线程池的拒绝策略有哪些？</p></li></ul><h2 id="二、线程池">二、线程池</h2><h3 id="1）任务添加流程">1）任务添加流程</h3><p>当一个线程池在添加一个任务时，它是怎么分配线程去执行这个任务的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadPoolExecutor</span> <span class="keyword">extends</span> <span class="title class_">AbstractExecutorService</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(Runnable command)</span> &#123;</span><br><span class="line">        <span class="comment">// 判断是否为空</span></span><br><span class="line">        <span class="keyword">if</span> (command == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 判断当前正在运行的线程数是否小于核心线程数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> ctl.get();</span><br><span class="line">        <span class="keyword">if</span> (workerCountOf(c) &lt; corePoolSize) &#123;</span><br><span class="line">            <span class="comment">// 添加任务至线程执行，成功添加则结束</span></span><br><span class="line">            <span class="keyword">if</span> (addWorker(command, <span class="literal">true</span>))</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            c = ctl.get();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果核心线程都有在运行，将任务放至队列中</span></span><br><span class="line">        <span class="keyword">if</span> (isRunning(c) &amp;&amp; workQueue.offer(command)) &#123;</span><br><span class="line">            <span class="comment">// 如果成功推入队列，将再次检查线程状态，有线程死亡则将当前任务添加至线程执行</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">recheck</span> <span class="operator">=</span> ctl.get();</span><br><span class="line">           <span class="comment">// 检查线程状态是不是RUNNING，如果不是将会拒绝此任务</span></span><br><span class="line">            <span class="keyword">if</span> (!isRunning(recheck) &amp;&amp; remove(command))</span><br><span class="line">                reject(command);</span><br><span class="line">            <span class="comment">// 检查当前的工作线程数是否为0</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (workerCountOf(recheck) == <span class="number">0</span>)</span><br><span class="line">                <span class="comment">// 添加一个null的任务</span></span><br><span class="line">                addWorker(<span class="literal">null</span>, <span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果队列推入任务失败了，那将直接添加至线程执行</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (!addWorker(command, <span class="literal">false</span>))</span><br><span class="line">            <span class="comment">// 如果任务添加至线程失败，则将进行拒绝策略</span></span><br><span class="line">            reject(command);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 会从线程工厂获取线程，并添加执行任务</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> firstTask 执行的任务</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> core 是否可以添加至核心线程</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true：成功添加至线程执行</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">addWorker</span><span class="params">(Runnable firstTask, <span class="type">boolean</span> core)</span> &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20230531114951.jpg" alt="JavaThreadPoolExcutor" /></p><h3 id="2）线程池的状态有哪些">2）线程池的状态有哪些</h3><p><b>线程池的状态有哪些，状态是如何进行转换的？</b></p><p><mark>注意是在提问线程池的状态，而不是线程的状态</mark></p><hr /><p>这是<code>ThreadPoolExecutor.java</code>中的源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 主池控制状态ctl是一个原子整数，包含两个概念性字段：</span></span><br><span class="line"><span class="comment">    * workerCount表示实际线程数，runState表示是运行中、正在关闭等状态。</span></span><br><span class="line"><span class="comment">    * 为了将它们打包成一个整数，我们将workerCount限制为(2^29)-1（大约5亿）个线程，而不是(2^31)-1（可表示20亿）。</span></span><br><span class="line"><span class="comment">    * 如果将来出现了问题，该变量可以改为AtomicLong，并且下面的移位/掩码常量需要调整。但在需要之前，使用int类型会更快，更简单。</span></span><br><span class="line"><span class="comment">    * </span></span><br><span class="line"><span class="comment">    * workerCount是已被允许启动且未被允许停止的工作线程数。</span></span><br><span class="line"><span class="comment">    * 该值暂时可能与实际的活动线程数不同，例如当ThreadFactory无法按要求创建线程时，或者退出线程在终止之前仍在执行簿记操作。用户可见的池大小报告为工作线程集合的当前大小。</span></span><br><span class="line"><span class="comment">    * </span></span><br><span class="line"><span class="comment">    * runState提供了主要的生命周期控制，接受以下值：</span></span><br><span class="line"><span class="comment">    * RUNNING：接受新任务并处理队列中的任务；</span></span><br><span class="line"><span class="comment">    * SHUTDOWN：不接受新任务，但处理队列中的任务；</span></span><br><span class="line"><span class="comment">    * STOP：不接受新任务，不处理队列中的任务，并中断正在处理的任务；</span></span><br><span class="line"><span class="comment">    * TIDYING：所有任务都已终止，workerCount为零，转换到TIDYING状态的线程将运行terminated()钩子方法；</span></span><br><span class="line"><span class="comment">    * TERMINATED：terminated()已完成。这些值之间的数值顺序很重要，才能允许有序比较。</span></span><br><span class="line"><span class="comment">    * </span></span><br><span class="line"><span class="comment">    * runState随时间单调递增，但不一定达到每个状态。转换如下：</span></span><br><span class="line"><span class="comment">    * RUNNING-&gt;SHUTDOWN：调用shutdown()时，可能是隐式的（RUNNING或SHUTDOWN状态）；</span></span><br><span class="line"><span class="comment">    * RUNNING或SHUTDOWN-&gt;STOP：调用shutdownNow()时；</span></span><br><span class="line"><span class="comment">    * SHUTDOWN-&gt;TIDYING：当队列和池都为空时；</span></span><br><span class="line"><span class="comment">    * STOP-&gt;TIDYING：当池为空时；</span></span><br><span class="line"><span class="comment">    * TIDYING -&gt; TERMINATED：当terminated()钩子方法完成时。等待在awaitTermination()中的线程将在状态到达TERMINATED时返回。</span></span><br><span class="line"><span class="comment">    * 由于在SHUTDOWN状态下队列可能在非空和空之间变化，因此检测从SHUTDOWN到TIDYING的转换不是很直观，但我们只有在看到它为空时，才能看到workerCount为0而终止（有时需要重新检查-见下文）。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">AtomicInteger</span> <span class="variable">ctl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(ctlOf(RUNNING, <span class="number">0</span>));</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">COUNT_BITS</span> <span class="operator">=</span> Integer.SIZE - <span class="number">3</span>;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">CAPACITY</span>   <span class="operator">=</span> (<span class="number">1</span> &lt;&lt; COUNT_BITS) - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// runState的状态，RUNNING &lt; SHUTDOWN &lt; STOP &lt; TIDYING &lt; TERMINATED</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">RUNNING</span>    <span class="operator">=</span> -<span class="number">1</span> &lt;&lt; COUNT_BITS;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">SHUTDOWN</span>   <span class="operator">=</span>  <span class="number">0</span> &lt;&lt; COUNT_BITS;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">STOP</span>       <span class="operator">=</span>  <span class="number">1</span> &lt;&lt; COUNT_BITS;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">TIDYING</span>    <span class="operator">=</span>  <span class="number">2</span> &lt;&lt; COUNT_BITS;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">TERMINATED</span> <span class="operator">=</span>  <span class="number">3</span> &lt;&lt; COUNT_BITS;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行状态</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">runStateOf</span><span class="params">(<span class="type">int</span> c)</span> &#123; </span><br><span class="line">       <span class="keyword">return</span> c &amp; ~CAPACITY;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">// 实际线程数</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">workerCountOf</span><span class="params">(<span class="type">int</span> c)</span> &#123; </span><br><span class="line">   <span class="keyword">return</span> c &amp; CAPACITY;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">// ctl控制数</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">ctlOf</span><span class="params">(<span class="type">int</span> rs, <span class="type">int</span> wc)</span> &#123; </span><br><span class="line">       <span class="keyword">return</span> rs | wc; </span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>由上面源码可知，线程的状态一共有<code>5</code>个</p><ol><li class="lvl-3"><p><b>RUNNING</b>：运行状态，线程池正在接受、处理任务</p></li><li class="lvl-3"><p><b>SHUTDOWN</b>：当<code>RUNNING</code>状态调用<code>shutdown()</code>方法时，进入此状态；</p><ol><li class="lvl-6">不再接受新的任务</li><li class="lvl-6">正在运行中的任务和队列中的任务会等待其执行完毕</li></ol></li><li class="lvl-3"><p><b>STOP</b>：当<code>RUNNING</code>或<code>SHUTDOWN</code>调用<code>shutdownNow()</code>方法时，进入此状态</p><ol><li class="lvl-6">不再接受新的任务</li><li class="lvl-6">中断运行中的任务，销毁队列中的任务</li></ol></li><li class="lvl-3"><p><b>TIDYING</b>：由<code>SHUTDOWN</code>或<code>STOP</code>状态进入，所有线程结束完毕，等待调用<code>terminated()</code>方法</p></li><li class="lvl-3"><p><b>TERMINATED</b>：由<code>TIDYING</code>状态进入，<code>terminated()</code>方法执行完毕</p></li></ol><p>如果是画图的话，是下面这个样子的</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20230531115000.jpg" alt="ThreadPoolExcutorStatus" /></p><hr /><p><code>terminated()</code>方法默认什么都不做，线程池提供这个方法，交给子类来进行扩展</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">terminated</span><span class="params">()</span> &#123; &#125;</span><br></pre></td></tr></table></figure><h3 id="3）线程池如何去执行任务的">3）线程池如何去执行任务的</h3><p>添加任务的流程我们已经讲述完毕，那么线程池是如何分配线程去执行任务的呢？</p><p>在第一节中，有一段<code>...</code>的<code>addWorker()</code>方法，这里面就是执行任务的逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">addWorker</span><span class="params">(Runnable firstTask, <span class="type">boolean</span> core)</span> &#123;</span><br><span class="line">      <span class="comment">// 外部循环标识retry</span></span><br><span class="line">      retry:</span><br><span class="line">      <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">          <span class="comment">// 当前的状态值ctl及runState，第二节有讲过</span></span><br><span class="line">          <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> ctl.get();</span><br><span class="line">          <span class="type">int</span> <span class="variable">rs</span> <span class="operator">=</span> runStateOf(c);</span><br><span class="line"></span><br><span class="line">          <span class="comment">// 检查运行状态是不是大于等于SHUTDOWN</span></span><br><span class="line">          <span class="keyword">if</span> (rs &gt;= SHUTDOWN &amp;&amp;</span><br><span class="line">              <span class="comment">// 且 (运行状态不等于SHUTDOWN 或 任务不为空 或 队列中是否有值)</span></span><br><span class="line">              !(rs == SHUTDOWN &amp;&amp; firstTask == <span class="literal">null</span> &amp;&amp; !workQueue.isEmpty()))</span><br><span class="line">              <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">          <span class="comment">// 上面这段，主要就是为了检测线程池的状态，队列中是否有任务</span></span><br><span class="line">          <span class="comment">// 如果线程处于RUNNING，就会跳过此处的return false</span></span><br><span class="line">          <span class="comment">// 如果处于SHUTDOWN，还要额外判断当前任务是否为有值，有值也会return false</span></span><br><span class="line">          <span class="comment">// 如果处于SHUTDOWN，且当前任务为null，还要判断当前队列是否有值；队列中没有值的话，也会return false</span></span><br><span class="line"></span><br><span class="line">          <span class="comment">// 内部循环</span></span><br><span class="line">          <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">              <span class="comment">// 当前运行的线程数</span></span><br><span class="line">              <span class="type">int</span> <span class="variable">wc</span> <span class="operator">=</span> workerCountOf(c);</span><br><span class="line">              <span class="comment">// 判断运行的线程数是否大于(容量最大)，根据是否核心，判断是否大于核心线程数 或者 最大线程数</span></span><br><span class="line">              <span class="keyword">if</span> (wc &gt;= CAPACITY ||</span><br><span class="line">                  wc &gt;= (core ? corePoolSize : maximumPoolSize))</span><br><span class="line">                  <span class="comment">// 返回false</span></span><br><span class="line">                  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">              <span class="comment">// 使用CAS自旋锁，添加ctl的运行线程数</span></span><br><span class="line">              <span class="comment">// 成功添加则会，跳出外层的循环</span></span><br><span class="line">              <span class="keyword">if</span> (compareAndIncrementWorkerCount(c))</span><br><span class="line">                  <span class="keyword">break</span> retry;</span><br><span class="line">              <span class="comment">// 如果添加没有成功，重新获取ctl</span></span><br><span class="line">              c = ctl.get();</span><br><span class="line">              <span class="comment">// 得到当前线程池状态，与外部循环的线程池做一个对比；如果不一致，则退回到外部循环，重新进行loop</span></span><br><span class="line">              <span class="keyword">if</span> (runStateOf(c) != rs)</span><br><span class="line">                  <span class="keyword">continue</span> retry;</span><br><span class="line"><span class="comment">// 如果状态是相等的，则在内部循环进行loop即可</span></span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="comment">// 当上面的自旋锁添加运行线程数成功后，才会进入此处</span></span><br><span class="line">      </span><br><span class="line">      <span class="type">boolean</span> <span class="variable">workerStarted</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">      <span class="type">boolean</span> <span class="variable">workerAdded</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">      <span class="type">Worker</span> <span class="variable">w</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="comment">// 构建一个Worker对象，里面就默认分配了一个线程</span></span><br><span class="line">          w = <span class="keyword">new</span> <span class="title class_">Worker</span>(firstTask);</span><br><span class="line">          <span class="keyword">final</span> <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> w.thread;</span><br><span class="line">          <span class="keyword">if</span> (t != <span class="literal">null</span>) &#123;</span><br><span class="line">              <span class="comment">// 加锁</span></span><br><span class="line">              <span class="keyword">final</span> <span class="type">ReentrantLock</span> <span class="variable">mainLock</span> <span class="operator">=</span> <span class="built_in">this</span>.mainLock;</span><br><span class="line">              mainLock.lock();</span><br><span class="line">              <span class="keyword">try</span> &#123;</span><br><span class="line">                  <span class="comment">// 再次获取线程池的运行状态</span></span><br><span class="line">                  <span class="type">int</span> <span class="variable">rs</span> <span class="operator">=</span> runStateOf(ctl.get());</span><br><span class="line"></span><br><span class="line">                  <span class="comment">// 运行状态是RUNNING 或者 (运行状态是SHUTDOWN 且 当前任务为null)</span></span><br><span class="line">                  <span class="keyword">if</span> (rs &lt; SHUTDOWN ||</span><br><span class="line">                      (rs == SHUTDOWN &amp;&amp; firstTask == <span class="literal">null</span>)) &#123;</span><br><span class="line">                      <span class="comment">// 预先检查线程是否为启动状态</span></span><br><span class="line">                      <span class="keyword">if</span> (t.isAlive())</span><br><span class="line">                          <span class="comment">// 如果是启动状态，就有问题了，要抛出异常</span></span><br><span class="line">                          <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalThreadStateException</span>();</span><br><span class="line">                      <span class="comment">// 将任务添加至workers容器中，这个容器包括了运行线程的状态</span></span><br><span class="line">                      <span class="comment">// largestPoolSize 最大线程池数量</span></span><br><span class="line">                      workers.add(w);</span><br><span class="line">                      <span class="type">int</span> <span class="variable">s</span> <span class="operator">=</span> workers.size();</span><br><span class="line">                      <span class="keyword">if</span> (s &gt; largestPoolSize)</span><br><span class="line">                          largestPoolSize = s;</span><br><span class="line">                      <span class="comment">// 标志位改为true，代表worker已经添加至workers</span></span><br><span class="line">                      workerAdded = <span class="literal">true</span>;</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                  <span class="comment">// 解锁</span></span><br><span class="line">                  mainLock.unlock();</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="comment">// 判断标志位</span></span><br><span class="line">              <span class="keyword">if</span> (workerAdded) &#123;</span><br><span class="line">                  <span class="comment">// 启动线程，执行任务</span></span><br><span class="line">                  t.start();</span><br><span class="line">                  <span class="comment">// 启动线程标志位，设置为true</span></span><br><span class="line">                  workerStarted = <span class="literal">true</span>;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">          <span class="comment">// 是否启动线程的标志位</span></span><br><span class="line">          <span class="keyword">if</span> (! workerStarted)</span><br><span class="line">              <span class="comment">// 添加一个worker失败的处理</span></span><br><span class="line">              addWorkerFailed(w);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 返回是否启动线程的标志位</span></span><br><span class="line">      <span class="keyword">return</span> workerStarted;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="4）为什么线程池中会把null作为任务添加">4）为什么线程池中会把null作为任务添加</h3><p>看下图，很多调用<code>addWorker()</code>方法都传递了一个<code>null</code>，这是为什么呢，有什么用？</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20230531115008.png" alt="image-20230530225334992" /></p><p>首先说结论，<b>这是为了更快的启动队列中的任务</b>。</p><p>大家通过上面第一节的任务添加流程就会发现，有一些任务在添加进入任务阻塞队列后就没有声音了。</p><p>那么就要看看，如果添加一个为<code>null</code>的任务会出现什么情况把。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这中间代码省略了，第一部分是判断状态和添加任务数，第二部分是判断状态和启动任务</span></span><br><span class="line"><span class="comment">// 如果线程池的状态是RUNNING，那么一个任务是大概率都是可以添加成功的</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">addWorker</span><span class="params">(Runnable firstTask, <span class="type">boolean</span> core)</span> &#123;</span><br><span class="line"><span class="comment">// ... 省略了，关心下面t.start();做了什么即可</span></span><br><span class="line">       <span class="keyword">if</span> (workerAdded) &#123;</span><br><span class="line">           t.start();</span><br><span class="line">           workerStarted = <span class="literal">true</span>;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主要还是要看启动Worker做了什么</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Worker</span> <span class="keyword">extends</span> <span class="title class_">AbstractQueuedSynchronizer</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">       </span><br><span class="line">       <span class="comment">// 首先构造方法</span></span><br><span class="line">       Worker(Runnable firstTask) &#123;</span><br><span class="line">           setState(-<span class="number">1</span>);</span><br><span class="line">           <span class="comment">// 传入一个任务后，作为自己的属性</span></span><br><span class="line">           <span class="built_in">this</span>.firstTask = firstTask;</span><br><span class="line">           <span class="comment">// 将自己作为任务构建了一个线程作为自己的属性。他自己也实现了Runnable接口</span></span><br><span class="line">           <span class="built_in">this</span>.thread = getThreadFactory().newThread(<span class="built_in">this</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       </span><br><span class="line">       <span class="comment">// 当上面t.start();启动的是Worker的run方法</span></span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">           runWorker(<span class="built_in">this</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 上面run();方法调用过来的</span></span><br><span class="line">       <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">runWorker</span><span class="params">(Worker w)</span> &#123;</span><br><span class="line">           <span class="comment">// 线程池里面的，当前的线程</span></span><br><span class="line">           <span class="type">Thread</span> <span class="variable">wt</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">           <span class="comment">// 当前真正要执行的任务，可能为null，本小节直接定义null</span></span><br><span class="line">           <span class="type">Runnable</span> <span class="variable">task</span> <span class="operator">=</span> w.firstTask;</span><br><span class="line">           <span class="comment">// 将属性变为null</span></span><br><span class="line">           w.firstTask = <span class="literal">null</span>;</span><br><span class="line">           w.unlock();</span><br><span class="line">           <span class="type">boolean</span> <span class="variable">completedAbruptly</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               <span class="comment">// 重点在这里，当task==null时，它会去getTask();方法中去获取task进行判断</span></span><br><span class="line">               <span class="comment">// 如果getTask();方法返回的是null，那么说明本次循环结束，任务运行完成</span></span><br><span class="line">               <span class="comment">// 如果getTask();方法返回的是队列中的任务，那么进入循环体，执行任务</span></span><br><span class="line">               <span class="keyword">while</span> (task != <span class="literal">null</span> || (task = getTask()) != <span class="literal">null</span>) &#123;</span><br><span class="line">                   w.lock();</span><br><span class="line"><span class="comment">// 下面就是一些判断状态和执行任务的代码了</span></span><br><span class="line">                   <span class="keyword">if</span> ((runStateAtLeast(ctl.get(), STOP) ||</span><br><span class="line">                        (Thread.interrupted() &amp;&amp;</span><br><span class="line">                         runStateAtLeast(ctl.get(), STOP))) &amp;&amp;</span><br><span class="line">                       !wt.isInterrupted())</span><br><span class="line">                       wt.interrupt();</span><br><span class="line">                   <span class="keyword">try</span> &#123;</span><br><span class="line">                       beforeExecute(wt, task);</span><br><span class="line">                       <span class="type">Throwable</span> <span class="variable">thrown</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                       <span class="keyword">try</span> &#123;</span><br><span class="line">                           <span class="comment">// 这里才是真正执行我们任务的地方</span></span><br><span class="line">                           task.run();</span><br><span class="line">                       &#125; <span class="keyword">catch</span> (RuntimeException x) &#123;</span><br><span class="line">                           thrown = x; <span class="keyword">throw</span> x;</span><br><span class="line">                       &#125; <span class="keyword">catch</span> (Error x) &#123;</span><br><span class="line">                           thrown = x; <span class="keyword">throw</span> x;</span><br><span class="line">                       &#125; <span class="keyword">catch</span> (Throwable x) &#123;</span><br><span class="line">                           thrown = x; <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(x);</span><br><span class="line">                       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                           afterExecute(task, thrown);</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                       task = <span class="literal">null</span>;</span><br><span class="line">                       w.completedTasks++;</span><br><span class="line">                       w.unlock();</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">               completedAbruptly = <span class="literal">false</span>;</span><br><span class="line">           &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">               processWorkerExit(w, completedAbruptly);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 这是从上面runWorker();方法调用而来</span></span><br><span class="line">       <span class="keyword">private</span> Runnable <span class="title function_">getTask</span><span class="params">()</span> &#123;</span><br><span class="line">           <span class="comment">// 最后poll()方法是否超时</span></span><br><span class="line">           <span class="type">boolean</span> <span class="variable">timedOut</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">               <span class="comment">// 获取线程池状态</span></span><br><span class="line">               <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> ctl.get();</span><br><span class="line">               <span class="type">int</span> <span class="variable">rs</span> <span class="operator">=</span> runStateOf(c);</span><br><span class="line"></span><br><span class="line">               <span class="comment">// 检查阻塞队列是否为空</span></span><br><span class="line">               <span class="comment">// 当状态是RUNNING时，false</span></span><br><span class="line">               <span class="comment">// 当状态是SHUTDOWN时，判断队列是否为空，如果有值，false</span></span><br><span class="line">               <span class="comment">// 如果状态是后面几种状态时，无论队列是否有值，true</span></span><br><span class="line">               <span class="keyword">if</span> (rs &gt;= SHUTDOWN &amp;&amp; (rs &gt;= STOP || workQueue.isEmpty())) &#123;</span><br><span class="line">                   decrementWorkerCount();</span><br><span class="line">                   <span class="comment">// 这里返回null，就代表task=null了</span></span><br><span class="line">                   <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               <span class="comment">// 当前线程池运行的线程数</span></span><br><span class="line">               <span class="type">int</span> <span class="variable">wc</span> <span class="operator">=</span> workerCountOf(c);</span><br><span class="line"></span><br><span class="line">               <span class="comment">// allowCoreThreadTimeOut，这个讲一个，这个布尔值代表，核心线程数是否也可以被回收</span></span><br><span class="line">               <span class="comment">// 如果为true，空闲时会保证keepAliveTime的时候，过期销毁</span></span><br><span class="line">               <span class="comment">// 如果为false(默认)，那么在空闲时也会保持活动</span></span><br><span class="line">               <span class="comment">// 这里主要判断是否允许超时保留核心线程，用来确定下面阻塞队列的阻塞时间</span></span><br><span class="line">               <span class="type">boolean</span> <span class="variable">timed</span> <span class="operator">=</span> allowCoreThreadTimeOut || wc &gt; corePoolSize;</span><br><span class="line"></span><br><span class="line">               <span class="comment">// 加这个判断，主要是想留一个线程在这循环阻塞，加快从队列中取任务的流程步骤</span></span><br><span class="line">               <span class="keyword">if</span> ((wc &gt; maximumPoolSize || (timed &amp;&amp; timedOut)) &amp;&amp; (wc &gt; <span class="number">1</span> || workQueue.isEmpty())) &#123;</span><br><span class="line">                   <span class="keyword">if</span> (compareAndDecrementWorkerCount(c))</span><br><span class="line">                       <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                   <span class="keyword">continue</span>;</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   <span class="comment">// 获取任务</span></span><br><span class="line">                   <span class="type">Runnable</span> <span class="variable">r</span> <span class="operator">=</span> timed ?</span><br><span class="line">                       workQueue.poll(keepAliveTime, TimeUnit.NANOSECONDS) :</span><br><span class="line">                       workQueue.take();</span><br><span class="line">                   <span class="comment">// 返回</span></span><br><span class="line">                   <span class="keyword">if</span> (r != <span class="literal">null</span>)</span><br><span class="line">                       <span class="keyword">return</span> r;</span><br><span class="line">                   <span class="comment">// 没有就一直处在循环之中，并配合上面的107行判断使用</span></span><br><span class="line">                   timedOut = <span class="literal">true</span>;</span><br><span class="line">               &#125; <span class="keyword">catch</span> (InterruptedException retry) &#123;</span><br><span class="line">                   timedOut = <span class="literal">false</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="三、最后">三、最后</h2><p>当前线程池的解读就到这里了，如果不是为了造火箭，谁会看这么底层的东西。</p><p>有一说一，这线程池写起来真的很优雅！！！</p><p>我是半月，你我一同共勉！</p>]]></content>
      
      
      <categories>
          
          <category> 程序人生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> jdk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中锁的分类</title>
      <link href="/archive/54b2b61f/"/>
      <url>/archive/54b2b61f/</url>
      
        <content type="html"><![CDATA[<h1>Java中锁的分类</h1><h2 id="一、介绍">一、介绍</h2><p>在<code>Java</code>中的锁可以分为以下这四类</p><ol><li class="lvl-3"><p>可重入锁、不可重入锁</p></li><li class="lvl-3"><p>乐观锁、悲观锁</p></li><li class="lvl-3"><p>公平锁、非公平锁</p></li><li class="lvl-3"><p>互斥锁、共享锁</p></li></ol><h2 id="二、详解">二、详解</h2><h3 id="1）可重入锁、不可重入锁">1）可重入锁、不可重入锁</h3><p>当一个线程持有一个锁后，又想再持有这个锁时，发生的情况。</p><ul class="lvl-0"><li class="lvl-2"><p><b>可重入锁</b>：允许再次持有，多少次都没问题。</p></li><li class="lvl-2"><p><b>不可重入锁</b>：不允许再次持有，已经持有了锁后，再次去获取时，会造成死锁的情况。</p></li></ul><p>没必要给自己增加负担，所以<code>Java</code>中的锁基本都是可重入锁</p><h3 id="2）乐观锁、悲观锁">2）乐观锁、悲观锁</h3><p>他们两之间的区别主要体现在访问资源时，要不要进行上锁</p><ul class="lvl-0"><li class="lvl-2"><p><b>乐观锁</b>：假定多个线程同时访问同一个资源时，并不会彼此产生干涉和冲突，因此在多线程并发时，每个线程都可以自由访问共享资源，只在更新时检查数据是否被其他线程修改。如果数据未被修改，乐观锁会直接进行更新。常见的乐观锁实现包括版本号机制和CAS机制。<code>Java</code>中的<code>Atomic</code>相关的类，底层正是使用的<code>CAS</code>。</p></li><li class="lvl-2"><p><b>悲观锁</b>：每个线程在访问，都要先进行上锁，这样其他线程就无法访问。悲观锁适用于对数据更新操作比较频繁的场景。当锁被别人占用时，线程只能进入等待阻塞阶段了。在<code>Java</code>中，<code>synchronized </code>和<code>Lock</code>相关的类都属于悲观锁。</p></li></ul><p>他们主要的区别是，由于悲观锁会造成锁的占用和线程的切换，故占用较大。而乐观锁，发现数据、版本号不对时，就会放弃此次操作，重新再一次进行读写，占用不大，适合比较小量的线程共享数据。</p><p>如果只是少量的操作，那么进行乐观锁即可。</p><p>如果是大批的操作，一大批的线程共享数据，那么进行悲观锁会好上很多。</p><h3 id="3）公平锁、非公平锁">3）公平锁、非公平锁</h3><p>公平锁和非公平锁主要的区别在于获取锁时的排队机制不同。</p><p>当一个A线程正在运行，B线程先来阻塞，C后来阻塞，那么A线程运行完后，B线程和C线程如何进行分配</p><ul class="lvl-0"><li class="lvl-2"><p><b>公平锁</b>：遵循先入先出，先到先得的策略，对线程进行分配。</p></li><li class="lvl-2"><p><b>非公平锁</b>：不管先来后到，线程统一进行竞争，有<code>CPU</code>调度进行分配。</p></li></ul><p><code>Java</code>中的<code>synchronized</code>就是一款非公平锁，而<code>Lock</code>锁两者皆可，是可以进行设置的。</p><h3 id="4）互斥锁、共享锁">4）互斥锁、共享锁</h3><p>线程持有锁后，其他线程同时持有这把锁，通过这样的特性进行区分</p><ul class="lvl-0"><li class="lvl-2"><p><b>互斥锁</b>：不同的线程不能同时持有同一把锁</p></li><li class="lvl-2"><p><b>共享锁</b>：不同的线程允许同时持有同一把锁</p></li></ul><p>在<code>Java</code>中，<code>synchronized</code>关键字就是一把互斥锁，而读写锁<code>ReadWriteLock</code>中的读锁，就是一个共享锁。</p><h2 id="三、最后">三、最后</h2><p>我是半月，你我一同共勉！！！</p>]]></content>
      
      
      <categories>
          
          <category> 程序人生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> jdk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于Java中引用的面试题</title>
      <link href="/archive/53fb86d6/"/>
      <url>/archive/53fb86d6/</url>
      
        <content type="html"><![CDATA[<h1>关于Java中引用的面试题</h1><h2 id="一、介绍">一、介绍</h2><p><b>在Java中，有以下四种类型的引用</b>：<mark>强软弱虚</mark></p><ol><li class="lvl-3"><p>强引用（Strong Reference）：最常见的引用类型，也是默认的引用类型。如果一个对象具有强引用，那么垃圾回收器就不会回收这个对象。</p></li><li class="lvl-3"><p>软引用（Soft Reference）：如果一个对象具有软引用，那么当系统内存不足时，垃圾回收器会尝试回收该对象。软引用通常用于缓存中，以便在内存紧张时释放一些缓存。</p></li><li class="lvl-3"><p>弱引用（Weak Reference）：如果一个对象具有弱引用，那么它的生命周期更短，它在任何时候都可能被垃圾回收器回收。弱引用通常用于外部引用内部对象时使用，以免内存泄漏。</p></li><li class="lvl-3"><p>虚引用（Phantom Reference）：虚引用是所有引用类型中最弱的一种。如果一个对象具有虚引用，那么它就像没有被引用一样，随时会被垃圾回收器回收。虚引用主要用于跟踪对象被回收的状态。</p></li></ol><p>上面属于<code>Java</code>的面试八股文，那么在面试之中，我们该如何进行理解输出呢？</p><h2 id="二、引用">二、引用</h2><h3 id="1）强引用（Strong-Reference）">1）强引用（Strong Reference）</h3><p>在日常开发中最为平常的引用，因为我们直接<code>new</code>出来的对象就属于强引用。</p><p>那么，如果一个对象只要有强引用，那么<code>GC</code>就不会回收掉它。如下这个类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.reference;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Reference</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">finalize</span><span class="params">()</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;GC回收&quot;</span>);</span><br><span class="line">        <span class="built_in">super</span>.finalize();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我只有将引用设置为<code>null</code>后，<code>GC</code>才能回收掉它，强引用就是如此。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.reference;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StrongReference</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Reference</span> <span class="variable">reference</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Reference</span>();</span><br><span class="line">        System.out.println(reference);</span><br><span class="line">        <span class="comment">// 赋值为null，取消对象的强引用</span></span><br><span class="line">        reference = <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// 通知进行gc</span></span><br><span class="line">        System.gc();</span><br><span class="line">        System.out.println(reference);</span><br><span class="line">        <span class="comment">// 阻塞一下</span></span><br><span class="line">        System.in.read();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2）软引用（Soft-Reference）">2）软引用（Soft Reference）</h3><p>软引用和强引用不同</p><ul class="lvl-0"><li class="lvl-2"><p>强引用只要有引用指向对象，对象就不会被回收</p></li><li class="lvl-2"><p>而软引用，就算有软引用指向对象，在发生内存不足的时候，<code>GC</code>就会把这些软引用的对象给回收</p></li></ul><p>为了测试下面的代码，我们需要添加一点<code>JVM</code>参数，限制一下<code>JVM</code>的内存，即<code>-Xms20M -Xmx20M</code>，我限制了<code>20M</code>的内存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.reference;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.ref.SoftReference;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SoftReferenceMain</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="comment">// 一个byte数组，内容大小是10M</span></span><br><span class="line">        SoftReference&lt;<span class="type">byte</span>[]&gt; sr = <span class="keyword">new</span> <span class="title class_">SoftReference</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span> * <span class="number">1024</span> * <span class="number">10</span>]);</span><br><span class="line">        <span class="comment">// 获取数组</span></span><br><span class="line">        System.out.println(sr.get());</span><br><span class="line">        <span class="comment">// 睡眠一秒后，再次查看数组</span></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        System.out.println(sr.get());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 我再创建一个数组，12M，再次查看原来软引用的数组</span></span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span> * <span class="number">1024</span> * <span class="number">12</span>];</span><br><span class="line">        System.out.println(sr.get());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20230527224542.png" alt="image-20230527221108072" /></p><h3 id="3）弱引用（Weak-Reference）">3）弱引用（Weak Reference）</h3><p>比起上面的两个引用，弱引用可以这样理解，它引用的对象，只要发生<code>GC</code>，就都会被回收。</p><p>也就是说，前两个引用都一定程度上保护了对象，但弱引用不行，弱引用保护不了任何对象。</p><p>在平常的使用中，基本没啥用，当然<code>ThreadLocal</code>中使用到了，搭配着强引用一起进行使用的。</p><p>简单改造一下强引用的代码，变成弱引用，<code>GC</code>后会发生什么</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.reference;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.ref.WeakReference;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WeakReferenceMain</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line">        WeakReference&lt;Reference&gt; wr = <span class="keyword">new</span> <span class="title class_">WeakReference</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">Reference</span>());</span><br><span class="line">        System.out.println(wr.get());</span><br><span class="line">        <span class="comment">// 通知进行gc，并阻塞一下</span></span><br><span class="line">        System.gc();</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 查看输出</span></span><br><span class="line">        System.out.println(wr.get());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20230527224547.png" alt="image-20230527221746422" /></p><h3 id="4）虚引用（Phantom-Reference）">4）虚引用（Phantom Reference）</h3><p>最后一个虚引用，比较特殊。主要是给<code>GC</code>使用的，对的没错，<code>JVM</code>在<code>GC</code>的时候，也会创建对象，这些基本就是虚引用。</p><p>下面作为示例了解一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.reference;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.ref.PhantomReference;</span><br><span class="line"><span class="keyword">import</span> java.lang.ref.ReferenceQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PhantomReferenceMain</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        ReferenceQueue&lt;Reference&gt; queue = <span class="keyword">new</span> <span class="title class_">ReferenceQueue</span>&lt;&gt;();</span><br><span class="line">        PhantomReference&lt;Reference&gt; phantom = <span class="keyword">new</span> <span class="title class_">PhantomReference</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">Reference</span>(), queue);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//检查垃圾回收队列中是否已经加入该对象</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Is queued: &quot;</span> + phantom.isEnqueued());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//强制进行垃圾回收并等待GC完成</span></span><br><span class="line">        System.gc();</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//检查垃圾回收队列中是否已经加入该对象</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Is queued: &quot;</span> + phantom.isEnqueued());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//从队列中读取并打印垃圾回收的信息</span></span><br><span class="line">        System.out.println(queue.poll());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><b>虚引用的使用场景</b></p><p>虚引用通常用于实现比弱引用更加精细的对象 finalization（终结）处理逻辑。虚引用通常与引用队列结合使用，对于一个具有虚引用的对象，当垃圾回收器准备回收该对象时，如果发现它存在虚引用，就会在回收对象的内存之前，将这个虚引用加入到与之关联的引用队列中。</p><p>在实际应用中，虚引用常用于：</p><ol><li class="lvl-3"><p>用于在对象被回收时进行一些定制操作，例如发送通知、记录日志、清理资源等等。</p></li><li class="lvl-3"><p>用于避免内存泄漏，通过使用虚引用表示该对象将会被垃圾回收器回收，并触发一些清理操作。</p></li></ol><p>值得注意的是，虚引用并不会影响被引用对象的生命周期。当垃圾回收器准备回收对象时，虚引用会被加入到与之关联的引用队列中，但此时虚引用本身并不能保证被回收，需要不断调用<code>getReference()</code>方法来获取引用队列中的虚引用，直到返回null为止。</p></blockquote><h2 id="三、最后">三、最后</h2><p>关于<code>GC</code>回收强引用的对象，有时候就算被强引用，也还是会被回收的场景，比如说循环引用。所以还是得具体情况，具体分析。</p><p>我是半月，你我一同共勉！！！</p>]]></content>
      
      
      <categories>
          
          <category> 程序人生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> jdk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>红黑树详解</title>
      <link href="/archive/8d98dcd8/"/>
      <url>/archive/8d98dcd8/</url>
      
        <content type="html"><![CDATA[<h1>红黑树详解</h1><h2 id="一、介绍">一、介绍</h2><p>作为一颗红黑树，它是一颗特殊的<code>AVL树</code>，也就是一颗特殊的平衡二叉树。</p><p>对于平衡二叉树而言，它的定义是，对于任何二叉树的任何一个节点，<b>它的左子树和右子树的高度差不能大于1</b>。</p><p>而为什么红黑树比较特殊，它除了满足平衡二叉树的特点之外，还有以下的几个特征</p><ol><li class="lvl-3"><p>每一个节点都有一个状态，<b><mark>红色</mark><b>或者</b>黑色</b></p></li><li class="lvl-3"><p>根节点是黑色</p></li><li class="lvl-3"><p>红黑树的叶子节点默认都是空引用的对象，默认都是<b>黑色</b></p></li><li class="lvl-3"><p>==<b>红色</b>==节点的两个子节点都是<b>黑色</b>，也就是说**<mark>红色</mark>**节点不能相连</p></li><li class="lvl-3"><p>从任意节点，到叶子节点，其经过的路径上，<b>黑色</b>节点的个数都是一致的</p></li></ol><hr /><p><code>AVL树</code>是通过自旋转来完成的平衡</p><p>但是红黑树却不全是这样，它虽然有自旋，但主要是节点特性，加上任意节点到叶子节点经过的<b>黑色</b>节点数量来保证了树的子平衡。</p><p>出发点不同，则实现的方式完全不同</p><h2 id="二、示例">二、示例</h2><p>首先，我们针对以上五个特性，先画一个红黑树</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20230525215433.png" alt="image-20230311165058819" /></p><p>再次讲解一下特性</p><ol><li class="lvl-3"><p>不是黑就是红，没什么好说的</p></li><li class="lvl-3"><p>根节点是黑的，也没什么好说的</p></li><li class="lvl-3"><p>叶子节点都是<code>null</code>节点，这我认为是模拟出来的节点，仅作为第<code>5</code>点平衡计算使用</p></li><li class="lvl-3"><p>红色节点的子节点一定是黑的，也就是说不能出现红红相连的情况</p></li><li class="lvl-3"><p>重点讲讲第五点</p></li></ol><hr /><p>从任意节点，到叶子节点，其经过的路径上，<b>黑色</b>节点的个数都是一致的</p><ol><li class="lvl-3"><p>比如说<code>5</code>这个节点，到达叶子节点一共有<code>4</code>种走法，每一种走法的黑色节点个数都是<code>2</code>个</p><ol><li class="lvl-6"><code>5-&gt;4-&gt;null</code>，其中<code>5</code>、<code>null</code>为黑色节点</li><li class="lvl-6"><code>5-&gt;6-&gt;null</code>，其中<code>5</code>、<code>null</code>为黑色节点</li></ol></li><li class="lvl-3"><p>比如说<code>10</code>这个节点，到达叶子节点一共有<code>6</code>种走法，每一种走法的黑色节点个数都是<code>3</code>个</p><ol><li class="lvl-6"><code>10-&gt;5-&gt;4-&gt;null</code>，其中<code>10</code>、<code>5</code>、<code>null</code>为黑色节点</li><li class="lvl-6"><code>10-&gt;5-&gt;6-&gt;null</code>，其中<code>10</code>、<code>5</code>、<code>null</code>为黑色节点</li><li class="lvl-6"><code>10-&gt;15-&gt;null</code>，其中<code>10</code>、<code>15</code>、<code>null</code>为黑色节点</li></ol></li></ol><h2 id="三、新增节点">三、新增节点</h2><p>当有新的元素插入时，红黑树是如何保证自身平衡的呢？</p><p>如果说<code>AVL树</code>是靠左旋和右旋保证平衡的，那么红黑树是靠<mark>左旋、右旋和变色</mark>来保证平衡</p><ul class="lvl-0"><li class="lvl-2"><p>左旋：和<code>AVL树</code>一样进行向左旋转，保证高度差</p></li><li class="lvl-2"><p>右旋：和<code>AVL树</code>一样进行向右旋转，保证高度差</p></li><li class="lvl-2"><p>变色：红色节点变成黑色节点，黑色节点变成红色节点</p></li></ul><hr /><p>假设我们对上面示例的红黑树进行插入，可以分为以下这几种情况</p><h3 id="1）当前红黑树是空树">1）当前红黑树是空树</h3><p>这种没什么好说的，直接把插入的节点设置成根节点即可，注意是黑色节点</p><h3 id="2）如果插入节点的key已存在">2）如果插入节点的key已存在</h3><p>找到节点，更新替换掉即可</p><h3 id="3）当插入节点的父节点是黑色节点">3）当插入节点的父节点是黑色节点</h3><p>保证插入节点是红色节点，直接插入即可，无需要额外的处理</p><blockquote><p>为什么要保证插入节点是红色的？</p><p>假设有下面这个红黑树，将插入一个值为<code>13</code>的节点，那么直接就成为在黑色节点的子节点即可</p><table><thead><tr><th>开始</th><th>结果</th></tr></thead><tbody><tr><td><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20230525215443.png" alt="image-20230312194158034" /></td><td><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20230525215451.png" alt="image-20230312194318707" /></td></tr></tbody></table><p>那么插入的是黑色节点呢，那一定会破坏红黑树特性五，<mark>任一节点到根节点的路径上，其中黑色个数是一致的</mark></p><p>那么如果是红色节点呢，就向上面的情况一样，说不定什么都不用处理</p><p>还有种情况就是，红色节点会遇到红色节点，出现红红相连的情况，违反了红黑树的特性四。</p><p><b>所以针对上面的情况，我们就默认新插入的节点就是红色的</b></p></blockquote><h3 id="4）当插入节点的父节点是红色节点时">4）当插入节点的父节点是红色节点时</h3><p>根据特性二，根节点一定是黑色的，所以我们插入的节点一定有爷爷节点，包含祖宗三代。</p><p>由于插入节点是红色的，所以在本小节一定会出现红红相连的情况，根据不同的添加位置，我们有以下这几种情况</p><h4 id="4-1）双红，且叔叔节点存在">4.1）双红，且叔叔节点存在</h4><p>看下面这个红黑色，当我们插入<code>3</code>节点后，出现双红的情况，也就是两个红色节点连接在了一起</p><table><thead><tr><th>开始</th><th>双红，且有叔叔节点</th></tr></thead><tbody><tr><td><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20230525215505.png" alt="image-20230319123834226" /></td><td><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20230525215509.png" alt="image-20230319123900740" /></td></tr></tbody></table><p>由于违反特性四，我们需要做一定的处理</p><ol><li class="lvl-3"><p>首先需要变色</p><ol><li class="lvl-6">将父节点和叔叔节点变成黑色</li><li class="lvl-6">爷爷节点变成红色</li></ol></li><li class="lvl-3"><p>如果爷爷节点又出现了双红的情况，那再根据情况对应再进行处理即可</p></li></ol><table><thead><tr><th>步骤</th><th>图解</th></tr></thead><tbody><tr><td>双红的情况</td><td><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20230525215516.png" alt="image-20230319123900740" /></td></tr><tr><td>变色，<br />将父节点和叔叔节点变成黑色，<br />爷爷节点变成红色</td><td><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20230525215521.png" alt="image-20230319123957423" /></td></tr><tr><td>由于爷爷是根节点，这里需要变回黑色</td><td><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20230525215528.png" alt="image-20230319124217349" /></td></tr></tbody></table><p>完成，又是一颗红黑树</p><h4 id="4-2）左左红，且叔叔节点不存在">4.2）左左红，且叔叔节点不存在</h4><p>看下面这个红黑色，当我们插入<code>3</code>节点后，出现左左红的情况，也就是父节点是左节点，自己插入的位置也是左边。</p><p>并且注意它<code>3</code>节点没有叔叔节点</p><table><thead><tr><th>开始</th><th>左左红，且没有叔叔节点</th></tr></thead><tbody><tr><td><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20230525215532.png" alt="image-20230319124437283" /></td><td><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20230525215536.png" alt="image-20230319124526750" /></td></tr></tbody></table><p>由于违反特性四，我们需要做一定的处理</p><ol><li class="lvl-3"><p>首先需要变色</p><ol><li class="lvl-6">将父节点变成黑色</li><li class="lvl-6">爷爷节点变成红色</li></ol></li><li class="lvl-3"><p>将爷爷节点进行<b>右旋</b></p></li><li class="lvl-3"><p>如果爷爷节点又出现了双红的情况，那再根据情况对应再进行处理即可</p></li></ol><blockquote><p>左旋，右旋在<code>AVL树</code>有详细的讲解，</p><p><a href="https://www.banmoon.top/archive/7cbd45e7/">二叉树详解 | 半月无霜 (banmoon.top)</a></p></blockquote><table><thead><tr><th>步骤</th><th>图解</th></tr></thead><tbody><tr><td>左左红，且没有叔叔节点</td><td><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20230525215543.png" alt="image-20230319124526750" /></td></tr><tr><td>先变色，<br />将父节点变成黑色，<br />将爷爷节点变成红色</td><td><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20230525215548.png" alt="image-20230319125635874" /></td></tr><tr><td>再进行右旋</td><td><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20230525215553.png" alt="image-20230319125103281" /></td></tr></tbody></table><p>完成，又是一颗红黑树</p><h4 id="4-3）左右红，且叔叔节点不存在">4.3）左右红，且叔叔节点不存在</h4><p>看下面这个红黑色，当我们插入<code>6</code>节点后，出现左右红的情况，也就是父节点是左节点，自己插入的位置却是右边</p><table><thead><tr><th>开始</th><th>左右红，且叔叔节点不存在</th></tr></thead><tbody><tr><td><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20230525215557.png" alt="image-20230319124437283" /></td><td><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20230525215600.png" alt="image-20230319130112153" /></td></tr></tbody></table><p>红红相连，我们采用下面步骤进行处理</p><ol><li class="lvl-3"><p>对父节点进行左旋</p><ol><li class="lvl-6">左旋完成后，你会发现左右红的情况，<mark>会变成左左红的情况</mark>，后面的步骤就是应对左左红的情况</li></ol></li><li class="lvl-3"><p>变色</p><ol><li class="lvl-6">父节点变成黑色</li><li class="lvl-6">爷爷节点变成红色</li></ol></li><li class="lvl-3"><p>将爷爷节点进行<b>右旋</b></p></li><li class="lvl-3"><p>如果爷爷节点又出现了双红的情况，那再根据情况对应再进行处理即可</p></li></ol><table><thead><tr><th>步骤</th><th>图解</th></tr></thead><tbody><tr><td>左右红，且叔叔节点不存在</td><td><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20230525215604.png" alt="image-20230319130112153" /></td></tr><tr><td>对父节点进行左旋<br />出现左左红的情况</td><td><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20230525215609.png" alt="image-20230319130514357" /></td></tr><tr><td>变色，<br />将父节点变成黑色，<br />将爷爷节点变成红色</td><td><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20230525215612.png" alt="image-20230319130933187" /></td></tr><tr><td>再进行右旋</td><td><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20230525215615.png" alt="image-20230319131128504" /></td></tr></tbody></table><p>完成，又是一颗红黑树</p><h4 id="4-4）右右红，且叔叔节点不存在">4.4）右右红，且叔叔节点不存在</h4><p>看下面这个红黑色，当我们插入<code>11</code>节点后，出现右右红的情况，也就是父节点是右节点，自己插入的位置也是右边</p><table><thead><tr><th>开始</th><th>右右红，且叔叔节点不存在</th></tr></thead><tbody><tr><td><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20230525215618.png" alt="image-20230319131714631" /></td><td><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20230525215621.png" alt="image-20230319131732730" /></td></tr></tbody></table><p>红红相连，我们采用下面步骤进行处理</p><ol><li class="lvl-3"><p>变色</p><ol><li class="lvl-6">父节点变成黑色</li><li class="lvl-6">爷爷节点变成红色</li></ol></li><li class="lvl-3"><p>将爷爷节点进行<b>左旋</b></p></li><li class="lvl-3"><p>如果爷爷节点又出现了双红的情况，那再根据情况对应再进行处理即可</p></li></ol><table><thead><tr><th>步骤</th><th>图解</th></tr></thead><tbody><tr><td>右右红，且叔叔节点不存在</td><td><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20230525215625.png" alt="image-20230319131732730" /></td></tr><tr><td>变色，<br />将父节点变成黑色，<br />将爷爷节点变成红色</td><td><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20230525215627.png" alt="image-20230319132222817" /></td></tr><tr><td>再进行右旋</td><td><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20230525215630.png" alt="image-20230319132234128" /></td></tr></tbody></table><p>完成，又是一颗红黑树</p><h4 id="4-5）右左红，且叔叔节点不存在">4.5）右左红，且叔叔节点不存在</h4><p>看下面这个红黑色，当我们插入<code>11</code>节点后，出现右右红的情况，也就是父节点是右节点，自己插入的位置也是右边</p><table><thead><tr><th>开始</th><th>右左红，且叔叔节点不存在</th></tr></thead><tbody><tr><td><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20230525215634.png" alt="image-20230319131714631" /></td><td><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20230525215636.png" alt="image-20230319132554768" /></td></tr></tbody></table><p>红红相连，我们采用下面步骤进行处理</p><ol><li class="lvl-3"><p>变色</p><ol><li class="lvl-6">父节点变成黑色</li><li class="lvl-6">爷爷节点变成红色</li></ol></li><li class="lvl-3"><p>将爷爷节点进行<b>左旋</b></p></li><li class="lvl-3"><p>如果爷爷节点又出现了双红的情况，那再根据情况对应再进行处理即可</p></li></ol><table><thead><tr><th>步骤</th><th>图解</th></tr></thead><tbody><tr><td>右左红，且叔叔节点不存在</td><td><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20230525215640.png" alt="image-20230319132559291" /></td></tr><tr><td>先对父节点进行右旋<br />出现右右红的情况</td><td><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20230525215644.png" alt="image-20230319132654592" /></td></tr><tr><td>变色，<br />将父节点变成黑色，<br />将爷爷节点变成红色</td><td><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20230525215647.png" alt="image-20230319132847377" /></td></tr><tr><td>再进行左旋</td><td><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20230525215650.png" alt="image-20230319132917541" /></td></tr></tbody></table><p>完成，又是一颗红黑树</p><h2 id="四、编码">四、编码</h2><h3 id="1）基础">1）基础</h3><p>这里面只有最基本的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.datastructure;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.util.Objects.nonNull;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 红黑树</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;K&gt; 键</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;V&gt; 值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BRTree</span>&lt;K, V&gt; &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 红黑树颜色-红</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Boolean</span> <span class="variable">RED</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 红黑树颜色-黑</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Boolean</span> <span class="variable">BLACK</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> BRTreeNode&lt;K, V&gt; root;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BRTree</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">        root = <span class="keyword">new</span> <span class="title class_">BRTreeNode</span>&lt;&gt;(key, value, BLACK);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 中序遍历</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">middleShow</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (nonNull(root)) &#123;</span><br><span class="line">            root.middleShow();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">BRTreeNode</span>&lt;K, V&gt; &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 键</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> K key;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 值</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> V value;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 颜色</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> Boolean color;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 父节点</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> BRTreeNode&lt;K, V&gt; parent;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 左子节点</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> BRTreeNode&lt;K, V&gt; left;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 右子节点</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> BRTreeNode&lt;K, V&gt; right;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">BRTreeNode</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>(key, value, RED);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">BRTreeNode</span><span class="params">(K key, V value, Boolean color)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.key = key;</span><br><span class="line">            <span class="built_in">this</span>.value = value;</span><br><span class="line">            <span class="built_in">this</span>.color = color;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 中序遍历</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">middleShow</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (nonNull(left))</span><br><span class="line">                left.middleShow();</span><br><span class="line">            System.out.println(<span class="string">&quot;key：&quot;</span> + key + <span class="string">&quot;，value：&quot;</span> + value);</span><br><span class="line">            <span class="keyword">if</span> (nonNull(right))</span><br><span class="line">                right.middleShow();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2）左旋、右旋">2）左旋、右旋</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 左旋 &lt;br /&gt;</span></span><br><span class="line"><span class="comment"> * 1、将右子树的父节点 -&gt; 当前节点的父节点 &lt;br /&gt;</span></span><br><span class="line"><span class="comment"> * 2、将当前节点的父节点 -&gt; 右子树的左节点 | 右儿子变爸爸，爸爸变左儿子 &lt;br /&gt;</span></span><br><span class="line"><span class="comment"> * 3、原先右节点的左子树 -&gt; 改为当前节点的右节点 &lt;br /&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">leftRotate</span><span class="params">(BRTreeNode&lt;K, V&gt; node)</span> &#123;</span><br><span class="line">    BRTreeNode&lt;K, V&gt; right = node.right;</span><br><span class="line">    BRTreeNode&lt;K, V&gt; parent = node.parent;</span><br><span class="line">    BRTreeNode&lt;K, V&gt; leftByRight = right.left;</span><br><span class="line">    <span class="comment">// 1、将右子树的父节点 -&gt; 当前节点的父节点</span></span><br><span class="line">    <span class="keyword">if</span> (nonNull(parent)) &#123;</span><br><span class="line">        right.parent = parent;</span><br><span class="line">        parent.right = right;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        right.parent = <span class="literal">null</span>;</span><br><span class="line">        <span class="built_in">this</span>.root = right;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2、将当前节点的父节点 -&gt; 左子树的左节点 | 左儿子变爸爸，爸爸变右儿子</span></span><br><span class="line">    right.left = node;</span><br><span class="line">    node.parent = right;</span><br><span class="line">    <span class="comment">// 3、原先右节点的左子树 -&gt; 改为当前节点的右节点</span></span><br><span class="line">    node.right = leftByRight;</span><br><span class="line">    <span class="keyword">if</span> (nonNull(leftByRight)) &#123;</span><br><span class="line">        leftByRight.parent = node;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 右旋 &lt;br /&gt;</span></span><br><span class="line"><span class="comment"> * 1、将左子树的父节点 -&gt; 当前节点的父节点 &lt;br /&gt;</span></span><br><span class="line"><span class="comment"> * 2、将当前节点的父节点 -&gt; 左子树的右节点 | 左儿子变爸爸，爸爸变右儿子 &lt;br /&gt;</span></span><br><span class="line"><span class="comment"> * 3、原先左节点的右子树 -&gt; 改为当前节点的左节点 &lt;br /&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> node 当前红黑树</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">rightRotate</span><span class="params">(BRTreeNode&lt;K, V&gt; node)</span> &#123;</span><br><span class="line">    BRTreeNode&lt;K, V&gt; left = node.left;</span><br><span class="line">    BRTreeNode&lt;K, V&gt; parent = node.parent;</span><br><span class="line">    BRTreeNode&lt;K, V&gt; rightByLeft = left.right;</span><br><span class="line">    <span class="comment">// 1、将左子树的父节点 -&gt; 当前节点的父节点</span></span><br><span class="line">    <span class="keyword">if</span> (nonNull(parent)) &#123;</span><br><span class="line">        left.parent = parent;</span><br><span class="line">        parent.left = left;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        left.parent = <span class="literal">null</span>;</span><br><span class="line">        <span class="built_in">this</span>.root = left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2、将当前节点的父节点 -&gt; 左子树的右节点 | 左儿子变爸爸，爸爸变右儿子</span></span><br><span class="line">    left.right = node;</span><br><span class="line">    node.parent = left;</span><br><span class="line">    <span class="comment">// 3、原先左子树的右子树 -&gt; 改为当前节点的左节点</span></span><br><span class="line">    node.left = rightByLeft;</span><br><span class="line">    <span class="keyword">if</span> (nonNull(rightByLeft)) &#123;</span><br><span class="line">        rightByLeft.parent = node;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3）插入节点">3）插入节点</h3><p>这里插入节点，采用了这种模式，<b>如果节点<code>key</code>相等，则进行节点的替换</b></p><p>大家可可以根据自己的策略需要来理解红黑树</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 插入</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 旧值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> V <span class="title function_">add</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (Objects.isNull(<span class="built_in">this</span>.root)) &#123;</span><br><span class="line">        <span class="built_in">this</span>.root = <span class="keyword">new</span> <span class="title class_">BRTreeNode</span>&lt;&gt;(key, value);</span><br><span class="line">        <span class="built_in">this</span>.root.toggleColor();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Optional.ofNullable(root.insert(<span class="keyword">new</span> <span class="title class_">BRTreeNode</span>&lt;&gt;(key, value), <span class="built_in">this</span>))</span><br><span class="line">                .map(BRTreeNode::getValue)</span><br><span class="line">                .orElse(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">BRTreeNode</span>&lt;K <span class="keyword">extends</span> <span class="title class_">Comparable</span>&lt;K&gt;, V&gt; &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node 插入的节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 旧节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> BRTreeNode&lt;K, V&gt; <span class="title function_">insert</span><span class="params">(BRTreeNode&lt;K, V&gt; node, BRTree&lt;K, V&gt; tree)</span> &#123;</span><br><span class="line">        <span class="type">K</span> <span class="variable">thisKey</span> <span class="operator">=</span> <span class="built_in">this</span>.key;</span><br><span class="line">        <span class="type">K</span> <span class="variable">insertKey</span> <span class="operator">=</span> node.getKey();</span><br><span class="line">        <span class="type">int</span> <span class="variable">compare</span> <span class="operator">=</span> thisKey.compareTo(insertKey);</span><br><span class="line">        <span class="comment">// 当key值相等，则说明要进行替换</span></span><br><span class="line">        <span class="keyword">if</span> (compare == <span class="number">0</span>) &#123;</span><br><span class="line">            node.parent = <span class="built_in">this</span>.parent;</span><br><span class="line">            <span class="keyword">if</span> (Objects.isNull(<span class="built_in">this</span>.parent)) &#123;</span><br><span class="line">                tree.root = node;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (nonNull(<span class="built_in">this</span>.left)) &#123;</span><br><span class="line">                <span class="built_in">this</span>.left.parent = node;</span><br><span class="line">                node.setLeft(<span class="built_in">this</span>.left);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (nonNull(<span class="built_in">this</span>.right)) &#123;</span><br><span class="line">                <span class="built_in">this</span>.right.parent = node;</span><br><span class="line">                node.setRight(<span class="built_in">this</span>.right);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 颜色需要变得和当前节点一样</span></span><br><span class="line">            node.setColor(<span class="built_in">this</span>.color);</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 当前key比较大，需要放置左边</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (compare &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nonNull(<span class="built_in">this</span>.left)) &#123;</span><br><span class="line">                <span class="built_in">this</span>.left.insert(node, tree);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.left = node;</span><br><span class="line">                node.parent = <span class="built_in">this</span>;</span><br><span class="line">                node.balanceTree(<span class="literal">true</span>, tree);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 当前key比较小，需要放置右边</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (nonNull(<span class="built_in">this</span>.right)) &#123;</span><br><span class="line">                <span class="built_in">this</span>.right.insert(node, tree);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.right = node;</span><br><span class="line">                node.parent = <span class="built_in">this</span>;</span><br><span class="line">                node.balanceTree(<span class="literal">false</span>, tree);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 变色</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">toggleColor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.color = !<span class="built_in">this</span>.color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 平衡tree&lt;br /&gt;</span></span><br><span class="line"><span class="comment">     * 1、双红，且叔叔节点存在; 将父节点和叔叔节点变成黑色，爷爷节点变成红色; 后续处理 &lt;br /&gt;</span></span><br><span class="line"><span class="comment">     * 2、左左红，且叔叔节点不存在 &lt;br /&gt;</span></span><br><span class="line"><span class="comment">     * 3、左右红，且叔叔节点不存在 &lt;br /&gt;</span></span><br><span class="line"><span class="comment">     * 4、右右红，且叔叔节点不存在 &lt;br /&gt;</span></span><br><span class="line"><span class="comment">     * 5、右左红，且叔叔节点不存在 &lt;br /&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> left 当前节点是不是左子节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tree 当前红黑树</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">balanceTree</span><span class="params">(<span class="type">boolean</span> left, BRTree&lt;K, V&gt; tree)</span> &#123;</span><br><span class="line">        <span class="comment">// 双红</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">doubleRed</span> <span class="operator">=</span> RED.equals(<span class="built_in">this</span>.parent.getColor());</span><br><span class="line">        <span class="comment">// 叔叔节点是否存在</span></span><br><span class="line">        BRTreeNode&lt;K, V&gt; grandParentNode = <span class="built_in">this</span>.parent.parent;</span><br><span class="line">        BRTreeNode&lt;K, V&gt; uncleNode = <span class="literal">null</span>;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">existsUncle</span> <span class="operator">=</span> nonNull(grandParentNode) &amp;&amp; nonNull(uncleNode = left ? grandParentNode.getRight() : grandParentNode.getLeft());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 双红，且叔叔节点存在</span></span><br><span class="line">        <span class="keyword">if</span> (doubleRed &amp;&amp; existsUncle) &#123;</span><br><span class="line">            <span class="built_in">this</span>.toggleTreeColor(uncleNode, tree);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (doubleRed) &#123;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">parentLeft</span> <span class="operator">=</span> grandParentNode.getLeft() == <span class="built_in">this</span>.parent;</span><br><span class="line">            <span class="comment">// 左左红</span></span><br><span class="line">            <span class="keyword">if</span> (parentLeft &amp;&amp; left) &#123;</span><br><span class="line">                leftLeftRed(tree);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 左右红</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (parentLeft) &#123;</span><br><span class="line">                <span class="comment">// 先左旋，变成左左红的情况</span></span><br><span class="line">                tree.leftRotate(<span class="built_in">this</span>.parent);</span><br><span class="line">                <span class="built_in">this</span>.left.leftLeftRed(tree);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 右右红</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (!left) &#123;</span><br><span class="line">                rightRightRed(tree);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 右左红</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 先右旋，变成右右红的情况</span></span><br><span class="line">                tree.rightRotate(<span class="built_in">this</span>.parent);</span><br><span class="line">                <span class="built_in">this</span>.right.rightRightRed(tree);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 变色 &lt;br /&gt;</span></span><br><span class="line"><span class="comment">     * 1、将父节点和叔叔节点变成黑色 &lt;br /&gt;</span></span><br><span class="line"><span class="comment">     * 2、爷爷节点变成红色 &lt;br /&gt;</span></span><br><span class="line"><span class="comment">     * 3、递归后续处理 &lt;br /&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uncleNode 叔叔节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tree 当前的红黑树</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">toggleTreeColor</span><span class="params">(BRTreeNode&lt;K, V&gt; uncleNode, BRTree&lt;K, V&gt; tree)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.parent.toggleColor();</span><br><span class="line">        uncleNode.toggleColor();</span><br><span class="line">        BRTreeNode&lt;K, V&gt; grandParentNode = <span class="built_in">this</span>.parent.parent;</span><br><span class="line">        grandParentNode.toggleColor();</span><br><span class="line">        <span class="comment">// 查看爷爷节点是不是根节点</span></span><br><span class="line">        <span class="keyword">if</span> (Objects.isNull(grandParentNode.parent)) &#123;</span><br><span class="line">            <span class="comment">// 需要重新变为黑色</span></span><br><span class="line">            grandParentNode.toggleColor();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 递归处理后续</span></span><br><span class="line">            grandParentNode.balanceTree(grandParentNode.parent.getLeft() == grandParentNode, tree);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 左左红 &lt;br /&gt;</span></span><br><span class="line"><span class="comment">     * 1、将父节点变成黑色，爷爷节点变成红色 &lt;br /&gt;</span></span><br><span class="line"><span class="comment">     * 2、将爷爷节点进行右旋 &lt;br /&gt;</span></span><br><span class="line"><span class="comment">     * 3、递归后续处理 &lt;br /&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">leftLeftRed</span><span class="params">(BRTree&lt;K, V&gt; tree)</span> &#123;</span><br><span class="line">        <span class="comment">// 将父节点变成黑色，爷爷节点变成红色</span></span><br><span class="line">        <span class="built_in">this</span>.parent.toggleColor();</span><br><span class="line">        BRTreeNode&lt;K, V&gt; grandParentNode = <span class="built_in">this</span>.parent.parent;</span><br><span class="line">        grandParentNode.toggleColor();</span><br><span class="line">        <span class="comment">// 将爷爷节点进行右旋</span></span><br><span class="line">        tree.rightRotate(grandParentNode);</span><br><span class="line">        <span class="comment">// 递归后续处理</span></span><br><span class="line">        <span class="keyword">if</span> (nonNull(grandParentNode.parent)) &#123;</span><br><span class="line">            grandParentNode.balanceTree(grandParentNode.parent.getLeft() == grandParentNode, tree);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 右右红 &lt;br /&gt;</span></span><br><span class="line"><span class="comment">     * 1、变色，父节点变成黑色，爷爷节点变成红色 &lt;br /&gt;</span></span><br><span class="line"><span class="comment">     * 2、将爷爷节点进行左旋 &lt;br /&gt;</span></span><br><span class="line"><span class="comment">     * 3、递归后续处理 &lt;br /&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tree 当前红黑树</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">rightRightRed</span><span class="params">(BRTree&lt;K, V&gt; tree)</span> &#123;</span><br><span class="line">        <span class="comment">// 将父节点变成黑色，爷爷节点变成红色</span></span><br><span class="line">        <span class="built_in">this</span>.parent.toggleColor();</span><br><span class="line">        BRTreeNode&lt;K, V&gt; grandParentNode = <span class="built_in">this</span>.parent.parent;</span><br><span class="line">        grandParentNode.toggleColor();</span><br><span class="line">        <span class="comment">// 将爷爷节点进行左旋</span></span><br><span class="line">        tree.leftRotate(grandParentNode);</span><br><span class="line">        <span class="comment">// 递归后续处理</span></span><br><span class="line">        <span class="keyword">if</span> (nonNull(grandParentNode.parent)) &#123;</span><br><span class="line">            grandParentNode.balanceTree(grandParentNode.parent.getLeft() == grandParentNode, tree);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五、完整代码">五、完整代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.datastructure.RedBlackTree;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"><span class="keyword">import</span> java.util.Optional;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.util.Objects.nonNull;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 红黑树</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;K&gt; 键</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;V&gt; 值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BRTree</span>&lt;K <span class="keyword">extends</span> <span class="title class_">Comparable</span>&lt;K&gt;, V&gt; &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 红黑树颜色-红</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Boolean</span> <span class="variable">RED</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 红黑树颜色-黑</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Boolean</span> <span class="variable">BLACK</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> BRTreeNode&lt;K, V&gt; root;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>  <span class="title function_">BRTree</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">        root = <span class="keyword">new</span> <span class="title class_">BRTreeNode</span>&lt;&gt;(key, value, BLACK);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 中序遍历</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">middleShow</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (nonNull(root)) &#123;</span><br><span class="line">            <span class="keyword">return</span> root.middleShow();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 左旋 &lt;br /&gt;</span></span><br><span class="line"><span class="comment">     * 1、将右子树的父节点 -&gt; 当前节点的父节点 &lt;br /&gt;</span></span><br><span class="line"><span class="comment">     * 2、将当前节点的父节点 -&gt; 右子树的左节点 | 右儿子变爸爸，爸爸变左儿子 &lt;br /&gt;</span></span><br><span class="line"><span class="comment">     * 3、原先右节点的左子树 -&gt; 改为当前节点的右节点 &lt;br /&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">leftRotate</span><span class="params">(BRTreeNode&lt;K, V&gt; node)</span> &#123;</span><br><span class="line">        BRTreeNode&lt;K, V&gt; right = node.right;</span><br><span class="line">        BRTreeNode&lt;K, V&gt; parent = node.parent;</span><br><span class="line">        BRTreeNode&lt;K, V&gt; leftByRight = right.left;</span><br><span class="line">        <span class="comment">// 1、将右子树的父节点 -&gt; 当前节点的父节点</span></span><br><span class="line">        <span class="keyword">if</span> (nonNull(parent)) &#123;</span><br><span class="line">            right.parent = parent;</span><br><span class="line">            parent.right = right;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            right.parent = <span class="literal">null</span>;</span><br><span class="line">            <span class="built_in">this</span>.root = right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 2、将当前节点的父节点 -&gt; 左子树的左节点 | 左儿子变爸爸，爸爸变右儿子</span></span><br><span class="line">        right.left = node;</span><br><span class="line">        node.parent = right;</span><br><span class="line">        <span class="comment">// 3、原先右节点的左子树 -&gt; 改为当前节点的右节点</span></span><br><span class="line">        node.right = leftByRight;</span><br><span class="line">        <span class="keyword">if</span> (nonNull(leftByRight)) &#123;</span><br><span class="line">            leftByRight.parent = node;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 右旋 &lt;br /&gt;</span></span><br><span class="line"><span class="comment">     * 1、将左子树的父节点 -&gt; 当前节点的父节点 &lt;br /&gt;</span></span><br><span class="line"><span class="comment">     * 2、将当前节点的父节点 -&gt; 左子树的右节点 | 左儿子变爸爸，爸爸变右儿子 &lt;br /&gt;</span></span><br><span class="line"><span class="comment">     * 3、原先左节点的右子树 -&gt; 改为当前节点的左节点 &lt;br /&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node 当前红黑树</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">rightRotate</span><span class="params">(BRTreeNode&lt;K, V&gt; node)</span> &#123;</span><br><span class="line">        BRTreeNode&lt;K, V&gt; left = node.left;</span><br><span class="line">        BRTreeNode&lt;K, V&gt; parent = node.parent;</span><br><span class="line">        BRTreeNode&lt;K, V&gt; rightByLeft = left.right;</span><br><span class="line">        <span class="comment">// 1、将左子树的父节点 -&gt; 当前节点的父节点</span></span><br><span class="line">        <span class="keyword">if</span> (nonNull(parent)) &#123;</span><br><span class="line">            left.parent = parent;</span><br><span class="line">            parent.left = left;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            left.parent = <span class="literal">null</span>;</span><br><span class="line">            <span class="built_in">this</span>.root = left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 2、将当前节点的父节点 -&gt; 左子树的右节点 | 左儿子变爸爸，爸爸变右儿子</span></span><br><span class="line">        left.right = node;</span><br><span class="line">        node.parent = left;</span><br><span class="line">        <span class="comment">// 3、原先左子树的右子树 -&gt; 改为当前节点的左节点</span></span><br><span class="line">        node.left = rightByLeft;</span><br><span class="line">        <span class="keyword">if</span> (nonNull(rightByLeft)) &#123;</span><br><span class="line">            rightByLeft.parent = node;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 旧值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> V <span class="title function_">add</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (Objects.isNull(<span class="built_in">this</span>.root)) &#123;</span><br><span class="line">            <span class="built_in">this</span>.root = <span class="keyword">new</span> <span class="title class_">BRTreeNode</span>&lt;&gt;(key, value);</span><br><span class="line">            <span class="built_in">this</span>.root.toggleColor();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Optional.ofNullable(root.insert(<span class="keyword">new</span> <span class="title class_">BRTreeNode</span>&lt;&gt;(key, value), <span class="built_in">this</span>))</span><br><span class="line">                    .map(BRTreeNode::getValue)</span><br><span class="line">                    .orElse(<span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">BRTreeNode</span>&lt;K <span class="keyword">extends</span> <span class="title class_">Comparable</span>&lt;K&gt;, V&gt; &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 键</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> K key;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 值</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> V value;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 颜色</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> Boolean color;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 父节点</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> BRTreeNode&lt;K, V&gt; parent;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 左子节点</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> BRTreeNode&lt;K, V&gt; left;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 右子节点</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> BRTreeNode&lt;K, V&gt; right;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">BRTreeNode</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>(key, value, RED);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">BRTreeNode</span><span class="params">(K key, V value, Boolean color)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.key = key;</span><br><span class="line">            <span class="built_in">this</span>.value = value;</span><br><span class="line">            <span class="built_in">this</span>.color = color;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 中序遍历</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">middleShow</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">            <span class="keyword">if</span> (nonNull(left))</span><br><span class="line">                sb.append(left.middleShow());</span><br><span class="line"><span class="comment">//            System.out.println(&quot;key：&quot; + key + &quot;，value：&quot; + value);</span></span><br><span class="line">            System.out.println(String.format(<span class="string">&quot;value: %s, 颜色: %s&quot;</span>, value, color ? <span class="string">&quot;红&quot;</span> : <span class="string">&quot;黑&quot;</span>));</span><br><span class="line">            sb.append(value + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (nonNull(right))</span><br><span class="line">                sb.append(right.middleShow());</span><br><span class="line">            <span class="keyword">return</span> sb.toString();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 插入</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> node 插入的节点</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> 旧节点</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> BRTreeNode&lt;K, V&gt; <span class="title function_">insert</span><span class="params">(BRTreeNode&lt;K, V&gt; node, BRTree&lt;K, V&gt; tree)</span> &#123;</span><br><span class="line">            <span class="type">K</span> <span class="variable">thisKey</span> <span class="operator">=</span> <span class="built_in">this</span>.key;</span><br><span class="line">            <span class="type">K</span> <span class="variable">insertKey</span> <span class="operator">=</span> node.getKey();</span><br><span class="line">            <span class="type">int</span> <span class="variable">compare</span> <span class="operator">=</span> thisKey.compareTo(insertKey);</span><br><span class="line">            <span class="comment">// 当key值相等，则说明要进行替换</span></span><br><span class="line">            <span class="keyword">if</span> (compare == <span class="number">0</span>) &#123;</span><br><span class="line">                node.parent = <span class="built_in">this</span>.parent;</span><br><span class="line">                <span class="keyword">if</span> (Objects.isNull(<span class="built_in">this</span>.parent)) &#123;</span><br><span class="line">                    tree.root = node;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (nonNull(<span class="built_in">this</span>.left)) &#123;</span><br><span class="line">                    <span class="built_in">this</span>.left.parent = node;</span><br><span class="line">                    node.setLeft(<span class="built_in">this</span>.left);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (nonNull(<span class="built_in">this</span>.right)) &#123;</span><br><span class="line">                    <span class="built_in">this</span>.right.parent = node;</span><br><span class="line">                    node.setRight(<span class="built_in">this</span>.right);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 颜色需要变得和当前节点一样</span></span><br><span class="line">                node.setColor(<span class="built_in">this</span>.color);</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 当前key比较大，需要放置左边</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (compare &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nonNull(<span class="built_in">this</span>.left)) &#123;</span><br><span class="line">                    <span class="built_in">this</span>.left.insert(node, tree);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="built_in">this</span>.left = node;</span><br><span class="line">                    node.parent = <span class="built_in">this</span>;</span><br><span class="line">                    node.balanceTree(<span class="literal">true</span>, tree);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 当前key比较小，需要放置右边</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (nonNull(<span class="built_in">this</span>.right)) &#123;</span><br><span class="line">                    <span class="built_in">this</span>.right.insert(node, tree);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="built_in">this</span>.right = node;</span><br><span class="line">                    node.parent = <span class="built_in">this</span>;</span><br><span class="line">                    node.balanceTree(<span class="literal">false</span>, tree);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 变色</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">toggleColor</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.color = !<span class="built_in">this</span>.color;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 平衡tree&lt;br /&gt;</span></span><br><span class="line"><span class="comment">         * 1、双红，且叔叔节点存在; 将父节点和叔叔节点变成黑色，爷爷节点变成红色; 后续处理 &lt;br /&gt;</span></span><br><span class="line"><span class="comment">         * 2、左左红，且叔叔节点不存在 &lt;br /&gt;</span></span><br><span class="line"><span class="comment">         * 3、左右红，且叔叔节点不存在 &lt;br /&gt;</span></span><br><span class="line"><span class="comment">         * 4、右右红，且叔叔节点不存在 &lt;br /&gt;</span></span><br><span class="line"><span class="comment">         * 5、右左红，且叔叔节点不存在 &lt;br /&gt;</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> left 当前节点是不是左子节点</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> tree 当前红黑树</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">balanceTree</span><span class="params">(<span class="type">boolean</span> left, BRTree&lt;K, V&gt; tree)</span> &#123;</span><br><span class="line">            <span class="comment">// 双红</span></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">doubleRed</span> <span class="operator">=</span> RED.equals(<span class="built_in">this</span>.parent.getColor());</span><br><span class="line">            <span class="comment">// 叔叔节点是否存在</span></span><br><span class="line">            BRTreeNode&lt;K, V&gt; grandParentNode = <span class="built_in">this</span>.parent.parent;</span><br><span class="line">            BRTreeNode&lt;K, V&gt; uncleNode = <span class="literal">null</span>;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">existsUncle</span> <span class="operator">=</span> nonNull(grandParentNode) &amp;&amp; nonNull(uncleNode = left ? grandParentNode.getRight() : grandParentNode.getLeft());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 双红，且叔叔节点存在</span></span><br><span class="line">            <span class="keyword">if</span> (doubleRed &amp;&amp; existsUncle) &#123;</span><br><span class="line">                <span class="built_in">this</span>.toggleTreeColor(uncleNode, tree);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (doubleRed) &#123;</span><br><span class="line">                <span class="type">boolean</span> <span class="variable">parentLeft</span> <span class="operator">=</span> grandParentNode.getLeft() == <span class="built_in">this</span>.parent;</span><br><span class="line">                <span class="comment">// 左左红</span></span><br><span class="line">                <span class="keyword">if</span> (parentLeft &amp;&amp; left) &#123;</span><br><span class="line">                    leftLeftRed(tree);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 左右红</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (parentLeft) &#123;</span><br><span class="line">                    <span class="comment">// 先左旋，变成左左红的情况</span></span><br><span class="line">                    tree.leftRotate(<span class="built_in">this</span>.parent);</span><br><span class="line">                    <span class="built_in">this</span>.left.leftLeftRed(tree);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 右右红</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (!left) &#123;</span><br><span class="line">                    rightRightRed(tree);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 右左红</span></span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 先右旋，变成右右红的情况</span></span><br><span class="line">                    tree.rightRotate(<span class="built_in">this</span>.parent);</span><br><span class="line">                    <span class="built_in">this</span>.right.rightRightRed(tree);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 变色 &lt;br /&gt;</span></span><br><span class="line"><span class="comment">         * 1、将父节点和叔叔节点变成黑色 &lt;br /&gt;</span></span><br><span class="line"><span class="comment">         * 2、爷爷节点变成红色 &lt;br /&gt;</span></span><br><span class="line"><span class="comment">         * 3、递归后续处理 &lt;br /&gt;</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> uncleNode 叔叔节点</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> tree 当前的红黑树</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">toggleTreeColor</span><span class="params">(BRTreeNode&lt;K, V&gt; uncleNode, BRTree&lt;K, V&gt; tree)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.parent.toggleColor();</span><br><span class="line">            uncleNode.toggleColor();</span><br><span class="line">            BRTreeNode&lt;K, V&gt; grandParentNode = <span class="built_in">this</span>.parent.parent;</span><br><span class="line">            grandParentNode.toggleColor();</span><br><span class="line">            <span class="comment">// 查看爷爷节点是不是根节点</span></span><br><span class="line">            <span class="keyword">if</span> (Objects.isNull(grandParentNode.parent)) &#123;</span><br><span class="line">                <span class="comment">// 需要重新变为黑色</span></span><br><span class="line">                grandParentNode.toggleColor();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 递归处理后续</span></span><br><span class="line">                grandParentNode.balanceTree(grandParentNode.parent.getLeft() == grandParentNode, tree);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 左左红 &lt;br /&gt;</span></span><br><span class="line"><span class="comment">         * 1、将父节点变成黑色，爷爷节点变成红色 &lt;br /&gt;</span></span><br><span class="line"><span class="comment">         * 2、将爷爷节点进行右旋 &lt;br /&gt;</span></span><br><span class="line"><span class="comment">         * 3、递归后续处理 &lt;br /&gt;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">leftLeftRed</span><span class="params">(BRTree&lt;K, V&gt; tree)</span> &#123;</span><br><span class="line">            <span class="comment">// 将父节点变成黑色，爷爷节点变成红色</span></span><br><span class="line">            <span class="built_in">this</span>.parent.toggleColor();</span><br><span class="line">            BRTreeNode&lt;K, V&gt; grandParentNode = <span class="built_in">this</span>.parent.parent;</span><br><span class="line">            grandParentNode.toggleColor();</span><br><span class="line">            <span class="comment">// 将爷爷节点进行右旋</span></span><br><span class="line">            tree.rightRotate(grandParentNode);</span><br><span class="line">            <span class="comment">// 递归后续处理</span></span><br><span class="line">            <span class="keyword">if</span> (nonNull(grandParentNode.parent)) &#123;</span><br><span class="line">                grandParentNode.balanceTree(grandParentNode.parent.getLeft() == grandParentNode, tree);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 右右红 &lt;br /&gt;</span></span><br><span class="line"><span class="comment">         * 1、变色，父节点变成黑色，爷爷节点变成红色 &lt;br /&gt;</span></span><br><span class="line"><span class="comment">         * 2、将爷爷节点进行左旋 &lt;br /&gt;</span></span><br><span class="line"><span class="comment">         * 3、递归后续处理 &lt;br /&gt;</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> tree 当前红黑树</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">rightRightRed</span><span class="params">(BRTree&lt;K, V&gt; tree)</span> &#123;</span><br><span class="line">            <span class="comment">// 将父节点变成黑色，爷爷节点变成红色</span></span><br><span class="line">            <span class="built_in">this</span>.parent.toggleColor();</span><br><span class="line">            BRTreeNode&lt;K, V&gt; grandParentNode = <span class="built_in">this</span>.parent.parent;</span><br><span class="line">            grandParentNode.toggleColor();</span><br><span class="line">            <span class="comment">// 将爷爷节点进行左旋</span></span><br><span class="line">            tree.leftRotate(grandParentNode);</span><br><span class="line">            <span class="comment">// 递归后续处理</span></span><br><span class="line">            <span class="keyword">if</span> (nonNull(grandParentNode.parent)) &#123;</span><br><span class="line">                grandParentNode.balanceTree(grandParentNode.parent.getLeft() == grandParentNode, tree);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="六、最后">六、最后</h2><p>红黑树确实有点难理解，但只要了解其特性，就可以完美手撕红黑树！</p><p>上面的代码不是很全，因为差了删除节点的操作，但情况都是一样的。</p><p>简单叙述一下</p><ol><li class="lvl-3"><p>删除一个节点</p><ol><li class="lvl-6">如果它有左节点的话，左节点上位，来到删除节点的位置，来代替他</li></ol></li><li class="lvl-3"><p>接着就是判断是不是双红的情况了</p></li><li class="lvl-3"><p>如果是双红，走上面那个平衡的方法就好了</p></li></ol><p>我是半月，你我一同共勉！！！</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Neo4j入门</title>
      <link href="/archive/70e8cca4/"/>
      <url>/archive/70e8cca4/</url>
      
        <content type="html"><![CDATA[<h1>Neo4j入门</h1><h2 id="一、介绍">一、介绍</h2><p>Neo4j是一个开源的图形数据库管理系统，它基于Java语言开发。与传统的关系型数据库不同，Neo4j使用图形结构来存储和查询数据，这使得它在处理复杂关系时更加高效和灵活。</p><p><b>Neo4j的核心特性包括</b>：</p><pre><code>1. 图形结构：Neo4j的数据模型是基于图的，每个节点表示一个实体，每个边表示两个实体之间的关系。这种结构使得Neo4j非常适合处理复杂的关系问题，例如社交网络、推荐系统等。2. 快速查询：由于Neo4j采用基于路径的查询方式，因此它的查询速度非常快。相比之下，传统的关系型数据库需要遍历整个表才能找到所需的数据，这会导致性能问题。3. 灵活性：Neo4j支持动态模式，这意味着它可以轻松地适应不断变化的数据模式。此外，Neo4j还支持ACID事务，确保数据的一致性和可靠性。4. 可扩展性：Neo4j可以通过添加更多的节点和边来扩展其数据模型，这使得它非常适合处理大规模数据集。此外，Neo4j还支持集群部署，以提高可扩展性和容错能力。</code></pre><p>总之，Neo4j是一个功能强大、灵活、高效的图形数据库管理系统，适用于处理各种复杂的关系问题。</p><p><b>Neo4j的优点和缺点</b>：</p><p>优点：</p><pre><code>1. 高效的数据模型：Neo4j采用基于图的数据模型，可以更加高效地处理复杂的关系问题。相比之下，传统的关系型数据库需要遍历整个表才能找到所需的数据，这会导致性能问题。2. 灵活的数据操作：Neo4j支持动态模式，可以轻松地适应不断变化的数据模式。此外，Neo4j还支持ACID事务，确保数据的一致性和可靠性。3. 易于扩展：Neo4j可以通过添加更多的节点和边来扩展其数据模型，这使得它非常适合处理大规模数据集。此外，Neo4j还支持集群部署，以提高可扩展性和容错能力。4. 可视化工具：Neo4j提供了一些可视化工具，如Cypher和Gremlin,可以帮助用户更加方便地管理和查询数据。</code></pre><p>缺点：</p><pre><code>1. 学习成本高：相对于传统的关系型数据库，Neo4j的学习成本较高，需要一定的学习曲线。2. 不支持SQL:Neo4j不支持SQL语言，需要使用Cypher或Gremlin等专门的语言进行查询和管理。</code></pre><p>对比MySQL数据库：</p><p>与MySQL数据库相比，Neo4j的优点在于它更加适合处理复杂的关系问题，具有更高的效率和灵活性。而MySQL则更加适合处理结构化数据，具有更好的扩展性和可靠性。因此，选择使用哪种数据库取决于具体的应用场景和需求。如果需要处理复杂的关系问题，建议使用Neo4j;如果需要处理结构化数据，建议使用MySQL。</p><h2 id="二、安装">二、安装</h2><h3 id="1）官网下载">1）官网下载</h3><p>官网下载中心：<a href="https://go.neo4j.com/download-thanks.html?edition=community&amp;release=3.5.28&amp;flavour=winzip">https://go.neo4j.com/download-thanks.html?edition=community&amp;release=3.5.28&amp;flavour=winzip</a></p><p>直接下载解压就可以，进入<code>bin</code>目录，黑框启动，如下</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20230510111033.png" alt="image-20230509224317540" /></p><p>打开<code>http://localhost:7474</code>，输入账号密码<code>neo4j</code>，<code>neo4j</code>就成功启动啦</p><h3 id="2）Docker镜像容器">2）Docker镜像容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker pull neo4j:3.5.28-community</span><br><span class="line"></span><br><span class="line">docker run -d -p 7474:7474 -p 7687:7687 --name neo4j -e &quot;NE04J_AUTH=neo4j/123456&quot; -v /usr/local/soft/neo4j/data:/data -v /usr/local/soft/neo4j/logs:/logs -v /usr/local/soft/neo4j/conf:/var/lib/neo4j/conf -v /usr/local/soft/neo4j/import:/var/lib/neo4j/import neo4j:3.5.28-community</span><br></pre></td></tr></table></figure><p>这个就不演示了</p><h2 id="三、CQL语句">三、CQL语句</h2><p>官网：<a href="https://neo4j.com/docs/cypher-manual/5/clauses/">Clauses - Cypher Manual (neo4j.com)</a></p><h3 id="1）create">1）create</h3><p>创建没什么好说的，可以创建节点、关系</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// 创建一个单独的节点</span><br><span class="line">create (n:person &#123;name:&#x27;半月无霜&#x27;&#125;) return n</span><br><span class="line"></span><br><span class="line">// 创建多个独立的节点</span><br><span class="line">create (n:person &#123;name:&#x27;小明&#x27;&#125;),(m:person &#123;name:&#x27;小红&#x27;&#125;) return n,m</span><br><span class="line"></span><br><span class="line">// 创建多个节点，且节点之间有关系</span><br><span class="line">create (n:person &#123;name:&#x27;孙悟空&#x27;&#125;)-[r:关系 &#123;label: &#x27;师弟&#x27;&#125;]-&gt;(m:person &#123;name:&#x27;猪八戒&#x27;&#125;) return n,m</span><br><span class="line"></span><br><span class="line">// 创建一个关系，作用于已有的节点</span><br><span class="line">// 本质就是先查询出两个节点，再创建这两个节点的关系</span><br><span class="line">match (n:person),(m:person)</span><br><span class="line">where n.name = &#x27;小明&#x27; and m.name = &#x27;小红&#x27;</span><br><span class="line">create (n)-[r:关系 &#123;label: &#x27;同学&#x27;&#125;]-&gt;(m)</span><br><span class="line">return n.name, r.label, m.name</span><br></pre></td></tr></table></figure><h3 id="2）delete">2）delete</h3><p>删除节点，关系</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// 删除节点，先查询到，再删除</span><br><span class="line">match (n:person &#123;name: &#x27;半月无霜&#x27;&#125;) delete n</span><br><span class="line">// 也可以使用where进行查询</span><br><span class="line">match (n:person) where n.name = &#x27;半月无霜&#x27; delete n</span><br><span class="line"></span><br><span class="line">// 如果删除节点报错，可能是因为节点上有关系，要先删除关系，才能把节点删除</span><br><span class="line">// 删除节点上的所有关系，并删除该节点</span><br><span class="line">match (n:person)-[r:`关系`]-()</span><br><span class="line">where n.name = &#x27;小明&#x27;</span><br><span class="line">delete r,n</span><br><span class="line"></span><br><span class="line">// 删除关系，但不删除节点</span><br><span class="line">match ()-[r:`关系`]-&gt;()</span><br><span class="line">where r.label = &#x27;师弟&#x27;</span><br><span class="line">delete r</span><br></pre></td></tr></table></figure><h3 id="3）set、remove">3）set、remove</h3><ul class="lvl-0"><li class="lvl-2"><p><b>set</b>：节点上面有属性，我们可以对其进行更新</p></li><li class="lvl-2"><p><b>remove</b>：节点上面有属性，我们可以对其进行移除</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// 修改节点的属性</span><br><span class="line">match (n:person &#123;name: &#x27;小红&#x27;&#125;) set n.name = &#x27;红孩儿&#x27;</span><br><span class="line"></span><br><span class="line">// 修改关系的属性，比如说孙悟空的师父是猪八戒，这明显是错误的，我们要将其纠正</span><br><span class="line">match (n:person &#123;name: &#x27;孙悟空&#x27;&#125;)-[r:`关系`]-&gt;(m:person &#123;name: &#x27;猪八戒&#x27;&#125;)</span><br><span class="line">set r.label = &#x27;师弟&#x27;</span><br><span class="line">return n,r,m</span><br><span class="line"></span><br><span class="line">// 修改节点的label</span><br><span class="line">match (n:person)</span><br><span class="line">set n:`西游记`</span><br><span class="line">remove n:person</span><br><span class="line"></span><br><span class="line">// 删除节点的一个属性，并新增外号</span><br><span class="line">match (n:`西游记` &#123;name: &#x27;孙悟空&#x27;&#125;),(m:`西游记` &#123;name: &#x27;红孩儿&#x27;&#125;),(l:`西游记` &#123;name: &#x27;猪八戒&#x27;&#125;)</span><br><span class="line">set n.nickname = &#x27;齐天大圣&#x27;, m.nickname = &#x27;牛圣婴&#x27;, l.nickname = &#x27;猪刚鬣&#x27;</span><br><span class="line">remove n.name,m.name,l.name</span><br><span class="line">return n</span><br></pre></td></tr></table></figure><h3 id="4）match">4）match</h3><p>用于匹配查找，上面已经用到了许多，不再详细展开了</p><p>上面的一些操作，简单来说就是</p><ol><li class="lvl-3"><p>先匹配找到节点或关系</p></li><li class="lvl-3"><p>再对其节点或关系进行操作</p></li></ol><p>上面没提到的操作关键字</p><table><thead><tr><th>关键字</th><th>说明</th></tr></thead><tbody><tr><td>return</td><td>返回结果</td></tr><tr><td>where</td><td>进行where条件匹配</td></tr></tbody></table><p>下面再来看几组匹配的查询把</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// 查询单独一个节点</span><br><span class="line">match (n:`西游记`)</span><br><span class="line">where n.nickname = &#x27;齐天大圣&#x27;</span><br><span class="line">return n</span><br><span class="line"></span><br><span class="line">// 如果查询其中的属性</span><br><span class="line">match (n:`西游记`)</span><br><span class="line">return n.nickname</span><br><span class="line"></span><br><span class="line">// 查询有师弟关系的所有节点</span><br><span class="line">match (n)-[r:`关系`]-&gt;(m)</span><br><span class="line">where r.label = &#x27;师弟&#x27;</span><br><span class="line">return n,r,m</span><br><span class="line"></span><br><span class="line">// 查询节点有关系的所有其他节点和关系，*代表的是层级关系，不填则为与节点的直接关系</span><br><span class="line">match p=(n:`西游记`)-[r*]-&gt;(m)</span><br><span class="line">where n.nickname = &#x27;齐天大圣&#x27;</span><br><span class="line">return p</span><br></pre></td></tr></table></figure><h2 id="四、最后">四、最后</h2><p>使用<code>Neo4j</code>学起来比以前的<code>MySQL</code>简单，但这仅仅是入门，后面估计还有很多坑没有踩呢。</p><p>我是半月，你我一同共勉！！！</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Neo4j </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker入门学习</title>
      <link href="/archive/88ad9c58/"/>
      <url>/archive/88ad9c58/</url>
      
        <content type="html"><![CDATA[<h1>Docker入门学习</h1><h2 id="一、介绍">一、介绍</h2><p>Docker是一个开源的容器化平台，可以将应用程序及其依赖以容器的形式封装，使其可以在任何环境中运行。Docker可以改善开发流程、提高应用程序的可移植性、简化系统配置、更易于维护等等。</p><p>Docker的优点包括：</p><ul class="lvl-0"><li class="lvl-2"><p>快速构建、部署和迭代</p></li><li class="lvl-2"><p>与多种编程语言和框架兼容</p></li><li class="lvl-2"><p>节省资源和成本</p></li><li class="lvl-2"><p>增强安全性</p></li></ul><p>Docker的官网为 <a href="https://www.docker.com/">https://www.docker.com/</a></p><h2 id="二、基础">二、基础</h2><h3 id="1）安装">1）安装</h3><p>我是在<code>centos7</code>上安装的<code>docker</code>，提供一个安装思路，可以安装下面的步骤进行安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在终端中输入以下命令以确保yum软件包管理器是最新的：</span></span><br><span class="line">sudo yum update</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装必要的依赖项：</span></span><br><span class="line">sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加Docker存储库：</span></span><br><span class="line">sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装Docker Engine：</span></span><br><span class="line">sudo yum install docker-ce docker-ce-cli containerd.io</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动Docker服务：</span></span><br><span class="line">sudo systemctl start docker</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">验证Docker是否已正确安装，以及docker的状态</span></span><br><span class="line">sudo docker -v</span><br><span class="line">sudo systemctl status docker</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">运行一个hello-world吧</span></span><br><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure><h3 id="2）概念">2）概念</h3><ul class="lvl-0"><li class="lvl-2"><p>镜像：就像一个包，里面有<code>linux、jdk、redis、mq、源代码</code>等一系列东西，自行组装打成的包。简单的说，镜像就是模板。</p></li><li class="lvl-2"><p>容器：我们将上面镜像的这个包，虚拟化运行在<code>docker</code>上，运行出的这个东西，我们称为容器。镜像中的东西，都会在容器里面。</p></li><li class="lvl-2"><p>仓库：如果一个镜像是一个包，那么很多个镜像的话，必须要存在一个地方存储。这个存储的地方我们称为仓库。</p></li></ul><p>我们可以自行创建自己的镜像，也可以使用自己的私有仓库。</p><p>当然啦，我们除了使用私有仓库，也可以使用<a href="https://hub.docker.com/">官方的仓库</a>。</p><p>一些通用的镜像，我们都可以再仓库找到。</p><h3 id="3）基本命令">3）基本命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动docker</span></span><br><span class="line">systemctl start docker</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">停止docker</span></span><br><span class="line">systemctl stop docker</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启docker</span></span><br><span class="line">systemctl restart docker</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看docker状态</span></span><br><span class="line">systemctl status docker</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">开机启动</span></span><br><span class="line">systemctl enable docker</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看docker信息</span></span><br><span class="line">docker info</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看docker帮助</span></span><br><span class="line">docker --help</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看docker具体命令帮助</span></span><br><span class="line">dcoker 具体命令 --help</span><br></pre></td></tr></table></figure><p>相关docker命令都可以再官网文档找到，如下</p><p><a href="https://docs.docker.com/engine/reference/commandline/cli/">Use the Docker command line | Docker Documentation</a></p><h3 id="4）镜像命令">4）镜像命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出本地的镜像</span></span><br><span class="line">docker images [OPTIONS] [REPOSITORY[:TAG]]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在仓库中查询镜像</span></span><br><span class="line">docker search [OPTIONS] TERM</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">从仓库中拉取镜像至本地</span></span><br><span class="line">docker pull [OPTIONS] NAME[:TAG|@DIGEST]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示docker磁盘使用情况</span></span><br><span class="line">docker system df [OPTIONS]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除一个或多个镜像</span></span><br><span class="line">docker rmi [OPTIONS] IMAGE [IMAGE...]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">导入镜像，将tar压缩包导入为镜像</span></span><br><span class="line">docker import [OPTIONS] file|URL|- [REPOSITORY[:TAG]]</span><br></pre></td></tr></table></figure><h3 id="5）容器命令">5）容器命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动容器</span></span><br><span class="line">docker run [OPTIONS] IMAGE [COMMAND] [ARG...]</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">例如，启动一个后台运行的nginx</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">例如，启动一个nginx，并进入其环境</span></span><br><span class="line">docker run --name=myNginx -it nginx /bin/bash</span><br></pre></td></tr></table></figure><p><b>option命令有很多，罗列一下常用的</b></p><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>–name</td><td>为容器指定一个名称</td></tr><tr><td>–detach<br />-d</td><td>在后台运行容器，并返回容器ID</td></tr><tr><td>–interactive<br />-i</td><td>以交互模式运行容器</td></tr><tr><td>–tty<br />-t</td><td>分配一个伪输入终端</td></tr><tr><td>-P</td><td>大写P，随机端口映射</td></tr><tr><td>-p</td><td>小写p，指定端口映射</td></tr></tbody></table><p>啊啊啊啊啊，具体看这里吧<a href="https://docs.docker.com/engine/reference/commandline/run/">docker run | Docker Documentation</a></p><hr /><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">罗列出当前正在运行的容器</span></span><br><span class="line">docker ps [OPTIONS]</span><br><span class="line">docker container ls [OPTIONS]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">退出容器，退出后容器会停止运行</span></span><br><span class="line">exit</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">退出容器，容器不会停止运行，会在后台运行</span></span><br><span class="line">ctrl+p+q</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入容器</span></span><br><span class="line">docker exec -it CONTAINER </span><br><span class="line">docker attach [OPTIONS] CONTAINER</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动已停止的容器</span></span><br><span class="line">docker start [OPTIONS] CONTAINER [CONTAINER...]</span><br><span class="line">docker container start [OPTIONS] CONTAINER [CONTAINER...]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启容器</span></span><br><span class="line">docker restart [OPTIONS] CONTAINER [CONTAINER...]</span><br><span class="line">docker container restart [OPTIONS] CONTAINER [CONTAINER...]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">停止容器</span></span><br><span class="line">docker stop [OPTIONS] CONTAINER [CONTAINER...]</span><br><span class="line">docker container stop [OPTIONS] CONTAINER [CONTAINER...]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">强制停止容器</span></span><br><span class="line">docker kill [OPTIONS] CONTAINER [CONTAINER...]</span><br><span class="line">docker container kill [OPTIONS] CONTAINER [CONTAINER...]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除容器</span></span><br><span class="line">docker rm [OPTIONS] CONTAINER [CONTAINER...]</span><br><span class="line">docker container rm [OPTIONS] CONTAINER [CONTAINER...]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看容器日志</span></span><br><span class="line">docker logs [OPTIONS] CONTAINER</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">返回容器的底层信息</span></span><br><span class="line">docker inspect [OPTIONS] NAME|ID [NAME|ID...]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示容器正在运行的进程</span></span><br><span class="line">docker top CONTAINER [ps OPTIONS]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">从容器中拷贝文件至宿主机</span></span><br><span class="line">docker cp [OPTIONS] CONTAINER:SRC_PATH DEST_PATH</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">从宿主机中拷贝文件至容器</span></span><br><span class="line">docker cp [OPTIONS] SRC_PATH CONTAINER:DEST_PATH</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">导出容器，将容器的文件系统导出为tar归档文件</span></span><br><span class="line">docker export [OPTIONS] CONTAINER</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建一个新镜像来自一个修改过的容器</span></span><br><span class="line">docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]</span><br></pre></td></tr></table></figure><blockquote><p>同样是重新进入容器，下面这两个有什么区别</p><ul class="lvl-1"><li class="lvl-2">docker exec -it CONTAINER</li><li class="lvl-2">docker attach [OPTIONS] CONTAINER</li></ul><p>exec会打开一个新的进程，我们在使用exit退出容器后，容器并不会停止运行</p><p>而attach不会打开一个新的进场，所以在使用exit退出后，容器会停止运行</p><p>故而，我们要么都使用exec命令进入容器，要么统一使用ctrl+p+q退出</p></blockquote><h3 id="6）其他命令">6）其他命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除所有镜像</span></span><br><span class="line">docker rmi -f $(docker images -aq)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除所有容器</span></span><br><span class="line">docker rm -f $(docker ps -aq)</span><br><span class="line">docker ps -aq | xargs docker rm</span><br></pre></td></tr></table></figure><h3 id="7）镜像推送至阿里云">7）镜像推送至阿里云</h3><ol><li class="lvl-3"><p>进入<a href="https://cr.console.aliyun.com/cn-hangzhou/instance/dashboard">容器镜像服务 (aliyun.com)</a></p></li><li class="lvl-3"><p>创建命名空间</p></li><li class="lvl-3"><p>创建镜像仓库</p></li><li class="lvl-3"><p>执行命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker login --username=半月无霜 registry.cn-hangzhou.aliyuncs.com</span><br><span class="line">docker tag [ImageId] registry.cn-hangzhou.aliyuncs.com/banmoon/tomcat:[镜像版本号]</span><br><span class="line">docker push registry.cn-hangzhou.aliyuncs.com/banmoon/tomcat:[镜像版本号]</span><br></pre></td></tr></table></figure></li></ol><h3 id="8）镜像私有库">8）镜像私有库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">拉取仓库镜像</span></span><br><span class="line">docker pull registry</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">运行容器，指定了数据卷</span></span><br><span class="line">docker run -d -p 5000:5000 -v /var/myregistry/:/var/lib/registry --privileged=true registry</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">上传前打tag标签</span></span><br><span class="line">docker tag hello-world:latest localhost:5000/hello-world:latest</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改daemon.json</span></span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://n7pzdkim.mirror.aliyuncs.com&quot;],</span><br><span class="line">  &quot;insecure-registries&quot;: [&quot;192.168.111.162:5000&quot;]</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">推送hello-world，一定得推送前面tag标签的那个镜像</span></span><br><span class="line">docker push localhost:5000/hello-world:latest</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看仓库中的镜像</span></span><br><span class="line">curl -XGET http://localhost:5000/v2/_catalog</span><br><span class="line"><span class="meta prompt_"># </span></span><br></pre></td></tr></table></figure><h2 id="三、进阶">三、进阶</h2><h3 id="1）数据卷">1）数据卷</h3><p>运行容器大家都会了，那么如果我们运行了一个容器，如果担心容器会宕机，导致容器中的数据丢失，那我们需要把重要的数据抽离出来，而这样的技术我们称为数据卷。</p><p>比如说，我启动了一个<code>mysql</code>的服务，保存到库里面的数据越来越多，非常重要。那这样的话，我们可以将<code>mysql</code>存储的路径直接改为宿主机的路径，两两进行映射。内部<code>mysql</code>容器宕机了，重要的数据还在宿主机上保留着。</p><p>同理<code>nginx</code>容器，我们可以把<code>config</code>目录做一个数据卷，我们只需要改动宿主机上目录的配置文件即可，非常快捷</p><hr /><p>在Docker中，使用<code>-v</code>参数来创建数据卷。参数的语法是：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -v &lt;host-path&gt;:&lt;container-path&gt; --privileged=true &lt;image&gt;</span><br></pre></td></tr></table></figure><p>其中，<code>&lt;host-path&gt;</code>是宿主机上的路径，<code>&lt;container-path&gt;</code>是容器内的路径，<code>&lt;image&gt;</code>是要运行的容器镜像。这个命令会将宿主机上的 <code>&lt;host-path&gt;</code> 目录映射到容器内的<code>&lt;container-path&gt;</code>。如果目录不存在，则会自动创建。</p><p>而<code>--privileged=true</code>参数是用来在容器中启用特权模式的。在特权模式下，容器将在宿主机上拥有与宿主机相同的权限，包括对系统硬件资源的访问权限、管理网络配置、mount文件系统等等，可能会对宿主机造成安全风险。</p><p>启用特权模式通常是在需要访问宿主机的底层资源或运行一些系统级别操作时使用的，比如安装内核模块或者进行网络配置等。但是，它也会增加容器被攻击的风险，因为容器中的应用程序可以执行攻击宿主机的行为。</p><p>因此，在实际生产环境中，应该谨慎使用特权模式并遵循特定的安全最佳实践。如果不需要使用特权模式，最好不要启用它，以减少容器被攻击的风险。</p><p>例如，要将宿主机上的 <code>/data</code> 目录映射到容器内的 <code>/app/data</code> 目录，可以使用以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -v /data:/app/data &lt;image&gt;</span><br></pre></td></tr></table></figure><p>注意，如果要在Windows系统中使用数据卷，需要使用反斜杠（<code>\</code>）而不是斜杠（<code>/</code>）。例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -v C:\data:/app/data &lt;image&gt;</span><br></pre></td></tr></table></figure><h4 id="1-1）读写规则">1.1）读写规则</h4><blockquote><p>读写规则，<code>:rw</code>和<code>:ro</code></p><p>默认情况下，Docker 数据卷的访问权限是可读可写（read-write）。也就是说，当你通过如下方式创建数据卷时：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -v /host/data:/container/data my_image</span><br></pre></td></tr></table></figure><p>这个数据卷将会是可读可写的。这意味着容器和宿主机都可以读取和写入这个数据卷中的文件。而且，如果容器删除了这个数据卷，那么这个数据卷上的数据也会被删除。</p><p>另一方面，如果你想将一个数据卷设置为只读（read-only），可以在挂载时使用 <code>:ro</code> 参数，例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -v /host/data:/container/data:ro my_image</span><br></pre></td></tr></table></figure><p>这个数据卷将会是只读的，这表示容器可以读取这个数据卷，但是不能写入到这个数据卷中，因此数据不会丢失。</p></blockquote><h4 id="1-2）继承">1.2）继承</h4><blockquote><p>Docker 数据卷的继承是指在一个容器中定义的数据卷，可以在该容器和其它基于该容器创建的容器之间进行继承和共享。这意味着容器之间可以通过共享数据卷来访问相同的数据，而无需在每个容器中创建和维护单独的数据副本。</p><p>数据卷继承的机制是基于 <code>--volumes-from</code> 参数实现的。例如，如果需要在一个新的容器中使用之前容器内的数据卷，可以使用以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --volumes-from old_container -v /host/data:/container/data my_image</span><br></pre></td></tr></table></figure><p>在上面的命令中，<code>--volumes-from</code> 参数用于从旧容器中继承数据卷。新容器可以使用容器内的数据卷，并将其挂载到本地主机上的 <code>/host/data</code> 目录和容器的 <code>/container/data</code> 目录中。</p><p>继承数据卷的好处是方便快捷，同一份数据可以在多个容器中共享，从而避免在每个容器中都需要对数据进行管理和维护的问题，同时能够大幅度节省存储资源。但是需要注意，在多个容器中共享数据时，需要谨慎考虑数据的修改，以避免数据冲突和损坏等问题。</p></blockquote><h3 id="2）搭建一个tomcat容器吧">2）搭建一个tomcat容器吧</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name=myTomcat -it -p 8080:8080 -v /var/tomcat/webapps:/usr/local/tomcat/webapps --privileged=true tomcat</span><br></pre></td></tr></table></figure><h3 id="3）Dockerfile">3）Dockerfile</h3><h4 id="3-1）介绍">3.1）介绍</h4><p><code>Dockerfile</code>是一个<b>脚本文件</b>，它包含一系列构建指令和参数，用于自动化<code>Docker</code>镜像的构建过程。通过<code>Dockerfile</code>，可以描述<code>Docker</code>镜像的详细信息，包括所需的操作系统、软件包、应用程序、环境变量等内容。<code>Docker</code>根据<code>Dockerfile</code>构建出一个可重现的<code>Docker</code>镜像，用于在运行时创建容器和环境。<code>Dockerfile</code>中的指令包括<mark>FROM、RUN、CMD、EXPOSE、ENV、ADD、COPY</mark>等命令，这些指令可以通过Dockerfile自动化创建Docker镜像的过程。</p><p><b><code>Dockerfile</code>解决了<code>Docker</code>容器部署和管理中的一些问题，例如</b>：</p><ol><li class="lvl-3"><p>镜像构建自动化：<code>Dockerfile</code>提供了一种自动化的方式来构建Docker镜像，大大简化了构建过程，并使得构建过程更加可靠和可重复。</p></li><li class="lvl-3"><p>环境一致性：<code>Dockerfile</code>可以确保在不同的环境下，相同的Docker镜像可以被准确地构建出来，从而保证环境一致性。</p></li><li class="lvl-3"><p>镜像版本管理：使用<code>Dockerfile</code>可以轻松地管理和维护多个Docker镜像版本，记录各个版本对应的构建步骤和配置。</p></li><li class="lvl-3"><p>可扩展性：使用<code>Dockerfile</code>可以很容易地构建出多个镜像版本，每个版本都可以基于现有的基础镜像（FROM命令）构建，并添加不同的软件包和应用程序。</p></li></ol><p>综上所述，<code>Dockerfile</code>可以使Docker容器的构建和管理变得更加简单、高效和可靠，并且可以提高<code>Docker</code>容器的可移植性和可扩展性。</p><p><code>Dockerfile</code>的官网参考，<a href="https://docs.docker.com/engine/reference/builder/">Dockerfile reference | Docker Documentation</a></p><h4 id="3-2）构建流程">3.2）构建流程</h4><p>Docker构建Dockerfile的大致流程如下：</p><ol><li class="lvl-3"><p>Docker客户端将Dockerfile和构建上下文（如果有的话）发送到Docker守护进程。</p></li><li class="lvl-3"><p>Docker守护进程解析Dockerfile并构建一个镜像的初始层。这通常是一个空的容器。</p></li><li class="lvl-3"><p>Docker守护进程创建每个镜像层，并向其添加文件系统更改或命令。</p></li><li class="lvl-3"><p>每个构建层都会与硬盘上的现有层进行比较，以检查现有层是否可以重用。如果可以重用，Docker将使用已有的层而不是创建新的。</p></li><li class="lvl-3"><p>Docker守护进程添加所有文件、目录、命令、环境变量等，以创建最终的映像。</p></li><li class="lvl-3"><p>Docker守护进程将新的映像保存在本地的映像库中。</p></li></ol><p>在构建Dockerfile时，需要注意以下几点：</p><ol><li class="lvl-3"><p>构建Dockerfile要在正确的上下文中进行。构建上下文是指在构建Docker镜像时需要添加到映像中的文件和目录等。</p></li><li class="lvl-3"><p>将Dockerfile保持简单和干净。Dockerfile需要在尽可能少的步骤中定义所有内容。</p></li><li class="lvl-3"><p>构建缓存机制可以提高构建速度，因此需要合理利用构建缓存机制。</p></li><li class="lvl-3"><p>构建过程中可能会发生错误和警告，需要及时进行修复和处理。</p></li></ol><p>因此，在构建Dockerfile时需要仔细考虑各种细节，以确保构建过程的正确性、高效性和可靠性。</p><h4 id="3-3）保留字指令">3.3）保留字指令</h4><p>Dockerfile中常用的保留字命令包括：</p><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>FROM</td><td>指定基础镜像，用于构建自定义镜像</td></tr><tr><td>MAINTAINER</td><td>指定镜像的作者和联系方式</td></tr><tr><td>RUN</td><td>在容器中执行命令，例如安装软件或运行脚本</td></tr><tr><td>CMD</td><td>定义容器启动时默认执行的命令或参数</td></tr><tr><td>ENTRYPOINT</td><td>定义容器启动时默认执行的命令或参数，但是可以在运行容器时覆盖CMD</td></tr><tr><td>EXPOSE</td><td>声明容器运行时需要监听的端口</td></tr><tr><td>ENV</td><td>设置环境变量</td></tr><tr><td>ADD</td><td>将文件或目录添加到容器中</td></tr><tr><td>COPY</td><td>将文件或目录复制到容器中</td></tr><tr><td>VOLUME</td><td>创建一个挂载点，可以在容器中挂载宿主机的目录</td></tr><tr><td>USER</td><td>指定容器中运行命令的用户</td></tr><tr><td>WORKDIR</td><td>指定容器中命令的工作目录</td></tr></tbody></table><p>这些保留字命令可以组合使用，构建出适合自己的Docker镜像。在编写Dockerfile时，应该注意这些命令的顺序和使用方法，以确保Docker镜像的正确、高效、可靠。</p><h4 id="3-4）为基础centos镜像升级">3.4）为基础centos镜像升级</h4><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基础centos镜像，添加上自己的东西</span></span><br><span class="line"><span class="keyword">FROM</span> centos</span><br><span class="line"><span class="keyword">MAINTAINER</span> banmoon&lt;banmoon@<span class="number">163</span>.com&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 工作目录</span></span><br><span class="line"><span class="keyword">ENV</span> MYPATH /usr/local</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> <span class="variable">$MYPATH</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装vim编辑器</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> yum -y install vim</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装ifconfig命令查看网络IP</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> yum -y install net-tools</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装java8及lib库</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> yum -y install glibc.i686</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">mkdir</span> /usr/local/java</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ADD是相对路径jar,把jdk8u171-linux-x64.tar.gz添加到容器中，安装包必须要和Dockerfile文件在同一位置</span></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> jdk-8u171-linux-x64.tar.gz /usr/local/java/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置java环境变量</span></span><br><span class="line"><span class="keyword">ENV</span> JAVA_HOME /usr/local/java/jdk1.<span class="number">8.0</span>_171</span><br><span class="line"><span class="keyword">ENV</span> JRE_HOME $JAVA_HOME/jre</span><br><span class="line"><span class="keyword">ENV</span> CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib:$CLASSPATH</span><br><span class="line"><span class="keyword">ENV</span> PATH $JAVA HOME/bin:SPATH</span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> <span class="built_in">echo</span> <span class="variable">$MYPATH</span></span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> <span class="built_in">echo</span> <span class="string">&quot;success--------------0k&quot;</span></span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> /bin/bash</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">构建命令，注意后面有个点</span></span><br><span class="line">docker build -t mycentos7:test .</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">完成后运行镜像</span></span><br><span class="line">docker run -it mycentos7:test</span><br></pre></td></tr></table></figure><h3 id="4）Docker网络">4）Docker网络</h3><p>Docker网络是一种用于在Docker主机和其他容器之间通信的网络体系结构。它提供了容器之间通信、容器与外部网络之间通信以及容器与主机之间通信的方法，同时也提供了安全性、弹性和性能方面的支持。</p><p>Docker网络有三种类型**：桥接网络、主机网络和覆盖网络**。</p><ol><li class="lvl-3"><p><b>桥接网络</b>：容器默认使用桥接网络模式，在该模式下，每个容器都被分配一个单独的网络命名空间，并控制了容器网络访问的权限。在同一个桥接网络中的容器可以通过容器名称或IP地址进行通信。</p></li><li class="lvl-3"><p><b>主机网络</b>：在主机网络模式下，Docker容器和主机使用同一个网络命名空间，容器可以直接使用主机的IP地址进行通信，但是它也会暴露主机上的所有端口。</p></li><li class="lvl-3"><p><b>覆盖网络</b>：覆盖网络基于Docker Swarm模式设计，它在多个Docker主机之间创建一个虚拟网络，允许容器在多个主机上使用相同的IP地址进行通信。每个虚拟网络都被赋予一个唯一标识符，并控制了容器访问网络的权限。</p></li></ol><p>使用Docker网络可以更好地管理容器之间的通信，并保证容器与外部网络的安全和隔离性。例如，Elastic Stack应用程序就可以使用Docker网络来实现不同组件之间的通信，实现更好的可伸缩性、弹性和容错性。</p><table><thead><tr><th>网络模式</th><th>说明</th></tr></thead><tbody><tr><td>bridge</td><td>桥接模式，<br />为每一个容器都分配、设置IP，并将其连接至一个<code>docker0</code>的虚拟网桥上<br />docker默认使用的网络模式</td></tr><tr><td>host</td><td>容器不再拥有自己的IP，而是直接使用宿主机的IP和端口</td></tr><tr><td>none</td><td>容器有独立的Network namespace，但并没有对其进行任何网络设置<br />有网络空间，但不用，无法外部通信</td></tr><tr><td>container</td><td>新创建的容器不会创建自己的网卡和配置自己的IP，而是和一个指定的容器共享IP、端口范围等</td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看当前的docker网络</span></span><br><span class="line">docker network ls</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建网络</span></span><br><span class="line">docker network create [OPTIONS] NETWORK</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除docker网络</span></span><br><span class="line">docker network rm NETWORK [NETWORK...]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示一个或多个网络的详细信息</span></span><br><span class="line">docker network inspect [OPTIONS] NETWORK [NETWORK...]</span><br></pre></td></tr></table></figure><blockquote><p><b>为什么需要docker网络，如何进行docker网络的编排？</b></p><p>Docker网络是必要的，因为容器需要网络连接，以便在不同的容器和主机之间进行通信以及与外部服务进行交互。Docker网络还提供了一些额外的功能，如容器发现、服务发现和负载均衡等。此外，Docker网络还可以提供安全性、维护性和可移植性等方面的支持。</p><p>Docker网络编排是指通过将多个Docker容器连接在一起来组装应用程序。Docker提供了多种方式来进行Docker网络编排，例如：</p><ol><li class="lvl-3"><p>可以使用docker create network命令来创建一个自定义网络，然后将容器连接到该网络中。</p></li><li class="lvl-3"><p>可以使用docker-compose命令来编排和管理多个容器和网络，包括定义多个容器之间的关系、配置容器的资源和环境变量等。</p></li><li class="lvl-3"><p>可以使用Docker Swarm来实现容器编排和管理，其中包括自动化的负载均衡、服务发现和网络管理等功能。</p></li></ol><p>Docker网络编排使得容器部署和管理更加方便和可靠，可以实现自动化、弹性、可扩展和可靠的容器架构。当需要管理大量Docker容器时，使用网络编排和自动化工具可以提高应用程序的可维护性和管理性，从而降低应用程序的总体成本。</p><p>从理解上来说，我们希望<code>springCloud</code>微服务打成的<code>jar</code>包之间可以相互的通信，要想注册进<code>nacos</code>，想用<code>gateway</code>网关进行访问的话，最好就是将这一些<code>jar</code>包配置成统一网段的IP，从而达到他们的访问。</p><p>还有一种情况就是，<code>MySQL</code>、<code>Redis</code>这些服务，在进行扩容或宕机重启后，我们的<code>jar</code>包连接服务指定的IP可以不用进行修改。也就是域名转发固定，或者是IP固定。</p></blockquote><hr /><p>查看一下，在Docker服务启动时的网络</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20230507134245.png" alt="image-20230505142613434" /></p><p>docker0是Docker默认创建的一个虚拟网桥，用于管理Docker容器的网络。Docker使用docker0网桥来将物理主机和Docker容器连接在同一个网络中。容器将被分配到docker0的子网中，并分配一个IP地址。容器可以连接到docker0网桥，与其他容器或外部网络通信。</p><p>当Docker容器被创建时，Docker会自动创建一个docker0网桥。docker0网桥是一个本地主机的虚拟网桥，与其他物理设备不同。Docker容器在启动时默认都会连接到docker0网桥，使得它们都能够进行网络通信。例如，当多个容器之间需要建立网络连接时，它们可以通过docker0网桥进行通信。</p><p>默认情况下，docker0网桥的IP地址是172.17.0.1，Docker会分配从这个网段内分配IP地址给Docker容器。可以通过使用docker network命令创建自定义网络，并通过将容器连接到自定义网络来实现更好的网络管理和更高的网络安全性。</p><p>总之，docker0网桥是Docker默认的虚拟网络设备，用于管理Docker容器的网络连接。可以通过自定义网络来扩展docker0网桥以实现更灵活的网络管理。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建一个network，默认是bridge模式</span></span><br><span class="line">docker network create my-net</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动一个容器，使用这个network</span></span><br><span class="line">docker run -itd --network=my-net busybox</span><br></pre></td></tr></table></figure><h3 id="5）Docker容器编排">5）Docker容器编排</h3><h4 id="5-1）介绍">5.1）介绍</h4><p>Docker的容器编排是一种管理和协调多个Docker容器的方法，使它们能够在集群中协同工作。它提供了一个简单的方式来定义、部署、扩展和管理Docker容器，从而实现容器集群的自动化管理。</p><p>通过容器编排，您可以轻松地创建多个容器，定义它们之间的依赖关系，以及协调它们之间的通信和交互。它还可以自动扩展容器集群，并确保高可用性和负载均衡。</p><p>目前市面上比较流行的Docker容器编排工具有<b>Kubernetes、Docker Compose、Swarm</b>等。这些工具可根据不同的需求进行选择和使用。</p><p>我们小节简单介绍使用<code>Docker Compose</code>。</p><p>如果<code>Dockerfile</code>是用来构建自定义镜像的话，那么<code>Docker Compose</code>就是用来，管理启动一个或多个容器的。</p><p>比如说吧，我有一组<code>springCloud</code>的<code>jar</code>包，还有一些服务<code>MySQL</code>、<code>Redis</code>等，他们有启动的前提条件，先后顺序等。</p><p>那么我们使用<code>Docker Compose</code>就可以一个<code>yaml</code>文件解决，我们只需要修改这份<code>yaml</code>文件即可，便可以<b>一键启动</b>。</p><h4 id="5-2）下载安装">5.2）下载安装</h4><p>官网文档：<a href="https://docs.docker.com/compose/compose-file/compose-file-v3/">Compose file version 3 reference | Docker Documentation</a></p><p>官网下载：<a href="https://docs.docker.com/compose/install/">Overview | Docker Documentation</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">第一步：下载</span></span><br><span class="line">DOCKER_CONFIG=$&#123;DOCKER_CONFIG:-$HOME/.docker&#125;</span><br><span class="line">mkdir -p $DOCKER_CONFIG/cli-plugins</span><br><span class="line">curl -SL https://github.com/docker/compose/releases/download/v2.17.2/docker-compose-linux-x86_64 -o $DOCKER_CONFIG/cli-plugins/docker-compose</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">第二步：设置权限</span></span><br><span class="line">chmod +x $DOCKER_CONFIG/cli-plugins/docker-compose</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">第三步：验证</span></span><br><span class="line">docker compose version</span><br></pre></td></tr></table></figure><h4 id="5-3）常用命令">5.3）常用命令</h4><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><code>docker-compose up</code></td><td>启动容器</td></tr><tr><td><code>docker-compose up -d</code></td><td>启动容器并后台运行</td></tr><tr><td><code>docker-compose down</code></td><td>停止并删除容器</td></tr><tr><td><code>docker-compose pause</code></td><td>暂停容器</td></tr><tr><td><code>docker-compose unpause</code></td><td>恢复容器</td></tr><tr><td><code>docker-compose ps</code></td><td>查看容器状态</td></tr><tr><td><code>docker-compose exec</code></td><td>执行容器中的命令</td></tr><tr><td><code>docker-compose logs</code></td><td>查看容器日志</td></tr><tr><td><code>docker-compose up --force-recreate</code></td><td>重建容器</td></tr><tr><td><code>docker-compose version</code></td><td>查看docker-compose版本</td></tr><tr><td><code>docker-compose build</code></td><td>构建镜像</td></tr><tr><td><code>docker-compose start</code></td><td>启动已经创建的容器</td></tr><tr><td><code>docker-compose stop</code></td><td>停止容器</td></tr><tr><td><code>docker-compose restart</code></td><td>重启容器</td></tr><tr><td><code>docker-compose kill</code></td><td>强制停止正在运行的容器</td></tr><tr><td><code>docker-compose rm</code></td><td>删除容器</td></tr><tr><td><code>docker-compose pull</code></td><td>从镜像仓库中拉取镜像</td></tr><tr><td><code>docker-compose config</code></td><td>检查docker-compose文件，是否格式正确</td></tr><tr><td><code>docker-compose up --build</code></td><td>构建镜像并启动容器</td></tr><tr><td><code>docker-compose up -d --no-deps</code></td><td>启动容器，并不启动依赖容器</td></tr><tr><td><code>docker-compose logs -f</code></td><td>查看容器日志，实时输出</td></tr><tr><td><code>docker-compose run</code></td><td>运行一个一次性的命令，例如数据迁移</td></tr><tr><td><code>docker-compose scale</code></td><td>手动扩展或缩小服务数量</td></tr><tr><td><code>docker-compose config</code></td><td>检查docker-compose.yml文件是否格式正确</td></tr></tbody></table><p>注意，在使用这些命令时，需要在包含docker-compose.yml文件的目录中运行它们。</p><h4 id="5-4）docker-compose-yml文件">5.4）docker-compose.yml文件</h4><p>给出一个示例，我们该如何编写这份<code>yaml</code>文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 当前docker-compose版本</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 多个服务</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="comment"># 服务名，自定义不重复</span></span><br><span class="line">  <span class="attr">springService:</span></span><br><span class="line">    <span class="comment"># 镜像及版本</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">springService:1.0</span></span><br><span class="line">    <span class="comment"># 容器名</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">springService</span></span><br><span class="line">    <span class="comment"># 暴露端口</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8080:8080&quot;</span></span><br><span class="line">    <span class="comment"># 使用的网络</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">my_net</span></span><br><span class="line">    <span class="comment"># 在指定容器启动后启动</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mysql</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># redis</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis:6.0.8</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;6379:6379&quot;</span></span><br><span class="line">    <span class="comment"># 数据卷</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/app/redis/redis.conf:/etc/redis/redis.conf</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/app/redis/data:/data</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">my_net</span></span><br><span class="line">    <span class="comment"># 命令</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">redis-server</span> <span class="string">/etc/redis/redis.conf</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">mysql:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:5.7</span></span><br><span class="line">    <span class="comment"># 环境变量</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="string">&#x27;123456&#x27;</span></span><br><span class="line">      <span class="attr">MYSOL_ALLOW_EMPTY_PASSWORD:</span> <span class="string">&#x27;no&#x27;</span></span><br><span class="line">      <span class="attr">MYSQL_DATABASE:</span> <span class="string">&#x27;test&#x27;</span></span><br><span class="line">      <span class="attr">MYSQL_USER:</span> <span class="string">&#x27;banmoon&#x27;</span></span><br><span class="line">      <span class="attr">MYSQL_PASSWORD:</span> <span class="string">&#x27;123456&#x27;</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;3396:3306&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">/app/mysql/db:/var/lib/mysql</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/app/mysql/conf/my.cnf:/etc/my.cnf</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/app/mysql/init:/docker-entrypoint-initdb.d</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">my_net</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">-default-authentication-plugin=mysql_native_password</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建网络</span></span><br><span class="line"><span class="attr">networks:</span> </span><br><span class="line">  <span class="attr">my_net:</span> </span><br></pre></td></tr></table></figure><p>具体的不再讲解了，因为出现了<code>k8s</code>容器编排管理，上面这一块大部分被取代，了解即可。</p><p>如果有些不懂的，可以去官网，很详细的</p><p><a href="https://docs.docker.com/compose/compose-file/compose-file-v3/#service-configuration-reference">Compose file version 3 reference | Docker Documentation</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可以校验文件中是否有语法异常</span></span><br><span class="line">docker compose config -q</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">该执行啦，自动启动容器</span></span><br><span class="line">docker compose up -d</span><br></pre></td></tr></table></figure><h2 id="四、最后">四、最后</h2><p>本文中预估50%的文本量都是由<code>chatgtp3.5</code>提供，想去注册<code>chatgtp4</code>，但帐号不支持，只能另外想办法了</p><p>我是半月，你我一同共勉！！！</p>]]></content>
      
      
      <categories>
          
          <category> 运维管理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分享一下我是怎么使用枚举的</title>
      <link href="/archive/cbd0a9a8/"/>
      <url>/archive/cbd0a9a8/</url>
      
        <content type="html"><![CDATA[<h1>分享一下我是怎么使用枚举的</h1><h2 id="一、介绍">一、介绍</h2><p>对于<code>java</code>枚举不陌生了，直接上代码</p><h2 id="二、代码">二、代码</h2><p>使用了一个接口，用来规定一下里面的字段，统一下好处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test.enums;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MyEnum</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    T <span class="title function_">getCode</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">getMsg</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test.enums;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">EnableStatusEnum</span> <span class="keyword">implements</span> <span class="title class_">MyEnum</span>&lt;Integer&gt;&#123;</span><br><span class="line">    ZERO(<span class="number">0</span>, <span class="string">&quot;禁用&quot;</span>),</span><br><span class="line">    ONE(<span class="number">1</span>, <span class="string">&quot;正常&quot;</span>),</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> Integer code;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> String msg;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> EnableStatusEnum <span class="title function_">getByCode</span><span class="params">(Integer code)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getByCode(code, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> EnableStatusEnum <span class="title function_">getByCode</span><span class="params">(Integer code, EnableStatusEnum defaultEnum)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Arrays.stream(values()).filter(a -&gt; a.getCode().equals(code)).findFirst().orElse(defaultEnum);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getMsgByCode</span><span class="params">(Integer code)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getMsgByCode(code, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getMsgByCode</span><span class="params">(Integer code, String defaultMsg)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Arrays.stream(values()).filter(a -&gt; a.getCode().equals(code)).findFirst().map(EnableStatusEnum::getMsg).orElse(defaultMsg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大家也都知道，枚举这东西对于一批固定的几个状态值进行管理。</p><p>通常是某张表的一些状态值，如果一张表里面有多个状态值，我们可以这样写一个常量类，里面放置每一个字段的枚举类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.yunshuo.dataset.enums;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.yunshuo.commons.tools.exception.RenException;</span><br><span class="line"><span class="keyword">import</span> io.yunshuo.dataset.entity.DataDatasetVersionEntity;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataVersionConstant</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 导入状态 0:无状态 1:导入中 2:导入完成</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="meta">@AllArgsConstructor</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">ImportStatus</span> &#123;</span><br><span class="line"></span><br><span class="line">        STATUS_LESS(<span class="number">0</span>, <span class="string">&quot;无状态&quot;</span>),</span><br><span class="line">        IMPORTING(<span class="number">1</span>, <span class="string">&quot;导入中&quot;</span>),</span><br><span class="line">        IMPORT_SUCCESS(<span class="number">2</span>, <span class="string">&quot;导入成功&quot;</span>),</span><br><span class="line">        ;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Integer code;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> String msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 导出状态 0:无状态 1:导出中 2:导出完成</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="meta">@AllArgsConstructor</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">ExportStatus</span> &#123;</span><br><span class="line"></span><br><span class="line">        STATUS_LESS(<span class="number">0</span>, <span class="string">&quot;无状态&quot;</span>),</span><br><span class="line">        EXPORTING(<span class="number">1</span>, <span class="string">&quot;导出中&quot;</span>),</span><br><span class="line">        EXPORT_SUCCESS(<span class="number">2</span>, <span class="string">&quot;导出成功&quot;</span>),</span><br><span class="line">        ;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Integer code;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> String msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 标注状态 0:未标注  1:手动标注中  2:自动标注中  3:自动标注完成  4:标注完成</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="meta">@AllArgsConstructor</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">AnnotateStatus</span> &#123;</span><br><span class="line"></span><br><span class="line">        NOT_ANNOTATE(<span class="number">0</span>, <span class="string">&quot;未标注&quot;</span>),</span><br><span class="line">        ANNOTATING(<span class="number">1</span>, <span class="string">&quot;手动标注中&quot;</span>),</span><br><span class="line">        AUTO_ANNOTATING(<span class="number">2</span>, <span class="string">&quot;自动标注中&quot;</span>),</span><br><span class="line">        AUTO_ANNOTATE_SUCCESS(<span class="number">32</span>, <span class="string">&quot;自动标注完成&quot;</span>),</span><br><span class="line">        ANNOTATE_SUCCESS(<span class="number">4</span>, <span class="string">&quot;标注完成&quot;</span>),</span><br><span class="line">        ;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Integer code;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> String msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 增强状态 0:无状态  1:增强中  2:增强完成</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="meta">@AllArgsConstructor</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">EnhanceStatus</span> &#123;</span><br><span class="line"></span><br><span class="line">        STATUS_LESS(<span class="number">0</span>, <span class="string">&quot;无状态&quot;</span>),</span><br><span class="line">        ENHANCING(<span class="number">1</span>, <span class="string">&quot;增强中&quot;</span>),</span><br><span class="line">        ENHANCE_SUCCESS(<span class="number">2</span>, <span class="string">&quot;增强完成&quot;</span>),</span><br><span class="line">        ;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Integer code;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> String msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 清洗状态 0:无状态  1:清洗中  2:清洗完成</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="meta">@AllArgsConstructor</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">CleanStatus</span> &#123;</span><br><span class="line"></span><br><span class="line">        STATUS_LESS(<span class="number">0</span>, <span class="string">&quot;无状态&quot;</span>),</span><br><span class="line">        CLEANING(<span class="number">1</span>, <span class="string">&quot;清洗中&quot;</span>),</span><br><span class="line">        CLEAN_SUCCESS(<span class="number">2</span>, <span class="string">&quot;清洗完成&quot;</span>),</span><br><span class="line">        ;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Integer code;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> String msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、最后">三、最后</h2><p>没什么技术含量的，就是分享一下，我是这样使用枚举的</p><p>我觉得挺清晰明了的</p><p>我是半月，你我一同共勉！！！</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> demo </tag>
            
            <tag> jdk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringSecurity入门</title>
      <link href="/archive/dd024ec9/"/>
      <url>/archive/dd024ec9/</url>
      
        <content type="html"><![CDATA[<h1>Spring Security入门</h1><h2 id="一、介绍">一、介绍</h2><p><code>Spring Security</code>是一套权限框架，此框架可以帮助我们为项目建立丰富的角色与权限管理。</p><p>他的前身是<code>Acegi Security</code>，在以前SpringBoot还未出现的时候，它以繁琐臃肿的配置被人嫌弃。</p><p>当 <code>Acegi Security</code> 投入 Spring 怀抱之后，先把这个名字改了，这就是大家所见到的<code>Spring Security</code>了，然后配置也得到了极大的简化。对比同样为权限框架的<code>shiro</code>，相对繁琐的配置依旧让许多开发者望而却步。</p><p>直到Springboot出现后，<code>Spring Security</code>重新回到了大众的视野，尤其是SpringCloud出现后，<code>Spring Security</code>的存在感又再次提高。</p><blockquote><p>核心功能：认证和授权</p><ul class="lvl-1"><li class="lvl-2">认证：<mark>authentication</mark><ul class="lvl-3"><li class="lvl-4">介绍：简单说就是你是谁，比如说你是哪个用户，在系统中使用用做登录</li></ul></li><li class="lvl-2">授权：<mark>authorization</mark><ul class="lvl-3"><li class="lvl-4">介绍：简单说就是能干什么，比如说我是管理员，我能删除别人的评论</li></ul></li></ul></blockquote><h2 id="二、入门使用">二、入门使用</h2><p>创建SpringBoot项目，这里使用的版本为<code>2.4.5</code>，引入相关依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>SpringBoot标准启动类就不说了，这里写一个controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.security.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;半月无霜，入门spring security&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在可以启动项目了，记得查看日志</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20210509095651.png" alt="image-20210509095647653" /></p><p>注意看打印的日志，这是系统默认生成的密码</p><p>我们请求<code>http://localhost:8080/hello</code>，将会发现跳转到了<code>Spring Security</code>的默认登录页</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20210509100252.png" alt="image-20210509100249447" /></p><p>这是由<code>Spring Security</code>拦截后跳转的页面，我们先进行登录</p><ul class="lvl-0"><li class="lvl-2"><p>账号：user</p></li><li class="lvl-2"><p>密码：启动中打印的那串UUID</p></li></ul><p>登录完成后，自动跳转到了<code>/hello</code>页面<br /><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20210509100542.png" alt="image-20210509100539736" /></p><p>除了默认的用户密码，我们还可以指定账号和密码，修改配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">security:</span></span><br><span class="line">    <span class="attr">user:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">banmoon</span></span><br><span class="line">      <span class="attr">password:</span> <span class="number">1234</span></span><br></pre></td></tr></table></figure><p>再次重新启动，输入自己设置的账号和密码，也能达到同样的效果</p><h2 id="三、前后端不分离">三、前后端不分离</h2><h3 id="1）前端登录页面">1）前端登录页面</h3><p><code>Spring Security</code>虽然有登录页面，但默认的实在太丑，我们想要使用自己的登录页面。</p><p>前端代码：可以看<a href="">gitee</a>，相关的后端代码也在</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20210509112457.png" alt="image-20210509112456346" /></p><p>通过服务器的方式去访问，发现<code>http://localhost:8080/login.html</code>页面被拦截</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20210509120707.gif" alt="some" /></p><h3 id="2）配置登录页面">2）配置登录页面</h3><p>编写<code>SecurityConfig</code>配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.WebSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.password.NoOpPasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> NoOpPasswordEncoder.getInstance();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 此配置重写，主要是认证相关的，也就是登录用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> auth</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        auth.inMemoryAuthentication()<span class="comment">// 在内存中指定用户</span></span><br><span class="line">                .withUser(<span class="string">&quot;banmoon&quot;</span>)</span><br><span class="line">                .password(<span class="string">&quot;1234&quot;</span>)</span><br><span class="line">                .roles(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 白名单，静态资源过滤</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> web</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(WebSecurity web)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        web.ignoring().antMatchers(<span class="string">&quot;/js/**&quot;</span>, <span class="string">&quot;/css/**&quot;</span>, <span class="string">&quot;/img/**&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这里配置了登录登出等</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> http</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                .anyRequest().authenticated()</span><br><span class="line">                .and()</span><br><span class="line">                .formLogin()</span><br><span class="line">                .loginPage(<span class="string">&quot;/login.html&quot;</span>)</span><br><span class="line">                .loginProcessingUrl(<span class="string">&quot;/login&quot;</span>)</span><br><span class="line">                .permitAll()</span><br><span class="line">                .and()</span><br><span class="line">                .csrf().disable();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如此一来，我们再次访问登录页，并输入账号密码</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20210509133617.gif" alt="login" /></p><p>登录成功，但跳转了一个不存在的页面，所以出现了404报错页面</p><p>再次修改<code>SecurityConfig</code>配置类，这次我们添加登录后指定跳转的页面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这里配置了登录登出等</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> http</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                .anyRequest().authenticated()</span><br><span class="line">                .and()</span><br><span class="line">                .formLogin()</span><br><span class="line">                .loginPage(<span class="string">&quot;/login.html&quot;</span>)</span><br><span class="line">                .loginProcessingUrl(<span class="string">&quot;/login&quot;</span>)</span><br><span class="line">                .defaultSuccessUrl(<span class="string">&quot;/hello&quot;</span>)<span class="comment">// 会记录先前想去但被拦截的页面，登录后此页面</span></span><br><span class="line"><span class="comment">//                .successForwardUrl(&quot;/hello&quot;)// 登录后一律跳转到/hello页面</span></span><br><span class="line">                .permitAll()</span><br><span class="line">                .and()</span><br><span class="line">                .csrf().disable();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20210509140932.gif" alt="GIF" /></p><h3 id="3）配置登出">3）配置登出</h3><p>修改<code>SecurityConfig</code>配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这里配置了登录登出等</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> http</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                .anyRequest().authenticated()</span><br><span class="line">                .and()</span><br><span class="line">                .formLogin()</span><br><span class="line">                .loginPage(<span class="string">&quot;/login.html&quot;</span>)</span><br><span class="line">                .loginProcessingUrl(<span class="string">&quot;/login&quot;</span>)</span><br><span class="line">                .defaultSuccessUrl(<span class="string">&quot;/hello&quot;</span>)<span class="comment">// 会记录先前想去但被拦截的页面，登录后此页面</span></span><br><span class="line"><span class="comment">//                .successForwardUrl(&quot;/hello&quot;)// 登录后一律跳转到/hello页面</span></span><br><span class="line">                .permitAll()</span><br><span class="line">                .and()</span><br><span class="line">                .logout()</span><br><span class="line">                .logoutUrl(<span class="string">&quot;/logout&quot;</span>)<span class="comment">// 登出方法，默认就是logout</span></span><br><span class="line">                .logoutRequestMatcher(<span class="keyword">new</span> <span class="title class_">AntPathRequestMatcher</span>(<span class="string">&quot;/logout&quot;</span>, <span class="string">&quot;POST&quot;</span>))</span><br><span class="line">                .logoutSuccessUrl(<span class="string">&quot;/login.html&quot;</span>)<span class="comment">// 登出成功后跳转的页面，默认是登录的页面</span></span><br><span class="line">                .deleteCookies()<span class="comment">// 清除cookie</span></span><br><span class="line">                .clearAuthentication(<span class="literal">true</span>)</span><br><span class="line">                .invalidateHttpSession(<span class="literal">true</span>)</span><br><span class="line">                .permitAll()</span><br><span class="line">                .and()</span><br><span class="line">                .csrf().disable();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>登录成功后，发送post请求登出，页面将回到登录页</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20210509151703.png" alt="image-20210509151701195" /></p><h2 id="四、前后端分离">四、前后端分离</h2><p>在目前的项目环境中，大多数项目都是以前后端分离项目为主，通过json进行交互。</p><p>后端不再去控制前端的页面跳转，由前端自己判断后端的状态进行页面的跳转控制。由此来做到前后端的分离。</p><p>前端就不再写了，这里要<code>ajax</code>进行请求，推荐使用<code>axios</code>，前端自行判断跳转，我们简单用<code>postman</code>来进行模拟就好</p><h3 id="1）配置登录回调">1）配置登录回调</h3><p>主要使用了<code>successHandler()</code>和<code>failureHandler()</code>，用来处理登录成功以及失败的情况</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.security.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.WebSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.password.NoOpPasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> NoOpPasswordEncoder.getInstance();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这里配置了登录登出等</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> http</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                .anyRequest().authenticated()</span><br><span class="line">                .and()</span><br><span class="line">                .formLogin()</span><br><span class="line">                .loginPage(<span class="string">&quot;/login.html&quot;</span>)</span><br><span class="line">                .loginProcessingUrl(<span class="string">&quot;/login&quot;</span>)<span class="comment">// 登录接口</span></span><br><span class="line">                .successHandler(<span class="keyword">new</span> <span class="title class_">MySuccessHandler</span>())<span class="comment">// 登录成功的处理，返回json</span></span><br><span class="line">                .failureHandler(<span class="keyword">new</span> <span class="title class_">MyFailureHandler</span>())<span class="comment">// 登录失败的处理，返回json</span></span><br><span class="line">                .permitAll()</span><br><span class="line">                .and()</span><br><span class="line">                .csrf().disable();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们需要一个返回前端统一的DTO</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.security.dto;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResultData</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer errCode;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String errMsg;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; ResultData <span class="title function_">success</span><span class="params">(T data)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResultData</span>(<span class="number">0</span>, <span class="string">&quot;&quot;</span>, data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ResultData <span class="title function_">fail</span><span class="params">(String errMsg)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResultData</span>(-<span class="number">1</span>, errMsg, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>MySuccessHandler.java</code>，处理登录成功的请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.security.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.security.dto.ResultData;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.Authentication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.authentication.AuthenticationSuccessHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MySuccessHandler</span> <span class="keyword">implements</span> <span class="title class_">AuthenticationSuccessHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 登录成功的回调，这里返回对应的JSON</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> authentication</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ServletException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onAuthenticationSuccess</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Authentication authentication)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/json;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">        <span class="comment">// 模拟写入对应的用户JSON，真实情况下此处将返回对应的token给前端</span></span><br><span class="line">        writer.write(<span class="keyword">new</span> <span class="title class_">ObjectMapper</span>().writeValueAsString(ResultData.success(authentication.getPrincipal())));</span><br><span class="line">        writer.flush();</span><br><span class="line">        writer.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>MyFailureHandler.java</code>，用来处理登录失败的请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.security.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.security.dto.ResultData;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.authentication.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.AuthenticationException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.authentication.AuthenticationFailureHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyFailureHandler</span> <span class="keyword">implements</span> <span class="title class_">AuthenticationFailureHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 登录失败的回调</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ServletException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onAuthenticationFailure</span><span class="params">(HttpServletRequest request, HttpServletResponse response, AuthenticationException e)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/json;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">        <span class="type">ResultData</span> <span class="variable">result</span> <span class="operator">=</span> ResultData.fail(e.getMessage());</span><br><span class="line">        <span class="keyword">if</span> (e <span class="keyword">instanceof</span> LockedException) &#123;</span><br><span class="line">            result.setErrMsg(<span class="string">&quot;账户被锁定，请联系管理员!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> CredentialsExpiredException) &#123;</span><br><span class="line">            result.setErrMsg(<span class="string">&quot;密码过期，请联系管理员!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> AccountExpiredException) &#123;</span><br><span class="line">            result.setErrMsg(<span class="string">&quot;账户过期，请联系管理员!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> DisabledException) &#123;</span><br><span class="line">            result.setErrMsg(<span class="string">&quot;账户被禁用，请联系管理员!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> BadCredentialsException) &#123;</span><br><span class="line">            result.setErrMsg(<span class="string">&quot;用户名或者密码输入错误，请重新输入!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        out.write(<span class="keyword">new</span> <span class="title class_">ObjectMapper</span>().writeValueAsString(result));</span><br><span class="line">        out.flush();</span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<code>postman</code>来进行测试一下，登录成功的回调</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220410132619.png" alt="image-20220410132617974" /></p><p>登录失败的回调，我们输错账号或者密码</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220410132746.png" alt="image-20220410132745072" /></p><h3 id="2）配置登出回调">2）配置登出回调</h3><p>有登录，就肯定还有登出，我们先建立一个登出的处理类<code>MyLogoutSuccessHandler.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.security.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.security.dto.ResultData;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.Authentication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.authentication.logout.LogoutSuccessHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyLogoutSuccessHandler</span> <span class="keyword">implements</span> <span class="title class_">LogoutSuccessHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onLogoutSuccess</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Authentication authentication)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/json;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">        writer.write(<span class="keyword">new</span> <span class="title class_">ObjectMapper</span>().writeValueAsString(ResultData.success(<span class="string">&quot;注销成功&quot;</span>)));</span><br><span class="line">        writer.flush();</span><br><span class="line">        writer.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在配置类中使用这个注销成功处理类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.security.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.WebSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.password.NoOpPasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> NoOpPasswordEncoder.getInstance();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这里配置了登录登出等</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> http</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                .anyRequest().authenticated()</span><br><span class="line">                .and()</span><br><span class="line">                .formLogin()</span><br><span class="line">                .loginPage(<span class="string">&quot;/login.html&quot;</span>)</span><br><span class="line">                .loginProcessingUrl(<span class="string">&quot;/login&quot;</span>)<span class="comment">// 登录接口</span></span><br><span class="line">                .successHandler(<span class="keyword">new</span> <span class="title class_">MySuccessHandler</span>())<span class="comment">// 登录成功的处理，返回json</span></span><br><span class="line">                .failureHandler(<span class="keyword">new</span> <span class="title class_">MyFailureHandler</span>())<span class="comment">// 登录失败的处理，返回json</span></span><br><span class="line">                .permitAll()</span><br><span class="line">                .and()</span><br><span class="line">                .logout()</span><br><span class="line">                .logoutUrl(<span class="string">&quot;/logout&quot;</span>)<span class="comment">// 注销接口</span></span><br><span class="line">                .logoutSuccessHandler(<span class="keyword">new</span> <span class="title class_">MyLogoutSuccessHandler</span>())<span class="comment">// 注销成功</span></span><br><span class="line">                .permitAll()</span><br><span class="line">                .and()</span><br><span class="line">                .csrf().disable();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用postman请求登出一下</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220412174155.png" alt="image-20220412174152846" /></p><h3 id="3）请求失效回调">3）请求失效回调</h3><p>如果一个用户登录时间过期，前一秒还好好的，下一秒就要求进行登录。</p><p>这时候我们就需要配置下面这些回调信息，定义一个<code>MyAuthenticationEntryPointHandler.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.security.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.security.dto.ResultData;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.AuthenticationException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.AuthenticationEntryPoint;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAuthenticationEntryPointHandler</span> <span class="keyword">implements</span> <span class="title class_">AuthenticationEntryPoint</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">commence</span><span class="params">(HttpServletRequest request, HttpServletResponse response, AuthenticationException e)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/json;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">        writer.write(<span class="keyword">new</span> <span class="title class_">ObjectMapper</span>().writeValueAsString(ResultData.fail(<span class="string">&quot;尚未登录，请先登录&quot;</span>)));</span><br><span class="line">        writer.flush();</span><br><span class="line">        writer.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在配置类中使用它</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.security.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.WebSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.password.NoOpPasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> NoOpPasswordEncoder.getInstance();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这里配置了登录登出等</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> http</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                .anyRequest().authenticated()</span><br><span class="line">                .and()</span><br><span class="line">                .formLogin()</span><br><span class="line">                .loginPage(<span class="string">&quot;/login.html&quot;</span>)</span><br><span class="line">                .loginProcessingUrl(<span class="string">&quot;/login&quot;</span>)<span class="comment">// 登录接口</span></span><br><span class="line">                .successHandler(<span class="keyword">new</span> <span class="title class_">MySuccessHandler</span>())<span class="comment">// 登录成功的处理，返回json</span></span><br><span class="line">                .failureHandler(<span class="keyword">new</span> <span class="title class_">MyFailureHandler</span>())<span class="comment">// 登录失败的处理，返回json</span></span><br><span class="line">                .permitAll()</span><br><span class="line">                .and()</span><br><span class="line">                .logout()</span><br><span class="line">                .logoutUrl(<span class="string">&quot;/logout&quot;</span>)</span><br><span class="line">                .logoutSuccessHandler(<span class="keyword">new</span> <span class="title class_">MyLogoutSuccessHandler</span>())</span><br><span class="line">                .permitAll()</span><br><span class="line">                .and()</span><br><span class="line">                .csrf().disable()</span><br><span class="line">                .exceptionHandling()</span><br><span class="line">                .authenticationEntryPoint(<span class="keyword">new</span> <span class="title class_">MyAuthenticationEntryPointHandler</span>());<span class="comment">// 认证，返回json</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面那一步就已经登出了，这次我们再进行访问</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220412174739.png" alt="image-20220412174738278" /></p><h3 id="4）Lambda简化">4）Lambda简化</h3><p>在上面的三个示例中，一共使用了四个处理类来解决这些回调。</p><p>这里提供Lambda表达式的简写方法，可以降低类的数量，仅仅只需要一个<code>SpringSecurityConfig.java</code>配置类就可以解决了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.security.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.security.dto.ResultData;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.authentication.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.WebSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.password.NoOpPasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> NoOpPasswordEncoder.getInstance();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 此配置重写，主要是认证相关的，也就是登录用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> auth</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        auth.inMemoryAuthentication()<span class="comment">// 在内存中指定用户</span></span><br><span class="line">                .withUser(<span class="string">&quot;banmoon&quot;</span>)</span><br><span class="line">                .password(<span class="string">&quot;1234&quot;</span>)</span><br><span class="line">                .roles(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 白名单，静态资源过滤</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> web</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(WebSecurity web)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        web.ignoring().antMatchers(<span class="string">&quot;/js/**&quot;</span>, <span class="string">&quot;/css/**&quot;</span>, <span class="string">&quot;/img/**&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这里配置了登录登出等</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> http</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                .anyRequest().authenticated()</span><br><span class="line">                .and()</span><br><span class="line">                .formLogin()</span><br><span class="line">                .loginPage(<span class="string">&quot;/login.html&quot;</span>)</span><br><span class="line">                .loginProcessingUrl(<span class="string">&quot;/login&quot;</span>)<span class="comment">// 登录接口</span></span><br><span class="line">                .successHandler((request, response, authentication) -&gt; &#123;</span><br><span class="line">                    response.setContentType(<span class="string">&quot;application/json;charset=utf-8&quot;</span>);</span><br><span class="line">                    <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">                    <span class="comment">// 模拟写入对应的用户JSON，真实情况下此处将返回对应的token给前端</span></span><br><span class="line">                    writer.write(<span class="keyword">new</span> <span class="title class_">ObjectMapper</span>().writeValueAsString(ResultData.success(authentication.getPrincipal())));</span><br><span class="line">                    writer.flush();</span><br><span class="line">                    writer.close();</span><br><span class="line">                &#125;)<span class="comment">// 登录成功的处理，返回json</span></span><br><span class="line">                .failureHandler((request, response, e) -&gt; &#123;</span><br><span class="line">                    response.setContentType(<span class="string">&quot;application/json;charset=utf-8&quot;</span>);</span><br><span class="line">                    <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">                    <span class="type">ResultData</span> <span class="variable">result</span> <span class="operator">=</span> ResultData.fail(e.getMessage());</span><br><span class="line">                    <span class="keyword">if</span> (e <span class="keyword">instanceof</span> LockedException) &#123;</span><br><span class="line">                        result.setErrMsg(<span class="string">&quot;账户被锁定，请联系管理员!&quot;</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> CredentialsExpiredException) &#123;</span><br><span class="line">                        result.setErrMsg(<span class="string">&quot;密码过期，请联系管理员!&quot;</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> AccountExpiredException) &#123;</span><br><span class="line">                        result.setErrMsg(<span class="string">&quot;账户过期，请联系管理员!&quot;</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> DisabledException) &#123;</span><br><span class="line">                        result.setErrMsg(<span class="string">&quot;账户被禁用，请联系管理员!&quot;</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> BadCredentialsException) &#123;</span><br><span class="line">                        result.setErrMsg(<span class="string">&quot;用户名或者密码输入错误，请重新输入!&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    out.write(<span class="keyword">new</span> <span class="title class_">ObjectMapper</span>().writeValueAsString(result));</span><br><span class="line">                    out.flush();</span><br><span class="line">                    out.close();</span><br><span class="line">                &#125;)<span class="comment">// 登录失败的处理，返回json</span></span><br><span class="line">                .permitAll()</span><br><span class="line">                .and()</span><br><span class="line">                .logout()</span><br><span class="line">                .logoutUrl(<span class="string">&quot;/logout&quot;</span>)</span><br><span class="line">                .logoutSuccessHandler((request, response, e) -&gt; &#123;</span><br><span class="line">                    response.setContentType(<span class="string">&quot;application/json;charset=utf-8&quot;</span>);</span><br><span class="line">                    <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">                    writer.write(<span class="keyword">new</span> <span class="title class_">ObjectMapper</span>().writeValueAsString(ResultData.success(<span class="string">&quot;注销成功&quot;</span>)));</span><br><span class="line">                    writer.flush();</span><br><span class="line">                    writer.close();</span><br><span class="line">                &#125;)</span><br><span class="line">                .permitAll()</span><br><span class="line">                .and()</span><br><span class="line">                .csrf().disable()</span><br><span class="line">                .exceptionHandling()</span><br><span class="line">                .authenticationEntryPoint((request, response, e) -&gt; &#123;</span><br><span class="line">                    response.setContentType(<span class="string">&quot;application/json;charset=utf-8&quot;</span>);</span><br><span class="line">                    <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">                    writer.write(<span class="keyword">new</span> <span class="title class_">ObjectMapper</span>().writeValueAsString(ResultData.fail(<span class="string">&quot;尚未登录，请先登录&quot;</span>)));</span><br><span class="line">                    writer.flush();</span><br><span class="line">                    writer.close();</span><br><span class="line">                &#125;);<span class="comment">// 认证，返回json</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种写法，我是不推荐的，可读性不是很好，代码又多又乱。还不如多写几个类呢。</p><h2 id="五、授权">五、授权</h2><p>授权授权，顾名思义，用户的级别有所不同，就得给不同级别的用户一个标识。通过这个标识，系统就可以进行判断，这些用户可以做什么，不可以做什么。这一套便是授权</p><p>我们简单看下这个<code>TestController.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.security.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;你好，半月无霜，无权限即可访问&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/admin/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">adminHello</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;你好，半月无霜，需要admin权限访问&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">userHello</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;你好，半月无霜，需要user权限访问，admin也可以&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>挺简单的三个请求，要实现下面这个功能</p><ul class="lvl-0"><li class="lvl-2"><p><code>/hello</code>是任何人都可以访问，不需要登录就可以访问</p></li><li class="lvl-2"><p><code>/admin/hello</code>是只有admin身份的人才可以访问</p></li><li class="lvl-2"><p><code>/user/hello</code>是有<mark>user或者admin</mark>身份的人才可以访问</p></li></ul><p>有了上面这个三个接口，我们简单添加一下用户，已经很熟悉了吧</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        auth.inMemoryAuthentication()<span class="comment">// 在内存中指定用户</span></span><br><span class="line">                .withUser(User.withUsername(<span class="string">&quot;banmoon&quot;</span>).password(<span class="string">&quot;1234&quot;</span>).roles(<span class="string">&quot;admin&quot;</span>).build())</span><br><span class="line">                .withUser(User.withUsername(<span class="string">&quot;user&quot;</span>).password(<span class="string">&quot;1234&quot;</span>).roles(<span class="string">&quot;user&quot;</span>).build());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1）简单实现">1）简单实现</h3><p>现在再为请求配置拦截，请求需要的角色权限</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/hello&quot;</span>).permitAll()<span class="comment">// 放行</span></span><br><span class="line">                .antMatchers(<span class="string">&quot;/admin/**&quot;</span>).hasRole(<span class="string">&quot;admin&quot;</span>)<span class="comment">// admin角色才可以访问</span></span><br><span class="line">                .antMatchers(<span class="string">&quot;/user/**&quot;</span>).hasRole(<span class="string">&quot;admin&quot;</span>, <span class="string">&quot;user&quot;</span>)<span class="comment">// admin,user角色才可以访问</span></span><br><span class="line">                .anyRequest().authenticated();</span><br><span class="line">        http.formLogin();<span class="comment">// 配置默认的登录页面，就是老丑的那个</span></span><br><span class="line">        http.httpBasic();<span class="comment">// 配置http基本认证</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来看看通配符是什么意思吧，看懂了通配符，马上就知道我上面是什么意思了</p><table><thead><tr><th>符号</th><th>说明</th></tr></thead><tbody><tr><td>?</td><td>匹配任意单个字符</td></tr><tr><td>*</td><td>匹配一层路径</td></tr><tr><td>**</td><td>匹配多层路径</td></tr></tbody></table><p>通配符很简单是吧，简单测试一下<code>/hello</code>，剩下的就不贴出来了</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220413153714.png" alt="image-20220413153711485" /></p><blockquote><p>注意配置请求拦截的坑，一定不能这样写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">     http.authorizeRequests()</span><br><span class="line">             .anyRequest().authenticated()<span class="comment">// 写在最前面</span></span><br><span class="line">             .antMatchers(<span class="string">&quot;/hello&quot;</span>).permitAll()</span><br><span class="line">             .antMatchers(<span class="string">&quot;/admin/**&quot;</span>).hasRole(<span class="string">&quot;admin&quot;</span>)</span><br><span class="line">             .antMatchers(<span class="string">&quot;/user/**&quot;</span>).hasAnyRole(<span class="string">&quot;admin&quot;</span>, <span class="string">&quot;user&quot;</span>);</span><br><span class="line">     http.formLogin();<span class="comment">// 配置默认的登录页面，就是老丑的那个</span></span><br><span class="line">     http.httpBasic();<span class="comment">// 配置http基本认证</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后当你启动的时候，就会发现报错了<br /><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220413154035.png" alt="image-20220413154034061" /></p><p>截图不全，但没有关系。原因在于<mark>Can’t configure antMatchers after anyRequest</mark>，不能在anyRequest后配置antMatchers</p><p>简单说明下，请求拦截的顺序是和我们配置的顺序一致，所以我们在进行配置时，要从小的请求路径开始配起。</p><p>所以，上面的代码就犯了这个错误，一开始就将所有的请求都要进行认证，而下面的<code>/hello</code>却是免认证的，这就导致了冲突。</p></blockquote><h3 id="2）角色继承">2）角色继承</h3><p>在上面的简单使用中，我们是给<code>/user/**</code>配置了<code>hasAnyRole(&quot;admin&quot;, &quot;user&quot;)</code>，也可以达到预定的需求效果。</p><p>但是，如果角色之间的关系复杂，有许多角色互相包含的情况下，那么有没有一种简单快捷的方式来进行解决呢，<b>角色继承</b>功能可以解决上面发生的情况，这在实际开发中十分有用</p><p>什么是角色继承呢，简单的来说，就是上级角色具有下级角色所有的功能。代码实现如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RoleHierarchy <span class="title function_">roleHierarchy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">RoleHierarchyImpl</span> <span class="variable">hierarchy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RoleHierarchyImpl</span>();</span><br><span class="line">        hierarchy.setHierarchy(<span class="string">&quot;ROLE_admin &gt; ROLE_user&quot;</span>);<span class="comment">// admin拥有user的权限，注意要加前缀</span></span><br><span class="line">        <span class="keyword">return</span> hierarchy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/hello&quot;</span>).permitAll()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/admin/**&quot;</span>).hasRole(<span class="string">&quot;admin&quot;</span>)</span><br><span class="line">                .antMatchers(<span class="string">&quot;/user/**&quot;</span>).hasRole(<span class="string">&quot;user&quot;</span>)</span><br><span class="line">                .anyRequest().authenticated();</span><br><span class="line">        http.formLogin();<span class="comment">// 配置默认的登录页面，就是老丑的那个</span></span><br><span class="line">        http.httpBasic();<span class="comment">// 配置http基本认证</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如此一来，我们重启项目，使用admin权限，去访问<code>/user/hello</code></p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220413161918.gif" alt="abc" /></p><h2 id="六、连接数据库">六、连接数据库</h2><p>在连接数据库之前，我们先看下<code>UserDetailService.java</code>这个接口以及它的实现类。</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220414093435.png" alt="image-20220414093432901" /></p><p>这个接口抽象了一些用户的来源的一些方法，这些用户的来源将在<code>UserDetailService.java</code>的实现类中定义。</p><p>眼尖的人已经发现了<code>JdbcUserDetailManager.java</code>，这就是我们将要使用的一个实现类。</p><h3 id="1）InMemoryUserDetailsManager">1）InMemoryUserDetailsManager</h3><p>不过在此之前，我们先使用<code>InMemoryUserDetailsManager.java</code>，在内存中设置用户</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.security.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetailsService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.provisioning.InMemoryUserDetailsManager;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> UserDetailsService <span class="title function_">userDetailsService</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">InMemoryUserDetailsManager</span> <span class="variable">manager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InMemoryUserDetailsManager</span>();</span><br><span class="line">        manager.createUser(User.withUsername(<span class="string">&quot;banmoon&quot;</span>).password(<span class="string">&quot;1234&quot;</span>).roles(<span class="string">&quot;admin&quot;</span>).build());</span><br><span class="line">        <span class="keyword">return</span> manager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就这么简简单单的定义了个Bean，就完成了在内存中对用户的添加。</p><h3 id="2）JdbcUserDetailManager">2）JdbcUserDetailManager</h3><p>这一次，我们要进行连接数据库啦，记得添加上相关的Maven依赖，以及在配置文件中加上对应的数据源信息</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/test?serverTimezone=Asia/Shanghai&amp;allowMultiQueries=true</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">1234</span></span><br></pre></td></tr></table></figure><p>还有建表语句，我们使用<code>SpringSecurity</code>默认提供的用户sql来进行测试。</p><p>默认的sql是针对支持<code>HSQLDB</code>的，修改后的<code>sql</code>如下</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> users ( </span><br><span class="line">username <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">PRIMARY</span> KEY, </span><br><span class="line">password <span class="type">varchar</span>(<span class="number">500</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>, </span><br><span class="line">enabled <span class="type">boolean</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> </span><br><span class="line">);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> authorities (</span><br><span class="line">username <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">authority <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> fk_authorities_users <span class="keyword">FOREIGN</span> KEY ( username ) <span class="keyword">REFERENCES</span> users ( username )</span><br><span class="line">);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> INDEX ix_auth_username <span class="keyword">ON</span> authorities ( username, authority );</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `users`(`username`, `password`, `enabled`) <span class="keyword">VALUES</span> (<span class="string">&#x27;banmoon&#x27;</span>, <span class="string">&#x27;1234&#x27;</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `users`(`username`, `password`, `enabled`) <span class="keyword">VALUES</span> (<span class="string">&#x27;user&#x27;</span>, <span class="string">&#x27;1234&#x27;</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `authorities`(`username`, `authority`) <span class="keyword">VALUES</span> (<span class="string">&#x27;banmoon&#x27;</span>, <span class="string">&#x27;admin&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `authorities`(`username`, `authority`) <span class="keyword">VALUES</span> (<span class="string">&#x27;user&#x27;</span>, <span class="string">&#x27;user&#x27;</span>);</span><br></pre></td></tr></table></figure><blockquote><p><mark>但我在官网上没有找到sql的位置5555</mark>，但从源码也能看到一些端倪的，定义了相关的一些增删改查的<code>sql</code></p><p>请务必进去看看源码，<code>JdbcUserDetailManager.java</code></p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220414111402.png" alt="image-20220414111401563" /></p></blockquote><p>好的，准备工作完成，如何使用这个<code>JdbcUserDetailManager.java</code>呢？其实也很简单，和上面一样，将它定义成<code>Bean</code>即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.security.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetailsService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.password.NoOpPasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.provisioning.JdbcUserDetailsManager;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">protected</span> UserDetailsService <span class="title function_">userDetailsService</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">JdbcUserDetailsManager</span> <span class="variable">manager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdbcUserDetailsManager</span>();</span><br><span class="line">        manager.setDataSource(dataSource);</span><br><span class="line">        <span class="comment">// TODO 在这里可以对用户进行增删改，此处数据库中已有两条数据，故不作新增</span></span><br><span class="line">        <span class="keyword">return</span> manager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们再去访问<code>/hello</code>，被拦截要进行登录，这是正常的，主要是我们要输入账号密码，填入我们在数据库中保存的账号密码，访问成功。</p><p>图就不再贴出来了，代码自己测试一下就马上清楚了。</p><h3 id="3）自定义实现类">3）自定义实现类</h3><p>在上面的两个实现类中，一个是在内存中管理的账号密码，一个是数据库管理的账号密码，只是这个类实现管理的账号密码管理功能不是我们想要的。</p><p>我们自己的用户表，自己的角色表该如何接入<code>SpringSecurity</code>呢？这时候，我们就得自己去实现<code>UserDetailsService.java</code>接口完成我们自己的功能。</p><p>在平常的项目中，我们常常会使用ORM框架来进行开发，这里使用的是<code>MyBatis-plus</code>，没有用过的快去<a href="https://baomidou.com/">官网</a>补课啦。</p><p>首先我们添加<code>MyBatis-plus</code>和<code>MySQL</code>的Maven依赖，同样记得要在配置文件中添加数据源</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- mysql连接驱动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- mybatis-plus --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- lombok简化包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 测试 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/test?serverTimezone=Asia/Shanghai&amp;allowMultiQueries=true</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">1234</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># mybatis-plus的相关配置</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath*:/mapper/*.xml</span></span><br><span class="line">  <span class="attr">typeAliasesPackage:</span> <span class="string">com.banmoon.security.entity</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">AUTO</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">cache-enabled:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">call-setters-on-nulls:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">jdbc-type-for-null:</span> <span class="string">&#x27;null&#x27;</span></span><br></pre></td></tr></table></figure><p>如此一来，先添加数据库表，简单一个用户表，以及其对应的角色表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `sys_user` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `username` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户名&#x27;</span>,</span><br><span class="line">  `password` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">3</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `sys_user_role` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `user_id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户ID&#x27;</span>,</span><br><span class="line">  `role` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;角色&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">3</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `sys_user`(`id`, `username`, `password`) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;banmoon&#x27;</span>, <span class="string">&#x27;1234&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `sys_user`(`id`, `username`, `password`) <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;user&#x27;</span>, <span class="string">&#x27;1234&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `sys_user_role`(`id`, `user_id`, `role`) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">1</span>, <span class="string">&#x27;admin&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `sys_user_role`(`id`, `user_id`, `role`) <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="number">2</span>, <span class="string">&#x27;user&#x27;</span>);</span><br></pre></td></tr></table></figure><p>表创建完毕，编写他们对应的实体类和Mapper，代码生成器启动，这些东西就不要手写了，麻烦</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.security.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableField;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableName;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.IdType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableId;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.EqualsAndHashCode;</span><br><span class="line"><span class="keyword">import</span> lombok.experimental.Accessors;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = false)</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span></span><br><span class="line"><span class="meta">@TableName(&quot;sys_user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableId(value = &quot;id&quot;, type = IdType.AUTO)</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(&quot;username&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 密码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(&quot;password&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(exist = false)</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;UserRole&gt; userRoleList;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.security.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableField;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableName;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.IdType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableId;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.EqualsAndHashCode;</span><br><span class="line"><span class="keyword">import</span> lombok.experimental.Accessors;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = false)</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span></span><br><span class="line"><span class="meta">@TableName(&quot;sys_user_role&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserRole</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableId(value = &quot;id&quot;, type = IdType.AUTO)</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(&quot;user_id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 角色</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(&quot;role&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String role;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应两个实体类的Mapper接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.security.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.security.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.security.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.security.entity.UserRole;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserRoleMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;UserRole&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如此一来，我们就完成了准备工作，接下来才是正戏，首先我们需要写一个实现类来继承<code>UserDetailsService.java</code>，如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.security.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.security.bo.UserDetailBO;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.security.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.security.entity.UserRole;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.security.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.security.mapper.UserRoleMapper;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetails;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetailsService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UsernameNotFoundException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> <span class="keyword">implements</span> <span class="title class_">UserDetailsService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserRoleMapper userRoleMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UserDetails <span class="title function_">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectOne(<span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;User&gt;()</span><br><span class="line">                .eq(User::getUsername, username));</span><br><span class="line">        <span class="keyword">if</span>(user==<span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UsernameNotFoundException</span>(<span class="string">&quot;用户不存在&quot;</span>);</span><br><span class="line">        List&lt;UserRole&gt; userRoleList = userRoleMapper.selectList(<span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;UserRole&gt;()</span><br><span class="line">                .eq(UserRole::getUserId, user.getId()));</span><br><span class="line">        user.setUserRoleList(userRoleList);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UserDetailBO</span>(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至于<code>UserDetailBO.java</code>，是<code>UserDetails.java</code>的一个实现类，和我们<code>User.java</code>实体呈现聚合关系</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.security.bo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.security.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.security.entity.UserRole;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.GrantedAuthority;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.authority.SimpleGrantedAuthority;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetails;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDetailBO</span> <span class="keyword">implements</span> <span class="title class_">UserDetails</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserDetailBO</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.user = user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取角色权限</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;? <span class="keyword">extends</span> <span class="title class_">GrantedAuthority</span>&gt; getAuthorities() &#123;</span><br><span class="line">        List&lt;UserRole&gt; list = user.getUserRoleList();</span><br><span class="line">        List&lt;SimpleGrantedAuthority&gt; authorityList = list.stream().map(a -&gt; <span class="keyword">new</span> <span class="title class_">SimpleGrantedAuthority</span>(a.getRole()))</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        <span class="keyword">return</span> authorityList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> user.getPassword();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> user.getUsername();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 账户过期</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true：</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAccountNonExpired</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 账户锁定</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true：未锁定，false：锁定</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAccountNonLocked</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 证书过期</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true：未过期，false：已过期</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isCredentialsNonExpired</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否启用</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true：启用，false：禁用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEnabled</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如此就完成了，自己对数据库的访问，自定义的添加及扩展，来看下效果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.security.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.security.bo.UserDetailBO;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.Authentication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.context.SecurityContextHolder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetails;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;半月无霜，spring security数据库连接之【自定义UserDetailsService】&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220415104203.gif" alt="animation" /></p><h2 id="七、其它">七、其它</h2><h3 id="1）密码加密">1）密码加密</h3><p>在上面的代码示例中，你们常常会看到我在配置类中定义了一个这样的<code>bean</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> NoOpPasswordEncoder.getInstance();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段配置，简单的说就是不启动密码加密。虽然此段代码不推荐，但目前处于学习阶段，<mark>大家在生产上不要使用就好</mark>。</p><p>这个<code>bean</code>是什么，大家肯定已经知道了。这就是配置加密算法的配置<code>bean</code>。配置完成后，<code>SpringSecurity</code>就能对传入的密码进行校验。</p><p>关于其他的密码加密，<code>SpringSecurity</code>官方推荐使用<code>BCryptPasswordEncoder.java</code>，当然也可以使用其他的。</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220415114553.png" alt="image-20220415114550712" /></p><p>如果上面加密都不满足你，也可以自己去实现<code>PasswordEncoder.java</code>接口，然后进行加密的配置。</p><h3 id="2）自动踢掉前一个登录用户">2）自动踢掉前一个登录用户</h3><p>在同一个系统中，可能会出现一个<b>账号重复登录</b>的问题，这时候我们有几种可能</p><ul class="lvl-0"><li class="lvl-2"><p><b>默认</b>：只要账号密码正确，允许一个账号多地登录，</p></li><li class="lvl-2"><p>后一个账号登录时，自动踢掉前一个登录账号</p></li><li class="lvl-2"><p>如果当前账号在线，后面的账号登录将失败</p></li></ul><p>上面的这几种情况，<code>SpringSecurity</code>早就考虑到了，可以通过它的配置解决</p><h4 id="2-1）踢掉已登录用户">2.1）踢掉已登录用户</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                .anyRequest().authenticated()</span><br><span class="line">                .and()</span><br><span class="line">                .sessionManagement()</span><br><span class="line">                .maximumSessions(<span class="number">1</span>);<span class="comment">// 设置最大会话为1，这样就会挤掉前面登录的那个了</span></span><br><span class="line">        http.formLogin();<span class="comment">// 配置默认的登录页面，就是老丑的那个</span></span><br><span class="line">        http.httpBasic();<span class="comment">// 配置http基本认证</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自己可以进行测试下，可以使用不同的浏览器访问，登录同个账号来进行测试</p><h4 id="2-2）禁止新的登录">2.2）禁止新的登录</h4><p>如果当前的账号已在线，新的登录将会失败，那么我们可以这样进行配置</p><p>只需要设置<code>maxSessionsPreventsLogin(true)</code>，再设置一个<code>HttpSessionEventPublisher</code>的<code>bean</code>即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> HttpSessionEventPublisher <span class="title function_">httpSessionEventPublisher</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HttpSessionEventPublisher</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                .anyRequest().authenticated()</span><br><span class="line">                .and()</span><br><span class="line">                .sessionManagement()</span><br><span class="line">                .maximumSessions(<span class="number">1</span>)<span class="comment">// 设置最大会话为1，这样就会挤掉前面登录的那个了</span></span><br><span class="line">                .maxSessionsPreventsLogin(<span class="literal">true</span>);<span class="comment">// 防止最大会话数时新的登录</span></span><br><span class="line">        http.formLogin();<span class="comment">// 配置默认的登录页面，就是老丑的那个</span></span><br><span class="line">        http.httpBasic();<span class="comment">// 配置http基本认证</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样配置完后，由两个不同浏览器进行登录，进行测试</p><h4 id="2-3）使用数据库用户，踢掉已登录用户时出现的问题">2.3）使用数据库用户，踢掉已登录用户时出现的问题</h4><p>在<code>SpringSecurity</code>使用数据库用户的时候，还去使用单点登录，踢掉前一个登录这个功能，会有问题。</p><p>使用数据库登录这块的代码可以查看上面<a href="#7">第六章：连接数据库</a>，在此基础上，我们添加对应的配置方法<code>maximumSessions()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> NoOpPasswordEncoder.getInstance();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                .anyRequest().authenticated()</span><br><span class="line">                .and()</span><br><span class="line">                .sessionManagement()</span><br><span class="line">                .maximumSessions(<span class="number">1</span>);<span class="comment">// 设置最大会话为1，这样就会挤掉前面登录的那个了</span></span><br><span class="line">        http.formLogin();<span class="comment">// 配置默认的登录页面，就是老丑的那个</span></span><br><span class="line">        http.httpBasic();<span class="comment">// 配置http基本认证</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如此再进行测试的话，发现了多个浏览器去登录同个账号，并没有踢掉前一个登录，这是怎么一回事？</p><p>要知道<code>SpringSecurity</code>登录靠的就是<code>session</code>，要想知道发生了什么，我们要进入<code>SpringSecurity</code>管理<code>session</code>的源码中。</p><p><code>SessionRegistryImpl.java</code>就是做这个的，我们简单看看源码（截取）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SessionRegistryImpl</span> <span class="keyword">implements</span> <span class="title class_">SessionRegistry</span>, ApplicationListener&lt;AbstractSessionEvent&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 存储用户session key的容器，key是用户主体，value是session key的集合</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ConcurrentMap&lt;Object, Set&lt;String&gt;&gt; principals;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 保存每个session 信息的容器，key是session key，value是对应的session信息</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, SessionInformation&gt; sessionIds;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">SessionRegistryImpl</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.principals = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class="line"><span class="built_in">this</span>.sessionIds = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerNewSession</span><span class="params">(String sessionId, Object principal)</span> &#123;</span><br><span class="line">        <span class="comment">// 进行校验</span></span><br><span class="line">Assert.hasText(sessionId, <span class="string">&quot;SessionId required as per interface contract&quot;</span>);</span><br><span class="line">Assert.notNull(principal, <span class="string">&quot;Principal required as per interface contract&quot;</span>);</span><br><span class="line">        <span class="comment">// 判断如果存在，则移除</span></span><br><span class="line"><span class="keyword">if</span> (getSessionInformation(sessionId) != <span class="literal">null</span>) &#123;</span><br><span class="line">removeSessionInformation(sessionId);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.logger.isDebugEnabled()) &#123;</span><br><span class="line"><span class="built_in">this</span>.logger.debug(LogMessage.format(<span class="string">&quot;Registering session %s, for principal %s&quot;</span>, sessionId, principal));</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">// 重新添加</span></span><br><span class="line"><span class="built_in">this</span>.sessionIds.put(sessionId, <span class="keyword">new</span> <span class="title class_">SessionInformation</span>(principal, sessionId, <span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line">        <span class="comment">// 添加新的session</span></span><br><span class="line"><span class="built_in">this</span>.principals.compute(principal, (key, sessionsUsedByPrincipal) -&gt; &#123;</span><br><span class="line"><span class="keyword">if</span> (sessionsUsedByPrincipal == <span class="literal">null</span>) &#123;</span><br><span class="line">sessionsUsedByPrincipal = <span class="keyword">new</span> <span class="title class_">CopyOnWriteArraySet</span>&lt;&gt;();</span><br><span class="line">&#125;</span><br><span class="line">sessionsUsedByPrincipal.add(sessionId);</span><br><span class="line"><span class="built_in">this</span>.logger.trace(LogMessage.format(<span class="string">&quot;Sessions used by &#x27;%s&#x27; : %s&quot;</span>, principal, sessionsUsedByPrincipal));</span><br><span class="line"><span class="keyword">return</span> sessionsUsedByPrincipal;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeSessionInformation</span><span class="params">(String sessionId)</span> &#123;</span><br><span class="line">        <span class="comment">// 校验</span></span><br><span class="line">Assert.hasText(sessionId, <span class="string">&quot;SessionId required as per interface contract&quot;</span>);</span><br><span class="line">        <span class="comment">// 获取对应session的信息</span></span><br><span class="line"><span class="type">SessionInformation</span> <span class="variable">info</span> <span class="operator">=</span> getSessionInformation(sessionId);</span><br><span class="line"><span class="keyword">if</span> (info == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.logger.isTraceEnabled()) &#123;</span><br><span class="line"><span class="built_in">this</span>.logger.debug(<span class="string">&quot;Removing session &quot;</span> + sessionId + <span class="string">&quot; from set of registered sessions&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">// 移除</span></span><br><span class="line"><span class="built_in">this</span>.sessionIds.remove(sessionId);</span><br><span class="line">        <span class="comment">// 移除</span></span><br><span class="line"><span class="built_in">this</span>.principals.computeIfPresent(info.getPrincipal(), (key, sessionsUsedByPrincipal) -&gt; &#123;</span><br><span class="line"><span class="built_in">this</span>.logger.debug(</span><br><span class="line">LogMessage.format(<span class="string">&quot;Removing session %s from principal&#x27;s set of registered sessions&quot;</span>, sessionId));</span><br><span class="line">sessionsUsedByPrincipal.remove(sessionId);</span><br><span class="line"><span class="keyword">if</span> (sessionsUsedByPrincipal.isEmpty()) &#123;</span><br><span class="line"><span class="comment">// No need to keep object in principals Map anymore</span></span><br><span class="line"><span class="built_in">this</span>.logger.debug(LogMessage.format(<span class="string">&quot;Removing principal %s from registry&quot;</span>, info.getPrincipal()));</span><br><span class="line">sessionsUsedByPrincipal = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">this</span>.logger.trace(</span><br><span class="line">LogMessage.format(<span class="string">&quot;Sessions used by &#x27;%s&#x27; : %s&quot;</span>, info.getPrincipal(), sessionsUsedByPrincipal));</span><br><span class="line"><span class="keyword">return</span> sessionsUsedByPrincipal;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这新增和移除<code>session</code>写的明明白白的呀，怎么回事？</p><p>不急，先看看他们使用什么进行管理<code>session</code>的，是<code>Map</code>容器，他们根据对应的<code>key</code>来判断冲突。所以我们只需要查看<code>Object principal</code>是什么就好。</p><blockquote><p>怎么看<code>Object principal</code>是什么，打个断点debug一下</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220416231554.png" alt="image-20220416231552843" /></p><p>熟悉吗？这个是我们自己设置的用户详情类<code>UserDetailBO.java</code>。</p><p>所以这里结合<code>Map</code>容器就有了一个坑，那就是<b>在使用对象作为<code>Map</code>容器的<code>key</code>时，记得要重写他们的<code>equal()</code>和<code>hashCode()</code>这两个方法</b>。至于为什么，这是<code>Map</code>容器中的知识。。。</p></blockquote><p>所以我们重写这个类的<code>equal()</code>和<code>hashCode()</code>，其他方法代码省略…</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDetailBO</span> <span class="keyword">implements</span> <span class="title class_">UserDetails</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserDetailBO</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.user = user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span> == o) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="literal">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">UserDetailBO</span> <span class="variable">that</span> <span class="operator">=</span> (UserDetailBO) o;</span><br><span class="line">        <span class="keyword">return</span> Objects.equals(user.getUsername(), that.user.getUsername());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(user.getUsername());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3）获取当前登录用户的信息">3）获取当前登录用户的信息</h3><p>在web开发中，我们肯定要去获取当前请求接口的用户信息的，那么我们该如何去获取呢？</p><p>直接点，上代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.security.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.security.bo.UserDetailBO;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.Authentication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.context.SecurityContextHolder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetails;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">Authentication</span> <span class="variable">authentication</span> <span class="operator">=</span> SecurityContextHolder.getContext().getAuthentication();</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> authentication.getName();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;其他功能，获取当前登录用户：&quot;</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/username&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">username</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Authentication</span> <span class="variable">authentication</span> <span class="operator">=</span> SecurityContextHolder.getContext().getAuthentication();</span><br><span class="line">        <span class="type">UserDetailBO</span> <span class="variable">bo</span> <span class="operator">=</span> (UserDetailBO) authentication.getPrincipal();</span><br><span class="line">        log.info(<span class="string">&quot;用户信息：&#123;&#125;&quot;</span>, bo);</span><br><span class="line">        <span class="keyword">return</span> bo.getUsername();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们访问<code>/hello</code>和<code>/username</code>时，将会获取到当前的用户名</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220422174746.png" alt="image-20220422174742284" /></p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220422174659.png" alt="image-20220422174658341" /></p><h2 id="八、动态配置权限">八、动态配置权限</h2><p>在项目中，我们又该如何去使用这些功能呢。下面将会给出一种方法，也是我喜欢的一种写法，仅供参考。</p><blockquote><p>不好说是不是标准的**RBAC（Role-Based Access Control）**权限模型，但八九也不离十了</p><p>给用户分配角色，给角色分配资源（权限），分配到角色的用户可以访问这些资源。</p><p>往往这些用户，角色，资源的配置都是动态的，这样我们又该如何去进行配置呢？</p></blockquote><h3 id="1）数据库建表">1）数据库建表</h3><p>建表语句如下，</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `sys_user` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `username` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户名&#x27;</span>,</span><br><span class="line">  `password` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">3</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 COMMENT<span class="operator">=</span><span class="string">&#x27;用户表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `sys_user_role` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `user_id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户ID&#x27;</span>,</span><br><span class="line">  `role_id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;角色ID&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `unique_user_role` (`user_id`,`role_id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 COMMENT<span class="operator">=</span><span class="string">&#x27;用户角色表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `sys_role` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;角色名称&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 COMMENT<span class="operator">=</span><span class="string">&#x27;角色表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `sys_role_permission` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `role_id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;角色ID&#x27;</span>,</span><br><span class="line">  `permission_id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;权限ID&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  KEY `unique_role_permission` (`role_id`,`permission_id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 COMMENT<span class="operator">=</span><span class="string">&#x27;角色权限表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `sys_permission` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `menu_id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;权限名称&#x27;</span>,</span><br><span class="line">  `description` <span class="type">varchar</span>(<span class="number">200</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;权限说明&#x27;</span>,</span><br><span class="line">  `url` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;权限请求url&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">6</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 COMMENT<span class="operator">=</span><span class="string">&#x27;权限表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `sys_role_menu` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `role_id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;角色ID&#x27;</span>,</span><br><span class="line">  `menu_id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;菜单ID&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `unique_role_menu` (`role_id`,`menu_id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 COMMENT<span class="operator">=</span><span class="string">&#x27;角色菜单表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `sys_menu` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `parent_id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;父级菜单ID&#x27;</span>,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;菜单名称&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 COMMENT<span class="operator">=</span><span class="string">&#x27;菜单表&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="2）配置">2）配置</h3><p>注意，此处配置时<mark>前后端不分离</mark>的配置模式，大家可以根据自己的需求，改成前后端分离的模式。</p><h4 id="2-1）maven和配置文件">2.1）maven和配置文件</h4><p>maven依赖和配置文件和上述的自定义实现类基本一致，就是多了一个<code>redis</code>，</p><p>还有其他工具包，就不放出来了</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- redis --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- mysql连接驱动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- mybatis-plus --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- lombok简化包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 测试 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/test?serverTimezone=Asia/Shanghai&amp;allowMultiQueries=true</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">1234</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># mybatis-plus的相关配置</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath*:/mapper/*.xml</span></span><br><span class="line">  <span class="attr">typeAliasesPackage:</span> <span class="string">com.banmoon.security.entity</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">AUTO</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">cache-enabled:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">call-setters-on-nulls:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">jdbc-type-for-null:</span> <span class="string">&#x27;null&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="2-2）实体和Mapper">2.2）实体和Mapper</h4><p>这些你都要手写吗？抓紧去看代码生成器，网上也是一抓一大把。</p><p>这边简单放一个<code>User.java</code>的，剩余的你们自己生成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableName;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.IdType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableId;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.EqualsAndHashCode;</span><br><span class="line"><span class="keyword">import</span> lombok.experimental.Accessors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 用户表</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 半月无霜</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-06-21</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = false)</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span></span><br><span class="line"><span class="meta">@TableName(&quot;sys_user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableId(value = &quot;id&quot;, type = IdType.AUTO)</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 密码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.test.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 用户表 Mapper 接口</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 半月无霜</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2022-06-21</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.banmoon.test.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 通用查询映射结果 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;BaseResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.banmoon.test.entity.User&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;username&quot;</span> <span class="attr">property</span>=<span class="string">&quot;username&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;password&quot;</span> <span class="attr">property</span>=<span class="string">&quot;password&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-3）SpringSecurity配置">2.3）SpringSecurity配置</h4><p>终于到了<code>SpringSecurity</code>配置，这一块其实在上面讲过一些了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.security.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.security.handler.AccessDecisionManagerHandler;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.security.handler.MyObjectPostProcessor;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.security.handler.MySecurityMetadataSource;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.security.service.impl.UserServiceImpl;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.WebSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.password.NoOpPasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MySecurityMetadataSource mySecurityMetadataSource;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserServiceImpl userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> NoOpPasswordEncoder.getInstance();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 此配置重写，主要是认证相关的，也就是登录用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> auth</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        auth.userDetailsService(userService);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 白名单，静态资源过滤</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> web</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(WebSecurity web)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="built_in">super</span>.configure(web);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这里配置了登录登出等</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> http</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 动态配置权限</span></span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                .withObjectPostProcessor(<span class="keyword">new</span> <span class="title class_">MyObjectPostProcessor</span>(mySecurityMetadataSource, <span class="keyword">new</span> <span class="title class_">AccessDecisionManagerHandler</span>()))</span><br><span class="line">                .anyRequest().permitAll();</span><br><span class="line">        http.formLogin()</span><br><span class="line">                .defaultSuccessUrl(<span class="string">&quot;/hello/hello&quot;</span>)</span><br><span class="line">                .and()</span><br><span class="line">                .csrf()</span><br><span class="line">                .disable();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>MyObjectPostProcessor.java</code>，简单的说就是为<code>FilterSecurityInterceptor</code>实例设置两个自定义的处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.security.handler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.security.access.AccessDecisionManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.ObjectPostProcessor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.access.intercept.FilterInvocationSecurityMetadataSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.access.intercept.FilterSecurityInterceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyObjectPostProcessor</span> <span class="keyword">implements</span> <span class="title class_">ObjectPostProcessor</span>&lt;FilterSecurityInterceptor&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> FilterInvocationSecurityMetadataSource metadataSource;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AccessDecisionManager accessDecisionManager;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyObjectPostProcessor</span><span class="params">(FilterInvocationSecurityMetadataSource metadataSource, AccessDecisionManager accessDecisionManager)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.metadataSource = metadataSource;</span><br><span class="line">        <span class="built_in">this</span>.accessDecisionManager = accessDecisionManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;O <span class="keyword">extends</span> <span class="title class_">FilterSecurityInterceptor</span>&gt; O <span class="title function_">postProcess</span><span class="params">(O fsi)</span> &#123;</span><br><span class="line">        fsi.setSecurityMetadataSource(metadataSource);</span><br><span class="line">        fsi.setAccessDecisionManager(accessDecisionManager);</span><br><span class="line">        <span class="keyword">return</span> fsi;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>MySecurityMetadataSource.java</code>，找到访问当前资源需要什么权限</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.security.handler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.security.entity.Permission;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.security.entity.Role;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.security.service.IPermissionService;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.security.service.IRoleService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.access.ConfigAttribute;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.access.SecurityConfig;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.FilterInvocation;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.access.intercept.FilterInvocationSecurityMetadataSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.AntPathMatcher;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MySecurityMetadataSource</span> <span class="keyword">implements</span> <span class="title class_">FilterInvocationSecurityMetadataSource</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IPermissionService permissionService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IRoleService roleService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;ConfigAttribute&gt; <span class="title function_">getAttributes</span><span class="params">(Object object)</span> <span class="keyword">throws</span> IllegalArgumentException &#123;</span><br><span class="line">        <span class="type">AntPathMatcher</span> <span class="variable">antPathMatcher</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AntPathMatcher</span>();</span><br><span class="line">        <span class="comment">// 获取请求URI</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">requestURI</span> <span class="operator">=</span> ((FilterInvocation) object).getRequest().getRequestURI();</span><br><span class="line">        <span class="comment">// 获取当前所有的资源许可</span></span><br><span class="line">        List&lt;Permission&gt; permissionList = permissionService.list();</span><br><span class="line">        <span class="keyword">for</span> (Permission permission : permissionList) &#123;</span><br><span class="line">            <span class="comment">// 找到与当前请求路径匹配的资源许可</span></span><br><span class="line">            <span class="keyword">if</span> (antPathMatcher.match(permission.getUrl(), requestURI)) &#123;</span><br><span class="line">                <span class="comment">// 查看当前资源许可，有哪些角色可以访问</span></span><br><span class="line">                List&lt;Role&gt; roleList = roleService.queryListByPermissionId(permission.getId());</span><br><span class="line">                String[] roles = roleList.stream()</span><br><span class="line">                        .map(Role::getName)</span><br><span class="line">                        .toArray(String[]::<span class="keyword">new</span>);</span><br><span class="line">                <span class="keyword">return</span> SecurityConfig.createList(roles);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;ConfigAttribute&gt; <span class="title function_">getAllConfigAttributes</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">supports</span><span class="params">(Class&lt;?&gt; clazz)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> FilterInvocation.class.isAssignableFrom(clazz);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>AccessDecisionManagerHandler.java</code>，主要将可以访问此资源的权限集合，和用户拥有的权限进行对比</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.security.handler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.security.access.AccessDecisionManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.access.AccessDeniedException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.access.ConfigAttribute;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.authentication.InsufficientAuthenticationException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.Authentication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.GrantedAuthority;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 访问决策管理器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccessDecisionManagerHandler</span> <span class="keyword">implements</span> <span class="title class_">AccessDecisionManager</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">decide</span><span class="params">(Authentication authentication, Object object, Collection&lt;ConfigAttribute&gt; configAttributes)</span> <span class="keyword">throws</span> AccessDeniedException, InsufficientAuthenticationException &#123;</span><br><span class="line">        <span class="comment">// 获取用户权限列表</span></span><br><span class="line">        List&lt;String&gt; permissionList = authentication.getAuthorities()</span><br><span class="line">                .stream()</span><br><span class="line">                .map(GrantedAuthority::getAuthority)</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        <span class="comment">// 可以访问当前资源的权限列表，进行比较</span></span><br><span class="line">        <span class="keyword">for</span> (ConfigAttribute item : configAttributes) &#123;</span><br><span class="line">            <span class="keyword">if</span> (permissionList.contains(item.getAttribute())) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AccessDeniedException</span>(<span class="string">&quot;没有操作权限&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">supports</span><span class="params">(ConfigAttribute attribute)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">supports</span><span class="params">(Class&lt;?&gt; clazz)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要就是上面这两个了，即可实现动态权限的配置。</p><p>还有一些基本的没有列出来，比如<code>UserDetailsService.java</code>的实现类，<code>UserDetails.java</code>的实现类。在以前的章节都讲过，此处就不再赘述了</p><h2 id="九、最后">九、最后</h2><p>我是半月，你我一同共勉！</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20230324142656.png" alt="SpringSecurity1-0" /></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> demo </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是闭包，Java中有闭包吗？</title>
      <link href="/archive/a2eda5f0/"/>
      <url>/archive/a2eda5f0/</url>
      
        <content type="html"><![CDATA[<h1>什么是闭包，Java中有闭包吗？</h1><h2 id="一、介绍">一、介绍</h2><p>闭包是什么？我学习<code>Java</code>以来，虽然听过这个名词，但我今天才第一次了解它。</p><p><b>所谓闭包，就是在函数中有另一个函数，这个内部函数可以作为参数，外部通过传递的方式，将函数传递进来。从而内部函数可以访问到外部函数的局部变脸。</b></p><h2 id="二、演示">二、演示</h2><p>我们使用<code>groovy</code>来演示闭包的使用，它是一门由<code>java</code>优化而来的语言，底层正是<code>class</code>，可以运行再<code>JVM</code>虚拟机上。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> sth(Closure closure) &#123;</span><br><span class="line">    <span class="keyword">def</span> x = <span class="number">5</span></span><br><span class="line">    <span class="keyword">def</span> y = <span class="number">5</span></span><br><span class="line">    println(closure.call(x, y))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加</span></span><br><span class="line">sth(&#123;x, y -&gt; x + y&#125;)</span><br><span class="line"><span class="comment">// 减</span></span><br><span class="line">sth(&#123;x, y -&gt; x - y&#125;)</span><br><span class="line"><span class="comment">// 乘</span></span><br><span class="line">sth(&#123;x, y -&gt; x * y&#125;)</span><br><span class="line"><span class="comment">// 除</span></span><br><span class="line">sth(&#123;x, y -&gt; x / y&#125;)</span><br></pre></td></tr></table></figure><p>运行结果如下</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20230313203623.png" alt="image-20230313180656370" /></p><p>在<code>Java</code>中，我们可以使用匿名内部类来完成类似的功能，而在<code>Java8</code>后，可以直接使用<code>lambda</code>表达式，使得编码速度大大提升，语法结构也变得大同小异了起来</p><p>使用如下，是不是差不多</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test.closure;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.function.BiFunction;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        sth((x, y) -&gt; x + y);</span><br><span class="line">        sth((x, y) -&gt; x - y);</span><br><span class="line">        sth((x, y) -&gt; x * y);</span><br><span class="line">        sth((x, y) -&gt; x / y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sth</span><span class="params">(BiFunction&lt;Integer, Integer, Object&gt; function)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">        System.out.println(function.apply(x, y));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20230313203656.png" alt="image-20230313203654844" /></p><p>关于函数式编程，可以看我的这篇文章，<a href="https://www.banmoon.top/archive/675ec0a7/">Java的函数式接口以及Lambda表达式</a></p><h2 id="三、最后">三、最后</h2><p>我是半月，你我一同共勉！</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> demo </tag>
            
            <tag> jdk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue2路由</title>
      <link href="/archive/4d004f0e/"/>
      <url>/archive/4d004f0e/</url>
      
        <content type="html"><![CDATA[<h1>vue2路由</h1><h2 id="一、介绍">一、介绍</h2><p>本文是以前学习 <code>vue2</code>时整理的，对于目前的 <code>vue3</code>有些过时。</p><p>专注后端，前端只作为使用学习。</p><h2 id="二、路由">二、路由</h2><ul class="lvl-0"><li class="lvl-2"><p><mark>作用</mark>：用于维护URL跳转和页面之间的关系</p></li><li class="lvl-2"><p><mark>使用步骤</mark>：</p><ol><li class="lvl-5"><p>引入vue-router.js文件（必须先引入vue.js）</p></li><li class="lvl-5"><p>配置路由规则，url和对应的页面的配置<code>const routes = [&#123; path: &quot;/&quot;, compontent: &quot;组件&quot; &#125;]</code></p></li><li class="lvl-5"><p>创建路由实例对象<code>const router = new VueRouter(&#123;routes&#125;)</code></p><ul class="lvl-4"><li class="lvl-7"><p><mark>routes</mark>：路由规则</p><ul class="lvl-6"><li class="lvl-9"><p><i>path</i>：访问的url</p></li><li class="lvl-9"><p><i>component</i>：指定的组件</p></li><li class="lvl-9"><p><i>name</i>：路由规则名</p></li><li class="lvl-9"><p>props：是否解耦路由参数</p></li><li class="lvl-9"><p><i>redirect</i>：路由重定向</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 当访问/home时，会自动跳转至/index</span><br><span class="line"><span class="punctuation">[</span><span class="punctuation">&#123;</span> path<span class="punctuation">:</span> <span class="string">&quot;/home&quot;</span> redirect<span class="punctuation">:</span> <span class="string">&quot;/index&quot;</span> <span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure></li></ul></li><li class="lvl-7"><p><mark>linkActiveClass</mark>：指定当前路由的激活类名，默认为<code>router-link-active</code></p></li><li class="lvl-7"><p><mark>mode</mark>：默认为hash，路径上会多出<code>#</code>号，可修改为history（此模式必须在服务器打开网页）</p></li></ul></li><li class="lvl-5"><p>将路由实例对象注册到vue实例中 <code>new Vue(&#123; router &#125;)</code></p></li><li class="lvl-5"><p>在页面中使用路由占位符，来为路由的组件占位<code>&lt;router-view /&gt;</code></p></li></ol></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#/&quot;</span>&gt;</span>主页<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#/details&quot;</span>&gt;</span>详情<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#/info&quot;</span>&gt;</span>个人中心<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 路由占位符 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue-router/dist/vue-router.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 只能通过变量的方式获得组件</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> coma = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">            &lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">            &lt;h1&gt;&#123;&#123; h1 &#125;&#125;&lt;/h1&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">    &lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">`</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">h1</span>: <span class="string">&quot;主页&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> comb = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">            &lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">            &lt;h1&gt;&#123;&#123; h1 &#125;&#125;&lt;/h1&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">    &lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">`</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">h1</span>: <span class="string">&quot;详情&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> comc = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">        &lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">        &lt;h1&gt;&#123;&#123; h1 &#125;&#125;&lt;/h1&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">    &lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">`</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">h1</span>: <span class="string">&quot;个人中心&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">routes</span>: [</span></span><br><span class="line"><span class="language-javascript">            &#123; <span class="attr">path</span>: <span class="string">&quot;/&quot;</span>, <span class="attr">component</span>: coma &#125;,</span></span><br><span class="line"><span class="language-javascript">            &#123; <span class="attr">path</span>: <span class="string">&quot;/details&quot;</span>, <span class="attr">component</span>: comb &#125;,</span></span><br><span class="line"><span class="language-javascript">            &#123; <span class="attr">path</span>: <span class="string">&quot;/info&quot;</span>, <span class="attr">component</span>: comc &#125;,</span></span><br><span class="line"><span class="language-javascript">        ]</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">title</span>: <span class="string">&quot;路由&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">router</span>: router</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1）router-link标签，及当前路由高亮">1）<mark>router-link</mark>标签，及当前路由高亮</h3><ul class="lvl-0"><li class="lvl-2"><p><code>&lt;router-link&gt;</code></p><ul class="lvl-2"><li class="lvl-4">tag：指定生成的元素标签，默认为a标签</li><li class="lvl-4">to：跳转的路由路径</li><li class="lvl-4">exact：路由严格匹配模式</li><li class="lvl-4">replace：点击路由跳转后，不会留下history记录</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">span</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-left</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">16px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.router-link-active</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">22px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- tag 默认生成a标签，可指定生成目标元素 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- exact 路由严格匹配 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">tag</span>=<span class="string">&quot;span&quot;</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span> <span class="attr">exact</span>&gt;</span>主页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">tag</span>=<span class="string">&quot;span&quot;</span> <span class="attr">to</span>=<span class="string">&quot;/details&quot;</span>&gt;</span>详情<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">tag</span>=<span class="string">&quot;span&quot;</span> <span class="attr">to</span>=<span class="string">&quot;/info&quot;</span>&gt;</span>个人中心<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 路由占位符 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue-router/dist/vue-router.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> coma = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">            &lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">            &lt;h1&gt;&#123;&#123; h1 &#125;&#125;&lt;/h1&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">    &lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">`</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">h1</span>: <span class="string">&quot;主页&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> comb = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">            &lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">            &lt;h1&gt;&#123;&#123; h1 &#125;&#125;&lt;/h1&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">    &lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">`</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">h1</span>: <span class="string">&quot;详情&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> comc = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">        &lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">        &lt;h1&gt;&#123;&#123; h1 &#125;&#125;&lt;/h1&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">    &lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">`</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">h1</span>: <span class="string">&quot;个人中心&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 指定当前路由的类名，默认为router-link-active</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">linkActiveClass</span>: <span class="string">&quot;router-link-active&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">routes</span>: [</span></span><br><span class="line"><span class="language-javascript">            &#123; <span class="attr">path</span>: <span class="string">&quot;/&quot;</span>, <span class="attr">component</span>: coma &#125;,</span></span><br><span class="line"><span class="language-javascript">            &#123; <span class="attr">path</span>: <span class="string">&quot;/details&quot;</span>, <span class="attr">component</span>: comb &#125;,</span></span><br><span class="line"><span class="language-javascript">            &#123; <span class="attr">path</span>: <span class="string">&quot;/info&quot;</span>, <span class="attr">component</span>: comc &#125;,</span></span><br><span class="line"><span class="language-javascript">        ]</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">title</span>: <span class="string">&quot;路由&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">router</span>: router</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2）404路由">2）404路由</h3><ul class="lvl-0"><li class="lvl-2"><p><mark>介绍</mark>：当访问一个不存在的url时，指向404路由配置的组件</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#/&quot;</span>&gt;</span>主页<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#/details&quot;</span>&gt;</span>详情<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#/info&quot;</span>&gt;</span>个人中心<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 路由占位符 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/vue/2.5.9/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/vue-router/3.0.1/vue-router.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> notFound = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;h1&gt;404，您的页面未找到哦&lt;/h1&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">`</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> coma = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;h1&gt;&#123;&#123; h1 &#125;&#125;&lt;/h1&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">    &lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">`</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">h1</span>: <span class="string">&quot;主页&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">routes</span>: [</span></span><br><span class="line"><span class="language-javascript">            &#123; <span class="attr">path</span>: <span class="string">&quot;/&quot;</span>, <span class="attr">component</span>: coma &#125;,</span></span><br><span class="line"><span class="language-javascript">            &#123; <span class="attr">path</span>: <span class="string">&quot;*&quot;</span>, <span class="attr">component</span>: notFound &#125;</span></span><br><span class="line"><span class="language-javascript">        ]</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">title</span>: <span class="string">&quot;路由&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">router</span>: router</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3）命名路由">3）命名路由</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123; name: &#x27;index&#x27; &#125;&quot;</span> <span class="attr">exact</span>&gt;</span>主页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123; name: &#x27;details&#x27; &#125;&quot;</span>&gt;</span>详情<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123; name: &#x27;info&#x27; &#125;&quot;</span>&gt;</span>个人中心<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 路由占位符 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/vue/2.5.9/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/vue-router/3.0.1/vue-router.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 只能通过变量的方式获得组件</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> coma = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;h1&gt;&#123;&#123; h1 &#125;&#125;&lt;/h1&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">    &lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">`</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">h1</span>: <span class="string">&quot;主页&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> comb = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;h1&gt;&#123;&#123; h1 &#125;&#125;&lt;/h1&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">    &lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">`</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">h1</span>: <span class="string">&quot;详情&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> comc = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;h1&gt;&#123;&#123; h1 &#125;&#125;&lt;/h1&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">    &lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">`</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">h1</span>: <span class="string">&quot;个人中心&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">routes</span>: [</span></span><br><span class="line"><span class="language-javascript">            &#123; <span class="attr">path</span>: <span class="string">&quot;/&quot;</span>, <span class="attr">component</span>: coma, <span class="attr">name</span>: <span class="string">&quot;index&quot;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">            &#123; <span class="attr">path</span>: <span class="string">&quot;/details&quot;</span>, <span class="attr">component</span>: comb, <span class="attr">name</span>: <span class="string">&quot;details&quot;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">            &#123; <span class="attr">path</span>: <span class="string">&quot;/info&quot;</span>, <span class="attr">component</span>: comc, <span class="attr">name</span>: <span class="string">&quot;info&quot;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">        ]</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">title</span>: <span class="string">&quot;路由&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">router</span>: router</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4）动态路由">4）动态路由</h3><ul class="lvl-0"><li class="lvl-2"><p><mark>作用</mark>：可以获取当前url上的参数，进而做出一些处理</p></li></ul><h4 id="4-1、基本使用">4.1、基本使用</h4><ul class="lvl-0"><li class="lvl-2"><p><mark>作用</mark>：获取url上绑定的占位符</p></li><li class="lvl-2"><p>路径示例：/user/get/101</p></li><li class="lvl-2"><p>实现步骤：</p><ol><li class="lvl-5">定义占位：<code>&#123; path: &quot;/info/:id&quot;, component: comc &#125;</code></li><li class="lvl-5">获取参数对象：<code>this.$route.params</code></li></ol></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span>&gt;</span>主页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/details&quot;</span>&gt;</span>详情<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/info&quot;</span>&gt;</span>个人中心<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/info/300&quot;</span>&gt;</span>300的个人中心<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/info/500&quot;</span>&gt;</span>500的个人中心<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 路由占位符 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue-router/dist/vue-router.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> coma = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;h1&gt;&#123;&#123; h1 &#125;&#125;&lt;/h1&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">    &lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">`</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">h1</span>: <span class="string">&quot;主页&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> comb = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;h1&gt;&#123;&#123; h1 &#125;&#125;&lt;/h1&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">    &lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">`</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">h1</span>: <span class="string">&quot;详情&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> comc = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 使用 $route.params 可以找到参数</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;h1&gt;&#123;&#123; h1 &#125;&#125;&lt;/h1&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;h2&gt;id:&#123;&#123; $route.params.id &#125;&#125;&lt;/h2&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">    &lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">`</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">h1</span>: <span class="string">&quot;个人中心&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">created</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">params</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">routes</span>: [</span></span><br><span class="line"><span class="language-javascript">            &#123; <span class="attr">path</span>: <span class="string">&quot;/&quot;</span>, <span class="attr">component</span>: coma, &#125;,</span></span><br><span class="line"><span class="language-javascript">            &#123; <span class="attr">path</span>: <span class="string">&quot;/details&quot;</span>, <span class="attr">component</span>: comb, &#125;,</span></span><br><span class="line"><span class="language-javascript">            &#123; <span class="attr">path</span>: <span class="string">&quot;/info/:id&quot;</span>, <span class="attr">component</span>: comc, &#125;,</span></span><br><span class="line"><span class="language-javascript">        ]</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">title</span>: <span class="string">&quot;动态路由&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">router</span>: router</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-2、获取参数及router-link标签传递参数">4.2、获取参数及<mark>router-link</mark>标签传递参数</h4><ul class="lvl-0"><li class="lvl-2"><p><mark>作用</mark>：获取?号后的参数</p></li><li class="lvl-2"><p>路径示例：/user/get?name=banmoon&amp;sex=1</p></li><li class="lvl-2"><p>实现步骤</p><ol><li class="lvl-5">正常定义路由：<code>&#123; name: &quot;infoPage&quot;, path: &quot;/info&quot;, component: comc &#125;</code></li><li class="lvl-5">获取参数：<code>this.$route.query</code></li></ol></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span>&gt;</span>主页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/details&quot;</span>&gt;</span>详情<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/info&quot;</span>&gt;</span>个人中心<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">tag</span>=<span class="string">&quot;li&quot;</span> <span class="attr">:to</span>=<span class="string">&quot;&#123; path: &#x27;/info&#x27;, query: &#123; name: &#x27;banmoon&#x27;, sex: 1 &#125; &#125;&quot;</span>&gt;</span>个人中心查询1<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">tag</span>=<span class="string">&quot;li&quot;</span> <span class="attr">:to</span>=<span class="string">&quot;&#123; path: &#x27;/info&#x27;, query: &#123; name: &#x27;user&#x27;, sex: 2 &#125; &#125;&quot;</span>&gt;</span>个人中心查询2<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 路由命名查询 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">tag</span>=<span class="string">&quot;li&quot;</span> <span class="attr">:to</span>=<span class="string">&quot;&#123; name: &#x27;infoPage&#x27;, query: &#123; name: &#x27;san&#x27;, sex: 1 &#125; &#125;&quot;</span>&gt;</span>命名查询<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 路由占位符 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue-router/dist/vue-router.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    const coma = &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        template: `</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><span class="template-variable">&#123;&#123; <span class="name">h1</span> &#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">`,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        data() &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            return&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                h1: &quot;主页&quot;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    &#125;;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    const comb = &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        template: `</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><span class="template-variable">&#123;&#123; <span class="name">h1</span> &#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">`,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        data() &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            return&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                h1: &quot;详情&quot;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    &#125;;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    const comc = &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        // 使用 $route.params 可以找到参数</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        template: `</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><span class="template-variable">&#123;&#123; <span class="name">h1</span> &#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>查询条件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(value, key) in $route.query&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        </span><span class="template-variable">&#123;&#123; <span class="name">key</span> &#125;&#125;</span><span class="language-xml"> : </span><span class="template-variable">&#123;&#123; <span class="name">value</span> &#125;&#125;</span><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        `,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        data() &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            return&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                h1: &quot;个人中心&quot;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        created()&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            console.log(this.$route.query);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    &#125;;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    var router = new VueRouter(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        routes: [</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#123; path: &quot;/&quot;, component: coma, &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#123; path: &quot;/details&quot;, component: comb, &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#123; name: &quot;infoPage&quot;, path: &quot;/info&quot;, component: comc, &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        ]</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    &#125;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    new Vue(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        el: &quot;#app&quot;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        data: &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            title: &quot;动态路由&quot;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        router: router</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    &#125;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5）编程式路由">5）编程式路由</h3><ul class="lvl-0"><li class="lvl-2"><p>js方法实现路由跳转</p><ul class="lvl-2"><li class="lvl-4"><mark>$router.push()</mark>：导航跳转</li><li class="lvl-4"><mark>$router.replace()</mark>：同上，但它不会向 history 添加新记录，也就是无痕浏览</li><li class="lvl-4"><mark>$router.go(n)</mark>：前进n级路由，n为负数时，回退到前几步</li></ul></li></ul><h4 id="5-1、router-push">5.1、router.push()</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;skip01&quot;</span>&gt;</span>主页<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;skip02&quot;</span>&gt;</span>详情<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;skip03&quot;</span>&gt;</span>个人中心<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 路由占位符 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue-router/dist/vue-router.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> coma = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">            &lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">            &lt;h1&gt;&#123;&#123; h1 &#125;&#125;&lt;/h1&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">    &lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">`</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">h1</span>: <span class="string">&quot;主页&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> comb = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;h1&gt;&#123;&#123; h1 &#125;&#125;&lt;/h1&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">    &lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">`</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">h1</span>: <span class="string">&quot;详情&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> comc = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;h1&gt;&#123;&#123; h1 &#125;&#125;&lt;/h1&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;h2&gt;查询条件&lt;/h2&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;ul&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;li v-for=&quot;(value, key) in $route.query&quot;&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&#123;&#123; key &#125;&#125; : &#123;&#123; value &#125;&#125;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">    &lt;/li&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">    &lt;/ul&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">    &lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">`</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">h1</span>: <span class="string">&quot;个人中心&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">routes</span>: [</span></span><br><span class="line"><span class="language-javascript">            &#123; <span class="attr">path</span>: <span class="string">&quot;/&quot;</span>, <span class="attr">component</span>: coma &#125;,</span></span><br><span class="line"><span class="language-javascript">            &#123; <span class="attr">name</span>: <span class="string">&quot;detailsPage&quot;</span>, <span class="attr">path</span>: <span class="string">&quot;/details&quot;</span>, <span class="attr">component</span>: comb &#125;,</span></span><br><span class="line"><span class="language-javascript">            &#123; <span class="attr">path</span>: <span class="string">&quot;/info&quot;</span>, <span class="attr">component</span>: comc &#125;,</span></span><br><span class="line"><span class="language-javascript">        ]</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">title</span>: <span class="string">&quot;编程式导航&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">router</span>: router,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">skip01</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//this.$router.push(&quot;/&quot;);</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123; <span class="attr">path</span>: <span class="string">&quot;/&quot;</span> &#125;);</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">skip02</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;detailsPage&#x27;</span> &#125;);</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">skip03</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123; <span class="attr">path</span>: <span class="string">&#x27;/info&#x27;</span>, <span class="attr">query</span>: &#123; <span class="attr">name</span>: <span class="string">&#x27;banmoon&#x27;</span>, <span class="attr">sex</span>: <span class="number">1</span> &#125; &#125;);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="5-2、router-replace">5.2、router.replace()</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;skip01&quot;</span>&gt;</span>主页<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;skip02&quot;</span>&gt;</span>详情<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;skip03&quot;</span>&gt;</span>个人中心<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 路由占位符 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue-router/dist/vue-router.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> coma = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;h1&gt;&#123;&#123; h1 &#125;&#125;&lt;/h1&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">    &lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">`</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">h1</span>: <span class="string">&quot;主页&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> comb = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;h1&gt;&#123;&#123; h1 &#125;&#125;&lt;/h1&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">    &lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">`</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">h1</span>: <span class="string">&quot;详情&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> comc = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;h1&gt;&#123;&#123; h1 &#125;&#125;&lt;/h1&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;h2&gt;查询条件&lt;/h2&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;ul&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;li v-for=&quot;(value, key) in $route.query&quot;&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&#123;&#123; key &#125;&#125; : &#123;&#123; value &#125;&#125;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">    &lt;/li&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">    &lt;/ul&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">    &lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">`</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">h1</span>: <span class="string">&quot;个人中心&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">routes</span>: [</span></span><br><span class="line"><span class="language-javascript">            &#123; <span class="attr">path</span>: <span class="string">&quot;/&quot;</span>, <span class="attr">component</span>: coma &#125;,</span></span><br><span class="line"><span class="language-javascript">            &#123; <span class="attr">name</span>: <span class="string">&quot;detailsPage&quot;</span>, <span class="attr">path</span>: <span class="string">&quot;/details&quot;</span>, <span class="attr">component</span>: comb &#125;,</span></span><br><span class="line"><span class="language-javascript">            &#123; <span class="attr">path</span>: <span class="string">&quot;/info&quot;</span>, <span class="attr">component</span>: comc &#125;,</span></span><br><span class="line"><span class="language-javascript">        ]</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">title</span>: <span class="string">&quot;编程式导航&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">router</span>: router,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">skip01</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">replace</span>(&#123; <span class="attr">path</span>: <span class="string">&quot;/&quot;</span> &#125;);</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">skip02</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">replace</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;detailsPage&#x27;</span> &#125;);</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">skip03</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">replace</span>(&#123; <span class="attr">path</span>: <span class="string">&#x27;/info&#x27;</span>, <span class="attr">query</span>: &#123; <span class="attr">name</span>: <span class="string">&#x27;banmoon&#x27;</span>, <span class="attr">sex</span>: <span class="number">1</span> &#125; &#125;);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="5-3、-router-go">5.3、$router.go()</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;goback(-1)&quot;</span>&gt;</span>返回上一页<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;goback(1)&quot;</span>&gt;</span>进入下一页<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span>&gt;</span>主页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/details&quot;</span>&gt;</span>详情<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/info&quot;</span>&gt;</span>个人中心<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 路由占位符 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue-router/dist/vue-router.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> coma = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;h1&gt;&#123;&#123; h1 &#125;&#125;&lt;/h1&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">    &lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">`</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">h1</span>: <span class="string">&quot;主页&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> comb = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;h1&gt;&#123;&#123; h1 &#125;&#125;&lt;/h1&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">    &lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">`</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">h1</span>: <span class="string">&quot;详情&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> comc = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;h1&gt;&#123;&#123; h1 &#125;&#125;&lt;/h1&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">    &lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">`</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">h1</span>: <span class="string">&quot;个人中心&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">routes</span>: [</span></span><br><span class="line"><span class="language-javascript">            &#123; <span class="attr">path</span>: <span class="string">&quot;/&quot;</span>, <span class="attr">component</span>: coma &#125;,</span></span><br><span class="line"><span class="language-javascript">            &#123; <span class="attr">path</span>: <span class="string">&quot;/details&quot;</span>, <span class="attr">component</span>: comb &#125;,</span></span><br><span class="line"><span class="language-javascript">            &#123; <span class="attr">path</span>: <span class="string">&quot;/info&quot;</span>, <span class="attr">component</span>: comc &#125;,</span></span><br><span class="line"><span class="language-javascript">        ]</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">title</span>: <span class="string">&quot;编程式导航&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">router</span>: router,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">goback</span>(<span class="params">n</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">go</span>(n);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="6）路由设置title">6）路由设置title</h3><ul class="lvl-0"><li class="lvl-2"><p><mark>作用</mark>：不同的路由拥有不同的浏览器标题</p></li><li class="lvl-2"><p>步骤：</p><ol><li class="lvl-5">定义路由，添加自定义属性title：<code>&#123; path: '/', component: coma, title: &quot;标题&quot; &#125;</code></li><li class="lvl-5">在生命周期created()中获取路由上的自定义属性，使用document修改title</li></ol></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;a href=&quot;#/&quot;&gt;主页&lt;/a&gt; &lt;a href=&quot;#/details&quot;&gt;详情&lt;/a&gt; &lt;a href=&quot;#/info&quot;&gt;个人中心&lt;/a&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span>&gt;</span>主页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/details&quot;</span>&gt;</span>详情<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/info&quot;</span>&gt;</span>个人中心<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 路由占位符 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue-router/dist/vue-router.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> coma = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">            &lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">            &lt;h1&gt;&#123;&#123; h1 &#125;&#125;&lt;/h1&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">    &lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">`</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">h1</span>: <span class="string">&quot;主页&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">created</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">meta</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;title&quot;</span>).<span class="property">innerHTML</span> = <span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">meta</span>.<span class="property">title</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> comb = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;h1&gt;&#123;&#123; h1 &#125;&#125;&lt;/h1&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">    &lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">`</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">h1</span>: <span class="string">&quot;详情&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">created</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;title&quot;</span>).<span class="property">innerHTML</span> = <span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">meta</span>.<span class="property">title</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> comc = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;h1&gt;&#123;&#123; h1 &#125;&#125;&lt;/h1&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">    &lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">`</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">h1</span>: <span class="string">&quot;个人中心&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">created</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;title&quot;</span>).<span class="property">innerHTML</span> = <span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">meta</span>.<span class="property">title</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">routes</span>: [</span></span><br><span class="line"><span class="language-javascript">            &#123; <span class="attr">path</span>: <span class="string">&quot;/&quot;</span>, <span class="attr">component</span>: coma, <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">&quot;主页&quot;</span> &#125; &#125;,</span></span><br><span class="line"><span class="language-javascript">            &#123; <span class="attr">path</span>: <span class="string">&quot;/details&quot;</span>, <span class="attr">component</span>: comb, <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">&quot;详情&quot;</span> &#125; &#125;,</span></span><br><span class="line"><span class="language-javascript">            &#123; <span class="attr">path</span>: <span class="string">&quot;/info&quot;</span>, <span class="attr">component</span>: comc, <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">&quot;个人信息&quot;</span> &#125; &#125;,</span></span><br><span class="line"><span class="language-javascript">        ]</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">title</span>: <span class="string">&quot;路由设置title&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">router</span>: router</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="7）嵌套路由">7）嵌套路由</h3><ul class="lvl-0"><li class="lvl-2"><p><mark>作用</mark>：上级路由的结构不会改变，只是局部刷新</p></li><li class="lvl-2"><p>步骤：</p><ol><li class="lvl-5">定义路由：<code>&#123; children: [&#123;...&#125;, &#123;...&#125;] &#125;</code></li><li class="lvl-5">使用占位：在上一级路由的模板中使用<code>router-view</code></li></ol></li><li class="lvl-2"><p><mark>注意</mark>：二级路由的path前缀一定要是一级路由的path</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/bootstrap@3.3.7/dist/css/bootstrap.min.css&quot;</span> <span class="attr">integrity</span>=<span class="string">&quot;sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u&quot;</span> <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">tag</span>=<span class="string">&quot;button&quot;</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-success&quot;</span>&gt;</span>主页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">tag</span>=<span class="string">&quot;button&quot;</span> <span class="attr">to</span>=<span class="string">&quot;/details&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span>详情<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">tag</span>=<span class="string">&quot;button&quot;</span> <span class="attr">to</span>=<span class="string">&quot;/info&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span>&gt;</span>个人中心<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 路由占位符 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue-router/dist/vue-router.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    const coma = &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        template: `</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><span class="template-variable">&#123;&#123; <span class="name">h1</span> &#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">`,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        data() &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            return&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                h1: &quot;主页&quot;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    &#125;;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    const comb = &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        template: `</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><span class="template-variable">&#123;&#123; <span class="name">h1</span> &#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span> <span class="attr">to</span>=<span class="string">&quot;/details/flower&quot;</span>&gt;</span>花语<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-info&quot;</span> <span class="attr">to</span>=<span class="string">&quot;/details/starry&quot;</span>&gt;</span>星空<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">`,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        data() &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            return&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                h1: &quot;详情&quot;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    &#125;;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    const comc = &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        template: `</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><span class="template-variable">&#123;&#123; <span class="name">h1</span> &#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">`,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        data() &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            return&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                h1: &quot;个人中心&quot;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    &#125;;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    const comd = &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        template: `</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><span class="template-variable">&#123;&#123; <span class="name">h1</span> &#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">`,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        data() &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            return&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                h1: &quot;花语详情&quot;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    &#125;;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    const come = &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        template: `</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><span class="template-variable">&#123;&#123; <span class="name">h1</span> &#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">`,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        data() &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            return&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                h1: &quot;星空详情&quot;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    &#125;;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    var router = new VueRouter(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        routes: [</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#123; path: &quot;/&quot;, component: coma &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#123; name: &quot;detailsPage&quot;, path: &quot;/details&quot;, component: comb,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">             children: [</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                 &#123; path: &quot;/details/flower&quot;, component: comd &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                 &#123; path: &quot;/details/starry&quot;, component: come &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">             ]</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#123; path: &quot;/info&quot;, component: comc &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        ]</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    &#125;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    new Vue(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        el: &quot;#app&quot;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        data: &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            title: &quot;编程式导航&quot;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        router: router,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    &#125;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="8）router-和-route的区别">8）<mark><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>r</mi><mi>o</mi><mi>u</mi><mi>t</mi><mi>e</mi><mi>r</mi><mo>=</mo><mo>=</mo><mtext>和</mtext><mo>=</mo><mo>=</mo></mrow><annotation encoding="application/x-tex">router==和==</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6151em;"></span><span class="mord mathnormal">ro</span><span class="mord mathnormal">u</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.02778em;">er</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">==</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord cjk_fallback">和</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">==</span></span></span></span>route</mark>的区别</h3><ul class="lvl-0"><li class="lvl-2"><p><mark><b>$router</b></mark>：是路由对象的实例，相当于new VueRouter()这个对象</p><ul class="lvl-2"><li class="lvl-4">编程式跳转方法等</li></ul></li><li class="lvl-2"><p><mark><b>$route</b></mark>：当前路由的实例对象，每一个路由都是一个独立的对象，此对象相当于<code>&#123; path: &quot;/&quot;, compontent: coma &#125;</code></p><ul class="lvl-2"><li class="lvl-4">$route.path：获取路由配置的url路径</li><li class="lvl-4">$route.params：含路有种的动态片段和全匹配片段的键值对，不会拼接到路由的url的<code>?</code>后面</li><li class="lvl-4">$route.query：对象，包含路由中查询参数的键值对。会拼接到路由url的<code>?</code>后面</li><li class="lvl-4">$<a href="http://route.name">route.name</a>：当前路由的名字，如果没有使用具体路径，则名字为空</li><li class="lvl-4">$route.router：当前路由规则所属的路由器</li><li class="lvl-4">$route.matchd：数组，包含当前匹配的路径中所包含的所有片段所对象的配置参数对象</li><li class="lvl-4">$route.[costom]：路由规则自定义属性</li></ul></li></ul><h2 id="三、最后">三、最后</h2><p>我是半月，你我一同共勉！</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue2基础</title>
      <link href="/archive/94075d34/"/>
      <url>/archive/94075d34/</url>
      
        <content type="html"><![CDATA[<h1>vue2基础</h1><h2 id="一、介绍">一、介绍</h2><p>本文是以前学习 <code>vue2</code>时整理的，对于目前的 <code>vue3</code>有些过时。</p><p>专注后端，前端只作为使用学习。</p><h2 id="二、-基础">二、 基础</h2><h3 id="1）数据绑定">1）数据绑定</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>VUE数据绑定<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 插值表达式 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 将data中的数据渲染至页面 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// element，绑定页面的原始</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// data，保存一个对象数据</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">msg</span>: <span class="string">&quot;数据绑定&quot;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2）指令">2）指令</h3><h4 id="2-1、v-html">2.1、<mark>v-html</mark></h4><ul class="lvl-0"><li class="lvl-2"><p>设置标签的内容，同数据绑定一致</p></li><li class="lvl-2"><p>设置标签内的html代码片段</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-html</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">&quot;msg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">title</span>: <span class="string">&quot;v-html的作用&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">msg</span>: <span class="string">&quot;&lt;h3&gt;html代码片段&lt;/h3&gt;&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-2、v-text">2.2、<mark>v-text</mark></h4><ul class="lvl-0"><li class="lvl-2"><p>设置标签的内容，同数据绑定一致</p></li><li class="lvl-2"><p>会原样渲染data，不会解析html代码片段</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-text</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-text</span>=<span class="string">&quot;msg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">title</span>: <span class="string">&quot;v-text标题&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">msg</span>: <span class="string">&quot;&lt;h3&gt;html代码片段&lt;/h3&gt;&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-3、v-on">2.3、<mark>v-on</mark></h4><ul class="lvl-0"><li class="lvl-2"><p>绑定事件：如鼠标点击事件（v-on:click）等</p></li><li class="lvl-2"><p>简写@：如鼠标点击事件（@click）等</p></li></ul><ol><li class="lvl-3"><p><b>基本绑定</b></p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;submit()&quot;</span>&gt;</span>&#123;&#123; submitData &#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;reset()&quot;</span>&gt;</span>&#123;&#123; resetData &#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">submitData</span>: <span class="string">&quot;登录&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">resetData</span>: <span class="string">&quot;重置&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// methods：方法集合对象</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">submit</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="string">&quot;模拟登录&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">reset</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="string">&quot;模拟重置&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li class="lvl-3"><p><b>访问Vue中data变量</b></p></li></ol><ul class="lvl-0"><li class="lvl-2"><p>通过this指向当前vue，访问data内数据不需要加data（<mark>this.data.msg</mark>是错误的）</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;comeOn()&quot;</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">msg</span>: <span class="string">&quot;我叫半月&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">comeOn</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">msg</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-4、v-cloak">2.4、<mark>v-cloak</mark></h4><ul class="lvl-0"><li class="lvl-2"><p>解决插值闪烁的问题</p></li></ul><blockquote><p>插值闪烁：页面在刷新加载的时候，会有一瞬间看到插值表达式的现象</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="comment">/* 第一步 */</span></span></span><br><span class="line"><span class="language-css">    <span class="selector-attr">[v-cloak]</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 第二步 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-cloak</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">msg</span>: <span class="string">&quot;我叫半月&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-5、v-show">2.5、<mark>v-show</mark></h4><ul class="lvl-0"><li class="lvl-2"><p>控制元素的显示和隐藏</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">&quot;false&quot;</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">msg</span>: <span class="string">&quot;我叫半月&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">isShow</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>小案例：通过点击按钮控制元素的显示和隐藏</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;showChange()&quot;</span>&gt;</span>&#123;&#123; text &#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">msg</span>: <span class="string">&quot;我叫半月&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">isShow</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">text</span>: <span class="string">&quot;隐藏&quot;</span></span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">showChange</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">isShow</span> = !<span class="variable language_">this</span>.<span class="property">isShow</span></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">isShow</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="variable language_">this</span>.<span class="property">text</span> = <span class="string">&quot;隐藏&quot;</span></span></span><br><span class="line"><span class="language-javascript">          &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="variable language_">this</span>.<span class="property">text</span> = <span class="string">&quot;显示&quot;</span></span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote><h4 id="2-6、v-if">2.6、<mark>v-if</mark></h4><ul class="lvl-0"><li class="lvl-2"><p>控制元素的显示和销毁状态</p></li></ul><blockquote><p>v-if和v-show的区别</p><p>v-if：元素是创建和销毁两个状态，对性能要求比较大</p><p>v-show：元素是通过css样式来控制元素的显示的隐藏，适用于频繁的切换场景</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;showChange()&quot;</span>&gt;</span>&#123;&#123; text &#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">msg</span>: <span class="string">&quot;我叫半月&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">isShow</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">text</span>: <span class="string">&quot;隐藏&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">showChange</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">isShow</span> = !<span class="variable language_">this</span>.<span class="property">isShow</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">isShow</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">text</span> = <span class="string">&quot;隐藏&quot;</span></span></span><br><span class="line"><span class="language-javascript">                &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">text</span> = <span class="string">&quot;显示&quot;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-7、v-bind">2.7、<mark>v-bind</mark></h4><ul class="lvl-0"><li class="lvl-2"><p>绑定属性：如绑定img的src属性（v-bind:src）等</p></li><li class="lvl-2"><p>简写使用冒号（英文）：如绑定img的src属性（:src）等</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">v-bind:src</span>=<span class="string">&quot;url&quot;</span> <span class="attr">:title</span>=<span class="string">&quot;title&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">url</span>: <span class="string">&quot;https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1593073021353&amp;di=f4a4c47914b1cda5ab582304fb7642c3&amp;imgtype=0&amp;src=http%3A%2F%2F5b0988e595225.cdn.sohucs.com%2Fimages%2F20180424%2F7b8ae3018fd641bc8a61b3ac76f536c4.jpeg&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">title</span>: <span class="string">&quot;半月喜欢的美女&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li class="lvl-3"><p>动态设置行内样式</p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">&quot;styleObj&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">styleObj</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">border</span>: <span class="string">&quot;1px solid red&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">width</span>: <span class="string">&quot;100px&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">height</span>: <span class="string">&quot;100px&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li class="lvl-3"><p>设置class类名</p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.div</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> red solid;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.font</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">line-height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.back</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: rosybrown;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 通过data数据绑定，来给定类名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">&quot;className&quot;</span>&gt;</span>我是半月<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用对象，给定类名，true/false表示是否启用类名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;&#123; div: true, font: isFont, back: false &#125;&quot;</span>&gt;</span>我是半月<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 通过字符串数组，给定类名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;[&#x27;div&#x27;, isFont==true? &#x27;font&#x27;: &#x27;&#x27;, &#x27;back&#x27;]&quot;</span>&gt;</span></span><br><span class="line">        我是半月</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">className</span>: <span class="string">&quot;div&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">isFont</span>: <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>小案例：点击按钮改变样式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.div</span>&#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">border</span>: <span class="number">1px</span> red solid;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.font</span>&#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">line-height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.back</span>&#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">background-color</span>: rosybrown;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;change01()&quot;</span>&gt;</span>设置盒子边框<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;change02()&quot;</span>&gt;</span>设置字体样式<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;change03()&quot;</span>&gt;</span>设置背景颜色<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">&quot;&#123;div: isDiv, font: isFont, back: isBack &#125;&quot;</span>&gt;</span>我是半月<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">isDiv</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">isFont</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">isBack</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">change01</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">isDiv</span> = !<span class="variable language_">this</span>.<span class="property">isDiv</span>;</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">change02</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">isFont</span> = !<span class="variable language_">this</span>.<span class="property">isFont</span>;</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">change03</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">isBack</span> = !<span class="variable language_">this</span>.<span class="property">isBack</span>;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote><h4 id="2-8、v-for">2.8、<mark>v-for</mark></h4><ul class="lvl-0"><li class="lvl-2"><p>循环输出对象或数组</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 参数一，遍历其中的元素 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in msg&quot;</span>&gt;</span></span><br><span class="line">            &#123;&#123;item&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 参数二，遍历当前元素的下标 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot; (item, index) in msg&quot;</span>&gt;</span></span><br><span class="line">            &#123;&#123;index&#125;&#125;：&#123;&#123;item&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 循环对象 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 参数一，属性值 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 参数二，属性名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span> <span class="attr">v-for</span>=<span class="string">&quot;(value, key) in person&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123;key&#125;&#125;：&#123;&#123;value&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 循环数字 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-for</span>=<span class="string">&quot; num in 5 &quot;</span>&gt;</span>&#123;&#123;num&#125;&#125;,<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">msg</span>: [<span class="string">&quot;香蕉&quot;</span>, <span class="string">&quot;苹果&quot;</span>, <span class="string">&quot;柚子&quot;</span>, <span class="string">&quot;雪梨&quot;</span>],</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">person</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">name</span>: <span class="string">&quot;banmoon&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">age</span>: <span class="number">18</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">sex</span>: <span class="string">&quot;男&quot;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>说明v-for中key的作用说明</p><p>不加key的问题：某些遍历的元素有自己的状态，在修改数组对象时，这些状态可能会出现混乱的情况</p><p>给定唯一key值：将保证key和元素之间有一一对应的关系，来完成这些状态的正常</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;添加&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;add&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in msg&quot;</span> <span class="attr">v-bind:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">          &#123;&#123;item.name&#125;&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">msg</span>: [</span></span><br><span class="line"><span class="language-javascript">          &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&quot;香蕉&quot;</span>&#125;, </span></span><br><span class="line"><span class="language-javascript">          &#123;<span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&quot;苹果&quot;</span>&#125;, </span></span><br><span class="line"><span class="language-javascript">          &#123;<span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&quot;柚子&quot;</span>&#125;, </span></span><br><span class="line"><span class="language-javascript">          &#123;<span class="attr">id</span>: <span class="number">4</span>, <span class="attr">name</span>: <span class="string">&quot;雪梨&quot;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">      ]</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">add</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">let</span> value = <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">text</span>.<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">msg</span>.<span class="title function_">unshift</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="attr">id</span>: <span class="variable language_">this</span>.<span class="property">msg</span>.<span class="property">length</span>+<span class="number">1</span>,</span></span><br><span class="line"><span class="language-javascript">              <span class="attr">name</span>: value</span></span><br><span class="line"><span class="language-javascript">          &#125;);</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote><h4 id="2-9、v-model">2.9、<mark>v-model</mark></h4><ul class="lvl-0"><li class="lvl-2"><p>实现双向数据绑定</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; value &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;value&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">value</span>: <span class="string">&quot;我是半月&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>使用<mark>v-model</mark>获取表单的值</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    账号：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">value</span>: <span class="string">&quot;我是半月&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">username</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">password</span>: <span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">submit</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="string">&quot;账号：&quot;</span>+<span class="variable language_">this</span>.<span class="property">username</span>+<span class="string">&quot;，密码：&quot;</span>+<span class="variable language_">this</span>.<span class="property">password</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-10、自定义指令">2.10、<mark>自定义指令</mark></h4><ul class="lvl-0"><li class="lvl-2"><p>全局指令</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-color</span>=<span class="string">&quot;color&quot;</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeColor(&#x27;red&#x27;)&quot;</span>&gt;</span>改变为红色<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeColor(&#x27;black&#x27;)&quot;</span>&gt;</span>改变为黑色<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&quot;color&quot;</span>, <span class="function">(<span class="params">el, binding</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(el, binding);</span></span><br><span class="line"><span class="language-javascript">        el.<span class="property">style</span>.<span class="property">color</span> = binding.<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">title</span>: <span class="string">&quot;directive自定义组件&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">color</span>: <span class="string">&quot;black&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">changeColor</span>(<span class="params">val</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">color</span> = val</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>私有指令</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-color</span>=<span class="string">&quot;color&quot;</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeColor(&#x27;red&#x27;)&quot;</span>&gt;</span>改变为红色<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeColor(&#x27;black&#x27;)&quot;</span>&gt;</span>改变为黑色<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">title</span>: <span class="string">&quot;directive自定义组件&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">color</span>: <span class="string">&quot;black&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">changeColor</span>(<span class="params">val</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">color</span> = val</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">directives</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">color</span>(<span class="params">el, binding</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(el, binding);</span></span><br><span class="line"><span class="language-javascript">                el.<span class="property">style</span>.<span class="property">color</span> = binding.<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3）修饰符">3）修饰符</h3><h4 id="3-1、按键修饰符">3.1、<mark>按键修饰符</mark></h4><ul class="lvl-0"><li class="lvl-2"><p>键盘按键的限制修饰符</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">回车：.enter</span><br><span class="line">Tab键：.tab</span><br><span class="line">Esc键：.esc</span><br><span class="line">空格键：.space</span><br><span class="line">↑键：.up</span><br><span class="line">↓键：.down</span><br><span class="line">←键：.left</span><br><span class="line">→键：.right</span><br><span class="line">删除（退格）键：.delete</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> @<span class="attr">keydown.enter</span>=<span class="string">&quot;keyDown&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">value</span>: <span class="string">&quot;我是半月&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">username</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">password</span>: <span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">keyDown</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="string">&quot;已经点击&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-2、事件修饰符">3.2、<mark>事件修饰符</mark></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.stop：阻止事件冒泡</span><br><span class="line">.prevent：阻止默认行为</span><br><span class="line">.once：限定事件只执行一次</span><br><span class="line"></span><br><span class="line">使用方法：@事件名:修饰符，例如点击事件（@click.stop）</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>.stop修饰符</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.fa</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: skyblue;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.sub</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: greenyellow;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;fa&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;click1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sub&quot;</span> @<span class="attr">click.stop</span>=<span class="string">&quot;click2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">click1</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="string">&quot;已经点击1&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">click2</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="string">&quot;已经点击2&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li class="lvl-2"><p>.prevent修饰符</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.prevent</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">submit</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="string">&quot;模拟提交&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li class="lvl-2"><p>.once修饰符</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.once</span>=<span class="string">&quot;cilck01&quot;</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">cilck01</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="string">&quot;点击&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="4）过滤器">4）过滤器</h3><ul class="lvl-0"><li class="lvl-2"><p><mark>作用</mark>：在数据渲染之前，进行一些函数操作，从而达到数据的控制效果（常用于日期的格式化）</p></li><li class="lvl-2"><p><mark>语法支持</mark>：插值表达式和v-bind指令</p><ul class="lvl-2"><li class="lvl-4">插值：<code>&#123;&#123; data | filter &#125;&#125;</code></li><li class="lvl-4">v-bind：<code>&lt;div v-bind:id=&quot; data | filter &quot;&gt;&lt;/div&gt;</code></li></ul></li><li class="lvl-2"><p><mark>分类</mark>：作用域可分为全局过滤器和局部过滤器，通过参数可分为有参无参过滤器</p><ul class="lvl-2"><li class="lvl-4">有参：<code>&#123;&#123; data | filter(str01, str02) &#125;&#125;</code></li><li class="lvl-4">无参：<code>&#123;&#123; data | filter &#125;&#125;</code></li></ul></li><li class="lvl-2"><p><mark>注意事项</mark>：</p><ul class="lvl-2"><li class="lvl-4">过滤器必须要有返回值</li><li class="lvl-4">全局过滤器必须写在vue实例的前边</li><li class="lvl-4">多参传递时，自定义参数直接从第二个开始传递（<b>参考4.2私有过滤器</b>）</li><li class="lvl-4">当全局和局部的过滤器命名冲突时，会默认使用局部过滤器</li></ul></li></ul><h4 id="4-1、全局过滤器">4.1、<mark>全局过滤器</mark></h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; datatime|dateFormat &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;clickMe&quot;</span>&gt;</span>刷新<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 全局过滤器，必须写在vue实例之前</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="title function_">filter</span>(<span class="string">&quot;dateFormat&quot;</span>, <span class="function">(<span class="params">input</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> year = input.<span class="title function_">getFullYear</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> month = input.<span class="title function_">getMonth</span>()+<span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> day = input.<span class="title function_">getDate</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> hour = input.<span class="title function_">getHours</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> min = input.<span class="title function_">getMinutes</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> ss = input.<span class="title function_">getSeconds</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> year+<span class="string">&quot;-&quot;</span>+month+<span class="string">&quot;-&quot;</span>+day+<span class="string">&quot; &quot;</span>+hour+<span class="string">&quot;:&quot;</span>+min+<span class="string">&quot;:&quot;</span>+ss;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">datatime</span>: <span class="keyword">new</span> <span class="title class_">Date</span>()</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">clickMe</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">datatime</span> = <span class="keyword">new</span> <span class="title class_">Date</span>()</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-2、局部过滤器">4.2、<mark>局部过滤器</mark></h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">:title</span>=<span class="string">&quot;msg|strSub(21, &#x27;~~~&#x27;)&quot;</span>&gt;</span>&#123;&#123; msg|strSub(10, &#x27;...&#x27;) &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">msg</span>: <span class="string">&quot;大家好，我叫半月，来自浙江温州，目前在广州，从事IT行业，巴拉巴拉巴啦啦&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">filters</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">strSub</span>(<span class="params">input, len, suffix</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> input.<span class="title function_">substr</span>(<span class="number">0</span>, len)+suffix;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5）计算属性">5）计算属性</h3><ul class="lvl-0"><li class="lvl-2"><p><mark>作用</mark>：通过vue实例中已存在的属性来计算出一个<b>不存在的属性</b></p></li><li class="lvl-2"><p><mark>注意事项</mark>：</p><ul class="lvl-2"><li class="lvl-4">计算属性同data中定义的属性一致，可以在插值表达式或v-model中使用</li><li class="lvl-4">data定义的属性可读可写，而计算属性不能直接修改，仅作读取展示</li><li class="lvl-4">计算属性定义时为函数方法，且必须有返回值</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123; fullName &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    姓：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;firstName&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;lastName&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">firstName</span>: <span class="string">&quot;半月&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">lastName</span>: <span class="string">&quot;无霜&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">fullName</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span>+<span class="variable language_">this</span>.<span class="property">lastName</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="6）watch监听器">6）watch监听器</h3><ul class="lvl-0"><li class="lvl-2"><p><mark>作用</mark>：监听data中定义的属性，当属性发生变化的时候，可以自动做一些处理</p></li><li class="lvl-2"><p><mark>注意事项</mark>：</p><ul class="lvl-2"><li class="lvl-4">在watch中定义函数方法，注意<b>函数名与data中要监听的属性名要一致</b></li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123; fullName &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    姓：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;firstName&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;lastName&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">firstName</span>: <span class="string">&quot;半月&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">lastName</span>: <span class="string">&quot;无霜&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">fullName</span>: <span class="string">&quot;半月无霜&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">watch</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">firstName</span>(<span class="params">newVal, oldVal</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">fullName</span> = newVal+<span class="variable language_">this</span>.<span class="property">lastName</span>;k</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">lastName</span>(<span class="params">newVal, oldVal</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">fullName</span> = <span class="variable language_">this</span>.<span class="property">firstName</span>+newVal;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="7）插槽">7）插槽</h3><ul class="lvl-0"><li class="lvl-2"><p><mark>作用</mark>：在使用组件不确定组件内部的元素时，可以使用插槽，由外部向内部传递元素等信息，从而实现功能</p></li></ul><h4 id="7-1、匿名插槽">7.1、匿名插槽</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用组件时，将html元素或文本内容写入组件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">coma</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=2182074484,1483150801&amp;fm=26&amp;gp=0.jpg&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>跳转<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span>&gt;</span>跳转<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        文本也可以</span><br><span class="line">    <span class="tag">&lt;/<span class="name">coma</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    new Vue(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        el: &quot;#app&quot;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        data: &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            title: &quot;slot插槽&quot;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        methods: &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        components: &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            coma: &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                // 定义插槽位置</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                template: `</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>插槽<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">`</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    &#125;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="7-2、具名插槽">7.2、具名插槽</h4><ul class="lvl-0"><li class="lvl-2"><p>区别：不同于匿名插槽，具名插槽允许有多个 <code>slot</code>标签</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/bootstrap@3.3.7/dist/css/bootstrap.min.css&quot;</span> <span class="attr">integrity</span>=<span class="string">&quot;sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u&quot;</span> <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">coma</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:header</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-info&quot;</span>&gt;</span>导航<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:footer</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-success&quot;</span>&gt;</span>跳转<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">coma</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    new Vue(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        el: &quot;#app&quot;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        data: &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            title: &quot;slot插槽&quot;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        methods: &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        components: &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            coma: &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                // 定义插槽位置</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                template: `</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel panel-default&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">&quot;panel-heading&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;header&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-body&quot;</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">footer</span> <span class="attr">class</span>=<span class="string">&quot;panel-footer&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;footer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">`</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    &#125;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="7-3、作用域插槽">7.3、作用域插槽</h4><ul class="lvl-0"><li class="lvl-2"><p><mark>作用</mark>：当子组件有数据要交给父组件进行渲染时，可以使用作用域插槽</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/bootstrap@3.3.7/dist/css/bootstrap.min.css&quot;</span> <span class="attr">integrity</span>=<span class="string">&quot;sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u&quot;</span> <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">coma</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:default</span>=<span class="string">&quot;props&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;test&quot;</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> /&gt;</span></span><br><span class="line">            &#123;&#123; props.item &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">coma</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">coma</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:default</span>=<span class="string">&quot;props&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;test&quot;</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> /&gt;</span></span><br><span class="line">            &#123;&#123; props.item &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">coma</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">title</span>: <span class="string">&quot;slot插槽&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">coma</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 定义插槽位置</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">template</span>: <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;ul class=&quot;list-group&quot;&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;li v-for=&quot;item in list&quot; class=&quot;list-group-item&quot;&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;slot :item=&quot;item&quot;&gt;&lt;/slot&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">    &lt;/li&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">    &lt;/ul&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">`</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">list</span>: [<span class="string">&quot;洒&quot;</span>, <span class="string">&quot;苹果&quot;</span>, <span class="string">&quot;香蕉&quot;</span>]</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="三、最后">三、最后</h2><p>我是半月，你我一同共勉！</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>优雅！Spring的重试小工具</title>
      <link href="/archive/607f1a07/"/>
      <url>/archive/607f1a07/</url>
      
        <content type="html"><![CDATA[<h1>优雅！Spring的重试小工具</h1><h2 id="一、介绍">一、介绍</h2><p>在日常项目的开发中，避免不了调用第三方服务的情况。</p><p>如果是第三方有提供<code>SDK</code>包那还好说，就怕没有，第三方接口还不稳定的情况最恼火了。</p><p>这个时候，我们一般都会加上重试机制，手动捕获异常发起重试，不优雅</p><p>试试这个<code>spring</code>中的工具<code>spring-retry</code>如何</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20230306175221.png" alt="image-20230306171419108" /></p><p><a href="https://docs.spring.io/spring-batch/docs/current/reference/html/retry.html">官网</a></p><p><a href="https://github.com/spring-projects/spring-retry">github地址</a></p><h2 id="二、使用">二、使用</h2><p>导入<code>maven</code>依赖，使用的是<code>SpringBoot</code>框架，版本号已经有管理了，直接引入即可。</p><p>记得把<code>AOP</code>也引用一下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.retry<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-retry<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在<code>SpringBoot</code>的启动类上加上<code>@EnableRetry</code>注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ConfigurableApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.retry.annotation.EnableRetry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.EnableScheduling;</span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableRetry</span></span><br><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.banmoon.test.mapper&quot;)</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(TestApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写<code>RetryController.java</code>，里面包含了模拟的<code>server</code>方法，一会我们通过<code>client</code>方法去调用它</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.test.obj.dto.ResultData;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.test.service.RetryService;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.Api;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.annotation.Validated;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;重试测试&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;retry&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RetryController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RetryService retryService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;server&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResultData&lt;String&gt; <span class="title function_">server</span><span class="params">(<span class="meta">@RequestParam</span> Integer delay)</span> <span class="keyword">throws</span> TimeoutException &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">timeout</span> <span class="operator">=</span> delay &gt; <span class="number">5000</span>;</span><br><span class="line">            <span class="keyword">if</span> (timeout) &#123;</span><br><span class="line">                delay = <span class="number">5000</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            TimeUnit.MILLISECONDS.sleep(delay);</span><br><span class="line">            <span class="keyword">if</span> (timeout) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TimeoutException</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;睡眠异常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ResultData.success(delay+<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;client&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResultData <span class="title function_">client</span><span class="params">(<span class="meta">@RequestParam</span> Integer delay)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> retryService.callServer(delay);</span><br><span class="line">        <span class="keyword">return</span> ResultData.success(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>client</code>方法用到了<code>RetryService.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RetryService</span> &#123;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">callServer</span><span class="params">(Integer delay)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.http.HttpUtil;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.socket.SocketRuntimeException;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson2.JSON;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.test.obj.dto.ResultData;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.test.service.RetryService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.retry.annotation.Retryable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.SocketTimeoutException;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RetryServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">RetryService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Retryable(value = &#123;SocketRuntimeException.class, SocketTimeoutException.class&#125;, maxAttempts = 3)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">callServer</span><span class="params">(Integer delay)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;客户端请求服务端，delay：&#123;&#125;&quot;</span>, delay);</span><br><span class="line">        Map&lt;String, Object&gt; params = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        params.put(<span class="string">&quot;delay&quot;</span>, delay);</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> HttpUtil.get(<span class="string">&quot;http://localhost:8089/retry/server&quot;</span>, params, <span class="number">5000</span>);</span><br><span class="line">        ResultData&lt;String&gt; data = JSON.parseObject(result, ResultData.class);</span><br><span class="line">        <span class="keyword">return</span> data.getData();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要就是这行注解</p><p><code>@Retryable(value = &#123;SocketRuntimeException.class, SocketTimeoutException.class&#125;, maxAttempts = 3)</code></p><p>发起重试的异常，重试的次数</p><p>具体可以看文档，或者源码</p><h2 id="三、测试">三、测试</h2><p>启动服务，发送请求</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20230306175227.png" alt="image-20230306174646082" /></p><p>响应是这样的，我们继续看控制台，成功发起重试</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20230306175231.png" alt="image-20230306170024983" /></p><h2 id="四、最后">四、最后</h2><p>在文档的示例中，我们也可以这样发起重试，如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">RetryTemplate</span> <span class="variable">template</span> <span class="operator">=</span> RetryTemplate.builder()</span><br><span class="line">.maxAttempts(<span class="number">3</span>)</span><br><span class="line">.fixedBackoff(<span class="number">1000</span>)</span><br><span class="line">.retryOn(RemoteAccessException.class)</span><br><span class="line">.build();</span><br><span class="line"></span><br><span class="line">template.execute(ctx -&gt; &#123;</span><br><span class="line">    <span class="comment">// ... do something</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>我是半月，你我一同共勉！</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> demo </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot实现统一响应提示国际化</title>
      <link href="/archive/8f03ced9/"/>
      <url>/archive/8f03ced9/</url>
      
        <content type="html"><![CDATA[<h1>SpringBoot实现统一响应提示国际化</h1><h2 id="一、介绍">一、介绍</h2><p>统一响应大家都见识过，只需要添加上<code>@RestControllerAdvice</code>后进行处理即可</p><p>简单示例如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test.core.handler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.test.obj.dto.ResultData;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestControllerAdvice;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ControllerHandler</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> ResultData <span class="title function_">exceptionHandler</span><span class="params">(Exception exception)</span>&#123;</span><br><span class="line">        log.error(<span class="string">&quot;统一异常&quot;</span>, exception);</span><br><span class="line">        <span class="keyword">return</span> ResultData.fail(<span class="string">&quot;服务器繁忙，请稍后再试！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的<mark>服务器繁忙，请稍后再试！</mark>，仅仅只有中文，能不能实现国际化的语言呢</p><p>本文将介绍使用<code>i18n</code>，来完成国际化语言的使用。</p><blockquote><p><code>i18n</code>是什么，全称<code>internationalization</code>，取首字母，尾字母，<code>18</code>代表中间的十八个字母。</p><p>在<code>spring</code>中使用<code>i18n</code>来完成国际化</p></blockquote><h2 id="二、代码">二、代码</h2><p>在<code>spring</code>中，有这么一个接口<code>MessageSource</code>，它是专门用来解决国际化问题的。</p><p>其中有这么一个实现类<code>ResourceBundleMessageSource</code>，从配置文件中读取国际化的语言，进行展示</p><p>首先，我们得准备好三份配置文件，分别如下</p><ul class="lvl-0"><li class="lvl-2"><p><code>exceptionMessage_en_US.properties</code></p></li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">default</span>=<span class="string">Server busy, please try again later!</span></span><br><span class="line"><span class="attr">1000</span>=<span class="string">The record already exists in the database</span></span><br><span class="line"><span class="attr">2000</span>=<span class="string">Uploading file exception</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p><code>exceptionMessage_zh_CN.properties</code></p></li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">default</span>=<span class="string">服务器繁忙，请稍后再试！</span></span><br><span class="line"><span class="attr">1000</span>=<span class="string">数据库中已存在该记录</span></span><br><span class="line"><span class="attr">2000</span>=<span class="string">上传文件异常</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p><code>exceptionMessage_zh_TW.properties</code></p></li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">default</span>=<span class="string">服務器繁忙，請稍後再試！</span></span><br><span class="line"><span class="attr">1000</span>=<span class="string">數據庫中已存在該記錄</span></span><br><span class="line"><span class="attr">2000</span>=<span class="string">上傳文件異常</span></span><br></pre></td></tr></table></figure><p>注意命名格式，这很重要，这样即可<code>名称_[语言]_[国家].properties</code></p><hr /><p>准备好配置文件后，我将进行加载，创建出一个<code>ResourceBundleMessageSource</code>的<code>bean</code>，加载上面的配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ResourceBundleMessageSource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MessageSourceConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ResourceBundleMessageSource <span class="title function_">messageSource</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ResourceBundleMessageSource</span> <span class="variable">messageSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ResourceBundleMessageSource</span>();</span><br><span class="line">        messageSource.setBasenames(<span class="string">&quot;i18n/exceptionMessage&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> messageSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如此，国际化的语言就配置完毕，接下来就是读取了</p><hr /><p>再写一个工具类用来读取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.ArrayUtil;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.extra.spring.SpringUtil;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.MessageSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Locale;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.util.Locale.CHINA;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MessageSourceUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> MessageSource messageSource;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String i18nStr;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Locale locale;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        messageSource = SpringUtil.getBean(<span class="string">&quot;messageSource&quot;</span>);</span><br><span class="line">        i18nStr = SpringUtil.getProperty(<span class="string">&quot;i18n&quot;</span>);</span><br><span class="line">        String[] arr = i18nStr.split(<span class="string">&quot;_&quot;</span>);</span><br><span class="line">        locale = ArrayUtil.isNotEmpty(arr) ? <span class="keyword">new</span> <span class="title class_">Locale</span>(arr[<span class="number">0</span>], arr[<span class="number">1</span>]) : CHINA;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getMessage</span><span class="params">(Integer code, Object... objs)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> messageSource.getMessage(String.valueOf(code), objs, locale);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getMessage</span><span class="params">(String code, Object... objs)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> messageSource.getMessage(code, objs, locale);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>指定使用哪种语言环境</p><p>这个看大家以后国际化的定制，如何确定当前的语言环境</p><p>本文是由配置文件进行配置的，读取并生成<code>Locale</code>对象</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">i18n:</span> <span class="string">en_US</span></span><br></pre></td></tr></table></figure><hr /><p>最后，就是统一异常捕获的相关类了</p><p>自定义异常<code>BanmoonException.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test.core.exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.test.utils.MessageSourceUtil;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BanmoonException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BanmoonException</span><span class="params">(Integer code)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(code, MessageSourceUtil.getMessage(code));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BanmoonException</span><span class="params">(Integer code, String msg)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(msg);</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>统一异常拦截类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test.core.handler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.test.core.exception.BanmoonException;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.test.obj.dto.ResultData;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.test.utils.MessageSourceUtil;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestControllerAdvice;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ControllerHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> ResultData&lt;?&gt; exceptionHandler(Exception exception)&#123;</span><br><span class="line">        log.error(<span class="string">&quot;统一异常&quot;</span>, exception);</span><br><span class="line">        <span class="keyword">return</span> ResultData.fail(MessageSourceUtil.getMessage(<span class="string">&quot;default&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(BanmoonException.class)</span></span><br><span class="line">    <span class="keyword">public</span> ResultData&lt;?&gt; BanmoonExceptionHandler(BanmoonException exception)&#123;</span><br><span class="line">        log.error(<span class="string">&quot;自定义异常&quot;</span>, exception);</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">code</span> <span class="operator">=</span> exception.getCode();</span><br><span class="line">        <span class="keyword">return</span> ResultData.fail(code, MessageSourceUtil.getMessage(code));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、测试">三、测试</h2><p>测试就使用一个接口进行测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.test.core.exception.BanmoonException;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.test.obj.dto.ResultData;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.Api;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;国际化测试&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MessageSourceController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;i18n&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResultData&lt;String&gt; <span class="title function_">i18n</span><span class="params">(<span class="meta">@RequestParam(required = false)</span> Integer code)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (Objects.nonNull(code)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BanmoonException</span>(code);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResultData</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动服务，请求进行测试</p><table><thead><tr><th>请求</th><th>配置文件</th><th>结果</th></tr></thead><tbody><tr><td><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20230306145258.png" alt="image-20230306144227262" /></td><td><code>i18n: en_US</code></td><td><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20230306145437.png" alt="image-20230306144314304" /></td></tr><tr><td><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20230306145305.png" alt="image-20230306144351719" /></td><td><code>i18n: en_US</code></td><td><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20230306145441.png" alt="image-20230306144338640" /></td></tr><tr><td><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20230306145258.png" alt="image-20230306144227262" /></td><td><code>i18n: zh_TW</code></td><td><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20230306145446.png" alt="image-20230306144532853" /></td></tr><tr><td><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20230306145305.png" alt="image-20230306144351719" /></td><td><code>i18n: zh_TW</code></td><td><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20230306145451.png" alt="image-20230306144708648" /></td></tr></tbody></table><h2 id="四、最后">四、最后</h2><p>在使用<code>ResourceBundleMessageSource.java</code>实现类时，也可以关注其它的一些实现类，其中</p><ul class="lvl-0"><li class="lvl-2"><p><code>ReloadableResourceBundleMessageSource.java</code>：可以实现重载国际化文件</p></li><li class="lvl-2"><p><code>StaticMessageSource.java</code>：可以通过代码的方式获取，用此实现类可以实现数据库表中的国际化信息读取</p></li></ul><p>我是半月，你我一同共勉！！！</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot动态修改日志等级</title>
      <link href="/archive/aeff03cf/"/>
      <url>/archive/aeff03cf/</url>
      
        <content type="html"><![CDATA[<h1>SpringBoot动态修改日志等级</h1><h2 id="一、介绍">一、介绍</h2><p>在平常开发中，日志等级都是固定死的，某些<code>debug</code>级别的日志是默认不放开的。</p><p>当需要查看生产的日志权限时，发现日志级别不够，可以使用动态修改日志的权限。</p><p>由于<code>SpringBoot</code>默认使用的是<code>logback</code>日志，故此本文主要是动态修改<code>logback</code>的日志级别。</p><h2 id="二、代码">二、代码</h2><p>我们只需要写一个<code>controller</code>接口，如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ch.qos.logback.classic.Level;</span><br><span class="line"><span class="keyword">import</span> ch.qos.logback.classic.Logger;</span><br><span class="line"><span class="keyword">import</span> ch.qos.logback.classic.LoggerContext;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.test.obj.dto.ResultData;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.test.obj.request.LogLevelChangeRequest;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.Api;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.validation.Valid;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;日志等级&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogLevelController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/log/level/change&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResultData&lt;Void&gt; <span class="title function_">change</span><span class="params">(<span class="meta">@RequestBody</span> <span class="meta">@Valid</span> LogLevelChangeRequest request)</span> &#123;</span><br><span class="line">        <span class="type">LoggerContext</span> <span class="variable">loggerContext</span> <span class="operator">=</span> (LoggerContext) LoggerFactory.getILoggerFactory();</span><br><span class="line">        <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> loggerContext.getLogger(request.getLogger());</span><br><span class="line">        <span class="type">Level</span> <span class="variable">level</span> <span class="operator">=</span> Level.valueOf(request.getLevel());</span><br><span class="line">        logger.setLevel(level);</span><br><span class="line">        log.info(<span class="string">&quot;&#123;&#125;，日志等级已修改为&#123;&#125;&quot;</span>, request.getLogger(), level);</span><br><span class="line">        <span class="keyword">return</span> ResultData.success();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr /><p>进行测试，我们再写一个定时任务，分别输出三个不同的日志级别</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test.job;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.Scheduled;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestJob</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scheduled(fixedDelay = 5000)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        log.debug(<span class="string">&quot;debug...&quot;</span>);</span><br><span class="line">        log.info(<span class="string">&quot;info...&quot;</span>);</span><br><span class="line">        log.error(<span class="string">&quot;error...&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;=========== 分割线 ===========&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动应用，我们发现打印的是<code>info</code>和<code>error</code></p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20230304221256.png" alt="image-20230304220940828" /></p><p>发起请求，将<code>debug</code>也放开来</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20230304221303.png" alt="image-20230304221119972" /></p><p>结果如下，成功</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20230304221312.png" alt="image-20230304221215525" /></p><h2 id="三、最后">三、最后</h2><p>我是半月，你我一同共勉！！！</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> demo </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为自己模拟的IOC容器添加上DI注入</title>
      <link href="/archive/f6a7a9bb/"/>
      <url>/archive/f6a7a9bb/</url>
      
        <content type="html"><![CDATA[<h1>为自己模拟的IOC容器添加上DI注入</h1><h2 id="一、介绍">一、介绍</h2><p>上一篇中，模拟<code>Spring</code>实现了一个简易的<code>IOC</code>容器，完成了初始化<code>bean</code>的操作，统一交给了一个<code>Map</code>集合进行管理。</p><p><a href="https://www.banmoon.top/archive/6d152f6e/">模拟Spring实现一个简易的IOC容器</a></p><p>现在，将为这个<code>IOC</code>容器添加<code>DI</code>注入功能</p><h2 id="二、实现">二、实现</h2><p>在编写之前，我们先加一个工具类，用来获取接口所实现的子类<code>Class</code>对象，也是通过子类</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.reflections<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>reflections<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.10.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>代码如下，对比上一次，稍稍做了一点封装，使得步骤更加清晰</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test.mockioc.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(ElementType.FIELD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Di &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test.mockioc.core;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.collection.CollUtil;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.ArrayUtil;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.StrUtil;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.test.mockioc.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.test.mockioc.annotation.Di;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.reflections.Reflections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.net.URLDecoder;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyApplicationContext</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 真正的容器存储集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, Object&gt; singleObjects = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前运行环境的路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">currentAbsPath</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 扫描的包路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String packagePath;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 扫描的包路径反射工具类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Reflections packageReflections;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyApplicationContext</span><span class="params">(String packagePath)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="built_in">this</span>.packagePath = packagePath;</span><br><span class="line">        <span class="built_in">this</span>.packageReflections = <span class="keyword">new</span> <span class="title class_">Reflections</span>(packagePath);</span><br><span class="line">        <span class="comment">// 1、将包路径中的.变成\</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">basePackage</span> <span class="operator">=</span> StrUtil.replace(packagePath, <span class="string">&quot;.&quot;</span>, <span class="string">&quot;\\&quot;</span>);</span><br><span class="line">        <span class="comment">// 2、获取包的绝对路径，我们要获取class包的绝对路径，也就是target里面的那些</span></span><br><span class="line">        <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> Thread.currentThread().getContextClassLoader().getResource(basePackage);</span><br><span class="line">        <span class="comment">// 3、得到url后还需要进行转码</span></span><br><span class="line">        <span class="keyword">if</span> (Objects.nonNull(url)) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> URLDecoder.decode(url.getFile(), <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">            <span class="comment">// 4、为了方便，此处记录target包的绝对路径</span></span><br><span class="line">            currentAbsPath = filePath.substring(<span class="number">0</span>, filePath.length() - basePackage.length());</span><br><span class="line">            <span class="comment">// 5、扫描包里面所有的类</span></span><br><span class="line">            scanBean(<span class="keyword">new</span> <span class="title class_">File</span>(filePath));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">scanBean</span><span class="params">(File file)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException &#123;</span><br><span class="line">        <span class="comment">// 1、判断当前是否文件夹</span></span><br><span class="line">        <span class="keyword">if</span> (file.isDirectory()) &#123;</span><br><span class="line">            <span class="comment">// 2、获取文件夹中所有的内容，如果为空直接返回</span></span><br><span class="line">            File[] children = file.listFiles();</span><br><span class="line">            <span class="comment">// 3、遍历内容</span></span><br><span class="line">            <span class="keyword">if</span> (ArrayUtil.isEmpty(children)) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (File child : children) &#123;</span><br><span class="line">                <span class="comment">// 4.1、如果是文件夹，则进行递归</span></span><br><span class="line">                <span class="keyword">if</span> (child.isDirectory()) &#123;</span><br><span class="line">                    scanBean(child);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 5.1、如果是文件，则进行判断是否为class文件</span></span><br><span class="line">                    <span class="type">String</span> <span class="variable">pathWithClass</span> <span class="operator">=</span> child.getAbsolutePath().substring(currentAbsPath.length() - <span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">if</span> (pathWithClass.endsWith(<span class="string">&quot;.class&quot;</span>)) &#123;</span><br><span class="line">                        <span class="comment">// 5.2、反射得到当前文件的Class对象</span></span><br><span class="line">                        <span class="type">String</span> <span class="variable">classPath</span> <span class="operator">=</span> StrUtil.replace(pathWithClass, <span class="string">&quot;\\&quot;</span>, <span class="string">&quot;.&quot;</span>)</span><br><span class="line">                                .replace(<span class="string">&quot;.class&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">                        Class&lt;?&gt; clazz = Class.forName(classPath);</span><br><span class="line">                        initializeBean(clazz, <span class="literal">false</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; T <span class="title function_">getBean</span><span class="params">(String beanName, Class&lt;T&gt; clazz)</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> singleObjects.get(beanName);</span><br><span class="line">        <span class="keyword">if</span> (!clazz.isInstance(o)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>(<span class="string">&quot;获取的类型错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (T) o;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取bean的名字</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> annotation bean注解</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz      class对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> bean的名字</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">generateBeanName</span><span class="params">(Bean annotation, Class&lt;?&gt; clazz)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> annotation.value();</span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isBlank(value)) &#123;</span><br><span class="line">            Class&lt;?&gt;[] interfaces = clazz.getInterfaces();</span><br><span class="line">            <span class="keyword">if</span> (ArrayUtil.isNotEmpty(interfaces)) &#123;</span><br><span class="line">                value = StrUtil.lowerFirst(interfaces[<span class="number">0</span>].getSimpleName());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                value = StrUtil.lowerFirst(clazz.getSimpleName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理DI注解，实现注入属性</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> currentObj</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">diField</span><span class="params">(Object currentObj, Class&lt;?&gt; clazz)</span> &#123;</span><br><span class="line">        <span class="comment">// 1、获取所有属性</span></span><br><span class="line">        Field[] fields = clazz.getDeclaredFields();</span><br><span class="line">        <span class="comment">// 2、遍历属性</span></span><br><span class="line">        <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">            <span class="comment">// 3、找到有DI注解的属性</span></span><br><span class="line">            <span class="type">Di</span> <span class="variable">annotation</span> <span class="operator">=</span> field.getAnnotation(Di.class);</span><br><span class="line">            <span class="keyword">if</span> (Objects.nonNull(annotation)) &#123;</span><br><span class="line">                <span class="comment">// 4、找到对应属性在容器中的实例对象</span></span><br><span class="line">                Class&lt;?&gt; fieldClazz = field.getType();</span><br><span class="line">                <span class="comment">// 5、在容器中查找bean，没有则进行初始化bean</span></span><br><span class="line">                <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> initializeBean(fieldClazz, <span class="literal">true</span>);</span><br><span class="line">                <span class="comment">// 6、通过反射设置到属性中</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    field.set(currentObj, o);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">                    log.error(<span class="string">&quot;DI注入异常&quot;</span>, e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化bean</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz beanClass对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> find  是否在容器中进行寻找</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回bean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">initializeBean</span><span class="params">(Class&lt;?&gt; clazz, <span class="type">boolean</span> find)</span> &#123;</span><br><span class="line">        <span class="comment">// 1、判断是否是接口，且判断是不是要查找子类</span></span><br><span class="line">        <span class="keyword">if</span> (clazz.isInterface() &amp;&amp; find) &#123;</span><br><span class="line">            Set&lt;Class&lt;?&gt;&gt; set = packageReflections.getSubTypesOf((Class&lt;Object&gt;) clazz);</span><br><span class="line">            clazz = CollUtil.get(set, <span class="number">0</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (clazz.isInterface() &amp;&amp; !find) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 2、查找上面是否有@bean注解</span></span><br><span class="line">        <span class="type">Bean</span> <span class="variable">beanAnnotation</span> <span class="operator">=</span> clazz.getAnnotation(Bean.class);</span><br><span class="line">        <span class="keyword">if</span> (Objects.isNull(beanAnnotation)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 3、找到bean名字，获取在容器中的实例对象</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">beanName</span> <span class="operator">=</span> generateBeanName(beanAnnotation, clazz);</span><br><span class="line">            <span class="comment">// 4、判断是不是需要查找bean</span></span><br><span class="line">            <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (find) &#123;</span><br><span class="line">                o = singleObjects.get(beanName);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 5、如果在容器中没有找到，则进行初始化</span></span><br><span class="line">            <span class="keyword">if</span> (Objects.isNull(o)) &#123;</span><br><span class="line">                Constructor&lt;?&gt; constructor = clazz.getConstructor();</span><br><span class="line">                <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> constructor.newInstance();</span><br><span class="line">                <span class="comment">// 6、将实例化后的对象，放入map容器中</span></span><br><span class="line">                singleObjects.put(beanName, obj);</span><br><span class="line">                <span class="comment">// 7、处理属性，DI注入属性</span></span><br><span class="line">                diField(obj, clazz);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> o;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception exception) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;初始化bean异常&quot;</span>, exception);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、测试">三、测试</h2><p>同样，<code>service</code>及其实现类，<code>dao</code>及其实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test.mockioc.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TestService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test.mockioc.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.test.mockioc.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.test.mockioc.annotation.Di;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.test.mockioc.dao.TestDao;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.test.mockioc.service.TestService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">TestService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Di</span></span><br><span class="line">    <span class="keyword">public</span> TestDao testDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;service hello...&quot;</span>);</span><br><span class="line">        testDao.hello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test.mockioc.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TestDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test.mockioc.dao.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.test.mockioc.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.test.mockioc.dao.TestDao;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">TestDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;dao hello...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>service</code>实现类上面有<code>dao</code>类型的属性，并加上了<code>@Di</code>注解，试试能不能成功注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test.mockioc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.test.mockioc.core.MyApplicationContext;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.test.mockioc.service.TestService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">MyApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyApplicationContext</span>(<span class="string">&quot;com.banmoon.test.mockioc&quot;</span>);</span><br><span class="line">        <span class="type">TestService</span> <span class="variable">testService</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;testService&quot;</span>, TestService.class);</span><br><span class="line">        testService.hello();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行查看结果，成功</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20230303141806.png" alt="image-20230303141513459" /></p><h2 id="四、最后">四、最后</h2><p>其实，这也是最为简单的注入，我就问问</p><blockquote><p>都说<code>Spring</code>使用了三级缓存，那么这三级缓存是怎么使用的，它有什么作用呢？</p></blockquote><p>我是半月，你我一同共勉！！！</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue2中的组件</title>
      <link href="/archive/d14aca80/"/>
      <url>/archive/d14aca80/</url>
      
        <content type="html"><![CDATA[<h1>vue2中的组件</h1><ul class="lvl-0"><li class="lvl-2"><p><mark>作用</mark>：基于组件开发，<b>易维护</b>，<b>易复用</b></p></li><li class="lvl-2"><p><mark>分类</mark>：使用的作用域不同分为<b>全局组件</b>和<b>局部组件</b></p></li><li class="lvl-2"><p><mark>注意</mark>：</p><ul class="lvl-2"><li class="lvl-4">组件名需要与<mark>原来的html标签不一致</mark>，且不要有大写字母</li><li class="lvl-4">组件的data数据<mark>是一个函数</mark>，将对象return出去，与vue实例不一致</li><li class="lvl-4">组件的template<mark>只能存在一个根标签</mark></li></ul></li></ul><h2 id="一、全局组件">一、全局组件</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-component</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    Vue.component(&#x27;MyComponent&#x27;, &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        template: `</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;toggle&quot;</span>&gt;</span>切换<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-show</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span></span><span class="template-variable">&#123;&#123; <span class="name">msg</span> &#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            `,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        data()&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            return &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                msg: &quot;定义数据&quot;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                isShow: true</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        methods: &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            toggle()&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                this.isShow = !this.isShow;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    &#125;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    new Vue(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        el: &quot;#app&quot;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    &#125;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="二、局部组件">二、局部组件</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-component</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    new Vue(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        el: &quot;#app&quot;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        components: &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#x27;my-component&#x27;: &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                template: `</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;over&quot;</span>&gt;</span>Another year over<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">h4</span> <span class="attr">v-for</span>=<span class="string">&quot;(val, key) in person&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                </span><span class="template-variable">&#123;&#123; <span class="name">key</span> &#125;&#125;</span><span class="language-xml">： </span><span class="template-variable">&#123;&#123; <span class="name">val</span> &#125;&#125;</span><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                    <span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                `,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                data()&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                    return&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                        person: &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                            name: &quot;半月&quot;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                            age: 18,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                            sex: &quot;男&quot;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                        &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                    &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                methods: &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                    over()&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                        this.person.age++;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                    &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    &#125;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="三、组件的参数传递">三、组件的参数传递</h2><h3 id="1）父组件传递参数给子组件">1）父组件传递参数<mark>给子组件</mark></h3><ol><li class="lvl-3"><p>使用v-bind:自定义属性向子组件传递参数</p></li><li class="lvl-3"><p>子组件中使用props接收参数，props的值<mark>是一个数组</mark></p></li><li class="lvl-3"><p>同data一致，使用插值表达式在子组件的模板中使用props的参数即可使用v-bind:自定义属性向子组件传递参数子组件中使用props接收参数，props的值<mark>是一个数组</mark>同data一致，使用插值表达式在子组件的模板中使用props的参数即可</p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-component</span> <span class="attr">:msg</span>=<span class="string">&quot;msg&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    new Vue(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        el: &quot;#app&quot;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        data: &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            msg: &quot;传递的值&quot;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        components: &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#x27;my-component&#x27;: &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                template: `</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                        <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><span class="template-variable">&#123;&#123; <span class="name">subName</span> &#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                        <span class="tag">&lt;<span class="name">h2</span>&gt;</span></span><span class="template-variable">&#123;&#123; <span class="name">msg</span> &#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                `,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                data()&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                    return&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                        subName: &quot;子组件&quot;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                    &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                &#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                props: [</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                    &quot;msg&quot;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                ]</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    &#125;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2）子组件传递参数给父组件">2）子组件传递参数<mark>给父组件</mark></h3><ol><li class="lvl-3"><p>在子组件标签上自定义一个事件，内容指向父组件的一个方法，作为该自定义事件的参数接收方法</p></li><li class="lvl-3"><p>在子组件中调用**this.$emit(“自定义事件名”, 传递的参数)**方法，触发参数的传递</p></li><li class="lvl-3"><p>在父组件的接收方法中，来处理子组件传递的参数</p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>父组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>&#123;&#123; subMsg &#125;&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-component</span> @<span class="attr">transmit</span>=<span class="string">&quot;accept&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">subMsg</span>: <span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">accept</span>(<span class="params">input</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">subMsg</span> = input;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&#x27;my-component&#x27;</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">template</span>: <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                    &lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                        &lt;h1&gt;子组件&lt;/h1&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                        &lt;button @click=&quot;send&quot;&gt;发送数据&lt;/button&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                        &lt;hr&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                    &lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                `</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">msg</span>: <span class="string">&quot;子组件的数据&quot;</span></span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">send</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">this</span>.$emit(<span class="string">&quot;transmit&quot;</span>, <span class="variable language_">this</span>.<span class="property">msg</span>);</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3）非父子组件传递参数">3）<mark>非父子组件</mark>传递参数</h3><ol><li class="lvl-3"><p>创建一个空的vue实例对象，<code>var data = new Vue()</code>，用于充当事件中心的角色</p></li><li class="lvl-3"><p>在A组件中通过 <code>data.$emit(自定义事件名, 传递的参数)</code>，触发自定义事件</p></li><li class="lvl-3"><p>在B组件中通过 <code>data.$on(自定义事件名, function(input)&#123;...&#125;)</code>，来监听自定义事件，通过处理函数来接收处理传递的参数</p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">coma</span>&gt;</span><span class="tag">&lt;/<span class="name">coma</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">comb</span>&gt;</span><span class="tag">&lt;/<span class="name">comb</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1、创建一个空的vue实例对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> data = <span class="keyword">new</span> <span class="title class_">Vue</span>();</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">coma</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">template</span>: <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;h1&gt;&#123;&#123; h1 &#125;&#125;&lt;/h1&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;button @click=&quot;send&quot;&gt;发送&lt;/button&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">    &lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">`</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">h1</span>: <span class="string">&quot;组件A&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">msg</span>: <span class="string">&quot;传递的参数&quot;</span></span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 2、通过事件中心，触发自定义事件</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">send</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                        data.$emit(<span class="string">&quot;sendMsg&quot;</span>, <span class="variable language_">this</span>.<span class="property">msg</span>);</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">comb</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">template</span>: <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                        &lt;h1&gt;&#123;&#123; h1 &#125;&#125;&lt;/h1&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                        &lt;p&gt;&#123;&#123; msg &#125;&#125;&lt;/p&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">    &lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">`</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">h1</span>: <span class="string">&quot;组件B&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">msg</span>: <span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 3、在生命周期created函数中监听自定义事件</span></span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">created</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    data.$on(<span class="string">&quot;sendMsg&quot;</span>, <span class="function">(<span class="params">msg</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">this</span>.<span class="property">msg</span> = msg;</span></span><br><span class="line"><span class="language-javascript">                    &#125;)</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="四、内置组件">四、内置组件</h2><h3 id="1）component">1）<mark>component</mark></h3><ul class="lvl-0"><li class="lvl-2"><p><mark>作用</mark>：用于动态渲染组件</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;option(&#x27;coma&#x27;)&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-info&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;option(&#x27;comb&#x27;)&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-info&quot;</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;com&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">title</span>: <span class="string">&quot;ref操作虚拟dom&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">com</span>: <span class="string">&quot;coma&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">option</span>(<span class="params">key</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">com</span> = key;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">coma</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">template</span>: <span class="string">`&lt;h1&gt;登录组件&lt;/h1&gt;`</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">comb</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">template</span>: <span class="string">`&lt;h1&gt;注册组件&lt;/h1&gt;`</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2）tarnsition">2）<mark>tarnsition</mark></h3><ul class="lvl-0"><li class="lvl-2"><p><mark>作用</mark>：实现过度效果和动画</p></li><li class="lvl-2"><p>属性：</p><ul class="lvl-2"><li class="lvl-4">name：可以自定义前缀，设置后各个状态的类名前缀将会改变</li></ul></li><li class="lvl-2"><p>步骤：</p><ol><li class="lvl-5">使用<mark>transition</mark>标签包裹元素或组件</li><li class="lvl-5">对各个状态的类名进行样式的编写<ul class="lvl-4"><li class="lvl-7"><mark>显示阶段类名</mark>：v-enter-active<ul class="lvl-6"><li class="lvl-9"><mark>显示阶段开始</mark>：v-enter</li><li class="lvl-9"><mark>显示阶段结束</mark>：v-enter-to</li></ul></li><li class="lvl-7"><mark>隐藏阶段</mark>：v-leave-active<ul class="lvl-6"><li class="lvl-9"><mark>隐藏阶段开始</mark>：v-leave</li><li class="lvl-9"><mark>隐藏阶段结束</mark>：v-leave-to</li></ul></li></ul></li></ol></li></ul><h4 id="2-1）使用内置状态类名">2.1）使用内置状态类名</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/bootstrap@3.3.7/dist/css/bootstrap.min.css&quot;</span> <span class="attr">integrity</span>=<span class="string">&quot;sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u&quot;</span> <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.costom-enter</span>, <span class="selector-class">.costom-leave-to</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">opacity</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.costom-enter-to</span>, <span class="selector-class">.costom-leave</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">opacity</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.costom-enter-active</span>, <span class="selector-class">.costom-leave-active</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transition</span>: opacity <span class="number">0.7s</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;toggle&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-info&quot;</span>&gt;</span>显示/隐藏<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">&quot;costom&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">component</span> <span class="attr">is</span>=<span class="string">&quot;coma&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">title</span>: <span class="string">&quot;transition过度动画&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">isShow</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">toggle</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">isShow</span> = !<span class="variable language_">this</span>.<span class="property">isShow</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">coma</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">template</span>: <span class="string">`&lt;h1&gt;登录组件&lt;/h1&gt;`</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-2）使用动画类库的类">2.2）使用动画类库的类</h4><ul class="lvl-0"><li class="lvl-2"><p><a href="https://animate.style/">Animate.<i>css</i></a>是一款强大的CSS3动画类库</p><ul class="lvl-2"><li class="lvl-4">说明：是一款强大的CSS3动画类库，通过使用定义好动画类名，完成动画效果</li><li class="lvl-4">官网：<a href="https://animate.style/">https://animate.style/</a></li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/animate.css@3.5.1&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/bootstrap@3.3.7/dist/css/bootstrap.min.css&quot;</span> <span class="attr">integrity</span>=<span class="string">&quot;sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u&quot;</span> <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;show = !show&quot;</span>&gt;</span>切换<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transition</span></span></span><br><span class="line"><span class="tag"><span class="attr">name</span>=<span class="string">&quot;custom-classes-transition&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">enter-active-class</span>=<span class="string">&quot;animated flipInX&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">leave-active-class</span>=<span class="string">&quot;animated flipOutX&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;show&quot;</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">title</span>: <span class="string">&quot;animated动画类库&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">show</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3）transition-group">3）<mark>transition-group</mark></h3><ul class="lvl-0"><li class="lvl-2"><p>作用：渲染多个元素，列表的动画</p></li><li class="lvl-2"><p>注意：</p><ul class="lvl-2"><li class="lvl-4">默认渲染为 <code>span</code>，通过指定tag更换为其他元素</li><li class="lvl-4">内部的v-for元素总要指定key属性</li><li class="lvl-4">过度动画处于内部的元素中，而不是transition</li><li class="lvl-4">v-move对于设置过渡的切换时机和过渡曲线非常有用</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/bootstrap@3.3.7/dist/css/bootstrap.min.css&quot;</span> <span class="attr">integrity</span>=<span class="string">&quot;sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u&quot;</span> <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.list-group</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.list-group-item</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transition</span>: all .<span class="number">7s</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">line-height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-right</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="comment">/* .list-enter-active, .list-leave-active &#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">    transition: all 0.7s;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">    &#125; */</span></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.list-enter</span>, <span class="selector-class">.list-leave-to</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">opacity</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">60px</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.list-leave-active</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;shuffle&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span>&gt;</span>洗牌<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;add&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-info&quot;</span>&gt;</span>随机添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;remove&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-success&quot;</span>&gt;</span>随机移除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transition-group</span> <span class="attr">name</span>=<span class="string">&quot;list&quot;</span> <span class="attr">tag</span>=<span class="string">&quot;ul&quot;</span> <span class="attr">class</span>=<span class="string">&quot;list-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span> <span class="attr">v-bind:key</span>=<span class="string">&quot;item&quot;</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item&quot;</span>&gt;</span></span><br><span class="line">            &#123;&#123; item &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">transition-group</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">title</span>: <span class="string">&quot;animated动画类库&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">items</span>: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>],</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">nextNum</span>: <span class="number">10</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">randomIndex</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="variable language_">this</span>.<span class="property">items</span>.<span class="property">length</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">add</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">items</span>.<span class="title function_">splice</span>(<span class="variable language_">this</span>.<span class="title function_">randomIndex</span>(), <span class="number">0</span>, <span class="variable language_">this</span>.<span class="property">nextNum</span>++)</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">remove</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">items</span>.<span class="title function_">splice</span>(<span class="variable language_">this</span>.<span class="title function_">randomIndex</span>(), <span class="number">1</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">shuffle</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">let</span> array = <span class="variable language_">this</span>.<span class="property">items</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">let</span> len = array.<span class="property">length</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">for</span> (<span class="keyword">let</span> i = len - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">let</span> j = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * (i + <span class="number">1</span>));</span></span><br><span class="line"><span class="language-javascript">                    [array[i], array[j]] = [array[j], array[i]];</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">items</span> = <span class="title class_">Array</span>.<span class="title function_">from</span>(array);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模拟Spring实现一个简易的IOC容器</title>
      <link href="/archive/6d152f6e/"/>
      <url>/archive/6d152f6e/</url>
      
        <content type="html"><![CDATA[<h1>模拟Spring实现一个简易的IOC容器</h1><h2 id="一、介绍">一、介绍</h2><p><b>在模拟实现</b> <code>IOC</code>容器之前，我们必须要掌握反射相关的知识，毕竟 <code>IOC</code>容器采用的是反射进行的查找创建。</p><p><b>反射可以看我以前的这篇文章</b></p><p><a href="https://www.banmoon.top/archive/d24de37a/">Java注解的介绍和反射使用 | 半月无霜 (banmoon.top)</a></p><h2 id="二、步骤">二、步骤</h2><p><b>在</b> <code>spring</code>的包中，有这么一个接口 <code>ApplicationContext.java</code>，他是一个容器接口，一切的开始都是由它开始，<code>spring</code>中定义了各种场景下使用的实现类，其中常见有以下几种实现类</p><ul class="lvl-0"><li class="lvl-2"><p><code>AnnotationConfigApplicationContext</code>：通过注解配置初始化容器</p></li><li class="lvl-2"><p><code>ClassPathXmlApplicationContext</code>：通过 <code>xml</code>配置文件初始化容器</p></li><li class="lvl-2"><p><code>AnnotationConfigServletWebApplicationContext</code>：注解配置加载 <code>web</code>环境的容器</p></li></ul><p><b>既然我们要自己写一个容器，我们也需要一个这样的容器类，接口不接口的无所谓，我们可以不考虑结构，只考虑效果。故我们只需要一个容器类就好了。</b></p><p><b>除了容器外，我们还需要一个注解，分别作用于类上，作为标识此类要进行初始化被容器管理</b></p><ul class="lvl-0"><li class="lvl-2"><p><code>@bean</code>：标注为需要实例化的类，被容器管理</p></li></ul><hr /><p><b>那么步骤如下</b></p><ol><li class="lvl-3"><p><b>先创建一个容器类，这个容器类中有初始化</b> <code>bean</code>，获取 <code>bean</code>的方法</p></li><li class="lvl-3"><p><b>初始化</b> <code>bean</code>时，需要传入一个包路径，自动扫描这个包路径下的类</p></li><li class="lvl-3"><p><b>如果类上面要是有</b> <code>@bean</code>注解，我们就进行实例化类，并加入到容器中</p></li></ol><h2 id="三、实现">三、实现</h2><p><b>我们先把注解写了</b></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">package</span> com.banmoon.test.mockioc.annotation;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"> <span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"> <span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"> <span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"> </span><br><span class="line"> <span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"> <span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"> <span class="keyword">public</span> <span class="meta">@interface</span> Bean &#123;</span><br><span class="line"> </span><br><span class="line">     String <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"> </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><b>然后，我们可以开始写容器了，代码一步到位，看构造器初始化方法，查看是如何加载到类，并将其实例化的。</b></p><p><b>以及容器中有个</b> <code>Map&lt;String, Object&gt; singleObjects = new HashMap&lt;&gt;();</code>，这才是用来存储实例化后的对象的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">package</span> com.banmoon.test.mockioc.core;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">import</span> cn.hutool.core.util.ArrayUtil;</span><br><span class="line"> <span class="keyword">import</span> cn.hutool.core.util.StrUtil;</span><br><span class="line"> <span class="keyword">import</span> com.banmoon.test.mockioc.annotation.Bean;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">import</span> java.io.File;</span><br><span class="line"> <span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"> <span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"> <span class="keyword">import</span> java.net.URL;</span><br><span class="line"> <span class="keyword">import</span> java.net.URLDecoder;</span><br><span class="line"> <span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"> <span class="keyword">import</span> java.util.Map;</span><br><span class="line"> <span class="keyword">import</span> java.util.Objects;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyApplicationContext</span> &#123;</span><br><span class="line"> </span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * 真正的容器存储集合</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, Object&gt; singleObjects = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"> </span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * 当前运行环境的路径</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">currentAbsPath</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"> </span><br><span class="line">     <span class="keyword">public</span> <span class="title function_">MyApplicationContext</span><span class="params">(String packagePath)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">         <span class="comment">// 1、将包路径中的.变成\</span></span><br><span class="line">         <span class="type">String</span> <span class="variable">basePackage</span> <span class="operator">=</span> StrUtil.replace(packagePath, <span class="string">&quot;.&quot;</span>, <span class="string">&quot;\\&quot;</span>);</span><br><span class="line">         <span class="comment">// 2、获取包的绝对路径，我们要获取class包的绝对路径，也就是target里面的那些</span></span><br><span class="line">         <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> Thread.currentThread().getContextClassLoader().getResource(basePackage);</span><br><span class="line">         <span class="comment">// 3、得到url后还需要进行转码</span></span><br><span class="line">         <span class="keyword">if</span> (Objects.nonNull(url)) &#123;</span><br><span class="line">             <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> URLDecoder.decode(url.getFile(), <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">             <span class="comment">// 4、为了方便，此处记录target包的绝对路径</span></span><br><span class="line">             currentAbsPath = filePath.substring(<span class="number">0</span>, filePath.length() - basePackage.length());</span><br><span class="line">             <span class="comment">// 5、扫描包里面所有的类</span></span><br><span class="line">             scanBean(<span class="keyword">new</span> <span class="title class_">File</span>(filePath));</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">scanBean</span><span class="params">(File file)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException &#123;</span><br><span class="line">         <span class="comment">// 1、判断当前是否文件夹</span></span><br><span class="line">         <span class="keyword">if</span> (file.isDirectory()) &#123;</span><br><span class="line">             <span class="comment">// 2、获取文件夹中所有的内容，如果为空直接返回</span></span><br><span class="line">             File[] children = file.listFiles();</span><br><span class="line">             <span class="comment">// 3、遍历内容</span></span><br><span class="line">             <span class="keyword">if</span> (ArrayUtil.isEmpty(children)) &#123;</span><br><span class="line">                 <span class="keyword">return</span>;</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="keyword">for</span> (File child : children) &#123;</span><br><span class="line">                 <span class="comment">// 4.1、如果是文件夹，则进行递归</span></span><br><span class="line">                 <span class="keyword">if</span> (child.isDirectory()) &#123;</span><br><span class="line">                     scanBean(child);</span><br><span class="line">                 &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                     <span class="comment">// 5.1、如果是文件，则进行判断是否为class文件</span></span><br><span class="line">                     <span class="type">String</span> <span class="variable">pathWithClass</span> <span class="operator">=</span> child.getAbsolutePath().substring(currentAbsPath.length() - <span class="number">1</span>);</span><br><span class="line">                     <span class="keyword">if</span> (pathWithClass.endsWith(<span class="string">&quot;.class&quot;</span>)) &#123;</span><br><span class="line">                         <span class="comment">// 5.2、反射得到当前文件的Class对象</span></span><br><span class="line">                         <span class="type">String</span> <span class="variable">classPath</span> <span class="operator">=</span> StrUtil.replace(pathWithClass, <span class="string">&quot;\\&quot;</span>, <span class="string">&quot;.&quot;</span>)</span><br><span class="line">                                 .replace(<span class="string">&quot;.class&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">                         Class&lt;?&gt; clazz = Class.forName(classPath);</span><br><span class="line">                         <span class="comment">// 5.3、判断上面是否有@Bean注解，有的话进行实例化</span></span><br><span class="line">                         <span class="type">Bean</span> <span class="variable">annotation</span> <span class="operator">=</span> clazz.getAnnotation(Bean.class);</span><br><span class="line">                         <span class="keyword">if</span> (!clazz.isInterface() &amp;&amp; Objects.nonNull(annotation)) &#123;</span><br><span class="line">                             Constructor&lt;?&gt; constructor = clazz.getConstructor();</span><br><span class="line">                             <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> constructor.newInstance();</span><br><span class="line">                             <span class="comment">// 5.4、将实例化后的对象，放入map容器中</span></span><br><span class="line">                             <span class="type">String</span> <span class="variable">beanName</span> <span class="operator">=</span> generateBeanName(annotation, clazz);</span><br><span class="line">                             singleObjects.put(beanName, obj);</span><br><span class="line">                         &#125;</span><br><span class="line">                     &#125;</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     <span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line">     <span class="keyword">public</span> &lt;T&gt; T <span class="title function_">getBean</span><span class="params">(String beanName, Class&lt;T&gt; clazz)</span> &#123;</span><br><span class="line">         <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> singleObjects.get(beanName);</span><br><span class="line">         <span class="keyword">if</span> (!clazz.isInstance(o)) &#123;</span><br><span class="line">             <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>(<span class="string">&quot;获取的类型错误&quot;</span>);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> (T) o;</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * 获取bean的名字</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param</span> annotation bean注解</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param</span> clazz class对象</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@return</span> bean的名字</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">     <span class="keyword">private</span> String <span class="title function_">generateBeanName</span><span class="params">(Bean annotation, Class&lt;?&gt; clazz)</span> &#123;</span><br><span class="line">         <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> annotation.value();</span><br><span class="line">         <span class="keyword">if</span> (StrUtil.isBlank(value)) &#123;</span><br><span class="line">             Class&lt;?&gt;[] interfaces = clazz.getInterfaces();</span><br><span class="line">             <span class="keyword">if</span> (ArrayUtil.isNotEmpty(interfaces)) &#123;</span><br><span class="line">                 value = StrUtil.lowerFirst(interfaces[<span class="number">0</span>].getSimpleName());</span><br><span class="line">             &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                 value = StrUtil.lowerFirst(clazz.getSimpleName());</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> value;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="四、测试">四、测试</h2><p><b>写一个</b> <code>service</code>、一个 <code>dao</code>，以及对应的实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">package</span> com.banmoon.test.mockioc.service;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TestService</span> &#123;</span><br><span class="line"> </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">package</span> com.banmoon.test.mockioc.service.impl;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">import</span> com.banmoon.test.mockioc.annotation.Bean;</span><br><span class="line"> <span class="keyword">import</span> com.banmoon.test.mockioc.annotation.Di;</span><br><span class="line"> <span class="keyword">import</span> com.banmoon.test.mockioc.dao.TestDao;</span><br><span class="line"> <span class="keyword">import</span> com.banmoon.test.mockioc.service.TestService;</span><br><span class="line"> </span><br><span class="line"> <span class="meta">@Bean</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">TestService</span> &#123;</span><br><span class="line"> </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">package</span> com.banmoon.test.mockioc.dao;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TestDao</span> &#123;</span><br><span class="line"> </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">package</span> com.banmoon.test.mockioc.dao.impl;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">import</span> com.banmoon.test.mockioc.annotation.Bean;</span><br><span class="line"> <span class="keyword">import</span> com.banmoon.test.mockioc.dao.TestDao;</span><br><span class="line"> </span><br><span class="line"> <span class="meta">@Bean</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">TestDao</span> &#123;</span><br><span class="line"> </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><b>再编写我们的主程序，来初始化这个容器</b></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">package</span> com.banmoon.test.mockioc;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">import</span> com.banmoon.test.mockioc.core.MyApplicationContext;</span><br><span class="line"> <span class="keyword">import</span> com.banmoon.test.mockioc.dao.TestDao;</span><br><span class="line"> <span class="keyword">import</span> com.banmoon.test.mockioc.service.TestService;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"> </span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">         <span class="type">MyApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyApplicationContext</span>(<span class="string">&quot;com.banmoon.test.mockioc&quot;</span>);</span><br><span class="line">         <span class="type">TestService</span> <span class="variable">testService</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;testService&quot;</span>, TestService.class);</span><br><span class="line">         System.out.println(testService);</span><br><span class="line">         <span class="type">TestDao</span> <span class="variable">testDao</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;testDao&quot;</span>, TestDao.class);</span><br><span class="line">         System.out.println(testDao);</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><b>运行结果如下</b></p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20230225170630.png" alt="image-20230225170156999" /></p><p><b>如此，一个简易的</b> <code>IOC</code>容器就已经搭建完成了</p><h2 id="五、最后">五、最后</h2><p><b>想象很美好，实际问题会很多，在此只展示基本的原理。</b></p><p><b>如果真的这么简单的话，</b><code>spring</code>也就不会这么庞大了，555！！！</p><p><b>上面这段代码存在不少的问题，后续总结一下</b> <code>spring</code>中是如何解决这些个问题的吧。</p><ul class="lvl-0"><li class="lvl-2"><p><b>实例化的</b> <code>bean</code>存在多个接口，该如何存储</p></li><li class="lvl-2"><p><b>上述代码没有完成依赖注入，也就是</b> <code>DI</code></p></li><li class="lvl-2"><p><code>spring</code>是如何存储，才完成了既可以通过名称获取，又可以通过类型获取 <code>bean</code></p></li></ul><p><b>我是半月，你我一同共勉！！！</b></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bean的作用域和生命周期</title>
      <link href="/archive/36892890/"/>
      <url>/archive/36892890/</url>
      
        <content type="html"><![CDATA[<h1>bean的作用域和生命周期</h1><h2 id="一、bean的作用域">一、bean的作用域</h2><p><b>在</b> <code>Spring</code>中，那些组成应用程序的主体及由 <code>Spring IOC</code>容器所管理的对象，被称之为 <code>bean</code>。</p><p><b>简单地讲，</b><code>bean</code>就是由 <code>IOC</code>容器初始化、装配及管理的对象。</p><p><b>而作用域代表的</b> <code>bean</code>的创建存在方式，可以在哪里使用</p><p><b>我们分别可以使用以下这四种情况</b></p><table><thead><tr><th><b>scope取值</b></th><th><b>含义</b></th><th><b>创建对象的时机</b></th></tr></thead><tbody><tr><td><b>singleton（默认）</b></td><td><b>在一个IOC容器中，这个</b> <code>bean</code>对象只有一个实例</td><td><b>IOC容器初始时创建单例</b> <code>bean</code></td></tr><tr><td><b>prototype</b></td><td><b>在一个IOC容器中，这个</b> <code>bean</code>有多个实例</td><td><b>获取</b> <code>bean</code>的时候</td></tr><tr><td><b>request</b></td><td><b>每一次</b> <code>http</code>请求，都会创建一个 <code>bean</code></td><td><b>每一次</b> <code>http</code>请求的时候</td></tr><tr><td><b>session</b></td><td><b>同一个</b> <code>http session</code>中，有且仅有一个 <code>bean</code></td><td><b>产生新的</b> <code>http session</code>会话的时候</td></tr></tbody></table><p><b>后面两种不做要求，仅用在基于</b> <code>web</code>的 <code>Spring ApplicationContext</code>环境</p><hr /><p><b>演示</b> <code>singleton</code>和 <code>prototype</code>的区别</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">package</span> com.banmoon.test.scope;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">import</span> com.banmoon.test.User;</span><br><span class="line"> <span class="keyword">import</span> org.springframework.beans.factory.config.ConfigurableBeanFactory;</span><br><span class="line"> <span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class="line"> <span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"> <span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"> <span class="keyword">import</span> org.springframework.context.annotation.Scope;</span><br><span class="line"> </span><br><span class="line"> <span class="meta">@Configuration</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BeanScope</span> &#123;</span><br><span class="line"> </span><br><span class="line">     <span class="meta">@Scope(ConfigurableBeanFactory.SCOPE_SINGLETON)</span></span><br><span class="line">     <span class="meta">@Bean(name = &quot;user&quot;)</span></span><br><span class="line">     <span class="keyword">public</span> User <span class="title function_">user</span><span class="params">()</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1</span>, <span class="string">&quot;banmoon&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">         <span class="type">AnnotationConfigApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(BeanScope.class);</span><br><span class="line">         <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> context.getBean(User.class);</span><br><span class="line">         System.out.println(user);</span><br><span class="line">         System.out.println(<span class="string">&quot;========== 分割线 ==========&quot;</span>);</span><br><span class="line">         <span class="comment">// 再次获取user</span></span><br><span class="line">         <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> context.getBean(User.class);</span><br><span class="line">         System.out.println(user1);</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><b>单例启动，结果如下，两次对象地址打印是一致的</b></p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20230223215214.png" alt="image-20230222092536815" /></p><p><b>将</b> <code>@Scope</code>注解的值改为 <code>prototype</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">package</span> com.banmoon.test.scope;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">import</span> com.banmoon.test.User;</span><br><span class="line"> <span class="keyword">import</span> org.springframework.beans.factory.config.ConfigurableBeanFactory;</span><br><span class="line"> <span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class="line"> <span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"> <span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"> <span class="keyword">import</span> org.springframework.context.annotation.Scope;</span><br><span class="line"> </span><br><span class="line"> <span class="meta">@Configuration</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BeanScope</span> &#123;</span><br><span class="line"> </span><br><span class="line">     <span class="meta">@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)</span></span><br><span class="line">     <span class="meta">@Bean(name = &quot;user&quot;)</span></span><br><span class="line">     <span class="keyword">public</span> User <span class="title function_">user</span><span class="params">()</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1</span>, <span class="string">&quot;banmoon&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">         <span class="type">AnnotationConfigApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(BeanScope.class);</span><br><span class="line">         <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> context.getBean(User.class);</span><br><span class="line">         System.out.println(user);</span><br><span class="line">         System.out.println(<span class="string">&quot;========== 分割线 ==========&quot;</span>);</span><br><span class="line">         <span class="comment">// 再次获取user</span></span><br><span class="line">         <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> context.getBean(User.class);</span><br><span class="line">         System.out.println(user1);</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><b>可以看到他们的地址是不一致的</b></p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20230223215221.png" alt="image-20230222092738236" /></p><blockquote><p><b>还有一点，注意上面</b> <code>spring</code>打印的 <code>debug</code>日志，可以清楚的看到 <code>bean</code>创建的时间节点，</p><p><b>单例</b> <code>bean</code>是在 <code>IOC</code>容器初始化后，马上就进行了创建</p><p><b>原型</b> <code>bean</code>是在每次创建时才进行创建，这也是每次获取不一致的原因所在</p></blockquote><h2 id="二、bean的生命周期">二、bean的生命周期</h2><p><b>什么是</b> <code>bean</code>的生命周期，就是一个 <code>bean</code>从出生到死亡的过程，其中经历了哪些步骤，了解这些步骤，我们就可以更加清晰了解 <code>bean</code>的运行规律。</p><p><b>总的来说，</b><code>bean</code>的生命周期可以规划为下面这个步骤</p><ol><li class="lvl-3"><p><b>初始化，也就是调用构造方法</b></p></li><li class="lvl-3"><p><b>通过</b> <code>set</code>方法进行赋值</p></li><li class="lvl-3"><p><b>处理</b> <code>Aware</code>系列接口，具体可以查看它的几个子接口具体是做什么的</p></li><li class="lvl-3"><p><code>InitializingBean</code>接口，调用其初始化方法</p></li><li class="lvl-3"><p><b>调用在</b> <code>bean</code>标签中指定的初始化方法</p></li><li class="lvl-3"><p><b>初始化完成，进行使用</b></p></li><li class="lvl-3"><p><code>DisposableBean</code>接口，调用其销毁方法</p></li><li class="lvl-3"><p><b>调用在</b> <code>bean</code>标签中指定的销毁方法</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">package</span> com.banmoon.test.lifecycle;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">import</span> lombok.Getter;</span><br><span class="line"> <span class="keyword">import</span> org.springframework.beans.factory.BeanNameAware;</span><br><span class="line"> <span class="keyword">import</span> org.springframework.beans.factory.DisposableBean;</span><br><span class="line"> <span class="keyword">import</span> org.springframework.beans.factory.InitializingBean;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@author</span> banmoon</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="meta">@Getter</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">InitializingBean</span>, DisposableBean, BeanNameAware &#123;</span><br><span class="line"> </span><br><span class="line">     <span class="keyword">private</span> String name;</span><br><span class="line"> </span><br><span class="line">     <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;1、调用无参构造进行创建&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;2、通过set方法进行设置属性&quot;</span>);</span><br><span class="line">         <span class="built_in">this</span>.name = name;</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBeanName</span><span class="params">(String s)</span> &#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;3、Aware系列接口，处理相关的逻辑&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;4、InitializingBean接口，初始化方法&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">myInit</span><span class="params">()</span> &#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;5、在bean标签中指定的初始化方法&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;7、DisposableBean接口，销毁方法&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">myDestroy</span><span class="params">()</span> &#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;8、在bean标签中指定的销毁方法&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">package</span> com.banmoon.test.lifecycle;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class="line"> <span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"> </span><br><span class="line">     <span class="meta">@Bean(name = &quot;user&quot;, initMethod = &quot;myInit&quot;, destroyMethod = &quot;myDestroy&quot;)</span></span><br><span class="line">     <span class="keyword">public</span> User <span class="title function_">user</span><span class="params">()</span> &#123;</span><br><span class="line">         <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">         user.setName(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">         <span class="keyword">return</span> user;</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">         <span class="type">AnnotationConfigApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(Main.class);</span><br><span class="line">         <span class="type">User</span> <span class="variable">bean</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;user&quot;</span>, User.class);</span><br><span class="line">         System.out.println(<span class="string">&quot;6、进行模拟使用：&quot;</span> + bean.getName());</span><br><span class="line">         context.close();</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><b>代码比较简单，直接查看运行结果</b></p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20230223215228.png" alt="image-20230223214903480" /></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>将本地jar包添加至本地Maven仓库</title>
      <link href="/archive/a6084b01/"/>
      <url>/archive/a6084b01/</url>
      
        <content type="html"><![CDATA[<h1>将本地jar包添加至本地Maven仓库</h1><h2 id="一、介绍">一、介绍</h2><p>在平常开发过程中，常常会遇到网络卡顿，导致下载不了<code>maven</code>的依赖<code>jar</code>，这时候就需要拿到同事的<code>jar</code>包，自己导入到本地的仓库中。</p><p>如下进行使用</p><h2 id="二、使用">二、使用</h2><p>将本地<code>jar</code>包放一个合适的位置，接着打开<code>cmd</code>黑窗输入下面这段代码，即可加入至本地的<code>maven</code>仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn install:install-file -DgroupId=com.banmoon.test -DartifactId=core -Dversion=1.0.1 -Dpackaging=jar -Dfile=C:\Users\banmoon\Desktop\core-3.4.0.jar</span><br></pre></td></tr></table></figure><p>其中里面的参数代表含义如下</p><ul class="lvl-0"><li class="lvl-2"><p><code>-DgroupId</code>：对应<code>groupId</code></p></li><li class="lvl-2"><p><code>-DartifactId</code>：对应<code>artifactId</code></p></li><li class="lvl-2"><p><code>-Dversion</code>：对应<code>version</code></p></li></ul><p>如此上述添加成功后，我们可以这样引用</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.banmoon.test<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="三、最后">三、最后</h2><div style="background: rgba(135, 206, 235, 0.5); padding: 20px">    <span style="width: 90px;margin-bottom: 10px;display: inline-block;">groupId：</span>    <input type=text value="" id="g" style="border: 1px #333 solid;">    <br />    <span style="width: 90px;margin-bottom: 10px;display: inline-block;">artifactId：</span><input type=text value="" id="a" style="border: 1px #333 solid;">    <br />    <span style="width: 90px;margin-bottom: 10px;display: inline-block;">version：</span>    <input type=text value="" id="v" style="border: 1px #333 solid;">    <br />    <span style="width: 90px;margin-bottom: 10px;display: inline-block;">jar位置：</span>    <input type=text value="" id="f" style="border: 1px #333 solid;">    <br />    <button id="btn" style="border: 1px #333 solid; padding: 0 5px;margin-bottom: 10px;" onclick="insertMaven()">生成</button>    <br>    结果：    <br />    <input type="textarea" id="result" style="border: 1px #333 solid;margin-bottom: 5px;display: inline-block;width: 100%;" />    <button style="border: 1px #333 solid; padding: 0 5px;" onclick="copy(getId('result'))">复制到剪切板</button></div><p>我是半月，你我一同共勉！！！</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 构建工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dependencyManagement和dependencies的区别</title>
      <link href="/archive/4f713af4/"/>
      <url>/archive/4f713af4/</url>
      
        <content type="html"><![CDATA[<h1>dependencyManagement和dependencies有什么区别</h1><h2 id="一、Maven的包管理">一、Maven的包管理</h2><p>在maven中，<code>dependencyManagement</code>、<code>dependencies</code>和<code>dependency</code>，这三个标签是用来管理项目依赖包的，但许多小伙伴都不清楚它们之间的区别，下面将讲解他们之间的区别，以及如何在项目中使用这些标签</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 它们之间的嵌套关系 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="二、dependencyManagement标签">二、dependencyManagement标签</h2><p>在如今的Maven项目中，工程往往呈现出父子模块工程，以模块化工程进行开发部署。一个优秀的工程，它的包管理一定是有清晰的条目的，所以如何统一的管理包的内容和版本成为了重中之重。</p><p><code>dependencyManagement</code>标签只是声明依赖，<mark>这个标签下引入的所有依赖包，都不会引入至项目</mark>。正如此标签英文字面上的意思，此标签常常出现在父工程，作为一个管理依赖包的管理者。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 如果最外层是dependencyManagement，那么此处的所有包都不会引入 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="三、dependencies标签">三、dependencies标签</h2><p>此标签是用来真正导入依赖包的，在此标签设置的<code>dependency</code>都会真正的导入至工程，所以此标签常用于子工程，引入依赖包进行开发编码。</p><p>如果父工程使用了<code>dependencyManagement</code>标签，子工程在引入依赖时，可以省去<code>groupId</code>和<code>version</code>标签，这将默认会和父工程的一致</p><p>如果子工程想使用另一个版本，则将<code>version</code>写上，子工程这边会导入对应的依赖包</p><p>如果父工程没有使用<code>dependencyManagement</code>，子工程会导入父工程<code>dependencies</code>下的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 如果外层的是dependencies，那么此处的包都将会被引入 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 如果父工程使用了dependencyManagement，那么此处可以省略groupId和version --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="四、最后">四、最后</h2><p>我是半月，你我一同共勉！！！</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 构建工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么！MyBatis的xml还可以这么写</title>
      <link href="/archive/cbf5ebf2/"/>
      <url>/archive/cbf5ebf2/</url>
      
        <content type="html"><![CDATA[<h1>什么！MyBatis的xml还可以这么写</h1><h2 id="一、介绍">一、介绍</h2><p><code>MyBatis</code>的<code>XML</code>动态<code>SQL</code>相信大家不陌生了，本文主要讲解一些比较容易出错、忘记，比较冷门的写法。</p><h2 id="二、内容">二、内容</h2><h3 id="1）bind标签">1）bind标签</h3><p>这是一个冷门的标签，它的作用是可以使用<code>OGNL</code>表达式创建一个变量设置到上下文中。</p><p>比如说要进行一次模糊查询，使用<code>bind</code>标签来进行拼接百分号</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.banmoon.test.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getListByUsername&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;BaseResultMap&quot;</span>&gt;</span></span><br><span class="line">        select *</span><br><span class="line">        from sys_user</span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;username != null and username != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bind</span> <span class="attr">name</span>=<span class="string">&quot;searchUsername&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&#x27;%&#x27; + username + &#x27;%&#x27;&quot;</span>/&gt;</span></span><br><span class="line">                username like #&#123;searchUsername&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>bind</code>标签还可以调用<code>java</code>的方法，如下这样使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.lang.Assert;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.StrUtil;</span><br><span class="line"><span class="keyword">import</span> lombok.AccessLevel;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * MyBatis动态SQL工具类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> banmoon</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@NoArgsConstructor(access = AccessLevel.PRIVATE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">likeConcat</span><span class="params">(String value)</span> &#123;</span><br><span class="line">        Assert.notBlank(value);</span><br><span class="line">        <span class="keyword">return</span> StrUtil.format(<span class="string">&quot;%&#123;&#125;%&quot;</span>, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">&quot;com.banmoon.test.mapper.UserMapper&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;select id=<span class="string">&quot;getListByUsername&quot;</span> resultMap=<span class="string">&quot;BaseResultMap&quot;</span>&gt;</span><br><span class="line">        select *</span><br><span class="line">        from sys_user</span><br><span class="line">        &lt;where&gt;</span><br><span class="line">            &lt;<span class="keyword">if</span> test=<span class="string">&quot;username != null and username != &#x27;&#x27;&quot;</span>&gt;</span><br><span class="line">                &lt;bind name=<span class="string">&quot;searchUsername&quot;</span> value=<span class="string">&quot;@com.banmoon.test.utils.MybatisUtil@likeConcat(username)&quot;</span>/&gt;</span><br><span class="line">                username like #&#123;searchUsername&#125;</span><br><span class="line">            &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">        &lt;/where&gt;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line"></span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><p>通过@符号进行调用Java类方法，一些复杂的参数可以直接这样调用获取了。</p><h3 id="2）if判断0的时候">2）if判断0的时候</h3><p>对于<code>if</code>标签大家都不陌生了，但这里面有使用上的坑需要注意</p><p>在如何判断<code>0</code>这个坑上，我遇到了很多次，我的同事也遇到很多次</p><p>先来看看下面这段</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.banmoon.test.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getListByStatus&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;BaseResultMap&quot;</span>&gt;</span></span><br><span class="line">        select * from sys_user</span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;status != null and status != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                and `status` = #&#123;status&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果传入的<code>status</code>是<code>0</code>，那么这段个判断，就会判断为<code>false</code>，条件就不再会进入。</p><p>原因就是<code>statsu != ''</code>在源码中会被当做<code>status != 0</code>来进行判断，故此不会进入判断</p><p>我们只需要将<code>status != ''</code>删除掉就可以进入判断了</p><h3 id="3）一对一、一对多映射">3）一对一、一对多映射</h3><p><code>mybatis</code>可以将结果集封装成<code>java</code>对象，单个对象的映射大家都会，这里主要讲一下一对一和一对多的映射使用</p><p>先讲一对一，在一个对象中有另一个对象，我们只需要如此就好</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.banmoon.test.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;UserDTOResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.banmoon.test.dto.UserDTO&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;username&quot;</span> <span class="attr">property</span>=<span class="string">&quot;username&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;status&quot;</span> <span class="attr">property</span>=<span class="string">&quot;status&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;userInfo&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;com.banmoon.test.dto.UserInfo&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;info_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;real_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;realName&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;nick_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;nickName&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getInfoList&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;UserDTOResultMap&quot;</span>&gt;</span></span><br><span class="line">        select</span><br><span class="line">            t0.id,</span><br><span class="line">            t0.username,</span><br><span class="line">            t0.`status`,</span><br><span class="line">            t1.id as info_id,</span><br><span class="line">            t1.real_name,</span><br><span class="line">            t1.nick_name,</span><br><span class="line">            t1.sex,</span><br><span class="line">            t1.age</span><br><span class="line">        from sys_user t0</span><br><span class="line">        left join sys_user_info t1 on t0.id = t1.user_id</span><br><span class="line">        where t0.`status` = 0</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>对应的<code>Java</code>类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test.dto;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDTO</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserInfo userInfo;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test.dto;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserInfo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String realName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String nickName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer sex;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当执行后，分别看看数据库中查询，和<code>mybatis</code>映射后的结果集</p><table><thead><tr><th>sql查询</th><th><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20230218115617.png" alt="image-20230218112233309" /></th></tr></thead><tbody><tr><td>结果集</td><td><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20230218115623.png" alt="image-20230218112511305" /></td></tr></tbody></table><hr /><p>如果是一对多，需要只需要这样做，修改一下<code>resultMap</code>映射</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.banmoon.test.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;UserPermissionDTOResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.banmoon.test.dto.UserPermissionDTO&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;username&quot;</span> <span class="attr">property</span>=<span class="string">&quot;username&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;status&quot;</span> <span class="attr">property</span>=<span class="string">&quot;status&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;roleList&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;com.banmoon.test.dto.RoleDTO&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;role_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;role_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;permissionList&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;java.lang.String&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">constructor</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">arg</span> <span class="attr">column</span>=<span class="string">&quot;permission_name&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">constructor</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getPermissionUserList&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;UserPermissionDTOResultMap&quot;</span>&gt;</span></span><br><span class="line">        select</span><br><span class="line">            t0.id,</span><br><span class="line">            t0.username,</span><br><span class="line">            t0.`status`,</span><br><span class="line">            t2.id as role_id,</span><br><span class="line">            t2.`name` as role_name,</span><br><span class="line">            t4.`name` as permission_name</span><br><span class="line">        from sys_user t0</span><br><span class="line">        left join sys_user_role t1 on t0.id = t1.user_id</span><br><span class="line">        left join sys_role t2 on t1.role_id = t2.id</span><br><span class="line">        left join sys_role_permission t3 on t2.id = t3.role_id</span><br><span class="line">        left join sys_permission t4 on t3.permission_id = t4.id</span><br><span class="line">        where t0.`status` = 1</span><br><span class="line">        order by id</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>看看对应的<code>Java</code>类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test.dto;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserPermissionDTO</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; permissionList;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;RoleDTO&gt; roleList;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test.dto;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RoleDTO</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当执行后，分别看看数据库中查询，和<code>mybatis</code>映射后的结果集</p><table><thead><tr><th>sql查询</th><th><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20230218115630.png" alt="image-20230218114004208" /></th></tr></thead><tbody><tr><td>结果集</td><td><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20230218115636.png" alt="image-20230218114053401" /></td></tr></tbody></table><blockquote><p>需要注意的是，使用了这种一对多的映射后，就不能使用分页了</p></blockquote><h3 id="4）在xml中调用java方法">4）在xml中调用java方法</h3><p>上面已经用<code>bind</code>标签，调用过<code>java</code>中的方法了</p><p>使用的<code>OGNL</code>表达式，如下</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">$</span>&#123;@prefix@methodName(入参...)&#125;</span><br></pre></td></tr></table></figure><p>出了<code>bind</code>标签，我们还可以在其他地方使用此表达式进行调用<code>java</code>方法</p><table><thead><tr><th>场景</th><th>使用</th></tr></thead><tbody><tr><td>赋值时</td><td><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20230218115642.png" alt="image-20230218115256287" /></td></tr><tr><td><code>if</code>标签判断</td><td><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20230218115646.png" alt="image-20230218115513045" /></td></tr></tbody></table><h2 id="三、最后">三、最后</h2><p>我是半月，你我一同共勉！！！</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> demo </tag>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Validated分组校验及扩展</title>
      <link href="/archive/a4ead5b7/"/>
      <url>/archive/a4ead5b7/</url>
      
        <content type="html"><![CDATA[<h1>@Validated分组校验及扩展</h1><h2 id="一、介绍">一、介绍</h2><p>在<code>springBoot</code>项目中，我们往往要对参数进行校验，如果在代码中进行，就会显得很杂乱冗余</p><p>我在以前有介绍过<code>@Valid</code>注解的使用和扩展，点击<a href="https://www.banmoon.top/articles/55">传送门</a>进行查看</p><p>但上面这篇文章整理相关的知识点有局限性，主要体现在以下方面</p><ul class="lvl-0"><li class="lvl-2"><p>没有分组校验</p></li><li class="lvl-2"><p>没有嵌套校验</p></li><li class="lvl-2"><p>校验都是针对一个字段的，没有多个字段之间关联的校验；比如说<b>开始日期必须小于结束日期</b></p></li></ul><p>故此，得使用<code>@Validated</code>来进行完善校验。</p><h2 id="二、使用">二、使用</h2><h3 id="1）分组校验">1）分组校验</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.test.dto.ResultData;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.test.obj.request.ValidGroupRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.annotation.Validated;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分组校验</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> banmoon</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/valid&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ValidController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/group/save&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResultData&lt;Void&gt; <span class="title function_">groupSave</span><span class="params">(<span class="meta">@Validated(&#123;ValidGroupRequest.DefaultGroup.class,</span></span></span><br><span class="line"><span class="meta"><span class="params">            ValidGroupRequest.SaveGroup.class&#125;)</span> ValidGroupRequest request)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ResultData.success();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/group/update&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResultData&lt;Void&gt; <span class="title function_">groupUpdate</span><span class="params">(<span class="meta">@Validated(&#123;ValidGroupRequest.DefaultGroup.class,</span></span></span><br><span class="line"><span class="meta"><span class="params">            ValidGroupRequest.UpdateGroup.class&#125;)</span> ValidGroupRequest request)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ResultData.success();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请求类<code>ValidGroupRequest.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test.obj.request;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModel;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModelProperty;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.NotBlank;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.NotNull;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.Null;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分組校验请求-入参</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> banmoon</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@ApiModel(&quot;分組校验请求-入参&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ValidGroupRequest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DefaultGroup</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SaveGroup</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UpdateGroup</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull(message = &quot;ID不能为空&quot;, groups = UpdateGroup.class)</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;ID&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;姓名不能为空&quot;, groups = DefaultGroup.class)</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;姓名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Null(message = &quot;性别不能修改&quot;, groups = UpdateGroup.class)</span></span><br><span class="line">    <span class="meta">@NotNull(message = &quot;性别不能为空&quot;, groups = SaveGroup.class)</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;性别，1=男，2=女&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer sex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr /><p>分别请求两个接口，且里面的都不满足</p><table><thead><tr><th>调用/valid/group/save</th><th>调用/valid/group/update</th></tr></thead><tbody><tr><td><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20230131200930.png" alt="image-20230130210459666" /></td><td><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20230131200935.png" alt="image-20230130210854549" /></td></tr></tbody></table><blockquote><p>在开发中，我不太喜欢这种公用一个请求类的写法。</p><p>以为这样每一个需要校验的字段，都需要加上一个<code>group</code>，会写很多很麻烦</p><p>这样我还不如，复制粘贴再写一个请求类，从而达到分组的校验效果</p></blockquote><h3 id="2）嵌套校验">2）嵌套校验</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.test.dto.ResultData;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.test.obj.request.ValidBatchSaveRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.annotation.Validated;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.validation.Valid;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.NotEmpty;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.NotNull;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Valid 校验</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> banmoon</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/valid&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ValidController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/batchSave&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResultData&lt;Void&gt; <span class="title function_">batchSave</span><span class="params">(<span class="meta">@NotEmpty(message = &quot;参数不能为空&quot;)</span> <span class="meta">@RequestBody</span> List&lt;<span class="meta">@Valid</span> ValidBatchSaveRequest&gt; request)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ResultData.success();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/batchDelete&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResultData&lt;Void&gt; <span class="title function_">batchDelete</span><span class="params">(<span class="meta">@NotEmpty(message = &quot;参数不能为空&quot;)</span> <span class="meta">@RequestBody</span> List&lt;<span class="meta">@NotNull(message = &quot;id不能为空&quot;)</span> Integer&gt; idList)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ResultData.success();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应的请求类，<code>ValidBatchSaveRequest.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test.obj.request;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModel;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModelProperty;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.NotBlank;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.NotNull;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> banmoon</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@ApiModel(&quot;嵌套校验-入参&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ValidBatchSaveRequest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;姓名不能为空&quot;)</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;姓名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull(message = &quot;性别不能为空&quot;)</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;性别，1=男，2=女&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer sex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr /><p>请求<code>/valid/batchSave</code>时，两种情况</p><table><thead><tr><th>当外部的List校验失败时</th><th>内部的类校验失败时</th></tr></thead><tbody><tr><td><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20230131200916.png" alt="image-20230130220434638" /></td><td><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20230131200920.png" alt="image-20230130220342548" /></td></tr></tbody></table><p>请求<code>/valid/batchDelete</code>时，也是两种情况</p><table><thead><tr><th>当外部的List校验失败时</th><th>内部的包装类校验失败时</th></tr></thead><tbody><tr><td><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20230131200903.png" alt="image-20230130220614265" /></td><td><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20230131200907.png" alt="image-20230130220546107" /></td></tr></tbody></table><blockquote><p>如果请求类中还有其它的，需要校验的实体类，则在上面打上一个<code>@Valid</code>注解即可</p><p>由于<code>List</code>集合有点特殊，它需要在指定泛型的地方打上<code>@Valid</code>，这样才可以对集合中的每一个对象进行校验</p></blockquote><h3 id="3）多字段联动校验">3）多字段联动校验</h3><p>如何进行多字段之间的联动校验，就像开头讲到的那个例子一样，<b>开始日期必须小于结束日期</b>，</p><p>这样如何使用<code>@Valid</code>进行联动校验呢，我们只需要这样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.test.dto.ResultData;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.test.obj.request.ValidFieldRelevanceRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.annotation.Validated;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.validation.Valid;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Valid 校验</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> banmoon</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/valid&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ValidController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/fieldRelevance&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResultData&lt;Void&gt; <span class="title function_">fieldRelevance</span><span class="params">(<span class="meta">@Valid</span> ValidFieldRelevanceRequest request)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ResultData.success();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重点是里面这个校验注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test.obj.request;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonFormat;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModel;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModelProperty;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.AssertTrue;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.NotNull;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 字段关联校验</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> banmoon</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@ApiModel(&quot;字段关联校验-入参&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ValidFieldRelevanceRequest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span></span><br><span class="line">    <span class="meta">@NotNull(message = &quot;开始时间不能为空&quot;)</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;开始时间&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date beginDate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span></span><br><span class="line">    <span class="meta">@NotNull(message = &quot;结束时间不能为空&quot;)</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;结束时间&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date endDate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AssertTrue(message = &quot;结束时间必须大于开始时间&quot;)</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(hidden = true)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">getValid</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.beginDate.compareTo(endDate) &lt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请求查看效果</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20230131200856.png" alt="image-20230131200736598" /></p><h2 id="三、最后">三、最后</h2><p>我是半月，你我一同共勉！！！</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> demo </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL连表update操作</title>
      <link href="/archive/c7a20c63/"/>
      <url>/archive/c7a20c63/</url>
      
        <content type="html"><![CDATA[<h1>MySQL连表update操作</h1><h2 id="一、介绍">一、介绍</h2><p>记录一下<code>MySQL</code>连表后进行<code>update</code>的操作，这可以一口气同时改动到多张表的数据，可以取到关联表的数据进行更新。</p><p>作用还是比较大的，如下</p><h2 id="二、使用">二、使用</h2><h3 id="1）建表">1）建表</h3><p>分别有以下四张表，分别为</p><ul class="lvl-0"><li class="lvl-2"><p>学生表</p></li><li class="lvl-2"><p>班级表</p></li><li class="lvl-2"><p>学生评分表</p></li><li class="lvl-2"><p>班级评分表</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tb_student` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;ID&#x27;</span>,</span><br><span class="line">  `code` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;学号&#x27;</span>,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">  `class_id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;班级ID&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 COMMENT <span class="operator">=</span> <span class="string">&#x27;学生表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tb_student_grade` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;ID&#x27;</span>,</span><br><span class="line">  `student_id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;学生ID&#x27;</span>,</span><br><span class="line">  `grade` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;评分&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 COMMENT <span class="operator">=</span> <span class="string">&#x27;学生评分表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tb_class` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;ID&#x27;</span>,</span><br><span class="line">  `class_name` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;班级名称&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 COMMENT <span class="operator">=</span> <span class="string">&#x27;班级表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tb_class_grade` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;ID&#x27;</span>,</span><br><span class="line">  `class_id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;班级ID&#x27;</span>,</span><br><span class="line">  `grade` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;评分&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 COMMENT <span class="operator">=</span> <span class="string">&#x27;班级评分表&#x27;</span>;</span><br></pre></td></tr></table></figure><p>模型如下图</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20230111185725.png" alt="image-20230111182914837" /></p><h3 id="2）连表更新">2）连表更新</h3><blockquote><p>如果班级里张三比较调皮，在班级座位后面睡觉被校长发现了，要把<mark>这位学生</mark>和<mark>所在班级</mark>的评分，<b>各扣10分</b></p></blockquote><p>如果是以前，我可能是写两条<code>update</code>语句的<code>sql</code>，现在的话，可以关联起来这样写，如下</p><hr /><p>首先我们可以先写一个这样的<code>sql</code>，通过<mark>学生名称</mark>查询到<mark>学生分数</mark>，所在<mark>班级分数</mark>，那么这条<code>sql</code>就长这样</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">t1.grade <span class="keyword">as</span> &quot;学生分数&quot;,</span><br><span class="line">t2.grade <span class="keyword">as</span> &quot;班级分数&quot;</span><br><span class="line"><span class="keyword">from</span> tb_student t0</span><br><span class="line"><span class="keyword">join</span> tb_student_grade t1 <span class="keyword">on</span> t0.id <span class="operator">=</span> t1.student_id</span><br><span class="line"><span class="keyword">join</span> tb_class_grade t2 <span class="keyword">on</span> t0.class_id <span class="operator">=</span> t2.class_id</span><br><span class="line"><span class="keyword">where</span> t0.`name` <span class="operator">=</span> <span class="string">&#x27;张三&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20230111185731.png" alt="image-20230111185208548" /></p><hr /><p>那么此时，我们只需要做一点小小的改动，就可以把上述<code>sql</code>改为连表<code>update</code>的了。</p><ol><li class="lvl-3"><p>将<code>select 字段... from</code> 改为<code>update</code></p></li><li class="lvl-3"><p>在<code>where</code>条件前写上自己，需要更新的字段</p></li></ol><p>简单两步，改动结果后的<code>sql</code>如下</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> tb_student t0</span><br><span class="line"><span class="keyword">join</span> tb_student_grade t1 <span class="keyword">on</span> t0.id <span class="operator">=</span> t1.student_id</span><br><span class="line"><span class="keyword">join</span> tb_class_grade t2 <span class="keyword">on</span> t0.class_id <span class="operator">=</span> t2.class_id</span><br><span class="line"><span class="keyword">set</span> t1.grade <span class="operator">=</span> t1.grade <span class="operator">-</span> <span class="number">10</span>,</span><br><span class="line">t2.grade <span class="operator">=</span> t2.grade <span class="operator">-</span> <span class="number">10</span></span><br><span class="line"><span class="keyword">where</span> t0.`name` <span class="operator">=</span> <span class="string">&#x27;张三&#x27;</span>;</span><br></pre></td></tr></table></figure><p>执行完成就可以了，再查询看看效果</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20230111185734.png" alt="image-20230111185713218" /></p><h2 id="三、最后">三、最后</h2><p>我是半月，你我一同共勉！！！</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Stream流完成并集、交集和差集</title>
      <link href="/archive/eb2ae918/"/>
      <url>/archive/eb2ae918/</url>
      
        <content type="html"><![CDATA[<h1>使用Stream流完成并集、交集和差集</h1><h2 id="一、介绍">一、介绍</h2><p>本文将进行介绍使用<code>Stream</code>流的方式，来完成对象集合的<mark>并集</mark>、<mark>交集</mark>和<mark>差集</mark>。</p><h2 id="二、代码">二、代码</h2><p>先建立一个<code>User.java</code>，一会使用它来创建集合，并重写了它的<code>equals</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> banmoon</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span> == o)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> User))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) o;</span><br><span class="line">        <span class="keyword">return</span> Objects.equals(getId(), user.getId()) &amp;&amp; Objects.equals(getName(), user.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(getId(), getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1）并集">1）并集</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.collection.CollUtil;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Stream测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> banmoon</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;User&gt; userList1 = CollUtil.newArrayList(</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1</span>, <span class="string">&quot;banmoon1&quot;</span>),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">2</span>, <span class="string">&quot;banmoon2&quot;</span>),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">3</span>, <span class="string">&quot;banmoon3&quot;</span>)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;User&gt; userList2 = CollUtil.newArrayList(</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">2</span>, <span class="string">&quot;banmoon2&quot;</span>),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">3</span>, <span class="string">&quot;banmoon3&quot;</span>),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">4</span>, <span class="string">&quot;banmoon4&quot;</span>)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 并集</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">concat</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;User&gt; newList = Stream.concat(userList1.stream(), userList2.stream())</span><br><span class="line">                .distinct()</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        System.out.println(newList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20230109191400.png" alt="image-20230109184230219" /></p><h3 id="2）交集">2）交集</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.collection.CollUtil;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Stream测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> banmoon</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;User&gt; userList1 = CollUtil.newArrayList(</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1</span>, <span class="string">&quot;banmoon1&quot;</span>),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">2</span>, <span class="string">&quot;banmoon2&quot;</span>),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">3</span>, <span class="string">&quot;banmoon3&quot;</span>)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;User&gt; userList2 = CollUtil.newArrayList(</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">2</span>, <span class="string">&quot;banmoon2&quot;</span>),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">3</span>, <span class="string">&quot;banmoon3&quot;</span>),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">4</span>, <span class="string">&quot;banmoon4&quot;</span>)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 交集</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">union</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;User&gt; newList = userList1.stream()</span><br><span class="line">                .filter(user1 -&gt; &#123;</span><br><span class="line">                    <span class="keyword">return</span> userList2.stream().anyMatch(user1::equals);</span><br><span class="line">                &#125;).collect(Collectors.toList());</span><br><span class="line">        System.out.println(newList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20230109191408.png" alt="image-20230109184302111" /></p><h3 id="3）差集">3）差集</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.collection.CollUtil;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Stream测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> banmoon</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;User&gt; userList1 = CollUtil.newArrayList(</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1</span>, <span class="string">&quot;banmoon1&quot;</span>),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">2</span>, <span class="string">&quot;banmoon2&quot;</span>),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">3</span>, <span class="string">&quot;banmoon3&quot;</span>)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;User&gt; userList2 = CollUtil.newArrayList(</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">2</span>, <span class="string">&quot;banmoon2&quot;</span>),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">3</span>, <span class="string">&quot;banmoon3&quot;</span>),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">4</span>, <span class="string">&quot;banmoon4&quot;</span>)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 差集</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">difference</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;User&gt; newList = userList1.stream()</span><br><span class="line">                .filter(user1 -&gt; &#123;</span><br><span class="line">                    <span class="keyword">return</span> userList2.stream().noneMatch(user1::equals);</span><br><span class="line">                &#125;).collect(Collectors.toList());</span><br><span class="line">        System.out.println(newList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20230109191413.png" alt="image-20230109184317199" /></p><hr /><p>上述的图示</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20230109191417.png" alt="image-20230109185719509" /></p><h2 id="三、抽取公共方法">三、抽取公共方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.function.BiPredicate;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Function;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Stream流工具类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> banmoon</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 并集</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list1    第一个对象list</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list2    第二个对象list</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> function 转换</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;      对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;R&gt;      转换后的对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 结果对象集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T, R&gt; List&lt;R&gt; <span class="title function_">concat</span><span class="params">(List&lt;T&gt; list1, List&lt;T&gt; list2, Function&lt;T, R&gt; function)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Stream.concat(list1.stream(), list2.stream())</span><br><span class="line">                .map(function)</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取两个list的交集</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list1     第一个对象list</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list2     第二个对象list</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> predicate 判断两个list是否相等</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> function  转换输出的结果</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T1&gt;      第一个对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T2&gt;      第二个对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;R&gt;       结果对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 结果对象集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T1, T2, R&gt; List&lt;R&gt; <span class="title function_">union</span><span class="params">(List&lt;T1&gt; list1, List&lt;T2&gt; list2, BiPredicate&lt;T1, T2&gt; predicate, Function&lt;T1, R&gt; function)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> list1.stream()</span><br><span class="line">                .filter(a -&gt; list2.stream().anyMatch(b -&gt; predicate.test(a, b)))</span><br><span class="line">                .map(function)</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取两个list的差集，简单的来说就是 list1 - list2 = list3</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list1     第一个对象list</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list2     第二个对象list</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> predicate 判断两个list是否相等，相等的才会减去</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> function  转换输出的结果</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T1&gt;      第一个对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T2&gt;      第二个对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;R&gt;       结果对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 结果对象集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T1, T2, R&gt; List&lt;R&gt; <span class="title function_">difference</span><span class="params">(List&lt;T1&gt; list1, List&lt;T2&gt; list2, BiPredicate&lt;T1, T2&gt; predicate, Function&lt;T1, R&gt; function)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> list1.stream()</span><br><span class="line">                .filter(a -&gt; list2.stream().noneMatch(b -&gt; predicate.test(a, b)))</span><br><span class="line">                .map(function)</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、最后">四、最后</h2><p>我是半月，你我一同共勉！！！</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jdk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>稀疏数组</title>
      <link href="/archive/a6455d41/"/>
      <url>/archive/a6455d41/</url>
      
        <content type="html"><![CDATA[<h1>稀疏数组</h1><h2 id="一、介绍">一、介绍</h2><p>稀疏数组可以看作是普通数组的压缩，当一个数组中大部分元素为0或同一个值时，可用稀疏数组来保存该数组。</p><p>由此可以发现，当一个数组上出现大量无用的数组时，我们可以使用<b>一些方法</b>将其<mark>压缩</mark>成稀疏数组进行存储，等到使用的时候再进行解压还原。</p><p>最经典的案例便是五子棋了，如果要实现退回，保存当前五子棋进度，加载五子棋进度的时候，原先的数组就会显得臃肿，这时候稀疏数组就可以派上用场了。</p><p><b>稀疏数组的压缩方法</b>：</p><ul class="lvl-0"><li class="lvl-2"><p>记录原数组的大小，几行几列，以及有多少个不同的值</p></li><li class="lvl-2"><p>记录原数组不同的值的行数和列数，将其保存在一个小的数组之中</p></li></ul><h2 id="二、实现">二、实现</h2><h3 id="1）思路分析">1）思路分析</h3><p>如果原始数组是<code>11*11</code>的一个二维数组，里面的有效值个数有三个，</p><p>那么转为稀疏数组后，将会变成一个<code>4*3</code>的稀疏数组。</p><p>如下图所示</p><table><thead><tr><th>转换前</th><th>转换后</th></tr></thead><tbody><tr><td><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20221218175536.png" alt="image-20221218170320553" /></td><td><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20221218175543.png" alt="image-20221218174359610" /></td></tr></tbody></table><p>那么转换后的稀疏数组代表着什么呢，如下图所示</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20221218175551.png" alt="image-20221218174642570" /></p><p>由此可以分析出来，将二维数组转换成为稀疏数组只需要这么几步就可以成功。</p><ol><li class="lvl-3"><p>遍历原数组，得到原数组中有效值的个数<code>num</code></p></li><li class="lvl-3"><p>创建一个稀疏数组，大小为<code>(num+1)*3</code></p></li><li class="lvl-3"><p>稀疏数组的第0行存放，原数组的行个数，列个数，以及有效值的个数</p></li><li class="lvl-3"><p>将有效值的行、列、值转换写入稀疏数组中</p></li></ol><hr /><p>还原不多说了，也很简单的，直接看代码吧</p><h3 id="2）代码实现">2）代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.datastructure.SparseArray;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 稀疏数组</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> banmoon</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SparseArray</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[][] arrays = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">11</span>][<span class="number">11</span>];</span><br><span class="line">        arrays[<span class="number">2</span>][<span class="number">3</span>] = <span class="number">1</span>;</span><br><span class="line">        arrays[<span class="number">2</span>][<span class="number">4</span>] = <span class="number">2</span>;</span><br><span class="line">        arrays[<span class="number">3</span>][<span class="number">3</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] array : arrays) &#123;</span><br><span class="line">            System.out.println(Arrays.toString(array));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 转换为稀疏数组</span></span><br><span class="line">        System.out.println(<span class="string">&quot;================ 分割线 ================&quot;</span>);</span><br><span class="line">        <span class="type">int</span>[][] sparseArray = generateSparseArray(arrays);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] ints : sparseArray) &#123;</span><br><span class="line">            System.out.println(Arrays.toString(ints));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 还原为原始数组</span></span><br><span class="line">        System.out.println(<span class="string">&quot;================ 分割线 ================&quot;</span>);</span><br><span class="line">        <span class="type">int</span>[][] originArray = restoreSparseArray(sparseArray);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] ints : originArray) &#123;</span><br><span class="line">            System.out.println(Arrays.toString(ints));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成稀疏数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> originArray 原始数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 稀疏数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[][] generateSparseArray(<span class="type">int</span>[][] originArray) &#123;</span><br><span class="line">        <span class="comment">// 得到原始数组的行个数、列个数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> originArray.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">col</span> <span class="operator">=</span> originArray[<span class="number">0</span>].length;</span><br><span class="line">        <span class="comment">// 得到原始数组的有效值个数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] ints : originArray) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; col; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (ints[j] != <span class="number">0</span>) &#123;</span><br><span class="line">                    num++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 创建稀疏数组，并设置第0行的数据</span></span><br><span class="line">        <span class="type">int</span>[][] sparseArray = <span class="keyword">new</span> <span class="title class_">int</span>[num + <span class="number">1</span>][<span class="number">3</span>];</span><br><span class="line">        sparseArray[<span class="number">0</span>][<span class="number">0</span>] = row;</span><br><span class="line">        sparseArray[<span class="number">0</span>][<span class="number">1</span>] = col;</span><br><span class="line">        sparseArray[<span class="number">0</span>][<span class="number">2</span>] = num;</span><br><span class="line">        <span class="comment">// 将剩余的有效值压缩至稀疏数组</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">currentRow</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; col; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (originArray[i][j] != <span class="number">0</span>) &#123;</span><br><span class="line">                    sparseArray[currentRow][<span class="number">0</span>] = i;</span><br><span class="line">                    sparseArray[currentRow][<span class="number">1</span>] = j;</span><br><span class="line">                    sparseArray[currentRow][<span class="number">2</span>] = originArray[i][j];</span><br><span class="line">                    currentRow++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sparseArray;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 还原稀疏数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sparseArray 稀疏数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 原始数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[][] restoreSparseArray(<span class="type">int</span>[][] sparseArray) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> sparseArray[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">col</span> <span class="operator">=</span> sparseArray[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">        <span class="comment">// 创建原始数组</span></span><br><span class="line">        <span class="type">int</span>[][] originArray = <span class="keyword">new</span> <span class="title class_">int</span>[row][col];</span><br><span class="line">        <span class="comment">// 写入有效值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; sparseArray.length; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> sparseArray[i][<span class="number">0</span>];</span><br><span class="line">            <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> sparseArray[i][<span class="number">1</span>];</span><br><span class="line">            <span class="type">int</span> <span class="variable">val</span> <span class="operator">=</span> sparseArray[i][<span class="number">2</span>];</span><br><span class="line">            originArray[r][c] = val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> originArray;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、最后">三、最后</h2><p>数据结构正是我薄弱的地方，在这一方面正好重新开始进行学习。</p><p>我是半月，你我一同共勉！！！</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>openfeign的几种调用方式</title>
      <link href="/archive/75d25e58/"/>
      <url>/archive/75d25e58/</url>
      
        <content type="html"><![CDATA[<h1>openfeign的几种调用方式</h1><h2 id="一、介绍">一、介绍</h2><p>先上<code>openfeign</code>的<code>maven</code>依赖，这边注册中心用的是<code>nacos</code>，具体版本看自己的需求</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="二、示例代码">二、示例代码</h2><h3 id="1）客户端">1）客户端</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.client1.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.client1.service.TestService;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.common.ResultData;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.common.dto.UploadDTO;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.common.dto.UserDTO;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.common.entities.UserEntity;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.common.utils.MyFileUtil;</span><br><span class="line"><span class="keyword">import</span> feign.Response;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired(required = false)</span></span><br><span class="line">    <span class="keyword">private</span> TestService testService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/simpleGet&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResultData&lt;UserEntity&gt; <span class="title function_">simpleGet</span><span class="params">(<span class="meta">@RequestParam</span> Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> testService.simpleGet(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/pathGet/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResultData&lt;UserEntity&gt; <span class="title function_">pathGet</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> testService.pathGet(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/mapPost&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResultData&lt;List&lt;UserEntity&gt;&gt; <span class="title function_">mapPost</span><span class="params">(<span class="meta">@RequestBody</span> Map&lt;String, Object&gt; params)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> testService.mapPost(params);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/dtoPost&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResultData&lt;List&lt;UserEntity&gt;&gt; <span class="title function_">dtoPost</span><span class="params">(<span class="meta">@RequestBody</span> UserDTO userDTO)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> testService.dtoPost(userDTO);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/delete&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResultData <span class="title function_">delete</span><span class="params">(<span class="meta">@RequestBody</span> Long[] ids)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> testService.delete(ids);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping(&quot;/put&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResultData <span class="title function_">put</span><span class="params">(<span class="meta">@RequestBody</span> UserDTO userDTO)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> testService.put(userDTO);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 导出，下载</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userDTO</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/export&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">export</span><span class="params">(<span class="meta">@RequestBody</span> UserDTO userDTO, HttpServletResponse response)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Response</span> <span class="variable">feignResponse</span> <span class="operator">=</span> testService.export(userDTO);</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> feignResponse.body().asInputStream();</span><br><span class="line">            MyFileUtil.downloadFile(response, inputStream, <span class="string">&quot;测试.jpg&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上传</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dto</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(value = &quot;/upload&quot;, consumes = MediaType.MULTIPART_FORM_DATA_VALUE)</span></span><br><span class="line">    <span class="keyword">public</span> ResultData <span class="title function_">upload</span><span class="params">(UploadDTO dto)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> testService.upload(dto);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>openfeign</code>的使用，可以使用<code>springMVC</code>中的注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.client1.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.common.ResultData;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.common.constant.ServerNameConstant;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.common.dto.UploadDTO;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.common.dto.UserDTO;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.common.entities.UserEntity;</span><br><span class="line"><span class="keyword">import</span> feign.Response;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.FeignClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FeignClient(name = ServerNameConstant.SERVER_ONE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TestService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/test/simpleGet&quot;, method = RequestMethod.GET)</span></span><br><span class="line">    ResultData&lt;UserEntity&gt; <span class="title function_">simpleGet</span><span class="params">(<span class="meta">@RequestParam(&quot;id&quot;)</span> Integer id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/test/pathGet/&#123;id&#125;&quot;, method = RequestMethod.GET)</span></span><br><span class="line">    ResultData&lt;UserEntity&gt; <span class="title function_">pathGet</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/test/mapPost&quot;, method = RequestMethod.POST)</span></span><br><span class="line">    ResultData&lt;List&lt;UserEntity&gt;&gt; <span class="title function_">mapPost</span><span class="params">(<span class="meta">@RequestBody</span> Map&lt;String, Object&gt; params)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/test/dtoPost&quot;, method = RequestMethod.POST)</span></span><br><span class="line">    ResultData&lt;List&lt;UserEntity&gt;&gt; <span class="title function_">dtoPost</span><span class="params">(<span class="meta">@RequestBody</span> UserDTO userDTO)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/test/delete&quot;, method = RequestMethod.DELETE)</span></span><br><span class="line">    ResultData <span class="title function_">delete</span><span class="params">(<span class="meta">@RequestBody</span> Long[] ids)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/test/put&quot;, method = RequestMethod.PUT)</span></span><br><span class="line">    ResultData <span class="title function_">put</span><span class="params">(<span class="meta">@RequestBody</span> UserDTO userDTO)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/test/export&quot;, method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_VALUE)</span></span><br><span class="line">    Response <span class="title function_">export</span><span class="params">(<span class="meta">@RequestBody</span> UserDTO userDTO)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(value = &quot;/test/upload&quot;, consumes = MediaType.MULTIPART_FORM_DATA_VALUE)</span></span><br><span class="line">    ResultData <span class="title function_">upload</span><span class="params">(UploadDTO dto)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2）服务端">2）服务端</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.server.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.io.IoUtil;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.common.ResultData;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.common.dto.UploadDTO;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.common.dto.UserDTO;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.common.entities.UserEntity;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.common.utils.MyFileUtil;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@CrossOrigin(exposedHeaders = &#123;&quot;Content-Disposition&quot;, &quot;Access-Control-Allow-Origin&quot;&#125;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;UserEntity&gt; userList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;UserEntity&gt;() &#123;&#123;</span><br><span class="line">        add(<span class="keyword">new</span> <span class="title class_">UserEntity</span>(<span class="number">1</span>, <span class="string">&quot;banmoon&quot;</span>, <span class="number">18</span>, <span class="string">&quot;男&quot;</span>));</span><br><span class="line">        add(<span class="keyword">new</span> <span class="title class_">UserEntity</span>(<span class="number">2</span>, <span class="string">&quot;hh&quot;</span>, <span class="number">22</span>, <span class="string">&quot;男&quot;</span>));</span><br><span class="line">        add(<span class="keyword">new</span> <span class="title class_">UserEntity</span>(<span class="number">3</span>, <span class="string">&quot;xiao&quot;</span>, <span class="number">18</span>, <span class="string">&quot;女&quot;</span>));</span><br><span class="line">        add(<span class="keyword">new</span> <span class="title class_">UserEntity</span>(<span class="number">4</span>, <span class="string">&quot;kun&quot;</span>, <span class="number">22</span>, <span class="string">&quot;女&quot;</span>));</span><br><span class="line">    &#125;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/simpleGet&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResultData&lt;UserEntity&gt; <span class="title function_">simpleGet</span><span class="params">(<span class="meta">@RequestParam</span> Integer id)</span> &#123;</span><br><span class="line">        <span class="type">UserEntity</span> <span class="variable">userEntity</span> <span class="operator">=</span> userList.stream().filter(user -&gt; user.getId().equals(id)).findFirst().orElse(<span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">return</span> ResultData.success(userEntity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/pathGet/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResultData&lt;UserEntity&gt; <span class="title function_">pathGet</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span> &#123;</span><br><span class="line">        <span class="type">UserEntity</span> <span class="variable">userEntity</span> <span class="operator">=</span> userList.stream().filter(user -&gt; user.getId().equals(id)).findFirst().orElse(<span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">return</span> ResultData.success(userEntity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/mapPost&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResultData&lt;List&lt;UserEntity&gt;&gt; <span class="title function_">mapPost</span><span class="params">(<span class="meta">@RequestBody</span> Map&lt;String, Object&gt; params)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;入参：&#123;&#125;&quot;</span>, params);</span><br><span class="line">        <span class="keyword">return</span> ResultData.success(userList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/dtoPost&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResultData&lt;List&lt;UserEntity&gt;&gt; <span class="title function_">dtoPost</span><span class="params">(<span class="meta">@RequestBody</span> UserDTO userDTO)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;入参：&#123;&#125;&quot;</span>, userDTO);</span><br><span class="line">        <span class="keyword">return</span> ResultData.success(userList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/delete&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResultData <span class="title function_">delete</span><span class="params">(<span class="meta">@RequestBody</span> Long[] ids)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;入参：&#123;&#125;&quot;</span>, ids);</span><br><span class="line">        <span class="keyword">return</span> ResultData.success();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping(&quot;/put&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResultData <span class="title function_">put</span><span class="params">(<span class="meta">@RequestBody</span> UserDTO userDTO)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;入参：&#123;&#125;&quot;</span>, userDTO);</span><br><span class="line">        <span class="keyword">return</span> ResultData.success();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(value = &quot;/export&quot;, produces = MediaType.APPLICATION_JSON_VALUE)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">export</span><span class="params">(<span class="meta">@RequestBody</span> UserDTO userDTO, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        log.info(<span class="string">&quot;入参：&#123;&#125;&quot;</span>, userDTO);</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;E:\\downFile\\fireFox\\Cyberpunk-edgerunners-lucy-edgerunners-anime-girls-Cyberpunk-2077-cyberpunk-Netflix-TV-Series-2179331-wallhere.com.jpg&quot;</span>;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(str);</span><br><span class="line">        MyFileUtil.downloadFile(response, file, <span class="string">&quot;测试.jpg&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(value = &quot;/upload&quot;, consumes = MediaType.MULTIPART_FORM_DATA_VALUE)</span></span><br><span class="line">    <span class="keyword">public</span> ResultData <span class="title function_">upload</span><span class="params">(UploadDTO dto)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">MultipartFile</span> <span class="variable">file</span> <span class="operator">=</span> dto.getFile();</span><br><span class="line">            <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> dto.getFileName();</span><br><span class="line">            <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;java.io.tmpdir&quot;</span>) + fileName;</span><br><span class="line">            <span class="type">File</span> <span class="variable">targetFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(path);</span><br><span class="line">            <span class="type">FileOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(targetFile);</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> file.getInputStream();</span><br><span class="line">            IoUtil.copy(inputStream, outputStream);</span><br><span class="line">            IoUtil.close(outputStream);</span><br><span class="line">            IoUtil.close(inputStream);</span><br><span class="line">            <span class="keyword">return</span> ResultData.success();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> ResultData.fail(<span class="string">&quot;上传失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其他的都好说，主要是这个下载，有遇到流在<code>openfeign</code>中流转需求时，</p><p>需要将服务端的返回值设置为<code>void</code></p><p><code>openfeign</code>的调用服务，他的返回值需要设置为<code>feign.Response</code></p><p>然后再从其中取到输出流转输入流，再从客户端的<code>selvet</code>输出流进行输出</p><h3 id="3）其他代码">3）其他代码</h3><p>如果微服务众多的话，可以将其进行统一常量管理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.common.constant;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServerNameConstant</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SERVER_ONE</span> <span class="operator">=</span> <span class="string">&quot;server1&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两个传输使用的<code>DTO</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.common.dto;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UploadDTO</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MultipartFile file;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String fileName;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.common.dto;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDTO</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个统一的返回类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.common;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResultData</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer errCode;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String errMsg;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ResultData <span class="title function_">success</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResultData</span>(<span class="number">0</span>, <span class="string">&quot;成功&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ResultData <span class="title function_">fail</span><span class="params">(String errMsg)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResultData</span>(-<span class="number">1</span>, errMsg, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; ResultData <span class="title function_">success</span><span class="params">(T t)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResultData</span>(<span class="number">0</span>, <span class="string">&quot;成功&quot;</span>, t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.common.entities;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserEntity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重点的文件工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.common.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.io.FileUtil;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.io.IoUtil;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.poi.excel.ExcelWriter;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletOutputStream;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.URLEncoder;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyFileUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">downloadFile</span><span class="params">(HttpServletResponse response, ExcelWriter writer, String filename)</span>&#123;</span><br><span class="line">        <span class="type">ServletOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            out = response.getOutputStream();</span><br><span class="line">            response.setContentType(<span class="string">&quot;application/vnd.ms-excel;charset=utf-8&quot;</span>);</span><br><span class="line">            response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>,<span class="string">&quot;attachment;filename=&quot;</span> + URLEncoder.encode(filename, <span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line"></span><br><span class="line">            writer.flush(out, <span class="literal">true</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;io异常&quot;</span>, e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            writer.close();</span><br><span class="line">            IoUtil.close(out);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">downloadFile</span><span class="params">(HttpServletResponse response, File file, String filename)</span>&#123;</span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            out = response.getOutputStream();</span><br><span class="line">            response.setContentType(<span class="string">&quot;application/octet-stream&quot;</span>);</span><br><span class="line">            response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>,<span class="string">&quot;attachment;filename=&quot;</span> + URLEncoder.encode(filename, <span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">            response.setHeader(<span class="string">&quot;Content-Length&quot;</span>, String.valueOf(FileUtil.size(file)));</span><br><span class="line"></span><br><span class="line">            <span class="type">BufferedInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file.getPath()));</span><br><span class="line">            <span class="type">OutputStream</span> <span class="variable">toClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(response.getOutputStream());</span><br><span class="line">            IoUtil.copy(fis, toClient);</span><br><span class="line">            out.flush();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;io异常&quot;</span>, e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            IoUtil.close(out);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">downloadFile</span><span class="params">(HttpServletResponse response, InputStream inputStream, String filename)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            response.setContentType(<span class="string">&quot;application/octet-stream&quot;</span>);</span><br><span class="line">            response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>,<span class="string">&quot;attachment;filename=&quot;</span> + URLEncoder.encode(filename, <span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">            <span class="type">ServletOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> response.getOutputStream();</span><br><span class="line">            IoUtil.copy(inputStream, outputStream);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;io异常&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、最后">三、最后</h2><p>注意跨域，在测试进行下载时，时长遇到跨域问题，请格外注意！</p><p>我是半月，祝你幸福！！！</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉树详解</title>
      <link href="/archive/7cbd45e7/"/>
      <url>/archive/7cbd45e7/</url>
      
        <content type="html"><![CDATA[<h1>二叉树详解</h1><h2 id="一、开始">一、开始</h2><p>什么是树，什么又是二叉树？我知道大家都听过，但对于具体的概念，应该还是比较模糊的吧？</p><p>一起来看看，什么是树，什么又是二叉树！</p><h2 id="二、概念">二、概念</h2><h3 id="1）树结构概念">1）树结构概念</h3><p>树是一种数据结构，它是由节点相连，带来的一个层次结构的数据集合，且除了根节点以外，其余节点有且只有一个父节点。</p><p><mark>与链表不同的是，树的连接关系往往是一对多的关系</mark>。</p><p>树结构通常表现为下图方式</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20221007154729.png" alt="image-20220908114633480" /></p><ul class="lvl-0"><li class="lvl-2"><p><b>子节点</b>：一个节点指向下一个节点时，下个节点是上个节点的子节点。上图<code>A节点</code>的子节点是<code>B节点</code>和<code>C节点</code></p></li><li class="lvl-2"><p><b>父节点、双亲节点</b>：一个节点指向下一个节点时，下个节点是上个节点的子节点。上图<code>B节点</code>的父节点是<code>A节点</code></p></li><li class="lvl-2"><p><b>兄弟节点</b>：拥有同一个父节点的两个节点，互为兄弟节点。上图如<code>D节点</code>和<code>E节点</code>互为兄弟节点</p></li><li class="lvl-2"><p><b>节点的度</b>：拥有子节点的数量称为节点的度。如<code>D节点</code>的度为3，<code>C节点</code>的度为2</p></li><li class="lvl-2"><p><b>节点的权</b>：代表节点中存的对象。如<code>D节点</code>代表存了<mark>D字符</mark></p></li><li class="lvl-2"><p><b>根节点</b>：一颗树最开始的节点，被称为根节点。上图为<code>A节点</code></p></li><li class="lvl-2"><p><b>叶子节点</b>：没有子节点的节点，也就是度为0的节点。上图为<code>H节点</code>、<code>E节点</code>、<code>F节点</code>等</p></li><li class="lvl-2"><p><b>内部节点、枝节点</b>：除了根节点和叶子节点以外的节点。如<code>B节点</code>、<code>C节点</code>、<code>D节点</code></p></li><li class="lvl-2"><p><b>子树</b>：将一颗树进行拆分，将内部节点视为根节点产生了树，称为子树。</p></li><li class="lvl-2"><p><b>路径</b>：从根节点到目标节点，所经过的节点路径。如<code>D节点</code>的路径为==<b>A-B-D</b>==</p></li><li class="lvl-2"><p><b>层</b>：由根节点为第一层，来计算节点的层。如<code>B节点</code>的层是2，<code>D节点</code>是3</p></li><li class="lvl-2"><p><b>高度</b>：代表当前数最大一层的节点是多少。上面这颗树的高度为4</p></li></ul><h3 id="2）二叉树">2）二叉树</h3><p>当一颗树的所有节点，它的子节点都不超过2个时，这颗树被称为二叉树。</p><p>如下图</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20221007154717.png" alt="image-20220908140252280" /></p><p>通过左右习惯分节点为，左节点和右节点，如<code>B节点</code>和<code>C节点</code>互为左右节点，<code>B节点</code>是左节点，<code>C节点</code>是右节点。</p><h3 id="3）满二叉树">3）满二叉树</h3><p>满二叉树，就是在二叉树的基础上，新增了这么一条规则。</p><p><mark>所有叶子节点都在最后一层，且节点的总数**<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^n-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7477em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>**，n是树的高度</mark></p><p>如下图</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20221007154711.png" alt="image-20220918104339214" /></p><h3 id="4）完全二叉树">4）完全二叉树</h3><p>完全二叉树，就是在二叉树的基础上，新增了这么一条规则</p><p><mark>最后一层的叶子节点，从左往右是连续的，倒数第二层的叶子节点是全部存在的。</mark></p><p>如下图</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20221007154658.png" alt="image-20220918105053062" /></p><p>直观来讲，就是说，只要是满二叉树，它就一定是完全二叉树。满二叉树，只要去掉最后一层的最后几个，就是完全二叉树了。</p><h3 id="5）二叉树的其他形态">5）二叉树的其他形态</h3><p>如下图</p><ul class="lvl-0"><li class="lvl-2"><p>空树：当一颗树中连根节点都没有时，这棵树被称为空树</p></li><li class="lvl-2"><p>左斜树：当一颗树中只有左节点时，这棵树被称为左斜树</p></li><li class="lvl-2"><p>右斜树：当一颗树中只有右节点时，这棵树被称为右斜树</p></li></ul><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20221007154653.png" alt="image-20220918190230506" /></p><p>左斜树和右斜树本质上没有区别，它由二叉树的概念退化成为了链表。</p><p>在日常中，我们应当极力避免此种数据结构的产生。</p><h2 id="三、代码实现">三、代码实现</h2><h3 id="1）链式存储的二叉树">1）链式存储的二叉树</h3><h4 id="1-1）创建">1.1）创建</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.datastructure;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BinaryTree</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> TreeNode root;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BinaryTree</span><span class="params">(Integer value)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.root = <span class="keyword">new</span> <span class="title class_">TreeNode</span>(value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="meta">@NoArgsConstructor</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">TreeNode</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 节点值</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> Integer value;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 左节点</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> TreeNode leftNode;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 右节点</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> TreeNode rightNode;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">TreeNode</span><span class="params">(Integer value)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.value = value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试如何使用这个二叉树</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.datastructure;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BinaryTreeTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建一个空树</span></span><br><span class="line">        <span class="type">BinaryTree</span> <span class="variable">tree</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BinaryTree</span>();</span><br><span class="line">        <span class="comment">// 创建根节点</span></span><br><span class="line">        BinaryTree.<span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BinaryTree</span>.TreeNode(<span class="number">1</span>);</span><br><span class="line">        tree.setRoot(node);</span><br><span class="line">        <span class="comment">// 设置左节点</span></span><br><span class="line">        BinaryTree.<span class="type">TreeNode</span> <span class="variable">leftNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BinaryTree</span>.TreeNode(<span class="number">2</span>);</span><br><span class="line">        node.setLeftNode(leftNode);</span><br><span class="line">        <span class="comment">// 设置右节点</span></span><br><span class="line">        BinaryTree.<span class="type">TreeNode</span> <span class="variable">rightNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BinaryTree</span>.TreeNode(<span class="number">3</span>);</span><br><span class="line">        node.setLeftNode(rightNode);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-2）遍历">1.2）遍历</h4><p>对于二叉树的遍历，我们通常可以有以下这三种情况。</p><ul class="lvl-0"><li class="lvl-2"><p>前序遍历：将通过根节点、左节点、右节点的顺序进行递归遍历</p></li><li class="lvl-2"><p>中序遍历：将通过左节点、根节点、右节点的顺序进行递归遍历</p></li><li class="lvl-2"><p>后序遍历：将通过左节点、右节点、根节点的顺序进行递归遍历</p></li></ul><p>如下图</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20221007154648.png" alt="image-20220918191548399" /></p><p>简单的来说，就是看遍历时根节点的位置，来确定是哪种遍历方式。</p><p>接下来就写一下，三种遍历的代码吧，采用递归的方式来完成</p><p>前序遍历，<code>frontShow()</code></p><p>中序遍历，<code>middleShow()</code></p><p>后序遍历，<code>backShow()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.datastructure;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BinaryTree</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> TreeNode root;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BinaryTree</span><span class="params">(Integer value)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.root = <span class="keyword">new</span> <span class="title class_">TreeNode</span>(value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 前序遍历</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">frontShow</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (Objects.nonNull(root))</span><br><span class="line">            root.frontShow();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 后序遍历</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">middleShow</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (Objects.nonNull(root))</span><br><span class="line">            root.middleShow();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 后序遍历</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">backShow</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (Objects.nonNull(root))</span><br><span class="line">            root.backShow();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="meta">@NoArgsConstructor</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">TreeNode</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 节点值</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> Integer value;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 左节点</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> TreeNode leftNode;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 右节点</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> TreeNode rightNode;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">TreeNode</span><span class="params">(Integer value)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.value = value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 前序遍历</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">frontShow</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.print(<span class="built_in">this</span>.value);</span><br><span class="line">            <span class="keyword">if</span> (Objects.nonNull(<span class="built_in">this</span>.leftNode))</span><br><span class="line">                <span class="built_in">this</span>.leftNode.frontShow();</span><br><span class="line">            <span class="keyword">if</span> (Objects.nonNull(<span class="built_in">this</span>.rightNode))</span><br><span class="line">                <span class="built_in">this</span>.rightNode.frontShow();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 中序遍历</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">middleShow</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (Objects.nonNull(<span class="built_in">this</span>.leftNode))</span><br><span class="line">                <span class="built_in">this</span>.leftNode.middleShow();</span><br><span class="line">            System.out.print(<span class="built_in">this</span>.value);</span><br><span class="line">            <span class="keyword">if</span> (Objects.nonNull(<span class="built_in">this</span>.rightNode))</span><br><span class="line">                <span class="built_in">this</span>.rightNode.middleShow();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 后序遍历</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">backShow</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (Objects.nonNull(<span class="built_in">this</span>.leftNode))</span><br><span class="line">                <span class="built_in">this</span>.leftNode.backShow();</span><br><span class="line">            <span class="keyword">if</span> (Objects.nonNull(<span class="built_in">this</span>.rightNode))</span><br><span class="line">                <span class="built_in">this</span>.rightNode.backShow();</span><br><span class="line">            System.out.print(<span class="built_in">this</span>.value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>搞完了，一起来测试一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.datastructure;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BinaryTreeTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建一个空树</span></span><br><span class="line">        <span class="type">BinaryTree</span> <span class="variable">tree</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BinaryTree</span>();</span><br><span class="line">        <span class="comment">// 创建根节点</span></span><br><span class="line">        BinaryTree.<span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BinaryTree</span>.TreeNode(<span class="number">1</span>);</span><br><span class="line">        tree.setRoot(node);</span><br><span class="line">        <span class="comment">// 设置左节点</span></span><br><span class="line">        BinaryTree.<span class="type">TreeNode</span> <span class="variable">leftNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BinaryTree</span>.TreeNode(<span class="number">2</span>);</span><br><span class="line">        node.setLeftNode(leftNode);</span><br><span class="line">        BinaryTree.<span class="type">TreeNode</span> <span class="variable">node4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BinaryTree</span>.TreeNode(<span class="number">4</span>);</span><br><span class="line">        BinaryTree.<span class="type">TreeNode</span> <span class="variable">node5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BinaryTree</span>.TreeNode(<span class="number">5</span>);</span><br><span class="line">        leftNode.setLeftNode(node4);</span><br><span class="line">        leftNode.setRightNode(node5);</span><br><span class="line">        <span class="comment">// 设置右节点</span></span><br><span class="line">        BinaryTree.<span class="type">TreeNode</span> <span class="variable">rightNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BinaryTree</span>.TreeNode(<span class="number">3</span>);</span><br><span class="line">        node.setRightNode(rightNode);</span><br><span class="line">        BinaryTree.<span class="type">TreeNode</span> <span class="variable">node6</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BinaryTree</span>.TreeNode(<span class="number">6</span>);</span><br><span class="line">        BinaryTree.<span class="type">TreeNode</span> <span class="variable">node7</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BinaryTree</span>.TreeNode(<span class="number">7</span>);</span><br><span class="line">        rightNode.setLeftNode(node6);</span><br><span class="line">        rightNode.setRightNode(node7);</span><br><span class="line"></span><br><span class="line">        System.out.print(<span class="string">&quot;前序：&quot;</span>);</span><br><span class="line">        tree.frontShow();</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.print(<span class="string">&quot;中序：&quot;</span>);</span><br><span class="line">        tree.middleShow();</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.print(<span class="string">&quot;后序：&quot;</span>);</span><br><span class="line">        tree.backShow();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20221007154632.png" alt="image-20220920153542125" /></p><h4 id="1-3）是否包含">1.3）是否包含</h4><p>代码如下，篇幅有限，仅展示包含方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BinaryTree</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断是否存在</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(Integer value)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.nonNull(value) &amp;&amp; root.contains(value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="meta">@NoArgsConstructor</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">TreeNode</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 判断是否存在</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(Integer value)</span> &#123;</span><br><span class="line">            <span class="comment">// 对比当前节点</span></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> Objects.equals(<span class="built_in">this</span>.value, value);</span><br><span class="line">            <span class="comment">// 对比左节点</span></span><br><span class="line">            <span class="keyword">if</span> (!result &amp;&amp; Objects.nonNull(<span class="built_in">this</span>.leftNode))</span><br><span class="line">                result = <span class="built_in">this</span>.leftNode.contains(value);</span><br><span class="line">            <span class="comment">// 对比右节点</span></span><br><span class="line">            <span class="keyword">if</span> (!result &amp;&amp; Objects.nonNull(<span class="built_in">this</span>.rightNode))</span><br><span class="line">                result = <span class="built_in">this</span>.rightNode.contains(value);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此处的是否包含使用的前序遍历的方式进行判断，举一反三，中序遍历和后续遍历的判断相信也马上可以写出来。</p><p>测试一下，判断树中是否存在<code>6</code>和<code>9</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.datastructure;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BinaryTreeTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建一个空树</span></span><br><span class="line">        <span class="type">BinaryTree</span> <span class="variable">tree</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BinaryTree</span>();</span><br><span class="line">        <span class="comment">// 创建根节点</span></span><br><span class="line">        BinaryTree.<span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BinaryTree</span>.TreeNode(<span class="number">1</span>);</span><br><span class="line">        tree.setRoot(node);</span><br><span class="line">        <span class="comment">// 设置左节点</span></span><br><span class="line">        BinaryTree.<span class="type">TreeNode</span> <span class="variable">leftNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BinaryTree</span>.TreeNode(<span class="number">2</span>);</span><br><span class="line">        node.setLeftNode(leftNode);</span><br><span class="line">        BinaryTree.<span class="type">TreeNode</span> <span class="variable">node4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BinaryTree</span>.TreeNode(<span class="number">4</span>);</span><br><span class="line">        BinaryTree.<span class="type">TreeNode</span> <span class="variable">node5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BinaryTree</span>.TreeNode(<span class="number">5</span>);</span><br><span class="line">        leftNode.setLeftNode(node4);</span><br><span class="line">        leftNode.setRightNode(node5);</span><br><span class="line">        <span class="comment">// 设置右节点</span></span><br><span class="line">        BinaryTree.<span class="type">TreeNode</span> <span class="variable">rightNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BinaryTree</span>.TreeNode(<span class="number">3</span>);</span><br><span class="line">        node.setRightNode(rightNode);</span><br><span class="line">        BinaryTree.<span class="type">TreeNode</span> <span class="variable">node6</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BinaryTree</span>.TreeNode(<span class="number">6</span>);</span><br><span class="line">        BinaryTree.<span class="type">TreeNode</span> <span class="variable">node7</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BinaryTree</span>.TreeNode(<span class="number">7</span>);</span><br><span class="line">        rightNode.setLeftNode(node6);</span><br><span class="line">        rightNode.setRightNode(node7);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;是否包含6：&quot;</span> + tree.contains(<span class="number">6</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;是否包含9：&quot;</span> + tree.contains(<span class="number">9</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20221007154626.png" alt="image-20220921201319253" /></p><h4 id="1-4）删除节点">1.4）删除节点</h4><p>删除节点时有这么一种情况，当删除了枝节点时，要不要将其子节点也一并删除掉。这一次就只需要将其一并删除，后面会有新类型的二叉树，保证仅删除指定的节点。</p><p>找到这个节点，让其父节点指向其的指针设置为<code>null</code>即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BinaryTree</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">delete</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> root;</span><br><span class="line">        <span class="keyword">if</span> (root==<span class="literal">null</span> || value==root.value) &#123;</span><br><span class="line">            root = <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            node = root.delete(value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="meta">@NoArgsConstructor</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">TreeNode</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 删除</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> TreeNode <span class="title function_">delete</span><span class="params">(Integer value)</span> &#123;</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (Objects.nonNull(<span class="built_in">this</span>.leftNode) &amp;&amp; Objects.equals(<span class="built_in">this</span>.leftNode.value, value)) &#123;</span><br><span class="line">                node = <span class="built_in">this</span>.leftNode;</span><br><span class="line">                <span class="built_in">this</span>.leftNode = <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">return</span> node;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (Objects.nonNull(<span class="built_in">this</span>.rightNode) &amp;&amp; Objects.equals(<span class="built_in">this</span>.rightNode.value, value)) &#123;</span><br><span class="line">                node = <span class="built_in">this</span>.rightNode;</span><br><span class="line">                <span class="built_in">this</span>.rightNode = <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">return</span> node;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (Objects.nonNull(<span class="built_in">this</span>.leftNode))</span><br><span class="line">                node = <span class="built_in">this</span>.leftNode.delete(value);</span><br><span class="line">            <span class="keyword">if</span> (node!=<span class="literal">null</span> &amp;&amp; Objects.nonNull(<span class="built_in">this</span>.rightNode))</span><br><span class="line">                node = <span class="built_in">this</span>.rightNode.delete(value);</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进行删除测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.datastructure;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BinaryTreeTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建一个空树</span></span><br><span class="line">        <span class="type">BinaryTree</span> <span class="variable">tree</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BinaryTree</span>();</span><br><span class="line">        <span class="comment">// 创建根节点</span></span><br><span class="line">        BinaryTree.<span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BinaryTree</span>.TreeNode(<span class="number">1</span>);</span><br><span class="line">        tree.setRoot(node);</span><br><span class="line">        <span class="comment">// 设置左节点</span></span><br><span class="line">        BinaryTree.<span class="type">TreeNode</span> <span class="variable">leftNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BinaryTree</span>.TreeNode(<span class="number">2</span>);</span><br><span class="line">        node.setLeftNode(leftNode);</span><br><span class="line">        BinaryTree.<span class="type">TreeNode</span> <span class="variable">node4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BinaryTree</span>.TreeNode(<span class="number">4</span>);</span><br><span class="line">        BinaryTree.<span class="type">TreeNode</span> <span class="variable">node5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BinaryTree</span>.TreeNode(<span class="number">5</span>);</span><br><span class="line">        leftNode.setLeftNode(node4);</span><br><span class="line">        leftNode.setRightNode(node5);</span><br><span class="line">        <span class="comment">// 设置右节点</span></span><br><span class="line">        BinaryTree.<span class="type">TreeNode</span> <span class="variable">rightNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BinaryTree</span>.TreeNode(<span class="number">3</span>);</span><br><span class="line">        node.setRightNode(rightNode);</span><br><span class="line">        BinaryTree.<span class="type">TreeNode</span> <span class="variable">node6</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BinaryTree</span>.TreeNode(<span class="number">6</span>);</span><br><span class="line">        BinaryTree.<span class="type">TreeNode</span> <span class="variable">node7</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BinaryTree</span>.TreeNode(<span class="number">7</span>);</span><br><span class="line">        rightNode.setLeftNode(node6);</span><br><span class="line">        rightNode.setRightNode(node7);</span><br><span class="line"></span><br><span class="line">        tree.delete(<span class="number">2</span>);</span><br><span class="line">        tree.frontShow();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20221007154619.png" alt="image-20220922230137368" /></p><h3 id="2）顺序存储的二叉树">2）顺序存储的二叉树</h3><p>对于任何一段数组，我们都可以将其转为一个完全二叉树，平铺即可，如下</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220929153746.png" alt="" /></p><p>对于第<code>n</code>个元素来说，</p><ul class="lvl-0"><li class="lvl-2"><p>它的左子节点是：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mi>n</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2n+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">2</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></p></li><li class="lvl-2"><p>它的右子节点是：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mi>n</mi><mo>+</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">2n+2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">2</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">2</span></span></span></span></p></li><li class="lvl-2"><p>它的父节点是：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{n-1}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1901em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p></li></ul><p>那么就好说了，代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.datastructure.ArrayBinaryTree;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayBinaryTree</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer[] data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">frontShow</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (Objects.isNull(data) || data.length == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        frontShow(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 前序遍历</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">frontShow</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        System.out.println(data[index] + <span class="string">&quot;,&quot;</span>);</span><br><span class="line">        <span class="type">int</span> i;</span><br><span class="line">        <span class="keyword">if</span> ((i = index*<span class="number">2</span>+<span class="number">1</span>) &lt; data.length)</span><br><span class="line">            frontShow(i);</span><br><span class="line">        <span class="keyword">if</span> ((i = index*<span class="number">2</span>+<span class="number">2</span>) &lt; data.length)</span><br><span class="line">            frontShow(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其他的都好说，看数据结构的需要，再进行添加，此处就不再添加了，仅作为了解。</p><p>作为常用的排序算法之一的堆排序，就是使用了此数据结构，<a href="https://www.banmoon.top/articles/86">相关传送门</a>，了解堆排序如何进行排序的。</p><h3 id="3）线索二叉树">3）线索二叉树</h3><p>在寻常的二叉树遍历中，我们会发现这样一个问题，我们只能按照特定的顺序进行遍历，而不能从子节点返回到父节点。</p><p>如下图的中序遍历</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20221007154608.png" alt="image-20220930093216570" /></p><p>在一些节点中，4节点、5节点、3节点、6节点都有些指针空间的浪费，如下图进行改造</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20221007154602.png" alt="image-20221002182944893" /></p><p>如上图所示，原本空闲的空间瞬间就变得忙碌起来，这种过程叫做二叉树的线索化，这颗二叉树就便称为线索二叉树。</p><p>线索二叉树的线索化，与它的遍历方式有关，上述图例只是中序线索二叉树。</p><p>在线索二叉树中，一个节点的前一个节点，叫做<b>前驱节点</b>，后一个节点被称为<b>后继节点</b>。</p><p>那么这个，线索二叉树的编码是怎么样的呢，如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.datastructure;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 线索二叉树</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadBinaryTree</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> ThreadTreeNode root;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 临时存储前驱节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">ThreadTreeNode</span> <span class="variable">preNode</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ThreadBinaryTree</span><span class="params">(Integer value)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.root = <span class="keyword">new</span> <span class="title class_">ThreadTreeNode</span>(value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 线索化</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">thread</span><span class="params">()</span> &#123;</span><br><span class="line">        thread(root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 线索化</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">thread</span><span class="params">(ThreadTreeNode node)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (Objects.isNull(node))</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">// 线索化左节点</span></span><br><span class="line">        thread(node.leftNode);</span><br><span class="line">        <span class="comment">// 处理当前节点的前驱节点</span></span><br><span class="line">        <span class="keyword">if</span> (node.leftNode == <span class="literal">null</span>) &#123;</span><br><span class="line">            node.leftNode = preNode;</span><br><span class="line">            node.leftNodeType = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 处理前驱节点的后继节点</span></span><br><span class="line">        <span class="keyword">if</span> (Objects.nonNull(preNode) &amp;&amp; Objects.isNull(preNode.rightNode)) &#123;</span><br><span class="line">            preNode.rightNode = node;</span><br><span class="line">            preNode.rightNodeType = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        preNode = node;</span><br><span class="line">        <span class="comment">// 序列化右节点</span></span><br><span class="line">        thread(node.rightNode);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="meta">@NoArgsConstructor</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ThreadTreeNode</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 节点值</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> Integer value;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 左节点</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> ThreadTreeNode leftNode;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 右节点</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> ThreadTreeNode rightNode;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 左节点类型，0=子节点，1=前驱节点</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> <span class="type">short</span> leftNodeType;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 左节点类型，0=子节点，1=后继节点</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> <span class="type">short</span> rightNodeType;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">ThreadTreeNode</span><span class="params">(Integer value)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.value = value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4）赫夫曼树">4）赫夫曼树</h3><p>给定N个权值作为N个叶子结点，构造一棵二叉树，若该树的带权路径长度达到最小，这棵树就称为赫夫曼树，又称为最优二叉树。</p><p>查看以下这几个数值，将们放入叶子节点中，我们可以摆出很多种不同的二叉树，分别计算数的带权路径。</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20221007154555.png" alt="image-20221005152653431" /></p><p>所谓带权路径，就是每个叶子节点上的权值与其经过的路径数乘积的和。有点抽象，看下面的计算方式</p><ul class="lvl-0"><li class="lvl-2"><p><b>树A</b>：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mn>1</mn><mo>∗</mo><mn>1</mn><mo stretchy="false">)</mo><mo>+</mo><mo stretchy="false">(</mo><mn>2</mn><mo>∗</mo><mn>4</mn><mo stretchy="false">)</mo><mo>+</mo><mo stretchy="false">(</mo><mn>3</mn><mo>∗</mo><mn>3</mn><mo stretchy="false">)</mo><mo>+</mo><mo stretchy="false">(</mo><mn>3</mn><mo>∗</mo><mn>2</mn><mo stretchy="false">)</mo><mo>=</mo><mn>1</mn><mo>+</mo><mn>8</mn><mo>+</mo><mn>9</mn><mo>+</mo><mn>6</mn><mo>=</mo><mn>24</mn></mrow><annotation encoding="application/x-tex">(1*1)+(2*4)+(3*3)+(3*2)=1+8+9+6=24</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">4</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">3</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">8</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">9</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">6</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">24</span></span></span></span></p></li><li class="lvl-2"><p><b>树B</b>：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mn>2</mn><mo>∗</mo><mn>1</mn><mo stretchy="false">)</mo><mo>+</mo><mo stretchy="false">(</mo><mn>2</mn><mo>∗</mo><mn>4</mn><mo stretchy="false">)</mo><mo>+</mo><mo stretchy="false">(</mo><mn>2</mn><mo>∗</mo><mn>3</mn><mo stretchy="false">)</mo><mo>+</mo><mo stretchy="false">(</mo><mn>2</mn><mo>∗</mo><mn>2</mn><mo stretchy="false">)</mo><mo>=</mo><mn>2</mn><mo>+</mo><mn>8</mn><mo>+</mo><mn>5</mn><mo>+</mo><mn>4</mn><mo>=</mo><mn>19</mn></mrow><annotation encoding="application/x-tex">(2*1)+(2*4)+(2*3)+(2*2)=2+8+5+4=19</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">4</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">3</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">8</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">5</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">4</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">19</span></span></span></span></p></li><li class="lvl-2"><p><b>树C</b>：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mn>1</mn><mo>∗</mo><mn>4</mn><mo stretchy="false">)</mo><mo>+</mo><mo stretchy="false">(</mo><mn>2</mn><mo>∗</mo><mn>3</mn><mo stretchy="false">)</mo><mo>+</mo><mo stretchy="false">(</mo><mn>3</mn><mo>∗</mo><mn>1</mn><mo stretchy="false">)</mo><mo>+</mo><mo stretchy="false">(</mo><mn>3</mn><mo>∗</mo><mn>2</mn><mo stretchy="false">)</mo><mo>=</mo><mn>4</mn><mo>+</mo><mn>6</mn><mo>+</mo><mn>3</mn><mo>+</mo><mn>6</mn><mo>=</mo><mn>19</mn></mrow><annotation encoding="application/x-tex">(1*4)+(2*3)+(3*1)+(3*2)=4+6+3+6=19</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">4</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">3</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">6</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">6</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">19</span></span></span></span></p></li></ul><p>明白了吗，简单的来说，就是将叶子节点与路径数相乘后，再相加。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.datastructure.HuffmanTree;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HuffmanTree</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Node root;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> HuffmanTree <span class="title function_">generateHuffmanTree</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> generateHuffmanTree(Arrays.stream(arr).boxed().toArray(Integer[]::<span class="keyword">new</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> HuffmanTree <span class="title function_">generateHuffmanTree</span><span class="params">(Integer[] arr)</span> &#123;</span><br><span class="line">        <span class="comment">// 先进行转换</span></span><br><span class="line">        List&lt;Node&gt; list = Arrays.stream(arr).map(value -&gt; <span class="keyword">new</span> <span class="title class_">Node</span>(value)).collect(Collectors.toList());</span><br><span class="line">        <span class="comment">// 循环进行</span></span><br><span class="line">        <span class="keyword">while</span> (list.size() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// 排序</span></span><br><span class="line">            list.sort(Comparator.comparingInt(Node::getValue));</span><br><span class="line">            <span class="comment">// 取出权值最小的两个节点</span></span><br><span class="line">            <span class="type">Node</span> <span class="variable">left</span> <span class="operator">=</span> list.get(<span class="number">0</span>);</span><br><span class="line">            <span class="type">Node</span> <span class="variable">right</span> <span class="operator">=</span> list.get(<span class="number">1</span>);</span><br><span class="line">            <span class="comment">// 创建一个新的节点，作为子树的根节点</span></span><br><span class="line">            <span class="type">Node</span> <span class="variable">parent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(left.getValue() + right.getValue());</span><br><span class="line">            parent.setLeftNode(left);</span><br><span class="line">            parent.setRightNode(right);</span><br><span class="line">            <span class="comment">// 将根节点加入数组，删除掉最小的两个节点</span></span><br><span class="line">            list.remove(left);</span><br><span class="line">            list.remove(right);</span><br><span class="line">            list.add(parent);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HuffmanTree</span>(list.get(<span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (Objects.nonNull(root))</span><br><span class="line">            root.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer value;</span><br><span class="line">    <span class="keyword">private</span> Node leftNode;</span><br><span class="line">    <span class="keyword">private</span> Node rightNode;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(Integer value)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (Objects.nonNull(<span class="built_in">this</span>.value))</span><br><span class="line">            System.out.print(<span class="built_in">this</span>.value + <span class="string">&quot;,&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (Objects.nonNull(<span class="built_in">this</span>.leftNode))</span><br><span class="line">            <span class="built_in">this</span>.leftNode.show();</span><br><span class="line">        <span class="keyword">if</span> (Objects.nonNull(<span class="built_in">this</span>.rightNode))</span><br><span class="line">            <span class="built_in">this</span>.rightNode.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建赫夫曼数，也很简单，根据以下步骤来就可以</p><ol><li class="lvl-3"><p>将数组其排序，升序进行排序</p></li><li class="lvl-3"><p>取出最小的两个数，组成一个子树，根节点的数值为他们的和</p></li><li class="lvl-3"><p>再将这颗树根节点的数值放入数组中，原本两个最小的数将从数组中移除</p></li><li class="lvl-3"><p>重复步骤1-3，直到最后数组中的数小于1</p></li></ol><p>测试一下，如下进行测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.datastructure.HuffmanTree;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">3</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">29</span>, <span class="number">5</span>, <span class="number">11</span>, <span class="number">23</span>, <span class="number">14</span>&#125;;</span><br><span class="line">        <span class="type">HuffmanTree</span> <span class="variable">huffmanTree</span> <span class="operator">=</span> HuffmanTree.generateHuffmanTree(arr);</span><br><span class="line">        huffmanTree.show();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="C:/Users/banmoon/AppData/Roaming/Typora/typora-user-images/image-20221005171428539.png" alt="image-20221005171428539" /></p><p>按照前序遍历来看，确实是最优二叉树</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20221007154548.png" alt="image-20221005172446054" /></p><h3 id="5）二叉查找树">5）二叉查找树</h3><p>二叉查找树，又名二叉排序树</p><blockquote><p>定义：当一个二叉树，任意的非叶子节点，它的左节点比当前节点的值要小，并且它的右节点比当前节点的值要大，那么这个二叉树就可以被称为二叉查找树</p></blockquote><p>二叉查找树的优点在于，他充分吸收了链表和数组结构带来的优劣势，对两者优缺点做出的一个折中的方案。</p><ul class="lvl-0"><li class="lvl-2"><p>数组：查询快，但插入和删除元素比较麻烦</p></li><li class="lvl-2"><p>链表：插入删除元素快，但遍历查找比较麻烦</p></li></ul><p>二叉查找树的话，使用的一个二分法对其进行折中，从而得到两者的好处，避免了上述问题极端的缺点。</p><p>代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.datastructure.BinarySearchTree;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"><span class="keyword">import</span> java.util.Optional;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BinarySearchTree</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Node root;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成二叉查找树</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> BinarySearchTree <span class="title function_">generate</span><span class="params">(<span class="type">int</span>[] values)</span> &#123;</span><br><span class="line">        <span class="type">BinarySearchTree</span> <span class="variable">binarySearchTree</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BinarySearchTree</span>();</span><br><span class="line">        Arrays.stream(values).forEach(binarySearchTree::add);</span><br><span class="line">        <span class="keyword">return</span> binarySearchTree;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (Objects.isNull(root))</span><br><span class="line">            <span class="built_in">this</span>.root = <span class="keyword">new</span> <span class="title class_">Node</span>(value);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            root.add(value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 中序遍历</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (Objects.nonNull(<span class="built_in">this</span>.root))</span><br><span class="line">            <span class="built_in">this</span>.root.show();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查找节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Node <span class="title function_">search</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (Objects.isNull(<span class="built_in">this</span>.root))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">return</span> root.search(value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Node <span class="title function_">delete</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (Objects.isNull(<span class="built_in">this</span>.root))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.root.delete(<span class="built_in">this</span>, value, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重新设置左节点或右节点的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> originNode</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> targetNode</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNode</span><span class="params">(Node parent, Node originNode, Node targetNode)</span> &#123;</span><br><span class="line">        <span class="comment">// 如果父节点是null，则说明是根节点</span></span><br><span class="line">        <span class="keyword">if</span> (parent == <span class="literal">null</span>)</span><br><span class="line">            <span class="built_in">this</span>.root = targetNode;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (parent.getLeftNode() == originNode)</span><br><span class="line">            parent.setLeftNode(targetNode);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (parent.getRightNode() == originNode)</span><br><span class="line">            parent.setRightNode(targetNode);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> value;</span><br><span class="line">    <span class="keyword">private</span> Node leftNode;</span><br><span class="line">    <span class="keyword">private</span> Node rightNode;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (value &lt; <span class="built_in">this</span>.value) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Objects.nonNull(<span class="built_in">this</span>.leftNode))</span><br><span class="line">                <span class="built_in">this</span>.leftNode.add(value);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">this</span>.leftNode = <span class="keyword">new</span> <span class="title class_">Node</span>(value);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (Objects.nonNull(<span class="built_in">this</span>.rightNode))</span><br><span class="line">                <span class="built_in">this</span>.rightNode.add(value);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">this</span>.rightNode = <span class="keyword">new</span> <span class="title class_">Node</span>(value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (Objects.nonNull(<span class="built_in">this</span>.leftNode))</span><br><span class="line">            <span class="built_in">this</span>.leftNode.show();</span><br><span class="line">        System.out.print(<span class="built_in">this</span>.value + <span class="string">&quot;, &quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (Objects.nonNull(<span class="built_in">this</span>.rightNode))</span><br><span class="line">            <span class="built_in">this</span>.rightNode.show();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Node <span class="title function_">search</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.value == value)</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.value &gt; value &amp;&amp; Objects.nonNull(<span class="built_in">this</span>.leftNode))</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.leftNode.search(value);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.value &lt; value &amp;&amp; Objects.nonNull(<span class="built_in">this</span>.rightNode))</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.rightNode.search(value);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Node&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;value=&quot;</span> + value +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分为3种情况</span></span><br><span class="line"><span class="comment">     * 1、删除叶子节点</span></span><br><span class="line"><span class="comment">     * 2、删除仅有一个节点的父节点的情况</span></span><br><span class="line"><span class="comment">     * 3、删除两个节点的父节点的情况</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tree 当前的二叉查找树</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 删除的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parent 当前节点的父节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Node <span class="title function_">delete</span><span class="params">(BinarySearchTree tree, <span class="type">int</span> value, Node parent)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.value == value) &#123;</span><br><span class="line">            <span class="comment">// 叶子节点，左节点和右节点都为空</span></span><br><span class="line">            <span class="keyword">if</span> (Objects.isNull(<span class="built_in">this</span>.leftNode) &amp;&amp; Objects.isNull(<span class="built_in">this</span>.rightNode)) &#123;</span><br><span class="line">                tree.setNode(parent, <span class="built_in">this</span>, <span class="literal">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 内部节点，且左节点和右节点都存在，</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (Objects.nonNull(<span class="built_in">this</span>.leftNode) &amp;&amp; Objects.nonNull(<span class="built_in">this</span>.rightNode)) &#123;</span><br><span class="line">                <span class="type">Node</span> <span class="variable">tempLeftNode</span> <span class="operator">=</span> <span class="built_in">this</span>.leftNode;</span><br><span class="line">                <span class="type">Node</span> <span class="variable">tempRightNode</span> <span class="operator">=</span> <span class="built_in">this</span>.rightNode;</span><br><span class="line">                <span class="comment">// 删除右子树中，最小的节点</span></span><br><span class="line">                <span class="type">Node</span> <span class="variable">minNode</span> <span class="operator">=</span> <span class="built_in">this</span>.rightNode.deleteMin(<span class="built_in">this</span>);</span><br><span class="line">                <span class="comment">// 最小的节点，用于替换该节点</span></span><br><span class="line">                tree.setNode(parent, <span class="built_in">this</span>, minNode);</span><br><span class="line">                minNode.setLeftNode(tempLeftNode==minNode ? <span class="literal">null</span> : tempLeftNode);</span><br><span class="line">                minNode.setRightNode(tempRightNode==minNode ? <span class="literal">null</span> : tempRightNode);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 内部节点，左节点或右节点仅有一个存在</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> Optional.of(<span class="built_in">this</span>.leftNode).orElse(<span class="built_in">this</span>.rightNode);</span><br><span class="line">                tree.setNode(parent, <span class="built_in">this</span>, node);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.value &gt; value &amp;&amp; Objects.nonNull(<span class="built_in">this</span>.leftNode)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.leftNode.delete(tree, value, <span class="built_in">this</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.value &lt; value &amp;&amp; Objects.nonNull(<span class="built_in">this</span>.rightNode)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.rightNode.delete(tree, value, <span class="built_in">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除最小的那个节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parent 当前节点的父节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Node <span class="title function_">deleteMin</span><span class="params">(Node parent)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (Objects.nonNull(<span class="built_in">this</span>.leftNode)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.leftNode.deleteMin(<span class="built_in">this</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            parent.setLeftNode(<span class="built_in">this</span>.rightNode);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.datastructure.BinarySearchTree;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] values = &#123;<span class="number">7</span>, <span class="number">3</span>, <span class="number">10</span>, <span class="number">12</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">9</span>&#125;;</span><br><span class="line">        <span class="type">BinarySearchTree</span> <span class="variable">binarySearchTree</span> <span class="operator">=</span> BinarySearchTree.generate(values);</span><br><span class="line">        <span class="comment">// 中序遍历</span></span><br><span class="line">        binarySearchTree.show();</span><br><span class="line">        <span class="comment">// 查找节点</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">node12</span> <span class="operator">=</span> binarySearchTree.search(<span class="number">12</span>);</span><br><span class="line">        <span class="type">Node</span> <span class="variable">node23</span> <span class="operator">=</span> binarySearchTree.search(<span class="number">23</span>);</span><br><span class="line">        System.out.println(System.lineSeparator() + node12);</span><br><span class="line">        System.out.println(node23);</span><br><span class="line">        <span class="comment">// 删除节点</span></span><br><span class="line">        System.out.println(System.lineSeparator() + <span class="string">&quot;======== 分割线 ========&quot;</span>);</span><br><span class="line">        binarySearchTree.delete(<span class="number">12</span>);</span><br><span class="line">        binarySearchTree.show();</span><br><span class="line">        System.out.println(System.lineSeparator() + <span class="string">&quot;======== 分割线 ========&quot;</span>);</span><br><span class="line">        binarySearchTree.delete(<span class="number">7</span>);</span><br><span class="line">        binarySearchTree.show();</span><br><span class="line">        System.out.println(System.lineSeparator() + <span class="string">&quot;======== 分割线 ========&quot;</span>);</span><br><span class="line">        binarySearchTree.delete(<span class="number">9</span>);</span><br><span class="line">        binarySearchTree.show();</span><br><span class="line">        System.out.println(System.lineSeparator() + <span class="string">&quot;======== 分割线 ========&quot;</span>);</span><br><span class="line">        binarySearchTree.delete(<span class="number">10</span>);</span><br><span class="line">        binarySearchTree.show();</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20221007154537.png" alt="image-20221006195118388" /></p><h3 id="6）平衡二叉树">6）平衡二叉树</h3><p>在了解平衡二叉树之前，我们先得看看上一章的二叉查找树有什么问题。如下图</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20221007154532.png" alt="image-20221006201057430" /></p><p>也就是说，二叉查找树，在某一时刻，会退化成为链表。</p><p>而为了针对这个问题，平衡二叉树就出现了，它就是为了解决二叉查找树左右子树高度相差太大带来的一个极端链表化的一个问题。</p><p>对于平衡二叉树，定义是，对于任何一个节点，<mark><b>它的左子树与右子树的高度差都不能大于1</b></mark>，故此我们需要将二叉查找树，做一些优化。</p><hr /><p>如果要编码，我们需要一些基本的方法，比如说当前树的高度，左子树的高度，右子树的高度，当前树的高度差等等基础方法。再加上<b>原来二叉查找树就有的插入方法，本章也仅仅只考虑插入方法，删除方法就只是逆着来的。</b></p><p>对于高度，有下面几点的参考</p><ul class="lvl-0"><li class="lvl-2"><p>当左子树的高度比右子树的要大许多，那么整体需要进行<mark>右旋转</mark></p></li><li class="lvl-2"><p>当右子树的高度比左子树的要大许多，那么整体需要进行<mark>左旋转</mark></p></li></ul><p>可以这么想，哪边的数要是比另一边要高（大于1），那么这棵树就要向右边折弯，这便是单旋转。如下图</p><table><thead><tr><th>左旋转</th><th><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20221007154511.png" alt="image-20221007143446811" /></th></tr></thead><tbody><tr><td><b>右旋转</b></td><td><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20221007154506.png" alt="image-20221007143525466" /></td></tr></tbody></table><p>上面只是基础的单旋转，比较简单，这时候我们将对子节点进行复杂化，要是万一，子节点还有子节点呢。如下图</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20221007154500.png" alt="image-20221007151921572" /></p><blockquote><p>思考一下，为什么在进行右旋转，取到左节点的右子树，在进行插入的时候，总是会出现在<b>当前子树的最左侧</b>呢？</p><p>如上图，<code>7</code>在插入到<code>8</code>这颗子树的时候，为什么跑到了左节点的位置</p></blockquote><p>上述情况适用于单旋转的情况，那么还有一种可能，如下图</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20221007154454.png" alt="image-20221007153928839" /></p><p>那么代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.datastructure.BalanceBinaryTree;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BalanceBinaryTree</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Node root;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (Objects.isNull(root))</span><br><span class="line">            <span class="built_in">this</span>.root = <span class="keyword">new</span> <span class="title class_">Node</span>(value);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            root.add(<span class="keyword">new</span> <span class="title class_">Node</span>(value), <span class="built_in">this</span>, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成二叉查找树</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> BalanceBinaryTree <span class="title function_">generate</span><span class="params">(<span class="type">int</span>[] values)</span> &#123;</span><br><span class="line">        <span class="type">BalanceBinaryTree</span> <span class="variable">binarySearchTree</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BalanceBinaryTree</span>();</span><br><span class="line">        Arrays.stream(values).forEach(binarySearchTree::add);</span><br><span class="line">        <span class="keyword">return</span> binarySearchTree;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 中序遍历</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (Objects.nonNull(<span class="built_in">this</span>.root))</span><br><span class="line">            <span class="built_in">this</span>.root.show();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isBalance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (Objects.isNull(<span class="built_in">this</span>.root))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> Math.abs(<span class="built_in">this</span>.root.heightDifference()) &lt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> value;</span><br><span class="line">    <span class="keyword">private</span> Node leftNode;</span><br><span class="line">    <span class="keyword">private</span> Node rightNode;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Node node, BalanceBinaryTree tree, Node parent)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(Objects.isNull(node))</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (node.getValue() &lt; <span class="built_in">this</span>.value) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Objects.nonNull(<span class="built_in">this</span>.leftNode))</span><br><span class="line">                <span class="built_in">this</span>.leftNode.add(node, tree, <span class="built_in">this</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">this</span>.leftNode = node;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (Objects.nonNull(<span class="built_in">this</span>.rightNode))</span><br><span class="line">                <span class="built_in">this</span>.rightNode.add(node, tree, <span class="built_in">this</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">this</span>.rightNode = node;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 检查是否平衡二叉树，此处说明左子树的高度比右子树要高，导致的不平衡，需要进行右旋转</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.heightDifference() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果左节点的左子树高度比其右子树的高度要小，就需要对其进行一次左旋转</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.leftNode.leftHeight() &lt; <span class="built_in">this</span>.leftNode.rightHeight())</span><br><span class="line">                <span class="built_in">this</span>.leftNode.leftRotate(tree, <span class="built_in">this</span>);</span><br><span class="line">            <span class="built_in">this</span>.rightRotate(tree, parent);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 此处说明右子树的高度比左子树要高，需要进行左旋转</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.heightDifference() &lt; -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果右节点的左子树高度比其右子树的高度要大，就需要对其进行一次右旋转。避免整体左旋转后，高度不平衡</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.rightNode.leftHeight() &gt; <span class="built_in">this</span>.rightNode.rightHeight())</span><br><span class="line">                <span class="built_in">this</span>.rightNode.rightRotate(tree, <span class="built_in">this</span>);</span><br><span class="line">            <span class="built_in">this</span>.leftRotate(tree, parent);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对当前节点进行右旋转</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">rightRotate</span><span class="params">(BalanceBinaryTree tree, Node parent)</span> &#123;</span><br><span class="line">        <span class="comment">// 取得当前节点的左节点</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">tempLeftNode</span> <span class="operator">=</span> <span class="built_in">this</span>.leftNode;</span><br><span class="line">        <span class="comment">// 将当前节点的左节点置空</span></span><br><span class="line">        <span class="built_in">this</span>.leftNode = <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// 取得原先左节点的右节点，让其作为新的节点插入至当前节点的子树中</span></span><br><span class="line">        <span class="built_in">this</span>.add(tempLeftNode.rightNode, tree, parent);</span><br><span class="line">        <span class="comment">// 将原先左节点的右节点设置为当前节点</span></span><br><span class="line">        tempLeftNode.rightNode = <span class="built_in">this</span>;</span><br><span class="line">        <span class="comment">// 判断当前节点是否是根节点，将原先的左节点设置为根节点</span></span><br><span class="line">        <span class="keyword">if</span> (tree.getRoot() == <span class="built_in">this</span>)</span><br><span class="line">            tree.setRoot(tempLeftNode);</span><br><span class="line">        <span class="comment">// 父节点的右节点指向原先的左节点</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            parent.rightNode = tempLeftNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对当前节点进行左旋转</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">leftRotate</span><span class="params">(BalanceBinaryTree tree, Node parent)</span> &#123;</span><br><span class="line">        <span class="comment">// 取得当前节点的右节点</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">tempRightNode</span> <span class="operator">=</span> <span class="built_in">this</span>.rightNode;</span><br><span class="line">        <span class="comment">// 将当前节点的右节点置空</span></span><br><span class="line">        <span class="built_in">this</span>.rightNode = <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// 取得原先右节点的左节点，让其作为新的节点插入至当前节点的子树中</span></span><br><span class="line">        <span class="built_in">this</span>.add(tempRightNode.leftNode, tree, parent);</span><br><span class="line">        <span class="comment">// 将原先右节点的左节点设置为当前节点</span></span><br><span class="line">        tempRightNode.leftNode = <span class="built_in">this</span>;</span><br><span class="line">        <span class="comment">// 判断当前节点是否是根节点，将原先的右节点设置为根节点</span></span><br><span class="line">        <span class="keyword">if</span> (tree.getRoot() == <span class="built_in">this</span>)</span><br><span class="line">            tree.setRoot(tempRightNode);</span><br><span class="line">        <span class="comment">// 父节点的左节点指向原先的右节点</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            parent.leftNode = tempRightNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 高度差</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">heightDifference</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> leftHeight() - rightHeight();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前节点的高度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">height</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Math.max(leftHeight(), rightHeight()) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 左子树的高度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">leftHeight</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.isNull(<span class="built_in">this</span>.leftNode)? <span class="number">0</span> : <span class="built_in">this</span>.leftNode.height();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 左子树的高度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">rightHeight</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.isNull(<span class="built_in">this</span>.rightNode)? <span class="number">0</span> : <span class="built_in">this</span>.rightNode.height();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (Objects.nonNull(<span class="built_in">this</span>.leftNode))</span><br><span class="line">            <span class="built_in">this</span>.leftNode.show();</span><br><span class="line">        System.out.print(<span class="built_in">this</span>.value + <span class="string">&quot;, &quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (Objects.nonNull(<span class="built_in">this</span>.rightNode))</span><br><span class="line">            <span class="built_in">this</span>.rightNode.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.datastructure.BalanceBinaryTree;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 单旋转，右旋转</span></span><br><span class="line">        <span class="type">int</span>[] values = &#123;<span class="number">8</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">4</span>&#125;;</span><br><span class="line">        <span class="type">BalanceBinaryTree</span> <span class="variable">tree</span> <span class="operator">=</span> BalanceBinaryTree.generate(values);</span><br><span class="line">        <span class="comment">// 中序遍历</span></span><br><span class="line">        tree.show();</span><br><span class="line">        <span class="comment">// 是否平衡</span></span><br><span class="line">        System.out.println(<span class="string">&quot;\n是否平衡：&quot;</span> + tree.isBalance());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;=========== 分割线 ===========&quot;</span>);</span><br><span class="line">        <span class="comment">// 双旋转，先进行左旋转，再右旋转</span></span><br><span class="line">        values = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">8</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>&#125;;</span><br><span class="line">        <span class="type">BalanceBinaryTree</span> <span class="variable">tree1</span> <span class="operator">=</span> BalanceBinaryTree.generate(values);</span><br><span class="line">        tree1.show();</span><br><span class="line">        System.out.println(<span class="string">&quot;\n是否平衡：&quot;</span> + tree1.isBalance());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20221007154401.png" alt="image-20221007154359718" /></p><h2 id="四、最后">四、最后</h2><p>这个国庆，死磕二叉树，尤其是<b>平衡二叉树</b>，真的难，断断续续我理解了好久。</p><p>至于为什么会断断续续的，因为Lucy，意难平啊，emo了好久。</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20221007155228.png" alt="image-20221007155224523" /></p><p>我是半月，祝你幸福！！！</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jdk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序算法之堆排序</title>
      <link href="/archive/77743d31/"/>
      <url>/archive/77743d31/</url>
      
        <content type="html"><![CDATA[<h1>排序算法之堆排序</h1><h1>一、介绍</h1><p>由于堆排序与以前的排序都不太一样，他是基于顺序存储的二叉树结构来进行的排序，故此拉出来单独做了一张。</p><p>以前的排序算法<a href="https://www.banmoon.top/articles/57">传送门</a></p><h2 id="二、概念">二、概念</h2><p>在开始编码之前，我们先要理解下面两个概念</p><h3 id="1）顺序存储的二叉树">1）顺序存储的二叉树</h3><p>对于任意一个数组，它都可以转换为一个完全二叉树</p><p>如下图，平铺着转换就可以了</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220929153746.png" alt="image-20220929134325874" /></p><p>对于一个顺序存储的二叉树，它的节点连接定义如下</p><p><b>下标N的左节点</b>：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mi>n</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2n+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">2</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></p><p><b>下标N的右节点</b>：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mi>n</mi><mo>+</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">2n+2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">2</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">2</span></span></span></span></p><p><b>下标N的父节点</b>：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{n-1}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1901em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p><h3 id="2）大小顶堆">2）大小顶堆</h3><p>什么是大顶堆，就是父节点永远都比子节点的数要大，故名为大顶堆。如下图</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220929153737.png" alt="image-20220929134447486" /></p><p>相反，如果一颗二叉树的父节点都比子节点的数要小，那么它就是小顶堆。如下图</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220929153734.png" alt="image-20220929134405141" /></p><h2 id="三、代码">三、代码</h2><p>简单的来说，堆排序就是将持续的将，一个顺序存储的二叉树变成大顶堆或者小顶堆。</p><p>升序使用大顶堆，降序使用小顶堆。</p><p>步骤如下，这是第一步</p><ol><li class="lvl-3"><p>从非叶子节点开始前遍历</p></li><li class="lvl-3"><p>每一个非叶子节点，都将和自己的左节点、右节点进行判断</p></li><li class="lvl-3"><p>根据大小顶堆的需要，来进行替换</p></li><li class="lvl-3"><p>直到称为一个大小顶堆</p></li></ol><p>成为了大小顶堆之后，我们将得到了一个最大或者最小的数，也就是大小顶堆根节点的数</p><ol><li class="lvl-3"><p>将这个根节点与最后的叶子节点进行替换，也就是将最大或者最小的数放到了最后</p></li></ol><p>找到了一个数还不够，我们将重复上面的步骤</p><ol><li class="lvl-3"><p>重复第一步，但不要影响放到最后的数</p></li><li class="lvl-3"><p>得到大小顶堆的根节点后，进行替换，不是和最后的数进行替换了，而是依次往前替换。</p></li><li class="lvl-3"><p>直到排序玩成</p></li></ol><p>代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.algorithm.order;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 堆排序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo08</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//        int[] arr = &#123;128, 359, 26, 78, 98, 5, 789, 12, 6, 2&#125;;</span></span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">2</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">0</span>&#125;;</span><br><span class="line">        System.out.println(<span class="string">&quot;排序前的数组：&quot;</span> + Arrays.toString(arr));</span><br><span class="line">        <span class="type">int</span>[] sortArr = sort(arr);</span><br><span class="line">        System.out.println(<span class="string">&quot;排序后的数组：&quot;</span> + Arrays.toString(sortArr));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span>[] sort(<span class="type">int</span>[] arr) &#123;</span><br><span class="line">        <span class="comment">// 先进行一次大顶推的转换</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">last</span> <span class="operator">=</span> (arr.length - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> last; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            maxHeap(arr, arr.length, i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将这个根节点与最后的叶子节点进行替换，也就是将最大的数放到了最后</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> arr.length-<span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="comment">// 替换最前和最后的数</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[<span class="number">0</span>];</span><br><span class="line">            arr[<span class="number">0</span>] = arr[i];</span><br><span class="line">            arr[i] = temp;</span><br><span class="line">            <span class="comment">// 替换后，需要将根节点的数进行一次转移，重新变为大顶堆</span></span><br><span class="line">            maxHeap(arr, i, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">maxHeap</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> size, <span class="type">int</span> index)</span>&#123;</span><br><span class="line">        <span class="comment">// 左节点</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">leftIndex</span> <span class="operator">=</span> index*<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 右节点</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">rightIndex</span> <span class="operator">=</span> index*<span class="number">2</span>+<span class="number">2</span>;</span><br><span class="line">        <span class="comment">// 和左右节点进行对比</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> index;;</span><br><span class="line">        <span class="keyword">if</span>(leftIndex &lt; size &amp;&amp; arr[leftIndex] &gt; arr[max])</span><br><span class="line">            max = leftIndex;</span><br><span class="line">        <span class="keyword">if</span>(rightIndex &lt; size &amp;&amp; arr[rightIndex] &gt; arr[max])</span><br><span class="line">            max = rightIndex;</span><br><span class="line">        <span class="comment">// 进行交换</span></span><br><span class="line">        <span class="keyword">if</span> (max != index) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[max];</span><br><span class="line">            arr[max] = arr[index];</span><br><span class="line">            arr[index] = temp;</span><br><span class="line">            <span class="comment">// 交换位置后，需要再对替换的index向下判断</span></span><br><span class="line">            maxHeap(arr, size, max);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220929153727.png" alt="image-20220929153725892" /></p><h2 id="四、最后">四、最后</h2><p>堆排序是常规排序的最后一块拼图，像后面还有许多高阶的排序算法，菜鸟的我估计是用不上了。</p><p>如果有兴趣，以后可以研究学习一下。</p><p>我是半月，祝你幸福！！！</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 经典算法题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汉诺塔问题</title>
      <link href="/archive/e8c3a72d/"/>
      <url>/archive/e8c3a72d/</url>
      
        <content type="html"><![CDATA[<h1>汉诺塔问题</h1><h2 id="一、介绍">一、介绍</h2><p>汉诺塔（Tower of Hanoi），又称河内塔，是一个源于印度古老传说的益智玩具。大梵天创造世界的时候做了三根金刚石柱子，在一根柱子上从下往上按照大小顺序摞着64片黄金圆盘。</p><p>大梵天命令婆罗门把圆盘从下面开始按大小顺序重新摆放在另一根柱子上。并且规定，在小圆盘上不能放大圆盘，在三根柱子之间一次只能移动一个圆盘。介绍来源于<a href="https://zhidao.baidu.com/question/1838631243227863820.html">百度知道</a>。</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220907171932.png" alt="image-20220907171931209" /></p><p>我小时候也玩过，但当时就是云里雾里的，不知道怎么去解题，简单的可以完成，难的就不行了。</p><p>到了现在，如何用代码解题，依旧是一个不小的难度，反正我是得琢磨一会。</p><h2 id="二、解题思路">二、解题思路</h2><p>有三根柱子，分别是<b>起始的柱子</b>，<b>辅助的柱子</b>，<b>目标的柱子</b>，我们需要将圆盘从开始移动到目标。</p><p>但由于汉诺塔的这项规则，<b>在小圆盘上不能放大圆盘上</b>，我们就可以将其分为两部分，分为上面一部分，下面一部分。</p><p>下面一部分永远比上面一部分要大，所以需要先将<b>上面这一部分</b>移动到辅助的位置。</p><p>当上面这部分有多个时，照样看成上下两部分，上面部分移动到<b>辅助位置</b>（最开始的目标位置，现在变成了辅助位置）</p><p>如此重复执行，直到完成所有的迁移。</p><blockquote><p>大家可以先试试这个<a href="https://www.4399.com/flash/293_1.htm">小游戏</a>，找找灵感</p></blockquote><p>代码如下，主要使用到了递归</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.algorithm.classical;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hanoi</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        hanoi(<span class="number">3</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移动汉诺塔</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> i 当前的盘子</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> from 开始的位置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> assist 辅助的位置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> to 目标的位置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">hanoi</span><span class="params">(<span class="type">int</span> i, <span class="type">char</span> from, <span class="type">char</span> assist, <span class="type">char</span> to)</span> &#123;</span><br><span class="line">        <span class="comment">// 将盘子看成两部分，最下面的一个，和最上面的所有</span></span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果仅有一个盘子，直接移动即可</span></span><br><span class="line">            System.out.println(String.format(<span class="string">&quot;将第%s个盘子从%s移动到%s&quot;</span>, i, from, to));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 将上面的所有移动到，辅助位置（如此一来，辅助位置就变成了此处的目标位置）</span></span><br><span class="line">            hanoi(i-<span class="number">1</span>, from, to, assist);</span><br><span class="line">            <span class="comment">// 将当前的盘子移动到目标位置</span></span><br><span class="line">            System.out.println(String.format(<span class="string">&quot;将第%s个盘子从%s移动到%s&quot;</span>, i, from, to));</span><br><span class="line">            <span class="comment">// 将目前处于辅助位置的盘子，分成两部分，上面部分移动到原先开始的位置，下面部分移动到目标位置</span></span><br><span class="line">            hanoi(i-<span class="number">1</span>, assist, from, to);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、最后">三、最后</h2><p>三天打鱼，两天晒网，说的就是本人我啦。</p><p>我是半月，祝你幸福！！！</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 经典算法题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL触发器详解</title>
      <link href="/archive/ccb3931/"/>
      <url>/archive/ccb3931/</url>
      
        <content type="html"><![CDATA[<h1>MySQL触发器详解</h1><h2 id="一、介绍">一、介绍</h2><p>大家应该都听过<code>MySQL</code>的触发器，它的概念如下</p><p>它是一种特殊的一种存储过程，当表数据发生了<b>新增、更新、删除</b>时，便触发这个存储过程。</p><p>由此，故而名为触发器。下面一起来看看触发器的使用吧！</p><h2 id="二、语法">二、语法</h2><h3 id="1）语法格式">1）语法格式</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 删除</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">trigger</span> 触发器名;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 定义结束符号</span></span><br><span class="line">delimiter $$</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> 触发器名 before<span class="operator">|</span>after <span class="keyword">insert</span><span class="operator">|</span><span class="keyword">update</span><span class="operator">|</span><span class="keyword">delete</span> <span class="keyword">on</span> 表名 <span class="keyword">for</span> <span class="keyword">each</span> <span class="type">row</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">执行语句</span><br><span class="line"><span class="keyword">end</span>$$</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 定义结束符号</span></span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>触发事件类型</p><ul class="lvl-2"><li class="lvl-4"><b>insert</b>：有数据新增时触发</li><li class="lvl-4"><b>update</b>：有数据被修改时触发</li><li class="lvl-4"><b>delete</b>：有数据被删除时触发</li></ul></li><li class="lvl-2"><p>执行顺序</p><ul class="lvl-2"><li class="lvl-4"><b>before</b>：在触发事件前执行语句</li><li class="lvl-4"><b>after</b>：在触发事件后执行语句</li></ul></li></ul><blockquote><p>在执行语句中，和正常的存储过程差不多，不过触发器多了两个存储过程没有的对象，分别是<code>NEW</code>和<code>OLD</code>；</p><p><b>OLD</b>：代表着更新，删除前的数据，可以通过<code>OLD.字段名</code>来获取以前的值</p><p><b>NEW</b>：代表着新增，更新后的数据，可以通过<code>NEW.字段名</code>来获取以后的值</p><p>其中同上描述的，新增类型的触发器没有<code>OLD</code>，删除类型的触发器没有<code>NEW</code>，而更新触发器两者都有</p></blockquote><p>好的，经过语法的介绍，直接进入实战；</p><h3 id="2）示例">2）示例</h3><p>首先来一张用户表，需求很简单，如果年龄小于12岁时，将报错不允许操作</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `sys_user_info` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">  `age` tinyint(<span class="number">4</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;年龄&#x27;</span>,</span><br><span class="line">  `gender` tinyint(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;性别&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br></pre></td></tr></table></figure><p>那么，如何使用触发器完成这上面这个功能需求呢？具体触发器如下</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TRIGGER</span> IF <span class="keyword">EXISTS</span> `user_info_insert`;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TRIGGER</span> IF <span class="keyword">EXISTS</span> `user_info_update`;</span><br><span class="line"></span><br><span class="line">delimiter $$</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> `user_info_insert` AFTER <span class="keyword">INSERT</span> <span class="keyword">ON</span> `sys_user_info` <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span> </span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">IF NEW.age<span class="operator">&lt;</span><span class="number">12</span> <span class="keyword">THEN</span></span><br><span class="line">SIGNAL <span class="keyword">SQLSTATE</span> <span class="string">&#x27;BY000&#x27;</span> <span class="keyword">SET</span> MESSAGE_TEXT <span class="operator">=</span> <span class="string">&#x27;年龄不能低于12岁&#x27;</span>;</span><br><span class="line"><span class="keyword">END</span> IF;</span><br><span class="line"><span class="keyword">END</span>$$</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> `user_info_update1` AFTER <span class="keyword">UPDATE</span> <span class="keyword">ON</span> `sys_user_info` <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span> </span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">IF NEW.age<span class="operator">!=</span>OLD.age <span class="keyword">and</span> NEW.age<span class="operator">&lt;</span><span class="number">12</span> <span class="keyword">THEN</span> </span><br><span class="line">SIGNAL <span class="keyword">SQLSTATE</span> <span class="string">&#x27;BY000&#x27;</span> <span class="keyword">SET</span> MESSAGE_TEXT <span class="operator">=</span> <span class="string">&#x27;年龄不能低于12岁&#x27;</span>;</span><br><span class="line"><span class="keyword">END</span> IF;</span><br><span class="line"><span class="keyword">END</span>$$</span><br><span class="line"></span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure><p>创建完成后，我们查看效果<br /><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220902174203.gif" alt="animation" /></p><h2 id="三、最后">三、最后</h2><p>虽然触发器有着自己的局限性，但从某一个角度上来说，它确实是一个好东西。</p><p>在我经历的这段时间，它可以完成以下这些实用功能</p><ul class="lvl-0"><li class="lvl-2"><p>表数据历史的收集，作为一个历史数据保存至其他历史表中。</p></li><li class="lvl-2"><p>某些数据通过判断后，来确定一些状态字段的值。</p></li><li class="lvl-2"><p>触发检测，是否达到预警，从而发送告警事件</p></li></ul><p>触发器的功能也可以做到许多东西，关键看自己如何去进行使用，<b>搭配代码，事半功倍！</b></p><p>我是半月，祝你幸福！！！</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot中使用注解读取redis缓存</title>
      <link href="/archive/42edfa7e/"/>
      <url>/archive/42edfa7e/</url>
      
        <content type="html"><![CDATA[<h1>SpringBoot中使用注解读取redis缓存</h1><h2 id="一、介绍">一、介绍</h2><p>我们使用<code>redis</code>的时候，一般都是以下这个步骤</p><ol><li class="lvl-3"><p>查询指定的<code>redis</code>缓存</p></li><li class="lvl-3"><p>如果有直接返回，（异步执行查询，更新<code>redis</code>缓存）</p></li><li class="lvl-3"><p>如果没有则执行查询，（同时设置<code>redis</code>缓存）</p></li></ol><p>此外，如果是增删改操作，将触发一次设置<code>redis</code>缓存的操作。</p><p>上面的一些步骤高度重复，我决定造个轮子，基于注解、切面和反射来完成此项功能。</p><h2 id="二、相关代码">二、相关代码</h2><h3 id="1）依赖">1）依赖</h3><p>处于<code>SpringBoot</code>中，<code>redis</code>、<code>aop</code>等相关依赖不要忘记</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2）代码">2）代码</h3><p>首先，我们先编写一个注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test.annotations;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> RedisCache &#123;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;hash&quot;</span>;</span><br><span class="line"></span><br><span class="line">    RedisCacheKeyModel <span class="title function_">keyModel</span><span class="params">()</span> <span class="keyword">default</span> RedisCacheKeyModel.METHOD_HASH;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">write</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成key的模式策略</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">enum</span> <span class="title class_">RedisCacheKeyModel</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 自定义的key</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        CUSTOM(),</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 方法名_hash值</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        METHOD_HASH();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其次，我们编写切面了，针对上面注解的方法</p><p>简单的来说，就是获取注解标注的方法，通过注解上的参数，来确定<code>key</code>。</p><p>有了<code>key</code>，先查询一遍<code>redis</code>，如果有值就直接返回；<mark>异步调用方法，并更新redis缓存</mark>；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test.aspect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.test.annotations.RedisCache;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Around;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Pointcut;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.reflect.MethodSignature;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CompletableFuture;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisCacheAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut(&quot;@annotation(com.banmoon.test.annotations.RedisCache)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pointcut</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;pointcut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">around</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line">            Class&lt;?&gt; classTarget = joinPoint.getTarget().getClass();</span><br><span class="line">            Class&lt;?&gt;[] par = ((MethodSignature) joinPoint.getSignature()).getParameterTypes();</span><br><span class="line">            <span class="type">Method</span> <span class="variable">objMethod</span> <span class="operator">=</span> classTarget.getMethod(methodName, par);</span><br><span class="line"></span><br><span class="line">            <span class="type">RedisCache</span> <span class="variable">cache</span> <span class="operator">=</span> objMethod.getAnnotation(RedisCache.class);</span><br><span class="line">            <span class="keyword">if</span> (RedisCache.RedisCacheKeyModel.CUSTOM == cache.keyModel()) &#123;</span><br><span class="line">                key = cache.value();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">canonicalName</span> <span class="operator">=</span> String.format(<span class="string">&quot;%s.%s&quot;</span>, classTarget.getCanonicalName(), methodName);</span><br><span class="line">                key = String.format(<span class="string">&quot;%s_%s&quot;</span>, methodName, canonicalName.hashCode());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (cache.write()) &#123;</span><br><span class="line">                <span class="type">Object</span> <span class="variable">res</span> <span class="operator">=</span> joinPoint.proceed();</span><br><span class="line">                redisTemplate.opsForValue().set(key, res);</span><br><span class="line">                <span class="keyword">return</span> res;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">Object</span> <span class="variable">res</span> <span class="operator">=</span> redisTemplate.opsForValue().get(key);</span><br><span class="line">                <span class="keyword">if</span> (Objects.isNull(res)) &#123;</span><br><span class="line">                    res = joinPoint.proceed();</span><br><span class="line">                    redisTemplate.opsForValue().set(key, res);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">finalKey</span> <span class="operator">=</span> key;</span><br><span class="line">                    CompletableFuture.runAsync(() -&gt; &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            <span class="type">Object</span> <span class="variable">res1</span> <span class="operator">=</span> joinPoint.proceed();</span><br><span class="line">                            redisTemplate.opsForValue().set(finalKey, res1);</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> res;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">res</span> <span class="operator">=</span> joinPoint.proceed();</span><br><span class="line">            redisTemplate.opsForValue().set(key, res);</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3）测试使用">3）测试使用</h3><p>写一段测试方法，进行使用</p><p><code>TestController.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.test.dto.ResultData;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.test.dto.UserDTO;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.test.service.impl.TestServiceImpl;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TestServiceImpl testServiceImpl;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/redisCache&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResultData <span class="title function_">redisCache</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;UserDTO&gt; userList = testServiceImpl.getUserList();</span><br><span class="line">        <span class="keyword">return</span> ResultData.success(userList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>TestServiceImpl.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.test.annotations.RedisCache;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.test.dto.UserDTO;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestServiceImpl</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RedisCache(&quot;userList&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;UserDTO&gt; <span class="title function_">getUserList</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;UserDTO&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="type">UserDTO</span> <span class="variable">dto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserDTO</span>();</span><br><span class="line">            dto.setName(<span class="string">&quot;半月无霜&quot;</span> + i);</span><br><span class="line">            dto.setSex(<span class="string">&quot;男&quot;</span>);</span><br><span class="line">            dto.setAge(<span class="number">18</span>+i);</span><br><span class="line">            dto.setStatus(i%<span class="number">2</span>);</span><br><span class="line">            list.add(dto);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请求url，<a href="http://localhost:8080/test/redisCache%EF%BC%8C%E5%8F%AF%E4%BB%A5%E6%AD%A3%E5%B8%B8%E8%BF%94%E5%9B%9E%EF%BC%8C%E5%90%8C%E6%97%B6%E6%9F%A5%E7%9C%8B%60redis%60%E6%9C%89%E6%97%A0%E7%BC%93%E5%AD%98">http://localhost:8080/test/redisCache，可以正常返回，同时查看`redis`有无缓存</a></p><table><thead><tr><th>请求结果</th><th>redis缓存</th></tr></thead><tbody><tr><td><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220901154509.png" alt="image-20220901153911398" /></td><td><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220901154417.png" alt="image-20220901153911398" /></td></tr></tbody></table><h2 id="三、最后">三、最后</h2><p>注解、<code>aop</code>和反射配在一起可以做很多事！</p><p>许多轮子不就这样出来了么。</p><p>我是半月，祝你幸福！！！</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> AOP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot中的@Conditional注解</title>
      <link href="/archive/e810560e/"/>
      <url>/archive/e810560e/</url>
      
        <content type="html"><![CDATA[<h1>SpringBoot中的@Conditional注解</h1><h2 id="一、介绍">一、介绍</h2><p>在<code>Spring</code>的应用下，我们希望一些<code>bean</code>可以通过一些条件来判断是否需要实例化，并加载到<code>spring</code>容器中。</p><p>所以，<code>@Conditional</code>注解就是为了解决上面这个需求而制定的注解。<code>@Conditional</code>注解是总接口，可以定制逻辑。</p><h2 id="二、详情">二、详情</h2><h3 id="1）-Conditional">1）@Conditional</h3><p>先看源码，此注解需要传入<code>Condition</code>接口的实现类，可以多个</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Conditional &#123;</span><br><span class="line">    </span><br><span class="line">Class&lt;? <span class="keyword">extends</span> <span class="title class_">Condition</span>&gt;[] value();</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以，使用此注解时，我们若是有些高度定制化的一些判断，可以先实现<code>Condition</code>接口，再讲实现类提供给<code>@Conditional</code>注解，使用示例如下。</p><p>首先要有一个<code>Condition</code>接口的实现类，可以看看框架中其他的实现类，这边自己实现一个</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Condition;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ConditionContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.type.AnnotatedTypeMetadata;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestCondition</span> <span class="keyword">implements</span> <span class="title class_">Condition</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">matches</span><span class="params">(ConditionContext context, AnnotatedTypeMetadata metadata)</span> &#123;</span><br><span class="line">        <span class="comment">// TODO 定制化逻辑，比如说数据库的某项配置</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再进行其进行判断并初始化<code>bean</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(&quot;conditional&quot;)</span></span><br><span class="line">    <span class="meta">@Conditional(TestCondition.class)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">conditional</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;conditional&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ConfigurableApplicationContext</span> <span class="variable">run</span> <span class="operator">=</span> SpringApplication.run(TestApplication.class, args);</span><br><span class="line">        <span class="type">String</span> <span class="variable">string</span> <span class="operator">=</span> run.getBean(<span class="string">&quot;conditional&quot;</span>, String.class);</span><br><span class="line">        System.out.println(string);</span><br><span class="line">        System.out.println(System.lineSeparator());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下，成功获取到<code>bean</code></p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220713155018.png" alt="image-20220712134735438" /></p><h3 id="2）-ConditionalOnBean">2）@ConditionalOnBean</h3><p><code>@ConditionalOnBean</code>和<code>@ConditionalOnMissingBean</code>是相反对应的一组注解，看注解名称也可以看出来。</p><p>前者是判断存在某个<code>bean</code>，后者是判断是否确实某个<code>bean</code>。</p><p>先来看看他们的使用，如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(&quot;conditionalOnBean&quot;)</span></span><br><span class="line">    <span class="meta">@ConditionalOnBean(TestApplication.class)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">conditionalOnBean</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;conditionalOnBean&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(&quot;conditionalOnMissingBean&quot;)</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean(TestApplication.class)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">conditionalOnMissingBean</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;conditionalOnMissingBean&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ConfigurableApplicationContext</span> <span class="variable">run</span> <span class="operator">=</span> SpringApplication.run(TestApplication.class, args);</span><br><span class="line">        Map&lt;String, String&gt; beanMap = run.getBeansOfType(String.class);</span><br><span class="line">        beanMap.forEach((k, v) -&gt; System.out.println(StrUtil.format(<span class="string">&quot;&#123;&#125;：&#123;&#125;&quot;</span>, k, v)));</span><br><span class="line">        System.out.println(System.lineSeparator());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220713155027.png" alt="image-20220712140430447" /></p><p>可以看到只有一个<code>bean</code>被创建出来，另外一个由于不满足条件，所以没有创建<code>bean</code>。</p><hr /><p>查看注解源码，发现除了可以传<code>Class</code>对象，还可以传其他的属性来进行确定</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123; ElementType.TYPE, ElementType.METHOD &#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Conditional(OnBeanCondition.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ConditionalOnBean &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 检查bean的class类型，当指定的所有类的 bean 都包含在 BeanFactory 中时，此条件才匹配</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Class&lt;?&gt;[] value() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 检查bean的权限名，当指定的所有类的 bean 都包含在 BeanFactory 中时，此条件才匹配</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">String[] type() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 检查bean的注解类型，当指定的所有注解都在 BeanFactory 中的 bean 上定义时，此条件才匹配</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Class&lt;? <span class="keyword">extends</span> <span class="title class_">Annotation</span>&gt;[] annotation() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 要检查的 bean 的名称。当指定的所有 bean 名称都包含在 BeanFactory 中时，此条件才匹配。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">String[] name() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 考虑应用程序的上下文结构的策略</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">SearchStrategy <span class="title function_">search</span><span class="params">()</span> <span class="keyword">default</span> SearchStrategy.ALL;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 可能在其通用参数中包含指定 bean 类型的其他类。例如，声明 value=Name.class 和 parameterizedContainer=NameRegistration.class 的注释将同时检测 Name 和 NameRegistration&lt;Name&gt;。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Class&lt;?&gt;[] parameterizedContainer() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3）-ConditionalOnProperty">3）@ConditionalOnProperty</h3><p>看名字也就能看的出来，是指从<b>配置文件</b>加载，用来进行条件判断。使用如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.StrUtil;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ConfigurableApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(&quot;conditionalOnProperty&quot;)</span></span><br><span class="line">    <span class="meta">@ConditionalOnProperty(value = &quot;conditionalOnProperty&quot;, prefix = &quot;banmoon-condition&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">conditionalOnProperty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;conditionalOnProperty&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ConfigurableApplicationContext</span> <span class="variable">run</span> <span class="operator">=</span> SpringApplication.run(TestApplication.class, args);</span><br><span class="line">        Map&lt;String, String&gt; beanMap = run.getBeansOfType(String.class);</span><br><span class="line">        beanMap.forEach((k, v) -&gt; System.out.println(StrUtil.format(<span class="string">&quot;&#123;&#125;：&#123;&#125;&quot;</span>, k, v)));</span><br><span class="line">        System.out.println(System.lineSeparator());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220713155033.png" alt="image-20220712163628496" /></p><hr /><p>还是点入进去看看该注解的源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(&#123; ElementType.TYPE, ElementType.METHOD &#125;)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Conditional(OnPropertyCondition.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ConditionalOnProperty &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 同name属性一致</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">String[] value() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 应用于每个属性的前缀。如果未指定，前缀会自动以点结尾。有效前缀由一个或多个用点分隔的单词定义（例如“acme.system.feature”）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">String <span class="title function_">prefix</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 要测试的属性的名称。如果已定义前缀，则将其应用于计算每个属性的完整键。例如，如果前缀是 app.config 并且一个值是 my-value，则完整的键将是 app.config.my-value 使用虚线表示法来指定每个属性，即全部小写，用“-”分隔单词（例如 my-long-property）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">String[] name() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 属性预期值的字符串表示形式。如果未指定，则该属性不得等于 false</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">String <span class="title function_">havingValue</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 如果未设置属性，则指定条件是否应匹配。默认为false</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">matchIfMissing</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有一段不好翻译，给予截图吧，指的是<code>havingValue</code>属性的使用。</p><p>这些比较特殊，不同的属性值和不同的<code>havingValue</code>组合，可以得到什么样的结果。</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220713155042.png" alt="image-20220712164718441" /></p><h3 id="4）-ConditionalOnClass">4）@ConditionalOnClass</h3><p><code>@ConditionalOnClass</code>和<code>@ConditionalOnMissingClass</code>也是一组相对的注解，他们的功能是判断是否拥有<code>java</code>类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(&quot;conditionalOnClass&quot;)</span></span><br><span class="line">    <span class="meta">@ConditionalOnClass(name = &quot;com.mysql.cj.jdbc.Driver&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">conditionalOnClass</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;conditionalOnClass&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(&quot;conditionalOnMissingClass&quot;)</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingClass(value = &quot;oracle.jdbc.driver.OracleDriver&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">conditionalOnMissingClass</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;conditionalOnMissingClass&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ConfigurableApplicationContext</span> <span class="variable">run</span> <span class="operator">=</span> SpringApplication.run(TestApplication.class, args);</span><br><span class="line">        Map&lt;String, String&gt; beanMap = run.getBeansOfType(String.class);</span><br><span class="line">        beanMap.forEach((k, v) -&gt; System.out.println(StrUtil.format(<span class="string">&quot;&#123;&#125;：&#123;&#125;&quot;</span>, k, v)));</span><br><span class="line">        System.out.println(System.lineSeparator());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于我只添加了<code>MySQL</code>的驱动，没有加上<code>Oracle</code>，所以结果如下</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220713155048.png" alt="image-20220712165840798" /></p><h3 id="5）-ConditionalOnWebApplication">5）@ConditionalOnWebApplication</h3><p><code>@ConditionalOnWebApplication</code>与<code>@ConditionalOnNotWebApplication</code>是一组相对的注解，指的判断是否是<code>web</code>环境应用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.StrUtil;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnNotWebApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ConfigurableApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(&quot;conditionalOnWebApplication&quot;)</span></span><br><span class="line">    <span class="meta">@ConditionalOnWebApplication</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">conditionalOnWebApplication</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;conditionalOnWebApplication&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(&quot;conditionalOnNotWebApplication&quot;)</span></span><br><span class="line">    <span class="meta">@ConditionalOnNotWebApplication</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">conditionalOnNotWebApplication</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;conditionalOnNotWebApplication&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ConfigurableApplicationContext</span> <span class="variable">run</span> <span class="operator">=</span> SpringApplication.run(TestApplication.class, args);</span><br><span class="line">        Map&lt;String, String&gt; beanMap = run.getBeansOfType(String.class);</span><br><span class="line">        beanMap.forEach((k, v) -&gt; System.out.println(StrUtil.format(<span class="string">&quot;&#123;&#125;：&#123;&#125;&quot;</span>, k, v)));</span><br><span class="line">        System.out.println(System.lineSeparator());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220713155131.png" alt="image-20220713110100264" /></p><h3 id="6）-ConditionalOnJava">6）@ConditionalOnJava</h3><p><code>@ConditionalOnJava</code>用来判断当前<code>java</code>的版本</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(&quot;conditionalOnJava&quot;)</span></span><br><span class="line">    <span class="meta">@ConditionalOnJava(value = JavaVersion.EIGHT)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">conditionalOnJava</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;conditionalOnJava&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ConfigurableApplicationContext</span> <span class="variable">run</span> <span class="operator">=</span> SpringApplication.run(TestApplication.class, args);</span><br><span class="line">        Map&lt;String, String&gt; beanMap = run.getBeansOfType(String.class);</span><br><span class="line">        beanMap.forEach((k, v) -&gt; System.out.println(StrUtil.format(<span class="string">&quot;&#123;&#125;：&#123;&#125;&quot;</span>, k, v)));</span><br><span class="line">        System.out.println(System.lineSeparator());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220713155053.png" alt="image-20220713111005274" /></p><p>看下注解的源码，比较简单</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123; ElementType.TYPE, ElementType.METHOD &#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Conditional(OnJavaCondition.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ConditionalOnJava &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配合value()使用，来确定范围。默认是Range.EQUAL_OR_NEWER，也就是比指定范围高</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Range <span class="title function_">range</span><span class="params">()</span> <span class="keyword">default</span> Range.EQUAL_OR_NEWER;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 指定Java版本</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">JavaVersion <span class="title function_">value</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Range</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 大于等于</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">EQUAL_OR_NEWER,</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 低于</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">OLDER_THAN</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7）-ConditionalOnExpression">7） @ConditionalOnExpression</h3><p>使用<code>Spring</code>表达式来进行判断，也就是<code>SpEL</code>表达式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(&quot;intValue&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">intValue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(&quot;conditionalOnExpression&quot;)</span></span><br><span class="line">    <span class="meta">@ConditionalOnExpression(&quot;#&#123;intValue&gt;5&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">conditionalOnExpression</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;conditionalOnExpression&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ConfigurableApplicationContext</span> <span class="variable">run</span> <span class="operator">=</span> SpringApplication.run(TestApplication.class, args);</span><br><span class="line">        Map&lt;String, String&gt; beanMap = run.getBeansOfType(String.class);</span><br><span class="line">        beanMap.forEach((k, v) -&gt; System.out.println(StrUtil.format(<span class="string">&quot;&#123;&#125;：&#123;&#125;&quot;</span>, k, v)));</span><br><span class="line">        System.out.println(System.lineSeparator());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220713155100.png" alt="image-20220713141743435" /></p><h3 id="8）-ConditionalOnResource">8）@ConditionalOnResource</h3><p><code>@ConditionalOnResource</code>是否有指定的静态资源，示例如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(&quot;conditionalOnResource&quot;)</span></span><br><span class="line">    <span class="meta">@ConditionalOnResource(resources = &quot;application.yml&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">conditionalOnResource</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;conditionalOnResource&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ConfigurableApplicationContext</span> <span class="variable">run</span> <span class="operator">=</span> SpringApplication.run(TestApplication.class, args);</span><br><span class="line">        Map&lt;String, String&gt; beanMap = run.getBeansOfType(String.class);</span><br><span class="line">        beanMap.forEach((k, v) -&gt; System.out.println(StrUtil.format(<span class="string">&quot;&#123;&#125;：&#123;&#125;&quot;</span>, k, v)));</span><br><span class="line">        System.out.println(System.lineSeparator());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220713155108.png" alt="image-20220713142800606" /></p><h3 id="9）-ConditionalOnSingleCandidate">9）@ConditionalOnSingleCandidate</h3><p><code>@ConditionalOnSingleCandidate</code>，判断指定的类型是否只有一个<code>bean</code>，示例如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(&quot;intValue&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">intValue</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(&quot;intValue2&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">intValue2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">20</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(&quot;doubleValue&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Double <span class="title function_">doubleValue</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">10D</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(&quot;intValueConditional&quot;)</span></span><br><span class="line">    <span class="meta">@ConditionalOnSingleCandidate(Integer.class)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">intValueConditional</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;intValueConditional&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(&quot;doubleValueConditional&quot;)</span></span><br><span class="line">    <span class="meta">@ConditionalOnSingleCandidate(Double.class)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">doubleValueConditional</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;doubleValueConditional&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ConfigurableApplicationContext</span> <span class="variable">run</span> <span class="operator">=</span> SpringApplication.run(TestApplication.class, args);</span><br><span class="line">        Map&lt;String, String&gt; beanMap = run.getBeansOfType(String.class);</span><br><span class="line">        beanMap.forEach((k, v) -&gt; System.out.println(StrUtil.format(<span class="string">&quot;&#123;&#125;：&#123;&#125;&quot;</span>, k, v)));</span><br><span class="line">        System.out.println(System.lineSeparator());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220713155122.png" alt="image-20220713154856742" /></p><h2 id="三、最后">三、最后</h2><p>整理一下注解表格，其中有一些上面没有列出来的注解</p><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td>@Conditional</td><td>传入一个<code>Condition</code>接口的实现类，来进行判断</td></tr><tr><td>@ConditionalOnBean</td><td>判断是否存在某个<code>bean</code></td></tr><tr><td>@ConditionalOnMissingBean</td><td>判断是否缺失了某个<code>bean</code></td></tr><tr><td>@ConditionalOnProperty</td><td>判断配置文件中的某项配置</td></tr><tr><td>@ConditionalOnClass</td><td>判断是否拥有某个<code>java</code>类</td></tr><tr><td>@ConditionalOnMissingClass</td><td>判断是否缺失了某个<code>java</code>类</td></tr><tr><td>@ConditionalOnWebApplication</td><td>判断当前是否为web环境</td></tr><tr><td>@ConditionalOnNotWebApplication</td><td>判断当前是否不为web环境</td></tr><tr><td>@ConditionalOnJava</td><td>判断当前<code>java</code>运行版本</td></tr><tr><td>@ConditionalOnExpression</td><td>使用<code>Spring</code>表达式来进行判断，也就是<code>SpEL</code>表达式</td></tr><tr><td>@ConditionalOnResource</td><td>判断是否有指定的静态资源</td></tr><tr><td>@ConditionalOnSingleCandidate</td><td>判断指定的类型是否只有一个<code>bean</code></td></tr><tr><td>@ConditionalOnJndi</td><td>通过<code>JNDI</code>进行判断</td></tr><tr><td>@ConditionalOnCloudPlatform</td><td>判断当前环境是否是云平台</td></tr><tr><td>@ConditionalOnWarDeployment</td><td>判断当前是否是<code>War</code>包环境</td></tr><tr><td>@ConditionalOnMissingFilterBean</td><td>判断是否缺失了某个<code>bean</code>过滤器</td></tr></tbody></table><p>我是半月，祝你幸福！！！</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java使用NIO实现Socket通信</title>
      <link href="/archive/f1218699/"/>
      <url>/archive/f1218699/</url>
      
        <content type="html"><![CDATA[<h1>Java使用NIO实现Socket通信</h1><h2 id="一、介绍">一、介绍</h2><p>在上次的博客中，已经了解到<code>NIO</code>当中最为重要的两个对象。分别是缓冲<code>Buffer</code>和通道<code>Channel</code>，也进行了基本的使用，不过使用的是<code>FileChannel</code>，主要用来与文件打交道。</p><p>那么，这一次使用<code>NIO</code>实现<code>Socket</code>网络通信，主要是使用到<code>ServerSocketChannel</code>和<code>SocketChannel</code>。</p><p>同样，在本次作为<code>NIO</code>的网络通信，建议先了解传统<code>BIO</code>的网络通信，<a href="https://www.banmoon.top/articles/78">传送门在此</a>。</p><h2 id="二、实现">二、实现</h2><h3 id="1）服务端">1）服务端</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.*;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestSocketServer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 开启通道，得到一个ServerSocketChannel对象</span></span><br><span class="line">        <span class="type">ServerSocketChannel</span> <span class="variable">serverSocketChannel</span> <span class="operator">=</span> ServerSocketChannel.open();</span><br><span class="line">        <span class="comment">// 得到一个选择器</span></span><br><span class="line">        <span class="type">Selector</span> <span class="variable">selector</span> <span class="operator">=</span> Selector.open();</span><br><span class="line">        <span class="comment">// 绑定端口</span></span><br><span class="line">        serverSocketChannel.socket().bind(<span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="number">2333</span>));</span><br><span class="line">        <span class="comment">// 设置为非阻塞</span></span><br><span class="line">        serverSocketChannel.configureBlocking(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将socketChannel注册到selector上，事件为OP_ACCEPT，接收事件</span></span><br><span class="line">        serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 循环等待客户端连接</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="comment">// 服务器等待2秒，如果没有接收事件发生，将进入下次循环</span></span><br><span class="line">            <span class="keyword">if</span> (selector.select(<span class="number">2000</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;服务器已等待2秒，继续静默等待&quot;</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 如果有事件发成，将会进入此逻辑，获取到相关的SelectionKey集合</span></span><br><span class="line">            Set&lt;SelectionKey&gt; selectionKeys = selector.selectedKeys();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 遍历这个集合</span></span><br><span class="line">            Iterator&lt;SelectionKey&gt; iterator = selectionKeys.iterator();</span><br><span class="line">            <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">                <span class="type">SelectionKey</span> <span class="variable">selectionKey</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">                <span class="comment">// 判断是否发生了OP_ACCEPT事件</span></span><br><span class="line">                <span class="keyword">if</span> (selectionKey.isAcceptable()) &#123;</span><br><span class="line">                    <span class="comment">// 获取到SocketChannel通道。</span></span><br><span class="line">                    <span class="comment">// 此方法虽然是阻塞的，但由于上面基于事件的判断，到这一步时，连接就已经产生了，所以不会阻塞</span></span><br><span class="line">                    <span class="type">SocketChannel</span> <span class="variable">socketChannel</span> <span class="operator">=</span> serverSocketChannel.accept();</span><br><span class="line">                    <span class="comment">// 将socketChannel设置为非阻塞</span></span><br><span class="line">                    socketChannel.configureBlocking(<span class="literal">false</span>);</span><br><span class="line">                    <span class="comment">// 将上面的socketChannel注册到selector选择器上，事件注册为OP_READ，读取事件</span></span><br><span class="line">                    socketChannel.register(selector, SelectionKey.OP_READ, ByteBuffer.allocate(<span class="number">1024</span>));</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 判断是否发生了OP_READ事件</span></span><br><span class="line">                <span class="keyword">if</span> (selectionKey.isReadable()) &#123;</span><br><span class="line">                    <span class="comment">// 通过选择器获取到发生了OP_READ事件的SocketChannel</span></span><br><span class="line">                    <span class="type">SocketChannel</span> <span class="variable">socketChannel</span> <span class="operator">=</span> (SocketChannel) selectionKey.channel();</span><br><span class="line">                    <span class="comment">// 获取到该socketChannel关联的缓冲</span></span><br><span class="line">                    <span class="type">ByteBuffer</span> <span class="variable">byteBuffer</span> <span class="operator">=</span> (ByteBuffer) selectionKey.attachment();</span><br><span class="line">                    <span class="comment">// 读取通道中的数据</span></span><br><span class="line">                    socketChannel.read(byteBuffer);</span><br><span class="line">                    <span class="comment">// 反转缓冲，进行读取</span></span><br><span class="line">                    byteBuffer.flip();</span><br><span class="line">                    log.info(<span class="string">&quot;服务端接受到数据：&#123;&#125;&quot;</span>, <span class="keyword">new</span> <span class="title class_">String</span>(byteBuffer.array(), <span class="number">0</span>, byteBuffer.limit(), StandardCharsets.UTF_8));</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 删除当前的selectionKey，避免重复执行</span></span><br><span class="line">                iterator.remove();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2）客户端">2）客户端</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestSocketClient</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line">        <span class="comment">// 开启通道，得到一个SocketChannel对象</span></span><br><span class="line">        <span class="type">SocketChannel</span> <span class="variable">socketChannel</span> <span class="operator">=</span> SocketChannel.open();</span><br><span class="line">        <span class="comment">// 设置为非阻塞</span></span><br><span class="line">        socketChannel.configureBlocking(<span class="literal">false</span>);</span><br><span class="line">        <span class="comment">// 创建一个服务器端地址信息的对象</span></span><br><span class="line">        <span class="type">InetSocketAddress</span> <span class="variable">netAddress</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">2333</span>);</span><br><span class="line">        <span class="comment">// 连接服务器，如果没有连接成功将进入循环</span></span><br><span class="line">        <span class="keyword">if</span> (!socketChannel.connect(netAddress)) &#123;</span><br><span class="line">            <span class="comment">// 循环判断是否完成连接，阻塞方法，2秒后释放</span></span><br><span class="line">            <span class="keyword">while</span> (!socketChannel.finishConnect()) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;与服务器连接中，请稍后&quot;</span>);</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">&quot;连接服务器成功&quot;</span>);</span><br><span class="line">        <span class="comment">// 当执行到此处时，说明与服务器的连接已经成功，发送数据</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;hello，半月无霜&quot;</span>;</span><br><span class="line">        <span class="type">ByteBuffer</span> <span class="variable">byteBuffer</span> <span class="operator">=</span> ByteBuffer.wrap(str.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">        <span class="comment">// 写入通道</span></span><br><span class="line">        socketChannel.write(byteBuffer);</span><br><span class="line">        <span class="comment">// 避免通道关闭阻塞在此</span></span><br><span class="line">        <span class="type">CountDownLatch</span> <span class="variable">countDownLatch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(<span class="number">1</span>);</span><br><span class="line">        countDownLatch.await();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3）测试">3）测试</h3><p>先启用服务端，再启用客户端，客户端可以启用多个</p><p>或者也可以先启用客户端，再启用服务端</p><table><thead><tr><th>服务端</th><th>客户端</th></tr></thead><tbody><tr><td><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220705231526.png" alt="image-20220702234733427" /></td><td><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220705231138.png" alt="image-20220705231125252" /></td></tr></tbody></table><h2 id="三、最后">三、最后</h2><p>实际上，这只是简单的一个应用，后续复杂的都是基于此简单的服务、客户端进行展开。继续加油！</p><p>我是半月，祝你幸福！！！</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jdk </tag>
            
            <tag> 网络通信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java的NIO入门</title>
      <link href="/archive/73e50c63/"/>
      <url>/archive/73e50c63/</url>
      
        <content type="html"><![CDATA[<h1>Java的NIO入门</h1><h2 id="一、介绍">一、介绍</h2><p><code>Java NIO</code>是从<b>Java 1.4</b>版本开始引入的一个新的<code>IO</code> ，在传统的<code>IO</code>模型中，使用的是同步阻塞<code>IO</code>，也就是<code>blocking  IO</code>。</p><p>而<code>NIO</code>指的是<code>New IO</code>，代指新<code>IO</code>模型。有些博客指的是<code>not blocking IO</code>，非阻塞IO，叫哪种都行，都是<code>NIO</code>。</p><p>在<code>NIO</code>中，最重要的两个东西就是缓冲<code>Buffer</code>和通道<code>Channel</code>了。继续往下看！</p><h2 id="二、Buffer">二、Buffer</h2><p>缓冲区<code>Buffer</code>，可以理解成是一个含数组的容器对象，该对象提供了一组方法，可以更轻松地使用其中的数据。该对象记录了一些状态值，能够跟踪和记录缓冲区的状态变化情况。</p><p>后续的通道<code>Channel</code>的读取、写入操作都经过缓冲。</p><p><code>Buffer</code>是一个抽象类，它的实现类有很多，但我们最常用的还是<code>ByteBuffer</code>，因为要和字节打交道嘛<br /><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220701220605.png" alt="image-20220701212258190" /></p><p>它里面有四个最重要的状态值，分别是</p><ol><li class="lvl-3"><p><code>mark</code>：标记</p></li><li class="lvl-3"><p><code>position</code>：当前读取或存储数据的索引位置，位置</p></li><li class="lvl-3"><p><code>limit</code>：当前缓冲最大可以写入或读取到的位置，极限</p></li><li class="lvl-3"><p><code>capacity</code>：当前缓冲的容量，容量</p></li></ol><p>其中，<code>mark</code>&lt;=<code> position</code>&lt;=<code>limit</code>&lt;=<code>capacity</code>，具体是什么作用，稍等看看演示代码，建议打开<a href="https://www.matools.com/api/java8">java的api文档</a>来同步进行查看</p><h3 id="1）初识缓冲">1）初识缓冲</h3><p>建议DEBUG，进入后查看上面的四个状态值的变化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.IntBuffer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BufferTest01</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建容量大小为5的一个int缓冲</span></span><br><span class="line">        <span class="type">IntBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> IntBuffer.allocate(<span class="number">5</span>);</span><br><span class="line">        <span class="comment">// 放入数据，初始化时position=0，每put一次，position++，不能大于limit</span></span><br><span class="line">        buffer.put(<span class="number">1</span>);</span><br><span class="line">        buffer.put(<span class="number">2</span>);</span><br><span class="line">        buffer.put(<span class="number">3</span>);</span><br><span class="line">        buffer.put(<span class="number">4</span>);<span class="comment">// position=4, limit=5</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 写入完毕，反转进行读取，反转过后，position=0，limit=4</span></span><br><span class="line">        buffer.flip();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取数据，每获取一次，position++，不能大于limit</span></span><br><span class="line">        System.out.println(buffer.get());</span><br><span class="line">        System.out.println(buffer.get());</span><br><span class="line">        System.out.println(buffer.get());</span><br><span class="line">        System.out.println(buffer.get());<span class="comment">// position=4，limit=4</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果还想写入数据，清空此缓冲，再进行写入，重置position和limit</span></span><br><span class="line">        buffer.clear();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2）BufferUnderFlowException">2）BufferUnderFlowException</h3><p><code>BufferUnderFlowException</code>异常，存的类型和取的类型不一致所导致的异常。</p><p>不同的类型的存储大小空间不同，所以会导致读取的异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BufferTest02</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建容量大小为5的一个byte缓冲</span></span><br><span class="line">        <span class="type">ByteBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">100</span>);</span><br><span class="line">        <span class="comment">// 放入数据</span></span><br><span class="line">        buffer.putShort((<span class="type">short</span>) <span class="number">1</span>);</span><br><span class="line">        buffer.putInt(<span class="number">1</span>);</span><br><span class="line">        buffer.putLong(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 反转</span></span><br><span class="line">        buffer.flip();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 取出数据</span></span><br><span class="line">        System.out.println(buffer.getLong());</span><br><span class="line">        System.out.println(buffer.getFloat());</span><br><span class="line">        System.out.println(buffer.getLong());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220701220546.png" alt="image-20220701220545046" /></p><h3 id="3）只读缓冲">3）只读缓冲</h3><p>可以将一个缓冲设置为只读，也就是说在缓冲有数据后，可以得到一个只读的缓冲，此缓冲不再支持写入。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BufferTest03</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建容量大小为5的一个缓冲</span></span><br><span class="line">        <span class="type">ByteBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">5</span>);</span><br><span class="line">        <span class="comment">// 放入数据</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; buffer.capacity(); i++) &#123;</span><br><span class="line">            buffer.put((<span class="type">byte</span>) i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 反转</span></span><br><span class="line">        buffer.flip();</span><br><span class="line">        <span class="comment">// 获取只读缓冲</span></span><br><span class="line">        <span class="type">ByteBuffer</span> <span class="variable">readOnlyBuffer</span> <span class="operator">=</span> buffer.asReadOnlyBuffer();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 循环读取</span></span><br><span class="line">        <span class="keyword">while</span> (readOnlyBuffer.hasRemaining()) &#123;</span><br><span class="line">            System.out.println(readOnlyBuffer.get());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 写入只读异常会抛出ReadOnlyBufferException</span></span><br><span class="line"><span class="comment">//        readOnlyBuffer.put(1);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220701221841.png" alt="image-20220701221840278" /></p><h2 id="三、Channel">三、Channel</h2><p><code>Channel</code>，称为通道，类似流，但与流有下面几点区别</p><ul class="lvl-0"><li class="lvl-2"><p>通道可以同时进行读写，而流只能读或者写</p></li><li class="lvl-2"><p>通道可以实现异步读写数据</p></li><li class="lvl-2"><p>通道可以从缓冲读数据，可以写入数据到缓冲</p></li></ul><p><code>Channel</code>是一个接口，常用的实现类如下</p><ul class="lvl-0"><li class="lvl-2"><p><code>FileChannelImpl</code>：文件相关的通道</p></li><li class="lvl-2"><p><code>ServerSocketChannel</code>：类似<code>BIO</code>中的<code>ServerSocket</code>，用于TCP的连接</p></li><li class="lvl-2"><p><code>SocketChannel</code>：类似<code>BIO</code>中的<code>Socket</code>，用于TCP的连接</p></li><li class="lvl-2"><p><code>DatagramChannel</code>：用于UDP数据的读写</p></li></ul><hr /><p>多说无益，先来看看他们的使用好吧，建议打开<a href="https://www.matools.com/api/java8">java的api文档</a>来同步进行查看</p><h3 id="1）写入输出文件">1）写入输出文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.FileChannel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChannelTest01</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;你好，半月无霜&quot;</span>;</span><br><span class="line">        <span class="comment">// 创建一个输出流</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;E:\\repository\\test.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 通过输出流获取通道</span></span><br><span class="line">        <span class="type">FileChannel</span> <span class="variable">channel</span> <span class="operator">=</span> outputStream.getChannel();</span><br><span class="line">        <span class="comment">// 将文字放入字节缓冲</span></span><br><span class="line">        <span class="type">ByteBuffer</span> <span class="variable">byteBuffer</span> <span class="operator">=</span> ByteBuffer.wrap(str.getBytes());</span><br><span class="line">        <span class="comment">// 将字节缓冲写入到通道</span></span><br><span class="line">        channel.write(byteBuffer);</span><br><span class="line">        <span class="comment">// 关闭输出流</span></span><br><span class="line">        outputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2）读取指定文件">2）读取指定文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.FileChannel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChannelTest02</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;E:\\repository\\test.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 获取文件输入流</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">        <span class="comment">// 通过输入流获取通道</span></span><br><span class="line">        <span class="type">FileChannel</span> <span class="variable">channel</span> <span class="operator">=</span> inputStream.getChannel();</span><br><span class="line">        <span class="comment">// 创建字节缓冲</span></span><br><span class="line">        <span class="type">ByteBuffer</span> <span class="variable">byteBuffer</span> <span class="operator">=</span> ByteBuffer.allocate((<span class="type">int</span>) file.length());</span><br><span class="line">        <span class="comment">// 将通道中的数据读取到字节缓冲</span></span><br><span class="line">        channel.read(byteBuffer);</span><br><span class="line">        <span class="comment">// 查看数据</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(byteBuffer.array()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220701220555.png" alt="image-20220630235736421" /></p><h3 id="3）拷贝文件">3）拷贝文件</h3><p>拷贝文件，也就是<b>使用同一个Buffer完成读写</b>，首先我们先准备好一个文件，我们重新创建一个文件<code>hello.txt</code>，如下</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">你好，半月无霜！</span><br><span class="line">1、飞流直下三千尺，不及汪伦送我情。</span><br><span class="line">2、醒时同交欢，儿女忽成行。</span><br><span class="line">3、路漫漫其修远兮，壮士一去兮不复返！</span><br><span class="line">4、后宫佳丽三千人，铁杵磨成绣花针。</span><br><span class="line">5、问世间情为何物，两岸猿声啼不住。</span><br></pre></td></tr></table></figure><p>开始拷贝啦</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.FileChannel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChannelTest03</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 获取文件输入流</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;E:\\repository\\hello.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 通过输入流获取通道</span></span><br><span class="line">        <span class="type">FileChannel</span> <span class="variable">channel01</span> <span class="operator">=</span> inputStream.getChannel();</span><br><span class="line">        <span class="comment">// 获取文件输出流</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;E:\\repository\\hello_copy.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 通过输出流获取通道</span></span><br><span class="line">        <span class="type">FileChannel</span> <span class="variable">channel02</span> <span class="operator">=</span> outputStream.getChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建字节缓冲，故意设置小一点，可以多次进入循环，大家可以DEBUG感受一下是如何运行的</span></span><br><span class="line">        <span class="type">ByteBuffer</span> <span class="variable">byteBuffer</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 循环对文件进行读取，读取后进行写入</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="comment">// 清空缓冲，清空上次循环的数据</span></span><br><span class="line">            byteBuffer.clear();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 读取到缓冲</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">read</span> <span class="operator">=</span> channel01.read(byteBuffer);</span><br><span class="line">            <span class="comment">// -1代表读取结束，退出循环</span></span><br><span class="line">            <span class="keyword">if</span> (read == -<span class="number">1</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 反转缓冲</span></span><br><span class="line">            byteBuffer.flip();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 写入通道</span></span><br><span class="line">            channel02.write(byteBuffer);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭流</span></span><br><span class="line">        inputStream.close();</span><br><span class="line">        outputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4）快速拷贝文件">4）快速拷贝文件</h3><p>拷贝文件，与上面不同的是，上面是自己写缓冲进行读写，这一次直接使用<code>channel</code>的<code>api</code>进行拷贝，方便快捷。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.FileChannel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChannelTest04</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 获取文件输入流</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;E:\\repository\\hello.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 通过输入流获取通道</span></span><br><span class="line">        <span class="type">FileChannel</span> <span class="variable">channel01</span> <span class="operator">=</span> inputStream.getChannel();</span><br><span class="line">        <span class="comment">// 获取文件输出流</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;E:\\repository\\hello_copy.txt&quot;</span>);</span><br><span class="line">        <span class="comment">// 通过输出流获取通道</span></span><br><span class="line">        <span class="type">FileChannel</span> <span class="variable">channel02</span> <span class="operator">=</span> outputStream.getChannel();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 转移复制通道</span></span><br><span class="line">        channel01.transferTo(<span class="number">0</span>, channel01.size(), channel02);</span><br><span class="line">        <span class="comment">// 或者可以这样写</span></span><br><span class="line"><span class="comment">//        channel02.transferFrom(channel01, 0, channel01.size());</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 关闭流</span></span><br><span class="line">        inputStream.close();</span><br><span class="line">        outputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、最后">四、最后</h2><p><code>NIO</code>在上面的入门示例中，完全没有展现出<code>NIO</code>的同步非阻塞的特点与优势，后续会开单章补上。</p><p>先简简单单入个门吧，最主要的<code>NIO</code>就是缓冲和通道。</p><p>我是半月，祝你幸福！！！</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jdk </tag>
            
            <tag> 网络通信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库的三大范式</title>
      <link href="/archive/e7b99fed/"/>
      <url>/archive/e7b99fed/</url>
      
        <content type="html"><![CDATA[<h1>数据库的三大范式</h1><h2 id="一、介绍">一、介绍</h2><p>没有规矩，不成方圆。这句话在数据库的规范中同样适用，所以就有了这几项规定，<b>数据库的三大范式</b>。</p><p>我相信很多人都听过三大范式，面试题中也经常会问到，<mark>什么是数据库三大范式</mark>，这太常见了。</p><p>以前我只是机械式的回复面试官，但以后不会，不仅要学会说概念说规范，还能从实际出发，要不要严格遵守三大范式。</p><h2 id="二、概念">二、概念</h2><h3 id="1）第一范式">1）第一范式</h3><p><b>概念</b>：<mark>每一个列都是不可再分的列</mark></p><p>例如下面这张表，由于<code>region</code>字段可以再细分为省份<code>province</code>和城市<code>city</code>，所以此表将不满足第一范式</p><table><thead><tr><th>name</th><th>sex</th><th>region</th></tr></thead><tbody><tr><td>半月无霜</td><td>男</td><td>广东省广州市</td></tr></tbody></table><p>将<code>region</code>字段拆分后，满足了第一范式</p><table><thead><tr><th>name</th><th>sex</th><th>province</th><th>city</th></tr></thead><tbody><tr><td>半月无霜</td><td>男</td><td>广东省</td><td>广州市</td></tr></tbody></table><h3 id="2）第二范式">2）第二范式</h3><p>概念：<mark>在满足第一范式后，消除非主属性对主属性的部分函数依赖</mark></p><p>先看看这张订单表，<code>订单编号</code>、<code>商品ID</code>、<code>用户ID</code>作为联合主键</p><p>每一个字段本身都不可再分，满足第一范式。</p><p>但其中有个字段<code>用户名称</code>，它依赖于<code>用户ID</code>，所以此表并不满足第二范式</p><table><thead><tr><th>订单编号</th><th>商品ID</th><th>用户ID</th><th>数量</th><th>金额</th><th>用户名称</th></tr></thead><tbody><tr><td>1001</td><td>1</td><td>1</td><td>1</td><td>9.9</td><td>半月无霜</td></tr><tr><td>1002</td><td>1</td><td>2</td><td>1</td><td>9.9</td><td>阿超</td></tr></tbody></table><p>在修改后，将变成两张表，分别为订单表和用户表</p><table><thead><tr><th>订单编号</th><th>商品ID</th><th>用户ID</th><th>数量</th><th>金额</th></tr></thead><tbody><tr><td>1001</td><td>1</td><td>1</td><td>1</td><td>9.9</td></tr><tr><td>1002</td><td>1</td><td>2</td><td>1</td><td>9.9</td></tr></tbody></table><table><thead><tr><th>用户ID</th><th>用户名称</th></tr></thead><tbody><tr><td>1</td><td>半月无霜</td></tr><tr><td>2</td><td>阿超</td></tr></tbody></table><blockquote><p>什么是部分函数依赖？</p><p>对于数据库主键而言，其他的字段需要完全依赖于主键，而不能依赖主键中的部分。</p><p>上面这张表而言，正式因为有<code>用户名称</code>依赖于主键中的其中一个<code>用户ID</code>，所以不满足第二范式</p></blockquote><h3 id="3）第三范式">3）第三范式</h3><p>概念：<mark>在第二范式的基础上，进一步消除非主属性对主属性的传递函数依赖</mark></p><p>先来看这样一张订单表，<code>订单ID</code>是主键字段</p><table><thead><tr><th>订单ID</th><th>订单编号</th><th>商品ID</th><th>商品名称</th><th>用户ID</th><th>数量</th><th>金额</th></tr></thead><tbody><tr><td>1</td><td>1001</td><td>1</td><td>java入门到入土</td><td>1</td><td>1</td><td>9.9</td></tr></tbody></table><p>由于，<code>商品ID</code>依赖于<code>订单ID</code>，而<code>商品名称</code>又依赖于<code>订单ID</code>，所以造成了间接依赖，也就是传递函数依赖。</p><p>修改成以下两张表，消除他们的依赖关系，将满足第三范式</p><table><thead><tr><th>订单ID</th><th>订单编号</th><th>商品ID</th><th>用户ID</th><th>数量</th><th>金额</th></tr></thead><tbody><tr><td>1</td><td>1001</td><td>1</td><td>1</td><td>1</td><td>9.9</td></tr></tbody></table><table><thead><tr><th>商品ID</th><th>商品名称</th></tr></thead><tbody><tr><td>1</td><td>java入门到入土</td></tr></tbody></table><h2 id="三、最后">三、最后</h2><p>在项目开发中，一定要严格遵循三范式的原则设计库表结构吗？</p><p>这个肯定不是，如果完全按照三范式进行设计，那么数据查询就一定需要大量的表关联，这样就会造成查询性能上的问题。</p><p>所以，冗余一部分常用的查询字段，避免表关联，这对我们的项目最有帮助。</p><p>我是半月，祝你幸福！！！</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot整合socket通信</title>
      <link href="/archive/8d7fe8a2/"/>
      <url>/archive/8d7fe8a2/</url>
      
        <content type="html"><![CDATA[<h1>SpringBoot整合socket通信</h1><h2 id="一、介绍">一、介绍</h2><p>很多人都不太理解<code>socket</code>通信指的是什么，简单来讲，它是一个完成两个应用程序之间的数据传输的东西。</p><p><code>socket</code>是对网络中不同主机上的应用进程之间进行双向通信的端点的抽象，一个<code>socket</code>就是网络上进程通信的一端，提供了应用层进程利用网络协议交换数据的机制。从所处的地位来讲，<code>socket</code>上联应用进程，下联网络协议栈，是应用程序通过网络协议进行通信的接口，<mark>是应用程序与网络协议栈进行交互的接口</mark>。</p><p>本次使用<code>Java</code>语言去实现<code>socket</code>通信，用的<code>SpringBoot</code>框架，当然直接使用<code>main</code>方法启用也是没有问题的。</p><h2 id="二、实现">二、实现</h2><h3 id="1）服务端">1）服务端</h3><p>先设置一下需要用到的配置，主要就是这个端口号，我觉得放配置文件中会比较好</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">socket-port:</span></span><br><span class="line">  <span class="attr">testSocket:</span> <span class="number">2333</span></span><br></pre></td></tr></table></figure><p><code>socket</code>服务端启动类</p><p>此处使用到了<code>bean</code>的初始化，如果不熟悉的话，使用静态代码块也是一样的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test.socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.PostConstruct;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.LinkedBlockingQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ThreadPoolExecutor;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component(&quot;testSocket&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestSocketStart</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;socket-port.testSocket&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer port;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">ServerSocket</span> <span class="variable">testSocket</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ThreadPoolExecutor</span> <span class="variable">testSocketThreadPool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">15</span>, <span class="number">15</span>,</span><br><span class="line">            <span class="number">10L</span>, TimeUnit.SECONDS, <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;&gt;());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                testSocket = <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(port);</span><br><span class="line">                log.info(<span class="string">&quot;socket服务端开启&quot;</span>);</span><br><span class="line">                <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">                    <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> testSocket.accept();</span><br><span class="line">                    testSocketThreadPool.execute(<span class="keyword">new</span> <span class="title class_">TestSocketService</span>(socket));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;socket服务启动异常&quot;</span>);</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;testSocket&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体<code>socket</code>服务类，此类用来处理业务消息，同时这个一个多线程类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test.socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.json.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.test.dto.ResultData;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.SneakyThrows;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestSocketService</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Socket socket;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 输入流接收数据</span></span><br><span class="line">            ois = <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(socket.getInputStream());</span><br><span class="line">            <span class="comment">// 输出流发送数据</span></span><br><span class="line">            oos = <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(socket.getOutputStream());</span><br><span class="line"></span><br><span class="line">            <span class="type">JSONObject</span> <span class="variable">jsonObject</span> <span class="operator">=</span> (JSONObject) ois.readObject();</span><br><span class="line">            log.info(<span class="string">&quot;模拟处理业务：&#123;&#125;&quot;</span>, jsonObject);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 输出流发送返回参数</span></span><br><span class="line">            <span class="type">JSONObject</span> <span class="variable">resultJson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>(ResultData.success());</span><br><span class="line">            oos.writeUTF(resultJson.toString());</span><br><span class="line">            oos.flush();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;接收数据异常socket关闭&quot;</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 关闭流</span></span><br><span class="line">            oos.close();</span><br><span class="line">            ois.close();</span><br><span class="line">            socket.close();</span><br><span class="line">            log.info(<span class="string">&quot;关闭流成功&quot;</span> + System.lineSeparator());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务端编写完毕，剩下就是在客户端了，我们该如何调用？</p><h3 id="2）客户端">2）客户端</h3><p>客户端这边的类，实现了一个<code>Callable</code>接口，使其变成一个有返回值的多线程类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.json.JSONObject;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</span><br><span class="line"></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestSocketClientService</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;String&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> JSONObject paramJson;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            socket = <span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">2333</span>);</span><br><span class="line">            <span class="comment">// 输出流写数据</span></span><br><span class="line">            oos = <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(socket.getOutputStream());</span><br><span class="line">            <span class="comment">// 输入流读数据</span></span><br><span class="line">            ois = <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(socket.getInputStream());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 输出流给服务端发送数据</span></span><br><span class="line">            oos.writeObject(paramJson);</span><br><span class="line">            oos.flush();</span><br><span class="line">            <span class="comment">// 输入流接收服务端返回的数据</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> ois.readUTF();</span><br><span class="line">            <span class="keyword">return</span> message;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            ois.close();</span><br><span class="line">            oos.close();</span><br><span class="line">            socket.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，此处写的比较简陋，注意<mark>客户端</mark>和<mark>服务端</mark>发送、读取信息时需要相同的编码。</p><h3 id="3）测试">3）测试</h3><p>服务端，客户端都有了，我们该如何发起通信？</p><p>首先，我们先启用<code>SpringBoot</code>服务端，启动完成后再对客户端进行使用</p><p>如下，我们只需要创建线程，把<code>paramJson</code>传入，启用这个线程，就能够发送数据了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.json.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.test.dto.UserDTO;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SomethingTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException, ExecutionException &#123;</span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">service</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="type">JSONObject</span> <span class="variable">paramJson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>(<span class="keyword">new</span> <span class="title class_">UserDTO</span>(<span class="string">&quot;半月无霜&quot;</span>, <span class="string">&quot;男&quot;</span>, <span class="number">18</span>+i));</span><br><span class="line">            Future&lt;String&gt; future = service.submit(<span class="keyword">new</span> <span class="title class_">TestSocketClientService</span>(paramJson));</span><br><span class="line">            log.info(<span class="string">&quot;服务端返回的参数：&#123;&#125;&quot;</span>, future.get());</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        service.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220611201539.png" alt="image-20220611201538438" /></p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220611201508.png" alt="image-20220611201504359" /></p><h2 id="三、最后">三、最后</h2><p>我知道，这一次挺水的，我自己都没有搞明白<code>socket</code>通信到底是个啥！！！</p><p>先这样记录一下吧，后续要去看网络通信的书了，沉淀是对自己最好的投资。</p><p>我是半月，祝你幸福！！！</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络通信 </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot整合MyBatis多数据源</title>
      <link href="/archive/b7343818/"/>
      <url>/archive/b7343818/</url>
      
        <content type="html"><![CDATA[<h1>SpringBoot整合MyBatis多数据源</h1><h2 id="一、介绍">一、介绍</h2><p>在平常的项目中，我们有连接数据库的需求。一般都是一个项目一个数据库，但也有例外需要连接多个数据库的。</p><p>那么该如何配置，可以达到多数据源的需求呢。</p><p>本次为<code>SpringBoot</code>与<code>MyBatis</code>的整合，其实掌握了需要配置什么，也很容易进行复刻。</p><h2 id="二、配置">二、配置</h2><h3 id="1）数据库准备">1）数据库准备</h3><p>首先，我们先准备三个数据库吧，这边都使用<code>MySQL</code>了，实际可以是不同的数据库</p><ul class="lvl-0"><li class="lvl-2"><p><code>test</code>数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database `test` <span class="type">character</span> <span class="keyword">set</span> utf8mb4 <span class="keyword">collate</span> utf8mb4_general_ci;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `sys_user` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `username` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户名&#x27;</span>,</span><br><span class="line">  `password` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">3</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `sys_user`(`id`, `username`, `password`) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;banmoon&#x27;</span>, <span class="string">&#x27;1234&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `sys_user`(`id`, `username`, `password`) <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;user&#x27;</span>, <span class="string">&#x27;1234&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li class="lvl-2"><p><code>test01</code>数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database `test01` <span class="type">character</span> <span class="keyword">set</span> utf8mb4 <span class="keyword">collate</span> utf8mb4_general_ci;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `sys_user` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `username` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户名&#x27;</span>,</span><br><span class="line">  `password` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">3</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `sys_user`(`id`, `username`, `password`) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;test01&#x27;</span>, <span class="string">&#x27;1234&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `sys_user`(`id`, `username`, `password`) <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;test01User&#x27;</span>, <span class="string">&#x27;1234&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li class="lvl-2"><p><code>test02</code>数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database `test02` <span class="type">character</span> <span class="keyword">set</span> utf8mb4 <span class="keyword">collate</span> utf8mb4_general_ci;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `sys_user` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `username` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户名&#x27;</span>,</span><br><span class="line">  `password` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">3</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `sys_user`(`id`, `username`, `password`) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;test02&#x27;</span>, <span class="string">&#x27;1234&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `sys_user`(`id`, `username`, `password`) <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;test02User&#x27;</span>, <span class="string">&#x27;1234&#x27;</span>);</span><br></pre></td></tr></table></figure></li></ul><h3 id="2）配置">2）配置</h3><p>首先，<code>maven</code>依赖包不能忘记</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后，我们需要在配置文件上配置上三个数据库的配置信息。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/test?serverTimezone=Asia/Shanghai&amp;allowMultiQueries=true</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">1234</span></span><br><span class="line"></span><br><span class="line"><span class="attr">dynamic-datasource:</span></span><br><span class="line">  <span class="attr">test01:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/test01?serverTimezone=Asia/Shanghai&amp;allowMultiQueries=true</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">1234</span></span><br><span class="line">  <span class="attr">test02:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/test02?serverTimezone=Asia/Shanghai&amp;allowMultiQueries=true</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">1234</span></span><br></pre></td></tr></table></figure><p>怎么配置不重要，清爽就好，重点在于读取。</p><p>我们需要读取上面配置文件的信息，配置生成<code>SqlSessionTemplate</code>、<code>SqlSessionFactory</code>、<code>PlatformTransactionManager</code>，如此来达到多数据源的功能</p><p><code>test</code>数据库连接的相关配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test.config.datasource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.SqlSessionFactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.SqlSessionTemplate;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.jdbc.DataSourceProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.jdbc.DataSourceBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Primary;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.support.PathMatchingResourcePatternResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.datasource.DataSourceTransactionManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.PlatformTransactionManager;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan(basePackages = &#123;&quot;com.banmoon.test.persistent.master.mapper&quot;&#125;,</span></span><br><span class="line"><span class="meta">        sqlSessionFactoryRef = &quot;masterSqlSessionFactory&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MasterDatasourceConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 寻找配置文件中的数据源配置信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="meta">@Bean(&quot;masterDatasourceProperties&quot;)</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties(prefix = &quot;spring.datasource&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> DataSourceProperties <span class="title function_">dataSourceProperties</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DataSourceProperties</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构建数据源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> properties</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="meta">@Bean(&quot;masterDatasource&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">(<span class="meta">@Qualifier(&quot;masterDatasourceProperties&quot;)</span> DataSourceProperties properties)</span>&#123;</span><br><span class="line">        <span class="type">DataSource</span> <span class="variable">build</span> <span class="operator">=</span> DataSourceBuilder.create()</span><br><span class="line">                .driverClassName(properties.getDriverClassName())</span><br><span class="line">                .url(properties.getUrl())</span><br><span class="line">                .username(properties.getUsername())</span><br><span class="line">                .password(properties.getPassword())</span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">return</span> build;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构建事务管理器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dataSource</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="meta">@Bean(name = &quot;masterTransactionManager&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> PlatformTransactionManager <span class="title function_">dataSourceTransactionManager</span><span class="params">(<span class="meta">@Qualifier(&quot;masterDatasource&quot;)</span> DataSource dataSource)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DataSourceTransactionManager</span>(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构建sqlSession工厂</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dataSource</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean(name = &quot;masterSqlSessionFactory&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> SqlSessionFactory <span class="title function_">sqlSessionFactory</span><span class="params">(<span class="meta">@Qualifier(&quot;masterDatasource&quot;)</span> DataSource dataSource)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">SqlSessionFactoryBean</span> <span class="variable">sessionFactoryBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBean</span>();</span><br><span class="line">        sessionFactoryBean.setDataSource(dataSource);</span><br><span class="line">        sessionFactoryBean.setTypeHandlersPackage(<span class="string">&quot;com.banmoon.test.persistent.master.entity&quot;</span>);</span><br><span class="line">        sessionFactoryBean.setMapperLocations(<span class="keyword">new</span> <span class="title class_">PathMatchingResourcePatternResolver</span>().getResources(<span class="string">&quot;classpath:/mapper/master/*.xml&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> sessionFactoryBean.getObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构建sqlSession</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sqlSessionFactory</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="meta">@Bean(name = &quot;masterSqlSessionTemplate&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> SqlSessionTemplate <span class="title function_">sqlSessionTemplate</span><span class="params">(<span class="meta">@Qualifier(&quot;masterSqlSessionFactory&quot;)</span> SqlSessionFactory sqlSessionFactory)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SqlSessionTemplate</span>(sqlSessionFactory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>test01</code>数据库连接的相关配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test.config.datasource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.SqlSessionFactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.SqlSessionTemplate;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.jdbc.DataSourceProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.jdbc.DataSourceBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Primary;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.support.PathMatchingResourcePatternResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.datasource.DataSourceTransactionManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.PlatformTransactionManager;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan(basePackages = &#123;&quot;com.banmoon.test.persistent.test01.mapper&quot;&#125;,</span></span><br><span class="line"><span class="meta">        sqlSessionFactoryRef = &quot;test01SqlSessionFactory&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test01DatasourceConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(&quot;test01DatasourceProperties&quot;)</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties(prefix = &quot;dynamic-datasource.test01&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> DataSourceProperties <span class="title function_">dataSourceProperties</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DataSourceProperties</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="meta">@Bean(&quot;test01Datasource&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">(<span class="meta">@Qualifier(&quot;test01DatasourceProperties&quot;)</span> DataSourceProperties properties)</span>&#123;</span><br><span class="line">        <span class="type">DataSource</span> <span class="variable">build</span> <span class="operator">=</span> DataSourceBuilder.create()</span><br><span class="line">                .driverClassName(properties.getDriverClassName())</span><br><span class="line">                .url(properties.getUrl())</span><br><span class="line">                .username(properties.getUsername())</span><br><span class="line">                .password(properties.getPassword())</span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">return</span> build;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="meta">@Bean(name = &quot;test01TransactionManager&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> PlatformTransactionManager <span class="title function_">dataSourceTransactionManager</span><span class="params">(<span class="meta">@Qualifier(&quot;test01Datasource&quot;)</span> DataSource dataSource)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DataSourceTransactionManager</span>(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(name = &quot;test01SqlSessionFactory&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> SqlSessionFactory <span class="title function_">sqlSessionFactory</span><span class="params">(<span class="meta">@Qualifier(&quot;test01Datasource&quot;)</span> DataSource dataSource)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">SqlSessionFactoryBean</span> <span class="variable">sessionFactoryBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBean</span>();</span><br><span class="line">        sessionFactoryBean.setDataSource(dataSource);</span><br><span class="line">        sessionFactoryBean.setTypeHandlersPackage(<span class="string">&quot;com.banmoon.test.persistent.test01.entity&quot;</span>);</span><br><span class="line">        sessionFactoryBean.setMapperLocations(<span class="keyword">new</span> <span class="title class_">PathMatchingResourcePatternResolver</span>().getResources(<span class="string">&quot;classpath:/mapper/test01/*.xml&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> sessionFactoryBean.getObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="meta">@Bean(name = &quot;test01SqlSessionTemplate&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> SqlSessionTemplate <span class="title function_">sqlSessionTemplate</span><span class="params">(<span class="meta">@Qualifier(&quot;test01SqlSessionFactory&quot;)</span> SqlSessionFactory sqlSessionFactory)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SqlSessionTemplate</span>(sqlSessionFactory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>test02</code>数据库连接的相关配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test.config.datasource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.SqlSessionFactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.SqlSessionTemplate;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.jdbc.DataSourceProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.jdbc.DataSourceBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Primary;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.support.PathMatchingResourcePatternResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.datasource.DataSourceTransactionManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.PlatformTransactionManager;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan(basePackages = &#123;&quot;com.banmoon.test.persistent.test02.mapper&quot;&#125;,</span></span><br><span class="line"><span class="meta">        sqlSessionFactoryRef = &quot;test02SqlSessionFactory&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test02DatasourceConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(&quot;test02DatasourceProperties&quot;)</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties(prefix = &quot;dynamic-datasource.test02&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> DataSourceProperties <span class="title function_">dataSourceProperties</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DataSourceProperties</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="meta">@Bean(&quot;test02Datasource&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">(<span class="meta">@Qualifier(&quot;test02DatasourceProperties&quot;)</span> DataSourceProperties properties)</span>&#123;</span><br><span class="line">        <span class="type">DataSource</span> <span class="variable">build</span> <span class="operator">=</span> DataSourceBuilder.create()</span><br><span class="line">                .driverClassName(properties.getDriverClassName())</span><br><span class="line">                .url(properties.getUrl())</span><br><span class="line">                .username(properties.getUsername())</span><br><span class="line">                .password(properties.getPassword())</span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">return</span> build;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="meta">@Bean(name = &quot;test02TransactionManager&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> PlatformTransactionManager <span class="title function_">dataSourceTransactionManager</span><span class="params">(<span class="meta">@Qualifier(&quot;test02Datasource&quot;)</span> DataSource dataSource)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DataSourceTransactionManager</span>(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(name = &quot;test02SqlSessionFactory&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> SqlSessionFactory <span class="title function_">sqlSessionFactory</span><span class="params">(<span class="meta">@Qualifier(&quot;test02Datasource&quot;)</span> DataSource dataSource)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">SqlSessionFactoryBean</span> <span class="variable">sessionFactoryBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBean</span>();</span><br><span class="line">        sessionFactoryBean.setDataSource(dataSource);</span><br><span class="line">        sessionFactoryBean.setTypeHandlersPackage(<span class="string">&quot;com.banmoon.test.persistent.test02.entity&quot;</span>);</span><br><span class="line">        sessionFactoryBean.setMapperLocations(<span class="keyword">new</span> <span class="title class_">PathMatchingResourcePatternResolver</span>().getResources(<span class="string">&quot;classpath:/mapper/test02/*.xml&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> sessionFactoryBean.getObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="meta">@Bean(name = &quot;test02SqlSessionTemplate&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> SqlSessionTemplate <span class="title function_">sqlSessionTemplate</span><span class="params">(<span class="meta">@Qualifier(&quot;test02SqlSessionFactory&quot;)</span> SqlSessionFactory sqlSessionFactory)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SqlSessionTemplate</span>(sqlSessionFactory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr /><p>还有一个需要注意，我们需要排除掉<code>MybatisAutoConfiguration</code>类，避免它自动进行配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication(exclude = MybatisAutoConfiguration.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(TestApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置完成，那么该如何去写<code>Entity</code>和<code>Mapper</code>呢？</p><p>请注意，在我们构建<code>sqlSessionFactory</code>的时候，就已经指定了它<code>Entity</code>的包路径和<code>Mapper</code>的包路径。</p><p>所以我只需要在指定的包路径在创建<code>Entity</code>和<code>Mapper</code>就可以了。</p><h3 id="3）编写实体和Mapper">3）编写实体和Mapper</h3><p>如下进行编写<code>User.java</code>、<code>UserMapper.java</code>、<code>UserMapper.xml</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test.persistent.master.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.EqualsAndHashCode;</span><br><span class="line"><span class="keyword">import</span> lombok.experimental.Accessors;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = false)</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 密码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test.persistent.master.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.test.persistent.master.entity.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    List&lt;User&gt; <span class="title function_">selectList</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.banmoon.test.persistent.master.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 通用查询映射结果 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;BaseResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.banmoon.test.persistent.master.entity.User&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;username&quot;</span> <span class="attr">property</span>=<span class="string">&quot;username&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;password&quot;</span> <span class="attr">property</span>=<span class="string">&quot;password&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.banmoon.test.persistent.master.entity.User&quot;</span>&gt;</span></span><br><span class="line">        select * from sys_user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>由于演示的三个数据库，里面建的表结构都是一样的，这里就不再贴代码了，贴一个包路径结构</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220606214420.png" alt="image-20220606214416229" /></p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220606214445.png" alt="image-20220606214444285" /></p><h3 id="4）测试">4）测试</h3><p>以前我还很喜欢写<code>Controller</code>去进行测试，现在直接单元测试，直接进行调试了，简单快捷</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.test.persistent.master.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.test.persistent.master.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.test.persistent.test01.entity.Test01User;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.test.persistent.test01.mapper.Test01UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.test.persistent.test02.entity.Test02User;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.test.persistent.test02.mapper.Test02UserMapper;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ServiceTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Test01UserMapper test01UserMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Test02UserMapper test02UserMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">insertTest</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;User&gt; list = userMapper.selectList();</span><br><span class="line">        list.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;============&quot;</span>);</span><br><span class="line">        List&lt;Test01User&gt; test01UserList = test01UserMapper.selectList();</span><br><span class="line">        test01UserList.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;============&quot;</span>);</span><br><span class="line">        List&lt;Test02User&gt; test02UserList = test02UserMapper.selectList();</span><br><span class="line">        test02UserList.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220606220339.png" alt="image-20220606220338657" /></p><h2 id="三、MyBatis-Plus多数据源">三、MyBatis-Plus多数据源</h2><h3 id="1）自己配置">1）自己配置</h3><p>首先就是先写入<code>maven</code>依赖，这一点去<a href="https://baomidou.com/">官网</a>可以查看到</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><hr /><p>至于多数据源的配置，其实和上面差不多的，主要需要将<code>SqlSessionFactory</code>改成<code>MyBatis-plus</code>中的实现就可以了，如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test.config.datasource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.SqlSessionTemplate;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.jdbc.DataSourceProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.jdbc.DataSourceBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Primary;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.support.PathMatchingResourcePatternResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.datasource.DataSourceTransactionManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.PlatformTransactionManager;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan(basePackages = &#123;&quot;com.banmoon.test.persistent.master.mapper&quot;&#125;,</span></span><br><span class="line"><span class="meta">        sqlSessionFactoryRef = &quot;masterSqlSessionFactory&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MasterDatasourceConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 寻找配置文件中的数据源配置信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="meta">@Bean(&quot;masterDatasourceProperties&quot;)</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties(prefix = &quot;spring.datasource&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> DataSourceProperties <span class="title function_">dataSourceProperties</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DataSourceProperties</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构建数据源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> properties</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="meta">@Bean(&quot;masterDatasource&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">(<span class="meta">@Qualifier(&quot;masterDatasourceProperties&quot;)</span> DataSourceProperties properties)</span>&#123;</span><br><span class="line">        <span class="type">DataSource</span> <span class="variable">build</span> <span class="operator">=</span> DataSourceBuilder.create()</span><br><span class="line">                .driverClassName(properties.getDriverClassName())</span><br><span class="line">                .url(properties.getUrl())</span><br><span class="line">                .username(properties.getUsername())</span><br><span class="line">                .password(properties.getPassword())</span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">return</span> build;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构建事务管理器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dataSource</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="meta">@Bean(name = &quot;masterTransactionManager&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> PlatformTransactionManager <span class="title function_">dataSourceTransactionManager</span><span class="params">(<span class="meta">@Qualifier(&quot;masterDatasource&quot;)</span> DataSource dataSource)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DataSourceTransactionManager</span>(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构建sqlSession工厂</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dataSource</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean(name = &quot;masterSqlSessionFactory&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> SqlSessionFactory <span class="title function_">sqlSessionFactory</span><span class="params">(<span class="meta">@Qualifier(&quot;masterDatasource&quot;)</span> DataSource dataSource)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 修改为mp的SqlSessionFactoryBean</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">MybatisSqlSessionFactoryBean</span> <span class="variable">sessionFactoryBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisSqlSessionFactoryBean</span>();</span><br><span class="line">        sessionFactoryBean.setDataSource(dataSource);</span><br><span class="line">        sessionFactoryBean.setTypeHandlersPackage(<span class="string">&quot;com.banmoon.test.persistent.master.entity&quot;</span>);</span><br><span class="line">        sessionFactoryBean.setMapperLocations(<span class="keyword">new</span> <span class="title class_">PathMatchingResourcePatternResolver</span>().getResources(<span class="string">&quot;classpath:/mapper/master/*.xml&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> sessionFactoryBean.getObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构建sqlSession</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sqlSessionFactory</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="meta">@Bean(name = &quot;masterSqlSessionTemplate&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> SqlSessionTemplate <span class="title function_">sqlSessionTemplate</span><span class="params">(<span class="meta">@Qualifier(&quot;masterSqlSessionFactory&quot;)</span> SqlSessionFactory sqlSessionFactory)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SqlSessionTemplate</span>(sqlSessionFactory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意一下，由于只需要引入<code>MyBatis-plus</code>，所以启动类上的排除的类，已经可以不需要了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(TestApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其他都差不多，是由代码生成器生成的<code>Entity</code>和<code>Mapper</code>，这里就不贴了，直接翻官网文档吧，里面很详细</p><p>上代码测试一下吧，其实和之前差不多，只是使用到的是<code>MyBatis-plus</code>中的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.test.persistent.master.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.test.persistent.master.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.test.persistent.test01.entity.Test01User;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.test.persistent.test01.mapper.Test01UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.test.persistent.test02.entity.Test02User;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.test.persistent.test02.mapper.Test02UserMapper;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ServiceTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Test01UserMapper test01UserMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Test02UserMapper test02UserMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">insertTest</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;User&gt; list = userMapper.selectList(<span class="literal">null</span>);</span><br><span class="line">        list.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;============&quot;</span>);</span><br><span class="line">        List&lt;Test01User&gt; test01UserList = test01UserMapper.selectList(<span class="literal">null</span>);</span><br><span class="line">        test01UserList.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;============&quot;</span>);</span><br><span class="line">        List&lt;Test02User&gt; test02UserList = test02UserMapper.selectList(<span class="literal">null</span>);</span><br><span class="line">        test02UserList.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220607095743.png" alt="image-20220607095738103" /></p><h3 id="2）官方插件">2）官方插件</h3><p>在MyBatis-Plus中，有一个多数据源启动器，它可以做到以下这些功能</p><ul class="lvl-0"><li class="lvl-2"><p>支持 <b>数据源分组</b> ，适用于多种场景 纯粹多库 读写分离 一主多从 混合模式。</p></li><li class="lvl-2"><p>支持数据库敏感配置信息 <b>加密</b>  ENC()。</p></li><li class="lvl-2"><p>支持每个数据库独立初始化表结构schema和数据库database。</p></li><li class="lvl-2"><p>支持无数据源启动，支持懒加载数据源（需要的时候再创建连接）。</p></li><li class="lvl-2"><p>支持 <b>自定义注解</b> ，需继承DS(3.2.0+)。</p></li><li class="lvl-2"><p>提供并简化对Druid，HikariCp，BeeCp,Dbcp2的快速集成。</p></li><li class="lvl-2"><p>提供对Mybatis-Plus，Quartz，ShardingJdbc，P6sy，Jndi等组件的集成方案。</p></li><li class="lvl-2"><p>提供 <b>自定义数据源来源</b> 方案（如全从数据库加载）。</p></li><li class="lvl-2"><p>提供项目启动后 <b>动态增加移除数据源</b> 方案。</p></li><li class="lvl-2"><p>提供Mybatis环境下的  <b>纯读写分离</b> 方案。</p></li><li class="lvl-2"><p>提供使用 <b>spel动态参数</b> 解析数据源方案。内置spel，session，header，支持自定义。</p></li><li class="lvl-2"><p>支持  <b>多层数据源嵌套切换</b> 。（ServiceA &gt;&gt;&gt;  ServiceB &gt;&gt;&gt; ServiceC）。</p></li><li class="lvl-2"><p>提供  **基于seata的分布式事务方案。</p></li><li class="lvl-2"><p>提供  <b>本地多数据源事务方案。</b></p></li></ul><p>具体还是看<a href="https://baomidou.com/pages/a61e1b/">官网文档</a>吧，已经写的十分详细了，建议使用！！！</p><h2 id="四、最后">四、最后</h2><p>虽然最近暂时没有此类的需求，但提前先记录测试一波，免得到时候手忙脚乱。</p><p>哦对，现在的确很少使用原生的<code>MyBatis</code>了，最近都是在使用<code>MyBatis-plus</code>。</p><p>这是一个好框架，十分好用，建议学习，直接使用。</p><p>我是半月，祝你幸福！！！</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot使用矩阵传参</title>
      <link href="/archive/ec8d2ea7/"/>
      <url>/archive/ec8d2ea7/</url>
      
        <content type="html"><![CDATA[<h1>SpringBoot使用矩阵传参</h1><h2 id="一、介绍">一、介绍</h2><p>在平时，我们在进行请求接口时，我们一个请求<code>url</code>的样子往往是下面这样子的</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080/user/get?name=半月&amp;age=18</span><br></pre></td></tr></table></figure><p>对于上面的请求<code>url</code>，我们只需要使用<code>@RequestParam</code>注解就可以将其获取，十分简单。</p><p>那么，对于下面的这个矩阵传参的<code>url</code>，我们该如何进行获取呢？</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080/user/get;name=半月;age=18</span><br><span class="line"></span><br><span class="line">http://localhost:8080/user/delete;id=11,12,13;status=1</span><br></pre></td></tr></table></figure><p>这时候，我们就该使用到<code>@MatrixVariable</code>这个注解了，具体使用如下。</p><h2 id="二、使用">二、使用</h2><h3 id="1）基本使用">1）基本使用</h3><p>在<code>springBoot</code>中，默认是去掉了<code>url</code>分号后的内容。如此一来，我们在使用矩阵传参时，需要对其进行开启。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.PathMatchConfigurer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.util.UrlPathHelper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyWebMvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configurePathMatch</span><span class="params">(PathMatchConfigurer configurer)</span> &#123;</span><br><span class="line">        <span class="type">UrlPathHelper</span> <span class="variable">urlPathHelper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UrlPathHelper</span>();</span><br><span class="line">        urlPathHelper.setRemoveSemicolonContent(<span class="literal">false</span>);<span class="comment">// 默认为true，这里设置为不移除分号后面的内容</span></span><br><span class="line">        configurer.setUrlPathHelper(urlPathHelper);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者可以这样写，效果都是一样的，熟悉<code>@bean</code>配置的大家都知道。推荐使用上面这种，简单明了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.PathMatchConfigurer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.util.UrlPathHelper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBeanConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> WebMvcConfigurer <span class="title function_">webMvcConfigurer</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">WebMvcConfigurer</span> <span class="variable">webMvcConfigurer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WebMvcConfigurer</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configurePathMatch</span><span class="params">(PathMatchConfigurer configurer)</span> &#123;</span><br><span class="line">                <span class="type">UrlPathHelper</span> <span class="variable">urlPathHelper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UrlPathHelper</span>();</span><br><span class="line">                urlPathHelper.setRemoveSemicolonContent(<span class="literal">false</span>);<span class="comment">// 默认为true，这里设置为不移除分号后面的内容</span></span><br><span class="line">                configurer.setUrlPathHelper(urlPathHelper);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> webMvcConfigurer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于下面这两个<code>url</code>请求，我们可以这样写接口</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080/user/get/get;name=半月;age=18</span><br><span class="line"></span><br><span class="line">http://localhost:8080/user/delete/delete;name=半月;age=18,19,20</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.test.dto.ResultData;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserMatrixVariableController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/get/&#123;path&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResultData <span class="title function_">get</span><span class="params">(<span class="meta">@MatrixVariable</span> String name,</span></span><br><span class="line"><span class="params">                          <span class="meta">@MatrixVariable</span> String age,</span></span><br><span class="line"><span class="params">                          <span class="meta">@PathVariable</span> String path)</span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;name&quot;</span>, name);</span><br><span class="line">        map.put(<span class="string">&quot;age&quot;</span>, age);</span><br><span class="line">        map.put(<span class="string">&quot;path&quot;</span>, path);</span><br><span class="line">        <span class="keyword">return</span> ResultData.success(map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请求查看结果</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220606144837.png" alt="image-20220606141224478" /></p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220606144833.png" alt="image-20220606141446357" /></p><h3 id="2）其他">2）其他</h3><p>另外一种请求<code>url</code>，看着很乱</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080/user/setUserPost/101;status=1/post/111;status=1</span><br></pre></td></tr></table></figure><p>接口是这样的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.test.dto.ResultData;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserMatrixVariableController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/setUserPost/&#123;userId&#125;/post/&#123;postId&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResultData <span class="title function_">setUserPost</span><span class="params">(<span class="meta">@PathVariable</span> Integer userId,</span></span><br><span class="line"><span class="params">                                  <span class="meta">@PathVariable</span> Integer postId,</span></span><br><span class="line"><span class="params">                                  <span class="meta">@MatrixVariable(value = &quot;status&quot;, pathVar = &quot;userId&quot;)</span> Integer userStatus,</span></span><br><span class="line"><span class="params">                                  <span class="meta">@MatrixVariable(value = &quot;status&quot;, pathVar = &quot;postId&quot;)</span> Integer postStatus)</span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;userId&quot;</span>, userId);</span><br><span class="line">        map.put(<span class="string">&quot;postId&quot;</span>, postId);</span><br><span class="line">        map.put(<span class="string">&quot;userStatus&quot;</span>, userStatus);</span><br><span class="line">        map.put(<span class="string">&quot;postStatus&quot;</span>, postStatus);</span><br><span class="line">        <span class="keyword">return</span> ResultData.success();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220606144810.png" alt="image-20220606144809442" /></p><h2 id="三、最后">三、最后</h2><p>在处理完矩阵传参后，我就知道这玩意有多么不受待见了，我也搞不懂会有什么样的业务场景去使用这种传参模式。</p><p>好吧，可以不用，但不能不知道。</p><p>我是半月，祝你幸福！！！</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java的函数式接口以及Lambda表达式</title>
      <link href="/archive/675ec0a7/"/>
      <url>/archive/675ec0a7/</url>
      
        <content type="html"><![CDATA[<h1>Java的函数式接口以及Lambda表达式</h1><h2 id="一、介绍">一、介绍</h2><p>在<code>java</code>中，大家肯定使用过<code>lambda</code>表达式吧，这是适用于函数式接口的一种便捷写法。</p><p>那么什么是函数式接口，简单点来说，<mark>一个接口中有且只有一个需要实现的方法，那么这个接口就是<b>函数式接口</b></mark>。</p><p>如果一个接口，你想定义为<b>函数式接口</b>，建议加上注解<code>@Functionionallnterface</code>，标注这个接口成为<b>函数式接口</b>，用来进行提示。</p><p>例如，多线程的<code>Runnable</code>接口就是一个<b>函数式接口</b>，如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.lang;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以，我们在使用多线程时，可以使用<code>lambda</code>表达式进行简化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SomethingTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 匿名内部类写法</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;匿名内部类写法&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// lambda表达式，小括号是入参，大括号是函数式接口中唯一方法的实现</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;lambda表达式写法&quot;</span>);</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 方法实现只有单行时，可以再简写，省略大括号</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; System.out.println(<span class="string">&quot;lambda表达式写法&quot;</span>)).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、常用的函数式接口">二、常用的函数式接口</h2><h3 id="1）Function-T-R">1）<code>Function&lt;T, R&gt;</code></h3><p>先看源码，发现里面居然有四个方法。又仔细一看，确实里面仅有一个<code>apply</code>方法需要实现，所以<code>Function</code>也是一个函数式接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.util.function;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Function</span>&lt;T, R&gt; &#123;</span><br><span class="line"></span><br><span class="line">    R <span class="title function_">apply</span><span class="params">(T t)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span> &lt;V&gt; Function&lt;V, R&gt; <span class="title function_">compose</span><span class="params">(Function&lt;? <span class="built_in">super</span> V, ? extends T&gt; before)</span> &#123;</span><br><span class="line">        Objects.requireNonNull(before);</span><br><span class="line">        <span class="keyword">return</span> (V v) -&gt; apply(before.apply(v));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span> &lt;V&gt; Function&lt;T, V&gt; <span class="title function_">andThen</span><span class="params">(Function&lt;? <span class="built_in">super</span> R, ? extends V&gt; after)</span> &#123;</span><br><span class="line">        Objects.requireNonNull(after);</span><br><span class="line">        <span class="keyword">return</span> (T t) -&gt; after.apply(apply(t));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &lt;T&gt; Function&lt;T, T&gt; <span class="title function_">identity</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> t -&gt; t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数式接口，接受有两个泛型，<b>一个作为入参，一个作为出参</b>。</p><p>我第一时间就想到了转换类型，来看这个，从<code>Integer</code>转换为<code>String</code>，且内部做了一定的处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Function;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SomethingTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;()&#123;&#123;</span><br><span class="line">            add(<span class="number">7</span>); add(<span class="number">5</span>); add(<span class="number">1</span>); add(<span class="number">2</span>);</span><br><span class="line">            add(<span class="number">8</span>); add(<span class="number">4</span>); add(<span class="number">3</span>); add(<span class="number">6</span>);</span><br><span class="line">            add(<span class="number">3</span>); add(<span class="number">6</span>); add(<span class="number">3</span>); add(<span class="number">6</span>);</span><br><span class="line">        &#125;&#125;;</span><br><span class="line"></span><br><span class="line">        Function&lt;Integer, String&gt; myFunction = <span class="keyword">new</span> <span class="title class_">Function</span>&lt;Integer, String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> String <span class="title function_">apply</span><span class="params">(Integer i)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;你好&quot;</span> + i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        List&lt;String&gt; stringList = list.stream().map(myFunction).collect(Collectors.toList());</span><br><span class="line">        System.out.println(stringList);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用lambda表达式</span></span><br><span class="line">        List&lt;String&gt; stringList1 = list.stream().map((i) -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;你好&quot;</span> + i;</span><br><span class="line">        &#125;).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 再简写，当参数仅有一个时，小括号可以省略</span></span><br><span class="line">        stringList1 = list.stream().map(i -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;你好&quot;</span> + i;</span><br><span class="line">        &#125;).collect(Collectors.toList());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 再简写，当实现的方法仅有一行语句时，大括号及return可以省略</span></span><br><span class="line">        stringList1 = list.stream().map(i -&gt; <span class="string">&quot;你好&quot;</span> + i).collect(Collectors.toList());</span><br><span class="line">        System.out.println(stringList1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220526160556.png" alt="image-20220526160554725" /></p><p>看下<code>stream</code>接口中的这个<code>map</code>方法，需要我们传入一个<code>Function</code>接口的实现类对象，使用<code>lambda</code>表达式轻松实现对函数式接口的实现类对象的构建</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.util.stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Stream</span>&lt;T&gt; <span class="keyword">extends</span> <span class="title class_">BaseStream</span>&lt;T, Stream&lt;T&gt;&gt; &#123;</span><br><span class="line">    </span><br><span class="line">    &lt;R&gt; Stream&lt;R&gt; <span class="title function_">map</span><span class="params">(Function&lt;? <span class="built_in">super</span> T, ? extends R&gt; mapper)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2）Predicate-T">2）<code>Predicate&lt;T&gt;</code></h3><p>先看源码，泛型只需要指定一个，需要实现的方法<b>一个入参，出参是<code>boolean</code></b>，作用于判断的一个函数式接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.util.function;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Predicate</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">test</span><span class="params">(T t)</span>;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">default</span> Predicate&lt;T&gt; <span class="title function_">and</span><span class="params">(Predicate&lt;? <span class="built_in">super</span> T&gt; other)</span> &#123;</span><br><span class="line">        Objects.requireNonNull(other);</span><br><span class="line">        <span class="keyword">return</span> (t) -&gt; test(t) &amp;&amp; other.test(t);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span> Predicate&lt;T&gt; <span class="title function_">negate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (t) -&gt; !test(t);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span> Predicate&lt;T&gt; <span class="title function_">or</span><span class="params">(Predicate&lt;? <span class="built_in">super</span> T&gt; other)</span> &#123;</span><br><span class="line">        Objects.requireNonNull(other);</span><br><span class="line">        <span class="keyword">return</span> (t) -&gt; test(t) || other.test(t);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &lt;T&gt; Predicate&lt;T&gt; <span class="title function_">isEqual</span><span class="params">(Object targetRef)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="literal">null</span> == targetRef)</span><br><span class="line">                ? Objects::isNull</span><br><span class="line">                : object -&gt; targetRef.equals(object);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来查看使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Predicate;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SomethingTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;()&#123;&#123;</span><br><span class="line">            add(<span class="number">7</span>); add(<span class="number">5</span>); add(<span class="number">1</span>); add(<span class="number">2</span>);</span><br><span class="line">            add(<span class="number">8</span>); add(<span class="number">4</span>); add(<span class="number">3</span>); add(<span class="number">6</span>);</span><br><span class="line">            add(<span class="number">3</span>); add(<span class="number">6</span>); add(<span class="number">3</span>); add(<span class="number">6</span>);</span><br><span class="line">        &#125;&#125;;</span><br><span class="line"></span><br><span class="line">        Predicate&lt;Integer&gt; myPredicate = <span class="keyword">new</span> <span class="title class_">Predicate</span>&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">test</span><span class="params">(Integer i)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> i&gt;<span class="number">5</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        List&lt;Integer&gt; filterList = list.stream().filter(myPredicate).collect(Collectors.toList());</span><br><span class="line">        System.out.println(filterList);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// lambda表达式简化</span></span><br><span class="line">        filterList = list.stream().filter(i -&gt; i &gt; <span class="number">5</span>).collect(Collectors.toList());</span><br><span class="line">        System.out.println(filterList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220526164201.png" alt="image-20220526164200162" /></p><p>看下<code>stream</code>接口中的这个<code>filter</code>方法，需要我们传入一个<code>Predicate</code>接口的实现类对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.util.stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Stream</span>&lt;T&gt; <span class="keyword">extends</span> <span class="title class_">BaseStream</span>&lt;T, Stream&lt;T&gt;&gt; &#123;</span><br><span class="line">    </span><br><span class="line">Stream&lt;T&gt; <span class="title function_">filter</span><span class="params">(Predicate&lt;? <span class="built_in">super</span> T&gt; predicate)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3）Consumer-T">3）<code>Consumer&lt;T&gt;</code></h3><p>看类名也能看出来，这是一个消费型的函数式接口，<b>有入参，但没有返回值</b></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.util.function;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Consumer</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(T t)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span> Consumer&lt;T&gt; <span class="title function_">andThen</span><span class="params">(Consumer&lt;? <span class="built_in">super</span> T&gt; after)</span> &#123;</span><br><span class="line">        Objects.requireNonNull(after);</span><br><span class="line">        <span class="keyword">return</span> (T t) -&gt; &#123; accept(t); after.accept(t); &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SomethingTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;()&#123;&#123;</span><br><span class="line">            add(<span class="number">7</span>); add(<span class="number">5</span>); add(<span class="number">1</span>); add(<span class="number">2</span>);</span><br><span class="line">            add(<span class="number">8</span>); add(<span class="number">4</span>); add(<span class="number">3</span>); add(<span class="number">6</span>);</span><br><span class="line">            add(<span class="number">3</span>); add(<span class="number">6</span>); add(<span class="number">3</span>); add(<span class="number">6</span>);</span><br><span class="line">        &#125;&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">Consumer</span> <span class="variable">myConsumer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Consumer</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(Objects.equals(o, <span class="number">6</span>))</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                System.out.print(o);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        list.forEach(myConsumer);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// lambda表达式简化</span></span><br><span class="line">        System.out.println(<span class="string">&quot;\n========== 分割线 ==========&quot;</span>);</span><br><span class="line">        list.forEach(a -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span>(Objects.equals(a, <span class="number">6</span>))</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            System.out.print(a);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220526170454.png" alt="image-20220526170453349" /></p><p>查看<code>forEach</code>方法的源码，需要我们传入一个<code>Consumer</code>接口的实现类对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.lang;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"><span class="keyword">import</span> java.util.Spliterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Spliterators;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Iterable</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">forEach</span><span class="params">(Consumer&lt;? <span class="built_in">super</span> T&gt; action)</span> &#123;</span><br><span class="line">        Objects.requireNonNull(action);</span><br><span class="line">        <span class="keyword">for</span> (T t : <span class="built_in">this</span>) &#123;</span><br><span class="line">            action.accept(t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总有人问，为什么<code>forEach</code>方法不能使用<code>break</code>和<code>continue</code>。现在看了源码，你还有这样的疑问吗？</p><h3 id="4）Supplier-T">4）<code>Supplier&lt;T&gt;</code></h3><p>供给型接口，只有出参，没有入参。在使用上并不多见，先看源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.util.function;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Supplier</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    T <span class="title function_">get</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>查看使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Optional;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Supplier;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SomethingTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;User&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;User&gt;() &#123;&#123;</span><br><span class="line">            add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;半月1&quot;</span>, <span class="number">18</span>, <span class="number">90</span>));</span><br><span class="line">            add(<span class="literal">null</span>);</span><br><span class="line">        &#125;&#125;;</span><br><span class="line"></span><br><span class="line">        Supplier&lt;User&gt; mySupplier = <span class="keyword">new</span> <span class="title class_">Supplier</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;未知&quot;</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        list.forEach(a -&gt; &#123;</span><br><span class="line">            <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> Optional.ofNullable(a)</span><br><span class="line">                    .orElseGet(mySupplier);</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;========== 分割线 ==========&quot;</span>);</span><br><span class="line">        <span class="comment">// lambda表达式简化</span></span><br><span class="line">        list.forEach(a -&gt; &#123;</span><br><span class="line">            <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> Optional.ofNullable(a)</span><br><span class="line">                    .orElseGet(() -&gt; <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;未知&quot;</span>, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Integer score;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220526175925.png" alt="image-20220526175924101" /></p><p>查看<code>Optional</code>的源码，这个方法主要作用是，当前对象为<code>null</code>值后，将使用供给的对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.function.Consumer;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Function;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Predicate;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Supplier;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Optional</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> T value;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">orElseGet</span><span class="params">(Supplier&lt;? extends T&gt; other)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> value != <span class="literal">null</span> ? value : other.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、最后">三、最后</h2><p>上面例举的四个函数式接口，是比较经典的，在很多简化的代码中都可以看到他们的身影。</p><p>在<code>java8</code>之后，<code>lambda</code>表达式出现，极大地提高了开发的效率，也使得<code>java</code>复杂臃肿的代码得到了缓解。</p><p>可谁知道，<code>java8</code>的发布时间在<b>2013年9月份</b>呢，距今都已经有<b>9年</b>的时间了，如果还不了解这上面这些接口，建议先使用<code>Stream</code>流处理。一段时间后，你会明白这些接口的。</p><p>使用<code>stream</code>的文章我也有写，可以参考进行学习，<a href="https://www.banmoon.top/articles/50">点击进行跳转</a></p><p>我是半月，祝你幸福！！！</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jdk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot使用AOP详解</title>
      <link href="/archive/72aa77cb/"/>
      <url>/archive/72aa77cb/</url>
      
        <content type="html"><![CDATA[<h1>SpringBoot使用AOP详解</h1><h2 id="一、介绍">一、介绍</h2><p>AOP（Aspect Oriented Programming）意为：面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。AOP是OOP的延续，是软件开发中的一个热点，也是Spring框架中的一个重要内容，是函数式编程的一种衍生范型。</p><p>利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。</p><p>好吧，以上来自百度百科</p><p>我知道，大家肯定是一头雾水。我们直接进入使用，用实践来进行理解。</p><h2 id="二、使用">二、使用</h2><h3 id="1）初识术语">1）初识术语</h3><p>本来很想直接上代码，但是不行，需要先过一遍<code>AOP</code>的概念术语，相关的专业名词。</p><p>先来看看下面这个需求，现在有一堆接口，需要统计他们耗时的一个需求，我们应该怎么做？</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220521115810.png" alt="image-20220519153245178" /></p><p>笨方法，在每个接口方法前后，放置起止时间进行计算。为什么说这是笨方法，自然是笨啦</p><ul class="lvl-0"><li class="lvl-2"><p>一个两个还行，方法多了该怎么办</p></li><li class="lvl-2"><p>起止时间的计算是一种系统功能，原本方法中的功能是业务功能。两种不同的功能混杂在一起，非常难受</p></li><li class="lvl-2"><p>对架构，对维护不友好</p></li></ul><p>那么上述的问题，可以使用<code>AOP</code>来解决，我们直接来看这个图</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220521115817.png" alt="image-20220519191151702" /></p><p>什么切入点、通知、连接点的，还是不懂怎么办。不要着急，借助下一章节的简单案例协助进行理解。</p><h3 id="2）简易使用">2）简易使用</h3><p>首先，我们要使用<code>AOP</code>，先得引入对应的包，<code>maven</code>依赖如下。本文的<code>springBoot</code>版本是<code>2.6.4</code>，仅供参考</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 主要是这个依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们先写一个<code>HelloController.java</code>，这里面的<code>hello</code>方法就是我们需要进行增强的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.StrUtil;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.test.dto.ResultData;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResultData&lt;String&gt; <span class="title function_">hello</span><span class="params">(<span class="meta">@RequestParam(required = false)</span> String name)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">if</span>(StrUtil.isBlank(name))</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>(<span class="string">&quot;无名，不允许操作&quot;</span>);</span><br><span class="line">        log.info(<span class="string">&quot;模拟业务操作：&#123;&#125;&quot;</span>, name);</span><br><span class="line">        <span class="keyword">return</span> ResultData.success(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有一个我喜欢写的统一返回类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test.dto;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResultData</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer errCode;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String errMsg;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ResultData <span class="title function_">success</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResultData</span>(<span class="number">0</span>, <span class="string">&quot;&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ResultData <span class="title function_">fail</span><span class="params">(String errMsg)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResultData</span>(-<span class="number">1</span>, errMsg, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; ResultData <span class="title function_">success</span><span class="params">(T t)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResultData</span>(<span class="number">0</span>, <span class="string">&quot;成功&quot;</span>, t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法接口已经写好，下面就是重头戏</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test.aspect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.date.DateUtil;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.date.TimeInterval;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.test.dto.ResultData;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(public * com.banmoon.test.controller..*.*(..) throws Exception)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pointcut</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;pointcut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">(JoinPoint point)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;前置通知&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After(&quot;pointcut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">(JoinPoint point)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;后置通知&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;pointcut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">around</span><span class="params">(ProceedingJoinPoint joinPoint)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;环绕通知&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 计时</span></span><br><span class="line">            <span class="type">TimeInterval</span> <span class="variable">timer</span> <span class="operator">=</span> DateUtil.timer();</span><br><span class="line">            <span class="comment">// 执行方法，连接点</span></span><br><span class="line">            <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> joinPoint.proceed();</span><br><span class="line">            <span class="comment">// 查看耗时</span></span><br><span class="line">            log.info(<span class="string">&quot;耗时：&#123;&#125;&quot;</span>, timer.interval());</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            <span class="keyword">return</span> ResultData.fail(<span class="string">&quot;服务器繁忙，请稍后再试&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterReturning(&quot;pointcut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturning</span><span class="params">(JoinPoint point)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;返回通知&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterThrowing(value = &quot;pointcut()&quot;, throwing = &quot;t&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterThrowing</span><span class="params">(JoinPoint point, Throwable t)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;异常通知&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来访问这个接口<code>http://localhost:8080/hello?name=banmoon</code>，直接来看控制台</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220520110016.png" alt="image-20220520110015629" /></p><p>再来访问下接口<code>GET http://localhost:8080/hello?name=</code>，由于<code>name</code>没有传参，所以报错是必然的，我们来看下结果</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220520105922.png" alt="image-20220520105820174" /></p><p>同时，接口返回的数据</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220520105917.png" alt="image-20220520105907654" /></p><p>通知是如何加强方法的，以及通知见的执行顺序，通过一目了然了，如下图</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220520110932.png" alt="image-20220520110925835" /></p><p>如此一来，现在可以解释一下，相关的<code>AOP</code>术语了</p><ul class="lvl-0"><li class="lvl-2"><p><b>切面（Aspect）</b>：一般是指被<code>@Aspect</code>修饰的类，代表着某一具体功能的<code>AOP</code>逻辑。</p></li><li class="lvl-2"><p><b>切入点（Pointcut）</b>：选择哪些增强的方法，上述体现的是<code>@pointcut</code>注解和<code>execution</code>表达式</p></li><li class="lvl-2"><p><b>通知（Advice）</b>：对目标方法的增强</p><ul class="lvl-2"><li class="lvl-4"><b>环绕通知（@Around）</b>：内部执行连接点（方法），对其进行增强</li><li class="lvl-4"><b>前置通知（@Before）</b>：在执行连接点前执行</li><li class="lvl-4"><b>后置通知（@After）</b>：在执行连接点后执行</li><li class="lvl-4"><b>返回通知（@AfterReturning）</b>：在连接点返回后执行</li><li class="lvl-4"><b>异常通知（@AfterThrowing）</b>：在连接点爆出异常后执行</li></ul></li><li class="lvl-2"><p><b>连接点（JoinPoint）</b>：就是那些被切入点选中的方法啦</p></li></ul><h3 id="3）切入点表达式">3）切入点表达式</h3><p>切入点表达式，就功能而言。就是为了选择哪些方法需要被增强的一个方法选择表达式。表达式有以下这些种类</p><table><thead><tr><th>表达式类型</th><th>功能</th></tr></thead><tbody><tr><td>execution()</td><td>匹配方法，最全的一个</td></tr><tr><td>args()</td><td>匹配形参类型</td></tr><tr><td>@args()</td><td>匹配形参类型上的注解</td></tr><tr><td>@annotation()</td><td>匹配方法上的注解</td></tr><tr><td>within()</td><td>匹配类路径</td></tr><tr><td>@within()</td><td>匹配类上的注解</td></tr><tr><td>this()</td><td>匹配类路径，实际上AOP代理的类</td></tr><tr><td>target()</td><td>匹配类路径，目标类</td></tr><tr><td>@target()</td><td>匹配类上的注解</td></tr></tbody></table><h4 id="3-1）execution表达式">3.1）execution表达式</h4><p>额，不好描述，直接上图</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220521115833.png" alt="image-20220519092804483" /></p><p>其中，以下几点需要注意</p><ul class="lvl-0"><li class="lvl-2"><p><mark>访问修饰符</mark>、<mark>异常类型</mark>可以省略，其余都是必填的</p></li><li class="lvl-2"><p>方法参数，<code>..</code>代表所有参数</p></li><li class="lvl-2"><p>类路径中，<code>..</code>代表多层路径，包括当前包的类和子包的类</p></li></ul><hr /><p>举几个常用的表达式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 所有方法</span></span><br><span class="line">execution(* *..*(..))</span><br><span class="line"><span class="comment">// 指定参数，即入参本身的类型，不能放其接口、父类</span></span><br><span class="line">execution(* *..*(java.lang.String, java.lang.String)</span><br><span class="line"><span class="comment">// 指定方法前缀</span></span><br><span class="line">execution(* *..*.prefix*(..))</span><br><span class="line"><span class="comment">// 指定方法后缀</span></span><br><span class="line">execution(* *..*.*suffix(..))</span><br><span class="line"><span class="comment">// 组合，增强所有方法，但是去掉指定前缀和指定后缀的方法</span></span><br><span class="line">execution(* *..*(..)) &amp;&amp; (!execution(* *..prefix*(..)) || !execution(* *..*suffix(..)))</span><br></pre></td></tr></table></figure><hr /><p>在<code>IDEA</code>工具上，通知的方法左边可以查看到那些被切入点选择中的方法，非常好用，如下图所示</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220520164800.png" alt="image-20220520164649378" /></p><h4 id="3-2）arg">3.2）arg</h4><p>在上面提到<code>execution</code>表达式，在限制参数时，只能使用<mark>本身的类型</mark>，而不能使用参数的接口、父类来进行限制。</p><p>所以<code>arg</code>表达式就出现了，如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 现在有两个方法，他们的入参都是CharSequence接口的子类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">user</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;成功&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">role</span><span class="params">(StringBuffer name)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;成功&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 增强入参为CharSequence或其子类的方法</span></span><br><span class="line">arg(java.lang.CharSequence)</span><br><span class="line"><span class="comment">// 一般来说，arg表达式要配合execution表达式一起使用，单独使用不会很直观</span></span><br><span class="line">execution(* com.banmoon.test.controller..*.*(..)) &amp;&amp; args(java.lang.CharSequence)</span><br></pre></td></tr></table></figure><h4 id="3-3）-args">3.3）@args</h4><p>与<code>args</code>不同，<code>@args</code>是找到指定注解修饰的入参方法。</p><p>有点拗口，是什么意思呢？简单看下面这几个类和方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 现在几个DTO，上面标注了一个注解</span></span><br><span class="line"><span class="meta">@MyTestAspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDTO</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@MyTestAspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RoleDTO</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 现在有两个方法，分别使用了上面两个DTO作为形参</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">user</span><span class="params">(UserDTO user)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;成功&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">role</span><span class="params">(RoleDTO role)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;成功&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么我们怎么写切入点的表达式呢，同时增强这两个方法，我们可以使用<code>@args</code>表达式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 写出注解的全路径就好了</span></span><br><span class="line"><span class="meta">@args(com.banmoon.test.annotation.MyTestAspect)</span></span><br><span class="line"><span class="comment">// 也可以使用通配符、前缀、后缀</span></span><br><span class="line"><span class="meta">@args(com.banmoon.test.annotation.*)</span></span><br><span class="line"><span class="meta">@args(com.banmoon.test.annotation.Prefix*)</span></span><br><span class="line"><span class="meta">@args(com.banmoon.test.annotation.*Suffix)</span></span><br></pre></td></tr></table></figure><h4 id="3-4）-annotation">3.4）@annotation</h4><p>如果上面的<code>@args</code>表达式是限制形参是否有某注解的话，那么<code>@annotation</code>这个表达式就是限制了方法上的注解</p><p>在方法上标注的注解，可以使用此表达式来进行限制，举例如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 现在有两个方法，两个方法上都有注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@MyTestAspect</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">user</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;成功&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@MyTestAspect</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">role</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;成功&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 增强被指定注解修饰的方法</span></span><br><span class="line"><span class="meta">@annotation(com.banmoon.test.annotation.MyTestAspect)</span></span><br><span class="line"><span class="comment">// 指定前缀的注解修饰的方法</span></span><br><span class="line"><span class="meta">@annotation(com.banmoon.test.annotation.Prefix*)</span></span><br><span class="line"><span class="comment">// 指定后缀的注解修饰的方法</span></span><br><span class="line"><span class="meta">@annotation(com.banmoon.test.annotation.*Suffix)</span></span><br></pre></td></tr></table></figure><h4 id="3-5）within">3.5）within</h4><p>找到指定的类，下面的所有方法都将得到增强。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 指定controller包下面类的所有方法</span></span><br><span class="line">within(com.banmoon.test.controller..*)</span><br><span class="line"><span class="comment">// 还可以指定注解类，类下的所有方法</span></span><br><span class="line">within(<span class="meta">@com</span>.banmoon.test.annotation.MyTestAspect *)</span><br><span class="line"><span class="comment">// 还可以指定接口，接口下面的方法将被增强</span></span><br><span class="line">within(com.banmoon.test.controller.IController+)</span><br></pre></td></tr></table></figure><p>接口反应有问题？如下，只会增强接口中有的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">user</span><span class="params">(String name)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 现在有个类，实现了上面的接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> <span class="keyword">implements</span> <span class="title class_">IController</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">user</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;成功&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">role</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;成功&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-6）-within">3.6）@within</h4><p>等同于<code>within</code>的注解方式，注解作用在类上，增强类下面的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@within(com.banmoon.test.annotation.MyTestAspect)</span>)</span><br></pre></td></tr></table></figure><h4 id="3-7）this和target">3.7）this和target</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 写法都一样</span></span><br><span class="line"><span class="built_in">this</span>(com.banmoon.test.controller.HelloController)</span><br><span class="line">target(com.banmoon.test.controller.HelloController)</span><br></pre></td></tr></table></figure><p>很像几乎一样，但它们的区别，也很难区分，你需要提前了解<code>AOP</code>是使用了什么代理，是怎么进行代理的</p><p><code>Spring AOP</code>默认是<code>cglib</code>代理，是通过子类继承目标父类/接口，实现对应的方法进行代理。当了解到这里就明白下面的区别了</p><ul class="lvl-0"><li class="lvl-2"><p><b>this</b>：增强的是代理对象，代理对象可能会没有<code>HelloController</code>的方法</p></li><li class="lvl-2"><p><b>target</b>：增强的是目标对象本身，可以增强目标对象的方法</p></li></ul><h4 id="3-8）-target">3.8）@target</h4><p>增强在类上标注了指定注解的方法，如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@target(com.banmoon.test.annotation.MyTestAspect)</span></span><br></pre></td></tr></table></figure><h2 id="三、案例">三、案例</h2><h3 id="1）接口日志打印">1）接口日志打印</h3><p>切面展示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.blog.business.aspect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.serializer.SerializerFeature;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Around;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Before;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Pointcut;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.request.RequestContextHolder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.request.ServletRequestAttributes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogAspect</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 切点</span></span><br><span class="line"><span class="meta">@Pointcut(&quot;execution(* com.banmoon.blog.controller..*(..))&quot; +</span></span><br><span class="line"><span class="meta">&quot; &amp;&amp; !@annotation(com.banmoon.blog.business.annotation.NotLogAspect)&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">aspect</span><span class="params">()</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Before(&quot;aspect()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doBefore</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line"><span class="type">ServletRequestAttributes</span> <span class="variable">attributes</span> <span class="operator">=</span> (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();</span><br><span class="line"><span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> attributes.getRequest();</span><br><span class="line">Object[] args = joinPoint.getArgs();</span><br><span class="line"><span class="type">Object</span> <span class="variable">arg</span> <span class="operator">=</span> args==<span class="literal">null</span> || args.length==<span class="number">0</span>? <span class="literal">null</span>: args[<span class="number">0</span>];</span><br><span class="line">String argStr;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">argStr = JSON.toJSONString(arg, SerializerFeature.WriteMapNullValue);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">argStr = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">log.info(<span class="string">&quot;========================= start =========================&quot;</span>);</span><br><span class="line">log.info(<span class="string">&quot;请求路径 ：&#123;&#125;&quot;</span>, request.getRequestURL().toString());</span><br><span class="line">log.info(<span class="string">&quot;请求方法 ：&#123;&#125;&quot;</span>, request.getMethod());</span><br><span class="line">log.info(<span class="string">&quot;class类 ：&#123;&#125;#&#123;&#125;&quot;</span>, joinPoint.getSignature().getDeclaringTypeName(), joinPoint.getSignature().getName());</span><br><span class="line">log.info(<span class="string">&quot;请求地址 ：&#123;&#125;&quot;</span>, request.getRemoteAddr());</span><br><span class="line">log.info(<span class="string">&quot;请求参数 ：&#123;&#125;&quot;</span>, argStr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Around(&quot;aspect()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">doAround</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line"><span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"><span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> proceedingJoinPoint.proceed();<span class="comment">// 执行切点</span></span><br><span class="line"><span class="type">String</span> <span class="variable">resultStr</span> <span class="operator">=</span> JSON.toJSONString(result);</span><br><span class="line"><span class="keyword">if</span>(resultStr.length()&gt;<span class="number">300</span>)</span><br><span class="line">resultStr = resultStr.substring(<span class="number">0</span>, <span class="number">300</span>) + <span class="string">&quot;......&quot;</span>;</span><br><span class="line">log.info(<span class="string">&quot;请求出参 ：&#123;&#125;&quot;</span>, resultStr);</span><br><span class="line">log.info(<span class="string">&quot;请求耗时 ：&#123;&#125; ms&quot;</span>, System.currentTimeMillis()-start);</span><br><span class="line">log.info(<span class="string">&quot;========================== end ==========================&quot;</span> + System.lineSeparator());</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>NotLogAspect.java</code>注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.blog.business.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> NotLogAspect &#123;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">name</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看日志打印的效果</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220521120137.png" alt="image-20220521120132702" /></p><h3 id="2）记录请求日志系统">2）记录请求日志系统</h3><p><a href="https://blog.csdn.net/NewBeeMu/article/details/124864076">日志系统</a></p><h2 id="四、最后">四、最后</h2><p><code>AOP</code>的使用就到这了，具体如何使用<code>AOP</code>还是要看大家有什么需求。它可以做到</p><ul class="lvl-0"><li class="lvl-2"><p>接口方法日志的收集</p></li><li class="lvl-2"><p>接口方法的权限校验</p></li><li class="lvl-2"><p>前后对出入参的修改，先查缓存这种需求</p></li></ul><p>能完成的很多，看自己的功能需要吧。</p><p>官方文档：大家记得对着<a href="https://docs.spring.io/spring-framework/docs/2.5.x/reference/aop.html">文档</a>看啊</p><p>我是半月，祝你幸福！！！</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> AOP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis实现消息队列及延迟队列</title>
      <link href="/archive/6c9105bd/"/>
      <url>/archive/6c9105bd/</url>
      
        <content type="html"><![CDATA[<h1>Redis实现消息队列及延迟队列</h1><h2 id="一、介绍">一、介绍</h2><p>在选择消息中间件的问题上，我们有很多解决方案，具体选择哪一种还是要根据实际的情况来进行确认。</p><p>如果直接有成熟的第三方消息中间件，能用就直接用，如<code>rabbitMq</code>、<code>kafka</code>等。</p><p>再如果，推送的消息比较简单，又恰好有个<code>redis</code>，那么就选择<code>redis</code>吧。</p><p>下面，将进行介绍，如果使用<code>redis</code>作为消息队列，我们该如何编写这段程序。</p><h2 id="二、消息队列">二、消息队列</h2><p>前置工作，本次使用的工程框架直接是<code>springBoot</code>，其他<code>maven</code>依赖就不贴出来了，主要是要有这个<code>redis</code>的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>有了依赖，记得在<code>application.yml</code>配置文件中加入对应<code>redis</code>的配置信息</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">database:</span> <span class="number">0</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br></pre></td></tr></table></figure><p>还有一件事，<code>redisTemplate</code>的这个<code>bean</code>我们要进行润色一下，虽然用自带的也行，但作为一个强迫症，我还是希望我写入的<code>key</code>和<code>redis</code>中的<code>key</code>一致</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonAutoDetect;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.PropertyAccessor;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory factory)</span> &#123;</span><br><span class="line">        RedisTemplate&lt;String, Object&gt; redisTemplate = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>();</span><br><span class="line">        redisTemplate.setConnectionFactory(factory);</span><br><span class="line">        <span class="type">Jackson2JsonRedisSerializer</span> <span class="variable">jackson2JsonRedisSerializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jackson2JsonRedisSerializer</span>(Object.class);</span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        mapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(mapper);</span><br><span class="line">        <span class="type">StringRedisSerializer</span> <span class="variable">stringRedisSerializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>();</span><br><span class="line">        <span class="comment">// key采用String的序列化方式</span></span><br><span class="line">        redisTemplate.setKeySerializer(stringRedisSerializer);</span><br><span class="line">        <span class="comment">// hash的key也采用String的序列化方式</span></span><br><span class="line">        redisTemplate.setHashKeySerializer(stringRedisSerializer);</span><br><span class="line">        <span class="comment">// value序列化方式采用jackson</span></span><br><span class="line">        redisTemplate.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        <span class="comment">// hash的value序列化方式采用jackson</span></span><br><span class="line">        redisTemplate.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        redisTemplate.afterPropertiesSet();</span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好的准备工作完成，先来看生产者</p><h3 id="1）生产者">1）生产者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test.queue.producer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisTestProducer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">REDIS_TEST_KEY</span> <span class="operator">=</span> <span class="string">&quot;test:queue&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">push</span> <span class="params">(String... params)</span> &#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">l</span> <span class="operator">=</span> redisTemplate.opsForList().rightPushAll(REDIS_TEST_KEY, params);</span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生产者很简单，就是向<code>redis</code>的<code>list</code>中推送数据</p><p>主要在于消费者，该如何获取到其中的消息</p><h3 id="2）消费者">2）消费者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test.queue.consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.StrUtil;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.test.queue.producer.RedisTestProducer;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.PostConstruct;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisTestConsumer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pop</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 阻塞取出队首</span></span><br><span class="line"><span class="type">String</span> <span class="variable">params</span> <span class="operator">=</span> (String) redisTemplate.opsForList().leftPop(RedisTestProducer.REDIS_TEST_KEY, <span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line">                    <span class="keyword">if</span> (StrUtil.isNotBlank(params))</span><br><span class="line">                        log.info(<span class="string">&quot;模拟消费消息：&#123;&#125;&quot;</span>, params);</span><br><span class="line">                    <span class="comment">// 避免高频轮循，添加休眠</span></span><br><span class="line">                    TimeUnit.MILLISECONDS.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="comment">// 不做任何处理，切记不要因为异常导致了消费线程的退出</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, RedisTestProducer.REDIS_TEST_KEY).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述就是消费者，其中注意几点</p><ul class="lvl-0"><li class="lvl-2"><p>这里服务启动时，用到了<code>bean</code>初始化的一个方法，大家<mark>也可以使用静态代码块</mark>，只要让这个消费线程启动就行</p></li><li class="lvl-2"><p>线程启动，切记不要让异常导致了线程的退出。因为这样就没有消费者了，要时刻保证消费者的在线</p></li><li class="lvl-2"><p>在取出队首的消息时，用到了阻塞机制。当没有获取到消息，该线程会进行阻塞，直到有消息入队或者阻塞超时，才会返回消息。避免死循环带来了<code>cpu</code>高载荷</p></li></ul><h3 id="3）测试">3）测试</h3><p>启动该<code>springBoot</code>项目，同时执行下面这段测试代码，调用三次生产者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.test.queue.producer.RedisTestProducer;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ServiceTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTestProducer redisTestProducer;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">insertTest</span><span class="params">()</span> &#123;</span><br><span class="line">        redisTestProducer.push(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看<code>springBoot</code>项目的控制台，消费者有进行消费</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220517225437.png" alt="image-20220517140449171" /></p><h2 id="三、延迟队列">三、延迟队列</h2><p>延迟队列的应用场景还是比较多见的，比如</p><ul class="lvl-0"><li class="lvl-2"><p>用户下单后，此订单超30分钟后取消</p></li><li class="lvl-2"><p>用户订阅，指定时间推送订阅消息事件</p></li></ul><p>很多类似的业务场景，我们不再依赖定时，使用消息中间件就可以完成这类功能。</p><p>在<code>redis</code>实现延迟队列之前，我有必要说一下<code>set</code>和<code>zset</code>，主要是这个<code>zset</code></p><p><code>set</code>大家都很熟悉，与<code>list</code>不同，<code>set</code>是无序且内部元素不重复。</p><p>那么<code>zset</code>呢，它结合了<code>set</code>和<code>list</code>的特点</p><ul class="lvl-0"><li class="lvl-2"><p>集合内元素不会重复</p></li><li class="lvl-2"><p>元素以有序的方式排列</p></li></ul><p><code>zset</code>中的元素都会关联一个分数<code>score</code>，内部将通过这个<code>score</code>对集合元素进行的排序。</p><p>虽然<code>zset</code>集合中元素不会重复，但<code>score</code>可以重复。如果有两个<code>score</code>相同的元素，将按照元素的字典序进行排序。</p><h3 id="1）生产者-2">1）生产者</h3><p>上面描述了这么多，我们该如何使用，先看生产者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test.queue.producer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.date.DateField;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.date.DateUnit;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.date.DateUtil;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisTestDelayProducer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">REDIS_DELAY_TEST_KEY</span> <span class="operator">=</span> <span class="string">&quot;test:delay:queue&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">push</span> <span class="params">(String params, <span class="type">int</span> offset, DateField dateField)</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">score</span> <span class="operator">=</span> DateUtil.offset(<span class="keyword">new</span> <span class="title class_">Date</span>(), dateField, offset).getTime();</span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">b</span> <span class="operator">=</span> redisTemplate.opsForZSet().addIfAbsent(REDIS_DELAY_TEST_KEY, params, score);</span><br><span class="line">        log.info(<span class="string">&quot;生产消息：&#123;&#125;，推送是否成功：&#123;&#125;&quot;</span>, params, b);</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，这边使用将消费时间点的时间戳，作为了<code>score</code>，生产的消息</p><h3 id="2）消费者-2">2）消费者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test.queue.consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.collection.CollUtil;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.convert.Convert;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.StrUtil;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.test.queue.producer.RedisTestDelayProducer;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.test.queue.producer.RedisTestProducer;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.PostConstruct;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisTestDelayConsumer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pop</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 查看范围中的消息</span></span><br><span class="line">                    Set&lt;Object&gt; set = redisTemplate.opsForZSet().rangeByScore(RedisTestDelayProducer.REDIS_DELAY_TEST_KEY, <span class="number">0</span>, <span class="keyword">new</span> <span class="title class_">Date</span>().getTime(), <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">                    <span class="comment">// 判断是否为空</span></span><br><span class="line">                    <span class="keyword">if</span> (CollUtil.isNotEmpty(set)) &#123;</span><br><span class="line">                        <span class="type">String</span> <span class="variable">params</span> <span class="operator">=</span> (String) set.iterator().next();</span><br><span class="line">                        <span class="comment">// 删除范围中的消息</span></span><br><span class="line">                        <span class="type">Long</span> <span class="variable">success</span> <span class="operator">=</span> redisTemplate.opsForZSet().remove(RedisTestDelayProducer.REDIS_DELAY_TEST_KEY, params);</span><br><span class="line">                        <span class="keyword">if</span> (success &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                            log.info(<span class="string">&quot;模拟消费消息：&#123;&#125;&quot;</span>, params);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">// 避免高频轮循，添加休眠</span></span><br><span class="line">                        TimeUnit.MILLISECONDS.sleep(<span class="number">1000</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="comment">// 不做任何处理，切记不要因为异常导致了消费线程的退出</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, RedisTestDelayProducer.REDIS_DELAY_TEST_KEY).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消费的逻辑，基本就是，取出当前时间点，要执行的消息。</p><p><code>score</code>保证了队列中的消息有序性，且作为时间戳，所以可以完成延迟队列的对应功能。</p><p>注意事项和上面的普通队列差不多，简单注意一下就好。</p><h3 id="3）测试-2">3）测试</h3><p>启动该<code>springBoot</code>项目，同时执行下面这段测试代码，调用三次生产者，分别在10秒后，30秒后，1分钟后进行消费</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.date.DateField;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.test.queue.producer.RedisTestDelayProducer;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.test.queue.producer.RedisTestProducer;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ServiceTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTestDelayProducer redisTestDelayProducer;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">insertTest</span><span class="params">()</span> &#123;</span><br><span class="line">        redisTestDelayProducer.push(<span class="string">&quot;a&quot;</span>, <span class="number">10</span>, DateField.SECOND);</span><br><span class="line">        redisTestDelayProducer.push(<span class="string">&quot;b&quot;</span>, <span class="number">30</span>, DateField.SECOND);</span><br><span class="line">        redisTestDelayProducer.push(<span class="string">&quot;c&quot;</span>, <span class="number">1</span>, DateField.MINUTE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看<code>springBoot</code>项目的控制台，注意查看消费者打印的日志，主要看看三条日志的时间间隔</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220517231329.png" alt="image-20220517171656067" /></p><h2 id="四、最后">四、最后</h2><p>我还要讲一下，<code>redis</code>作为消息队列的优缺点</p><ul class="lvl-0"><li class="lvl-2"><p>优点</p><ul class="lvl-2"><li class="lvl-4">使用相对简单</li><li class="lvl-4">不用专门维护专业的消息中间件，降低服务和运维成本</li></ul></li><li class="lvl-2"><p>缺点</p><ul class="lvl-2"><li class="lvl-4">没有<code>ack</code>，消息确认机制，存在消息丢失的可能</li><li class="lvl-4">死循环进行监听队列，消息队列一多，所需要的线程资源也会增多，服务器的负担会增大</li></ul></li></ul><p>所以，如果是简单的日志推送，消息推送等，可以使用<code>redis</code>队列。相反，如果对消息的可靠性有很大的要求，建议还是不要使用<code>redis</code>作为消息中间件了。</p><p>我是半月，祝你幸福！！！</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
            <tag> 消息队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL自定义函数和存储过程</title>
      <link href="/archive/c1ab110c/"/>
      <url>/archive/c1ab110c/</url>
      
        <content type="html"><![CDATA[<h1>MySQL自定义函数和存储过程</h1><h2 id="一、介绍">一、介绍</h2><p><code>MySQL</code>函数是一些具有特定功能的方法，在编写<code>sql</code>时，可以进行使用，从而完成对数据的处理。</p><p>存储过程的话，更像是一些特定功能的<code>sql</code>组合而成的<code>sql语句集合</code>，由于它的事先编译，通过传入参数来执行这个过程，可以使得，在某些场景下利用存储过程的情况，达到一些快捷方便的功能。</p><p>一起来看看他们的定义和写法把。首先，加一下基础的表格</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 用户表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tb_user` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">  `sex` <span class="type">varchar</span>(<span class="number">2</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;性别&#x27;</span>,</span><br><span class="line">  `age` tinyint(<span class="number">4</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;年龄&#x27;</span>,</span><br><span class="line">  `birthday` datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;生日&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">7</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user`(`id`, `name`, `sex`, `age`, `birthday`) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;半月无霜&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;2022-04-29 09:06:52&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="二、自定义函数">二、自定义函数</h2><h3 id="1）无参函数">1）无参函数</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 删除</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">function</span> if <span class="keyword">exists</span> randomNum10;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">function</span> randomNum10()</span><br><span class="line"><span class="keyword">returns</span> <span class="type">int</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">floor</span>(rand()<span class="operator">*</span><span class="number">10</span>);</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用</span></span><br><span class="line"><span class="keyword">select</span> randomNum10();</span><br></pre></td></tr></table></figure><h3 id="2）有参函数">2）有参函数</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 删除</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">function</span> if <span class="keyword">exists</span> randomNum;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">function</span> randomNum(num <span class="type">int</span>)</span><br><span class="line"><span class="keyword">returns</span> <span class="type">int</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">floor</span>(rand()<span class="operator">*</span>num);</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用</span></span><br><span class="line"><span class="keyword">select</span> randomNum(<span class="number">5</span>);</span><br></pre></td></tr></table></figure><p>最基本的使用就是上面这样了，由于自定义函数与存储过程内，有挺多相同的东西，将在存储过程中一一介绍。</p><h2 id="三、存储过程">三、存储过程</h2><p>语法结构</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- delimiter $$ 定义结束符，避免与存储过程中的分号结束符冲突</span></span><br><span class="line">delimiter $$</span><br><span class="line"></span><br><span class="line"><span class="comment">-- proc_parameter 出入参定义</span></span><br><span class="line"><span class="comment">-- characteristic 特性</span></span><br><span class="line"><span class="comment">-- routine_body 存储过程体，进行业务SQL的编写，BEGIN...END</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> 函数名([proc_parameter...])</span><br><span class="line">[characteristic...] </span><br><span class="line">routine_body</span><br><span class="line">$$</span><br></pre></td></tr></table></figure><p>上述便是存储过程的语法结构，对照上面语法结构，来简单书写一个存储过程</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 删除</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">procedure</span> if <span class="keyword">exists</span> pro_test;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 定义</span></span><br><span class="line">delimiter $$</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> pro_test()</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">select</span> now();</span><br><span class="line"><span class="keyword">end</span> $$</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 调用</span></span><br><span class="line"><span class="keyword">call</span> pro_test();</span><br></pre></td></tr></table></figure><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220508170015.png" alt="image-20220508165829250" /></p><h3 id="1）变量">1）变量</h3><h4 id="1-1）局部变量">1.1）局部变量</h4><p>局部变量，需要先定义，才能进行使用。且只能在当前的<code>begin ... end</code>中使用</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">procedure</span> if <span class="keyword">exists</span> pro_var01;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 定义</span></span><br><span class="line">delimiter $$</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> pro_var01()</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="comment">-- 定义</span></span><br><span class="line"><span class="keyword">declare</span> var_name <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">default</span> <span class="string">&#x27;半月无霜&#x27;</span>;</span><br><span class="line"><span class="keyword">declare</span> var_sex <span class="type">varchar</span>(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">declare</span> var_age <span class="type">int</span> <span class="keyword">default</span> <span class="number">18</span>;</span><br><span class="line"><span class="comment">-- 重新赋值</span></span><br><span class="line"><span class="keyword">set</span> var_age <span class="operator">=</span> <span class="number">19</span>;</span><br><span class="line"><span class="keyword">select</span> sex <span class="keyword">into</span> var_sex <span class="keyword">from</span> tb_user <span class="keyword">where</span> `name` <span class="operator">=</span> var_name;</span><br><span class="line"><span class="comment">-- 查询</span></span><br><span class="line"><span class="keyword">select</span> var_name <span class="keyword">as</span> name, var_sex <span class="keyword">as</span> sex, var_age <span class="keyword">as</span> age;</span><br><span class="line"><span class="keyword">end</span> $$</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 调用</span></span><br><span class="line"><span class="keyword">call</span> pro_var01();</span><br></pre></td></tr></table></figure><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220508185427.png" alt="image-20220508185423272" /></p><h4 id="1-2）用户变量">1.2）用户变量</h4><p>用户变量就是用户自己定义的变量，也是在连接断开时失效。对比使用局部变量，便是不再需要提前定义</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">procedure</span> if <span class="keyword">exists</span> pro_var02;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 定义</span></span><br><span class="line">delimiter $$</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> pro_var02()</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="comment">-- 赋值</span></span><br><span class="line"><span class="keyword">set</span> <span class="variable">@name</span> <span class="operator">=</span> <span class="string">&#x27;半月无霜&#x27;</span>;</span><br><span class="line"><span class="keyword">set</span> <span class="variable">@age</span> <span class="operator">=</span> <span class="number">18</span>;</span><br><span class="line"><span class="keyword">select</span> sex <span class="keyword">into</span> <span class="variable">@sex</span> <span class="keyword">from</span> tb_user <span class="keyword">where</span> `name` <span class="operator">=</span> <span class="variable">@name</span>;</span><br><span class="line"><span class="comment">-- 查询</span></span><br><span class="line"><span class="keyword">select</span> <span class="variable">@name</span>, <span class="variable">@sex</span>, <span class="variable">@age</span>;</span><br><span class="line"><span class="keyword">end</span> $$</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 调用</span></span><br><span class="line"><span class="keyword">call</span> pro_var02();</span><br></pre></td></tr></table></figure><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220509230906.png" alt="image-20220509230904992" /></p><p>用户在同个连接中，还可以使用此变量</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="variable">@name</span> <span class="keyword">as</span> &quot;姓名&quot;, <span class="variable">@sex</span> <span class="keyword">as</span> &quot;性别&quot;;</span><br></pre></td></tr></table></figure><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220509230838.png" alt="image-20220509230837745" /></p><h4 id="1-3）会话变量">1.3）会话变量</h4><p>如果说上面的用户变量是我们自己在一个连接中自定义的变量的话，那么会话变量就是MySQL在一个连接中初始化定义的一些变量。</p><p>在连接建立完成后，MySQL会将自己全局变量值复制一份成为当前连接的会话变量。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查看当前所有的会话变量</span></span><br><span class="line"><span class="keyword">show</span> session variables;</span><br><span class="line"><span class="comment">-- 查看某个会话变量</span></span><br><span class="line"><span class="keyword">select</span> @<span class="variable">@session</span>.group_concat_max_len;</span><br><span class="line"><span class="comment">-- 修改会话变量</span></span><br><span class="line"><span class="keyword">set</span> session group_concat_max_len <span class="operator">=</span> <span class="number">102400</span>;</span><br></pre></td></tr></table></figure><p>在存储过程中不常用</p><h4 id="1-4）全局变量">1.4）全局变量</h4><p>在上面的会话变量中，提到了全局变量。那么这个全局变量，就是MySQL服务在启动时，从配置文件中加载的一些变量，包括了一些系统的基本信息，基本配置等参数。</p><p>对比会话变量的使用，全局变量差不多</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查看当前所有的全局变量</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">global</span> variables;</span><br><span class="line"><span class="comment">-- 查看某个全局变量</span></span><br><span class="line"><span class="keyword">select</span> @<span class="variable">@global</span>.group_concat_max_len;</span><br><span class="line"><span class="comment">-- 修改全局变量</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> group_concat_max_len <span class="operator">=</span> <span class="number">102400</span>;</span><br></pre></td></tr></table></figure><h4 id="1-5）对比">1.5）对比</h4><table><thead><tr><th><b>操作类型</b></th><th>局部变量</th><th>用户变量</th><th>会话变量</th><th>全局变量</th></tr></thead><tbody><tr><td><b>出现的位置</b></td><td>函数、存储过程</td><td>命令行、函数、存储过程</td><td>命令行、函数、存储过程</td><td>命令行、函数、存储过程</td></tr><tr><td><b>定义的方式</b></td><td><code>declare count int;</code></td><td>直接使用，<code>@var</code>形式</td><td>只能查看修改，不能定义</td><td>只能查看修改，不能定义</td></tr><tr><td><b>有效生命周期</b></td><td><code>begin…end</code></td><td>一个连接内有效，当连接断开时，变量失效</td><td>一个连接内有效，当连接断开时，变量失效</td><td>服务器重启时恢复默认值</td></tr><tr><td><b>查看所有变量</b></td><td>/</td><td>/</td><td><code>show session variables;</code> <br /><code>show variables;</code></td><td><code>show global variables;</code></td></tr><tr><td><b>查看部分变量</b></td><td>/</td><td>/</td><td><code>select @@session.core_file;</code></td><td><code>select @@global.core_file;</code></td></tr><tr><td><b>查看指定变量</b></td><td><code>select count;</code></td><td><code>select @var;</code></td><td><code>select @@session.core_file;</code></td><td><code>select @@global.core_file;</code></td></tr><tr><td><b>设置指定变量</b></td><td><code>set count=1;</code><br /><code>set count:=101;</code><br /><code>select 1 into count;</code></td><td><code>set @var=1;</code><br /><code>set @var:=101;</code><br /><code>select 1 into @var;</code></td><td><code>set session core_file = 'ON';</code></td><td><code>set global core_file = 'ON';</code></td></tr></tbody></table><h3 id="2）出入参">2）出入参</h3><h4 id="2-1）IN-入参">2.1）IN 入参</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">procedure</span> if <span class="keyword">exists</span> pro_params01;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 定义函数，入参语法，[in 参数名 参数类型,...]</span></span><br><span class="line">delimiter $$</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> pro_params01(<span class="keyword">in</span> var_name <span class="type">varchar</span>(<span class="number">32</span>), <span class="keyword">in</span> var_age <span class="type">int</span>, <span class="keyword">in</span> var_sex <span class="type">varchar</span>(<span class="number">2</span>))</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">set</span> var_age <span class="operator">=</span> var_age<span class="operator">+</span><span class="number">1</span>;</span><br><span class="line"><span class="keyword">select</span> var_name, var_sex, var_age;</span><br><span class="line"><span class="keyword">end</span> $$</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 调用</span></span><br><span class="line"><span class="keyword">call</span> pro_params01(<span class="string">&#x27;半月无霜&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;男&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220510102802.png" alt="image-20220510102800581" /></p><h4 id="2-2）OUT-出参">2.2）OUT 出参</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">procedure</span> if <span class="keyword">exists</span> pro_params02;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 定义，出参语法，[out 参数名 参数类型,...]</span></span><br><span class="line">delimiter $$</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> pro_params02(<span class="keyword">in</span> var_name <span class="type">varchar</span>(<span class="number">32</span>), <span class="keyword">out</span> out_age <span class="type">int</span>, <span class="keyword">out</span> out_sex <span class="type">varchar</span>(<span class="number">2</span>))</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">select</span> age, sex <span class="keyword">into</span> out_age, out_sex <span class="keyword">from</span> tb_user <span class="keyword">where</span> name <span class="operator">=</span> var_name;</span><br><span class="line"><span class="keyword">end</span> $$</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 调用</span></span><br><span class="line"><span class="keyword">call</span> pro_params02(<span class="string">&#x27;半月无霜&#x27;</span>, <span class="variable">@age</span>, <span class="variable">@sex</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看出参</span></span><br><span class="line"><span class="keyword">select</span> <span class="string">&#x27;半月无霜&#x27;</span>, <span class="variable">@age</span>, <span class="variable">@sex</span>;</span><br></pre></td></tr></table></figure><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220510102740.png" alt="image-20220510102739225" /></p><h4 id="2-3）INOUT-出入参">2.3）INOUT 出入参</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">procedure</span> if <span class="keyword">exists</span> pro_params03;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 定义函数，出入参语法，[inout 参数名 参数类型,...]</span></span><br><span class="line">delimiter $$</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> pro_params03(<span class="keyword">inout</span> var_name <span class="type">varchar</span>(<span class="number">32</span>), <span class="keyword">inout</span> var_age <span class="type">int</span>, <span class="keyword">inout</span> var_sex <span class="type">varchar</span>(<span class="number">2</span>))</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="comment">-- 定义</span></span><br><span class="line"><span class="keyword">declare</span> var_temp <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">default</span> var_name;</span><br><span class="line"><span class="comment">-- 重新赋值</span></span><br><span class="line"><span class="keyword">set</span> var_name <span class="operator">=</span> concat(<span class="string">&#x27;你好，&#x27;</span>, var_name);</span><br><span class="line"><span class="keyword">set</span> var_age <span class="operator">=</span> var_age <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">select</span> sex <span class="keyword">into</span> var_sex <span class="keyword">from</span> tb_user <span class="keyword">where</span> name <span class="operator">=</span> var_temp;</span><br><span class="line"><span class="keyword">end</span> $$</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 调用</span></span><br><span class="line"><span class="keyword">set</span> <span class="variable">@name</span> <span class="operator">=</span> <span class="string">&#x27;半月无霜&#x27;</span>;</span><br><span class="line"><span class="keyword">set</span> <span class="variable">@age</span> <span class="operator">=</span> <span class="number">18</span>;</span><br><span class="line"><span class="keyword">set</span> <span class="variable">@sex</span> <span class="operator">=</span> <span class="string">&#x27;未知&#x27;</span>;</span><br><span class="line"><span class="keyword">call</span> pro_params03(<span class="variable">@name</span>, <span class="variable">@age</span>, <span class="variable">@sex</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看出参</span></span><br><span class="line"><span class="keyword">select</span> <span class="variable">@name</span>, <span class="variable">@age</span>, <span class="variable">@sex</span>;</span><br></pre></td></tr></table></figure><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220510104936.png" alt="image-20220510104935000" /></p><h3 id="3）判断语句">3）判断语句</h3><p>使用<code>if...then...else...end if</code>来进行，使用的语法格式如下</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if 判断语句 <span class="keyword">then</span> 处理内容</span><br><span class="line">    [elseif 判断语句 <span class="keyword">then</span> 处理内容] ...</span><br><span class="line">    [<span class="keyword">else</span> 处理内容]</span><br><span class="line"><span class="keyword">end</span> if</span><br></pre></td></tr></table></figure><p>在过程中的具体使用</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">procedure</span> if <span class="keyword">exists</span> pro_judge01;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 定义</span></span><br><span class="line">delimiter $$</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> pro_judge01(<span class="keyword">in</span> var_score <span class="type">int</span>, <span class="keyword">out</span> var_result <span class="type">varchar</span>(<span class="number">4</span>))</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">if var_score <span class="operator">&gt;</span> <span class="number">60</span> <span class="keyword">then</span> </span><br><span class="line"><span class="keyword">set</span> var_result <span class="operator">=</span> <span class="string">&#x27;合格&#x27;</span>;</span><br><span class="line">elseif var_score <span class="operator">=</span> <span class="number">60</span> <span class="keyword">then</span> </span><br><span class="line"><span class="keyword">set</span> var_result <span class="operator">=</span> <span class="string">&#x27;刚刚好&#x27;</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">set</span> var_result <span class="operator">=</span> <span class="string">&#x27;不合格&#x27;</span>;</span><br><span class="line"><span class="keyword">end</span> if;</span><br><span class="line"><span class="keyword">select</span> var_result <span class="keyword">as</span> &quot;结果&quot;;</span><br><span class="line"><span class="keyword">end</span> $$</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 调用</span></span><br><span class="line"><span class="keyword">call</span> pro_judge01(<span class="number">60</span>, <span class="variable">@result</span>);</span><br></pre></td></tr></table></figure><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220510110601.png" alt="image-20220510110559738" /></p><h3 id="4）循环语句">4）循环语句</h3><p>循环基本上是有三种标准的写法，看自己喜欢用哪一种吧</p><h4 id="4-1）WHILE">4.1）WHILE</h4><p><code>while</code>语句语法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">while 判断语句 do</span><br><span class="line">循环体</span><br><span class="line"><span class="keyword">end</span> while;</span><br></pre></td></tr></table></figure><p>在过程中的具体使用</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">procedure</span> if <span class="keyword">exists</span> pro_cyclic01;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 定义</span></span><br><span class="line">delimiter $$</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> pro_cyclic01()</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="comment">-- 定义变量</span></span><br><span class="line"><span class="keyword">declare</span> var_i <span class="type">int</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">-- 循环判断</span></span><br><span class="line">while var_i <span class="operator">&lt;</span> <span class="number">10</span> do</span><br><span class="line"><span class="comment">-- 插入</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user`(`name`, `sex`, `age`) <span class="keyword">VALUES</span> (concat(<span class="string">&#x27;批量&#x27;</span>, var_i), <span class="string">&#x27;男&#x27;</span>, <span class="number">18</span><span class="operator">+</span>var_i);</span><br><span class="line"><span class="comment">-- 不要忘记自增，否则会造成死循环</span></span><br><span class="line"><span class="keyword">set</span> var_i <span class="operator">=</span> var_i<span class="operator">+</span><span class="number">1</span>;</span><br><span class="line"><span class="keyword">end</span> while;</span><br><span class="line"><span class="keyword">end</span> $$</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 调用</span></span><br><span class="line"><span class="keyword">call</span> pro_cyclic01();</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看表</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_user;</span><br></pre></td></tr></table></figure><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220510115325.png" alt="image-20220510115319781" /></p><h4 id="4-2）REPEAT">4.2）REPEAT</h4><p>第二种循环写法写法，其中判断语句有所不同，为真才会退出。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 循环，直到...则退出</span></span><br><span class="line">repeat</span><br><span class="line">循环体</span><br><span class="line">until 判断语句 <span class="keyword">end</span> repeat;</span><br></pre></td></tr></table></figure><p>在过程中的具体使用</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">procedure</span> if <span class="keyword">exists</span> pro_cyclic02;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 定义</span></span><br><span class="line">delimiter $$</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> pro_cyclic02()</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">declare</span> var_i <span class="type">int</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line">repeat</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user`(`name`, `sex`, `age`) <span class="keyword">VALUES</span> (concat(<span class="string">&#x27;repeat批量&#x27;</span>, var_i), <span class="string">&#x27;男&#x27;</span>, <span class="number">18</span><span class="operator">+</span>var_i);</span><br><span class="line"><span class="keyword">set</span> var_i <span class="operator">=</span> var_i<span class="operator">+</span><span class="number">1</span>;</span><br><span class="line">until var_i <span class="operator">&gt;</span> <span class="number">10</span> <span class="keyword">end</span> repeat;</span><br><span class="line"><span class="keyword">end</span> $$</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 调用</span></span><br><span class="line"><span class="keyword">call</span> pro_cyclic02();</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看表</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_user <span class="keyword">where</span> name <span class="keyword">like</span> <span class="string">&#x27;repeat%&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220510141100.png" alt="image-20220510141058774" /></p><h4 id="4-3）LOOP">4.3）LOOP</h4><p>loop循环，语法如下</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">标签:loop</span><br><span class="line">循环体</span><br><span class="line">if 判断语句 <span class="keyword">then</span></span><br><span class="line">leave 标签;</span><br><span class="line"><span class="keyword">end</span> if;</span><br><span class="line"><span class="keyword">end</span> loop;</span><br></pre></td></tr></table></figure><p>在过程中的具体使用</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">procedure</span> if <span class="keyword">exists</span> pro_cyclic03;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 定义</span></span><br><span class="line">delimiter $$</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> pro_cyclic03()</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">declare</span> var_i <span class="type">int</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line">loop_label:loop</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user`(`name`, `sex`, `age`) <span class="keyword">VALUES</span> (concat(<span class="string">&#x27;loop批量&#x27;</span>, var_i), <span class="string">&#x27;男&#x27;</span>, <span class="number">18</span><span class="operator">+</span>var_i);</span><br><span class="line"><span class="keyword">set</span> var_i <span class="operator">=</span> var_i<span class="operator">+</span><span class="number">1</span>;</span><br><span class="line">if var_i <span class="operator">&gt;</span> <span class="number">10</span> <span class="keyword">then</span> </span><br><span class="line">leave loop_label; </span><br><span class="line"><span class="keyword">end</span> if;</span><br><span class="line"><span class="keyword">end</span> loop;</span><br><span class="line"><span class="keyword">end</span> $$</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 调用</span></span><br><span class="line"><span class="keyword">call</span> pro_cyclic03();</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看表</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_user <span class="keyword">where</span> name <span class="keyword">like</span> <span class="string">&#x27;loop%&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220510185729.png" alt="image-20220510185728893" /></p><h3 id="5）游标">5）游标</h3><p>在上面的循环中，好像只是简单的次数循环。那如果需要对查询的结果集进行循环的话，上面的循环方法就无能为力了。</p><p>这时候我们就得使用到游标，来对查询结果集进行遍历。</p><p>简单来看看这个需求，现在我们有一张计划表<code>tb_user_plan</code>，我们将遍历这张表，根据里面定义的计划向<code>tb_user</code>中插入数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 计划表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tb_user_plan` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">  `sex` tinyint(<span class="number">4</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;性别，1=男，2=女&#x27;</span>,</span><br><span class="line">  `age` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;年龄&#x27;</span>,</span><br><span class="line">  `count` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;数量&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">6</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user_plan`(`id`, `name`, `sex`, `age`, `count`) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;遍历1&#x27;</span>, <span class="number">1</span>, <span class="number">18</span>, <span class="number">4</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user_plan`(`id`, `name`, `sex`, `age`, `count`) <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;遍历2&#x27;</span>, <span class="number">1</span>, <span class="number">18</span>, <span class="number">4</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user_plan`(`id`, `name`, `sex`, `age`, `count`) <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="string">&#x27;遍历3&#x27;</span>, <span class="number">1</span>, <span class="number">19</span>, <span class="number">4</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user_plan`(`id`, `name`, `sex`, `age`, `count`) <span class="keyword">VALUES</span> (<span class="number">4</span>, <span class="string">&#x27;遍历4&#x27;</span>, <span class="number">2</span>, <span class="number">18</span>, <span class="number">4</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user_plan`(`id`, `name`, `sex`, `age`, `count`) <span class="keyword">VALUES</span> (<span class="number">5</span>, <span class="string">&#x27;遍历5&#x27;</span>, <span class="number">2</span>, <span class="number">18</span>, <span class="number">4</span>);</span><br></pre></td></tr></table></figure><p>那么过程的实现如下</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">procedure</span> if <span class="keyword">exists</span> pro_cursor;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 定义</span></span><br><span class="line">delimiter $$</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> pro_cursor()</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">declare</span> var_i <span class="type">int</span>;</span><br><span class="line"><span class="keyword">declare</span> var_name <span class="type">varchar</span>(<span class="number">32</span>);</span><br><span class="line"><span class="keyword">declare</span> var_sex tinyint;</span><br><span class="line"><span class="keyword">declare</span> var_age <span class="type">int</span>;</span><br><span class="line"><span class="keyword">declare</span> var_count <span class="type">int</span>;</span><br><span class="line"><span class="keyword">declare</span> done <span class="type">int</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">-- 定义游标</span></span><br><span class="line"><span class="keyword">declare</span> my_cursor <span class="keyword">cursor</span> <span class="keyword">for</span> <span class="keyword">select</span> name, sex, age, count <span class="keyword">from</span> tb_user_plan;</span><br><span class="line"><span class="keyword">declare</span> continue handler <span class="keyword">for</span> <span class="keyword">not</span> found <span class="keyword">set</span> done <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 打开游标</span></span><br><span class="line"><span class="keyword">open</span> my_cursor;</span><br><span class="line"><span class="comment">-- 遍历游标</span></span><br><span class="line">my_label:loop</span><br><span class="line"><span class="comment">-- 取出每一项的值</span></span><br><span class="line"><span class="keyword">fetch</span> my_cursor <span class="keyword">into</span> var_name, var_sex, var_age, var_count;</span><br><span class="line"><span class="comment">-- 如果遍历完成则退出</span></span><br><span class="line">if done<span class="operator">=</span><span class="number">1</span> <span class="keyword">then</span></span><br><span class="line">leave my_label;</span><br><span class="line"><span class="keyword">end</span> if;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 循环业务</span></span><br><span class="line"><span class="keyword">set</span> var_i <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">while var_i<span class="operator">&lt;</span>var_count do</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tb_user`(`name`, `sex`, `age`) <span class="keyword">VALUES</span> (var_name, var_sex, var_age);</span><br><span class="line"><span class="keyword">set</span> var_i <span class="operator">=</span> var_i<span class="operator">+</span><span class="number">1</span>;</span><br><span class="line"><span class="keyword">end</span> while;</span><br><span class="line"><span class="keyword">end</span> loop my_label;</span><br><span class="line"><span class="comment">-- 关闭游标</span></span><br><span class="line"><span class="keyword">close</span> my_cursor;</span><br><span class="line"><span class="keyword">end</span> $$</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 调用</span></span><br><span class="line"><span class="keyword">call</span> pro_cursor();</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看表</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_user <span class="keyword">where</span> name <span class="keyword">like</span> <span class="string">&#x27;遍历%&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220513092658.png" alt="image-20220513092657552" /></p><p>在使用上的流程简单说就是</p><ol><li class="lvl-3"><p>定义游标</p></li><li class="lvl-3"><p>打开游标</p></li><li class="lvl-3"><p>遍历游标，使用<code>loop</code>方式</p></li><li class="lvl-3"><p>如果游标遍历完成，使用<code>leave</code>方式离开循环</p></li><li class="lvl-3"><p>业务，过程体</p></li><li class="lvl-3"><p>循环结束，与步骤3行成闭环</p></li><li class="lvl-3"><p>关闭游标，与步骤2行成闭环</p></li></ol><h3 id="6）异常">6）异常</h3><p>在存储过程运行的过程中，程序会发生一些有一定可能会出现的异常，如果不对这些异常进行处理，会导致我们的存储过程运行失败。所以对应<code>Java</code>中的<code>try...catch...</code>，存储过程也有一套自己的异常捕获处理方式。</p><p>在上面的定义游标时，应该有发现了，我们额外定义了一个<code>continue handler</code>，如下</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> continue handler <span class="keyword">for</span> <span class="keyword">not</span> found <span class="keyword">set</span> done <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>这就要和我们要讲得异常处理有关，上面这个只是其中之一。实际上有三个概念，分别如下</p><ul class="lvl-0"><li class="lvl-2"><p>condition</p></li><li class="lvl-2"><p>handler</p></li><li class="lvl-2"><p>diagnostics area</p></li></ul><h4 id="6-1）CONDITION">6.1）CONDITION</h4><p>存储过程中出现的异常被称为<code>condition</code>，就像<code>java</code>中的<code>Exception</code>一样。</p><p>我们可以定义一个<code>condition</code>，<code>MySQL</code>官方说的，定义语法结构如下</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> condition_name <span class="keyword">CONDITION</span> <span class="keyword">FOR</span> condition_value</span><br><span class="line"></span><br><span class="line">condition_value: &#123;</span><br><span class="line">    mysql_error_code</span><br><span class="line">  <span class="operator">|</span> <span class="keyword">SQLSTATE</span> [<span class="keyword">VALUE</span>] sqlstate_value</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段语句声明了一个错误条件，将名称与需要特定处理的条件相关联。此处定义的<code>condition</code>将会在后续被<code>handler</code>进行处理。</p><blockquote><p>很多人不清楚<code>condition_value</code>是什么，上面官方语法结构已经说了，分别可以是<code>mysql_error_code</code>、``</p><ul class="lvl-1"><li class="lvl-2">mysql_error_code：表示 MySQL 错误代码的整数文字，查看<a href="https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-reference.html">官网</a>有哪些错误代码<ul class="lvl-3"><li class="lvl-4">不要使用 MySQL 错误代码 0，因为这表示成功而不是错误条件</li></ul></li><li class="lvl-2">SQLSTATE [VALUE] sqlstate_value：一个 5 字符的字符串文字，指示 SQLSTATE 值，查看<a href="https://dev.mysql.com/doc/mysql-errors/8.0/en/server-error-reference.html">官网</a>有哪些错误代码<ul class="lvl-3"><li class="lvl-4">不要使用以 开头的 SQLSTATE 值， '00’因为它们表示成功而不是错误情况</li></ul></li></ul></blockquote><p>使用<code>mysql_error_code</code>声明<code>condition</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> no_such_table <span class="keyword">CONDITION</span> <span class="keyword">FOR</span> <span class="number">1051</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> CONTINUE HANDLER <span class="keyword">FOR</span> no_such_table<span class="comment">-- handler，下一小章会讲到</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="comment">-- body of handler</span></span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure><p>使用<code>SQLSTATE</code>值声明<code>condition</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> no_such_table <span class="keyword">CONDITION</span> <span class="keyword">FOR</span> <span class="keyword">SQLSTATE</span> <span class="string">&#x27;42S02&#x27;</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> CONTINUE HANDLER <span class="keyword">FOR</span> no_such_table</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="comment">-- body of handler</span></span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure><p>在官网的错误代码列表可以搜到，<code>1051</code>和 <code>42s02</code>指的是没有找到表</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220515123506.png" alt="image-20220515123502071" /></p><h4 id="6-2）HANDLER">6.2）HANDLER</h4><p>在上面已经两次提到了<code>handler</code>，大家应该知道了它的作用了吧。这个<code>handler</code>是用来处理<code>condition</code>的，当<code>condition</code>发生时，就会执行<code>handler</code>中的处理逻辑。</p><p>官网的文档，语法结构图如下</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> handler_action HANDLER</span><br><span class="line">    <span class="keyword">FOR</span> condition_value [, condition_value] ...</span><br><span class="line">    statement</span><br><span class="line"></span><br><span class="line">handler_action: &#123;</span><br><span class="line">    CONTINUE</span><br><span class="line">  <span class="operator">|</span> EXIT</span><br><span class="line">  <span class="operator">|</span> UNDO</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">condition_value: &#123;</span><br><span class="line">    mysql_error_code</span><br><span class="line">  <span class="operator">|</span> <span class="keyword">SQLSTATE</span> [<span class="keyword">VALUE</span>] sqlstate_value</span><br><span class="line">  <span class="operator">|</span> condition_name</span><br><span class="line">  <span class="operator">|</span> <span class="keyword">SQLWARNING</span></span><br><span class="line">  <span class="operator">|</span> <span class="keyword">NOT</span> FOUND</span><br><span class="line">  <span class="operator">|</span> <span class="keyword">SQLEXCEPTION</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过语法结构来看，我们可以发现这些信息</p><ul class="lvl-0"><li class="lvl-2"><p>一个<code>handler</code>，可以处理多个<code>condition</code></p></li><li class="lvl-2"><p>我们可以不再定义<code>condition</code>，因为<code>handler</code>中可以直接使用<code>mysql_error_code</code>和<code>SQLSTATE</code></p></li><li class="lvl-2"><p>处理逻辑一共有三种</p><ul class="lvl-2"><li class="lvl-4">CONTINUE：继续执行</li><li class="lvl-4">EXIT：退出</li><li class="lvl-4">UNDO：目前还不支持</li></ul></li><li class="lvl-2"><p>其中<code>condition_value</code>还支持其他三种类型的，分别是</p><ul class="lvl-2"><li class="lvl-4">SQLWARNING：统称，以<code>01</code>为开头的<code>SQLSTATE</code>集合</li><li class="lvl-4">NOT FOUND：统称，以<code>02</code>为开头的<code>SQLSTATE</code>集合</li><li class="lvl-4">SQLEXCEPTION：不以<code>00</code>、<code>01</code>或<code>02</code>开头的<code>SQLSTATE</code>值</li></ul></li></ul><p>语法定义就是这样，我们来看官<a href="https://dev.mysql.com/doc/refman/8.0/en/declare-handler.html">网上</a>的这个例子</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test.t (s1 <span class="type">INT</span>, <span class="keyword">PRIMARY</span> KEY (s1));</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> delimiter <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> handlerdemo ()</span><br><span class="line">       <span class="keyword">BEGIN</span></span><br><span class="line">         <span class="keyword">DECLARE</span> CONTINUE HANDLER <span class="keyword">FOR</span> <span class="keyword">SQLSTATE</span> <span class="string">&#x27;23000&#x27;</span> <span class="keyword">SET</span> <span class="variable">@x2</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">         <span class="keyword">SET</span> <span class="variable">@x</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">         <span class="keyword">INSERT</span> <span class="keyword">INTO</span> test.t <span class="keyword">VALUES</span> (<span class="number">1</span>);</span><br><span class="line">         <span class="keyword">SET</span> <span class="variable">@x</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">         <span class="keyword">INSERT</span> <span class="keyword">INTO</span> test.t <span class="keyword">VALUES</span> (<span class="number">1</span>);</span><br><span class="line">         <span class="keyword">SET</span> <span class="variable">@x</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">       <span class="keyword">END</span>;</span><br><span class="line">       <span class="operator">/</span><span class="operator">/</span></span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">CALL</span> handlerdemo()<span class="operator">/</span><span class="operator">/</span></span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="variable">@x</span><span class="operator">/</span><span class="operator">/</span></span><br><span class="line">    <span class="operator">+</span><span class="comment">------+</span></span><br><span class="line">    <span class="operator">|</span> <span class="variable">@x</span>   <span class="operator">|</span></span><br><span class="line">    <span class="operator">+</span><span class="comment">------+</span></span><br><span class="line">    <span class="operator">|</span> <span class="number">3</span>    <span class="operator">|</span></span><br><span class="line">    <span class="operator">+</span><span class="comment">------+</span></span><br><span class="line">    <span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>简单的说，就是一张表，重复插入，导致主键冲突的<code>condition</code>，这边<code>handler</code>的处理是继续执行。</p><p>所以当<code>12行</code>报错时，<code>13行</code>依旧会进行执行，所以最后的答案就是<code>3</code></p><hr /><p>当我们要忽略某个<code>condition</code>时，请为其声明一个<code>condition</code> 处理程序并将其与一个空块相关联，<code>begin...end</code>，如下</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> CONTINUE HANDLER <span class="keyword">FOR</span> <span class="keyword">SQLWARNING</span> <span class="keyword">BEGIN</span> <span class="keyword">END</span>;</span><br></pre></td></tr></table></figure><p>在使用循环时，需要注意<mark>块标签的范围不包括在块中声明的处理程序的代码</mark>，听着有点拗口，我们直接看官方的例子</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> p ()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  <span class="keyword">DECLARE</span> i <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">3</span>;</span><br><span class="line">  retry:</span><br><span class="line">    REPEAT</span><br><span class="line">      <span class="keyword">BEGIN</span></span><br><span class="line">        <span class="keyword">DECLARE</span> CONTINUE HANDLER <span class="keyword">FOR</span> <span class="keyword">SQLWARNING</span></span><br><span class="line">          <span class="keyword">BEGIN</span></span><br><span class="line">            ITERATE retry;    # illegal</span><br><span class="line">          <span class="keyword">END</span>;</span><br><span class="line">        IF i <span class="operator">&lt;</span> <span class="number">0</span> <span class="keyword">THEN</span></span><br><span class="line">          LEAVE retry;        # legal</span><br><span class="line">        <span class="keyword">END</span> IF;</span><br><span class="line">        <span class="keyword">SET</span> i <span class="operator">=</span> i <span class="operator">-</span> <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">END</span>;</span><br><span class="line">    UNTIL <span class="literal">FALSE</span> <span class="keyword">END</span> REPEAT;</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure><p>在程序执行时，会报出下面这个异常</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220515133949.png" alt="image-20220515133947988" /></p><p>这是因为，<code>retry</code>标签在 <code>if</code>块内的语句的范围内 。它不在<code>handler</code>处理程序的范围内，因此那里的引用无效并导致错误。</p><p>简单的来说，就是<code>handler</code>不能使用<code>leave</code>或者<code>iterate</code>操控外部的循环。</p><p>所以，如果爆出异常，我们要退出时，可以这样</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> EXIT HANDLER <span class="keyword">FOR</span> <span class="keyword">SQLWARNING</span> <span class="keyword">BEGIN</span> <span class="keyword">END</span>;</span><br></pre></td></tr></table></figure><p>如果我们还需要做一些处理的话，我们可以这样</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> EXIT HANDLER <span class="keyword">FOR</span> <span class="keyword">SQLWARNING</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">block cleanup statements</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure><p>当然，我们也可以定义一个临时变量，当做状态。就像上面游标的处理方式一样，具体如下</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> p ()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  <span class="keyword">DECLARE</span> i <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">DECLARE</span> done <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="literal">FALSE</span>;</span><br><span class="line">  retry:</span><br><span class="line">    REPEAT</span><br><span class="line">      <span class="keyword">BEGIN</span></span><br><span class="line">        <span class="keyword">DECLARE</span> CONTINUE HANDLER <span class="keyword">FOR</span> <span class="keyword">SQLWARNING</span></span><br><span class="line">          <span class="keyword">BEGIN</span></span><br><span class="line">            <span class="keyword">SET</span> done <span class="operator">=</span> <span class="literal">TRUE</span>;</span><br><span class="line">          <span class="keyword">END</span>;</span><br><span class="line">        IF done <span class="keyword">OR</span> i <span class="operator">&lt;</span> <span class="number">0</span> <span class="keyword">THEN</span></span><br><span class="line">          LEAVE retry;</span><br><span class="line">        <span class="keyword">END</span> IF;</span><br><span class="line">        <span class="keyword">SET</span> i <span class="operator">=</span> i <span class="operator">-</span> <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">END</span>;</span><br><span class="line">    UNTIL <span class="literal">FALSE</span> <span class="keyword">END</span> REPEAT;</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure><p>爆出异常后，修改状态值，后续的程序后判断这个状态，来进行<code>leave</code>或者<code>iterate</code></p><h4 id="6-3）Diagnostics-Area">6.3）Diagnostics Area</h4><p><code>Diagnostics Area</code>是诊断区域，查看<a href="https://dev.mysql.com/doc/refman/8.0/en/diagnostics-area.html">官方文档</a>。</p><p>感觉有点用不到，暂时先不做记录了</p><h2 id="四、最后">四、最后</h2><p>存储过程以前就在用，但也是和平常懒人一下，用到的时候导出翻博客，没有记录自己的笔记。</p><p>这很不好，正好趁这次把存储过程过了一遍，问题不大。</p><p>本文写得不是很深，如果有什么新的注意点，我会在此进行更新的。</p><p>我是半月，祝你幸福！！！</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>盘点MySQL中常用的函数</title>
      <link href="/archive/16bbf730/"/>
      <url>/archive/16bbf730/</url>
      
        <content type="html"><![CDATA[<h1>盘点MySQL中常用的函数</h1><h2 id="一、介绍">一、介绍</h2><p>在平常使用MySQL的过程中，我们常常会使用到其中的函数。有些函数常用，就会非常熟悉，但有些不经常使用就会十分生疏。</p><p>避免使用到的时候，到处去翻博客，干脆自己总结，记录一下，顺便也加深一下自己的印象。</p><h2 id="二、函数">二、函数</h2><h3 id="1）聚合函数">1）聚合函数</h3><p>聚合函数又称为组函数，一般结合分组进行使用，用来统计和计算。</p><p>聚合函数在平常的<code>sql</code>中十分常用，不需要查阅文档就应该保证熟练使用</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- avg 计算平均值</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">avg</span>(age) <span class="keyword">from</span> tb_user;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- count，计算行数</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="number">1</span>) <span class="keyword">from</span> tb_user;</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> tb_user;</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(name) <span class="keyword">from</span> tb_user;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- max，最大数</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">max</span>(age) <span class="keyword">from</span> tb_user;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- min，最小数</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">min</span>(age) <span class="keyword">from</span> tb_user;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- sum，求和</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">sum</span>(age) <span class="keyword">from</span> tb_user;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- group_concat 分组聚合，以逗号分隔</span></span><br><span class="line"><span class="keyword">select</span> sex, group_concat(name) <span class="keyword">from</span> tb_user <span class="keyword">group</span> <span class="keyword">by</span> sex;</span><br></pre></td></tr></table></figure><p>需要注意的是，聚合函数不会对<code>null</code>值进行计算。由于它会略过<code>null</code>值，具体业务情况需要酌情分析。</p><h3 id="2）字符串函数">2）字符串函数</h3><p>在处理字符串上，<code>MySQL</code>也有一套自己的处理函数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- concat 合并字符串</span></span><br><span class="line"><span class="keyword">select</span> concat(<span class="string">&#x27;000&#x27;</span>, <span class="string">&#x27;111&#x27;</span>, <span class="string">&#x27;222&#x27;</span>);<span class="comment">-- 000111222</span></span><br><span class="line"><span class="keyword">select</span> concat(<span class="string">&#x27;000&#x27;</span>, <span class="keyword">null</span>, <span class="string">&#x27;222&#x27;</span>);<span class="comment">-- null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 对于合并字符串，还可以这样写，在字符串中间用空格隔开。不推荐，可读性不是很好</span></span><br><span class="line"><span class="keyword">select</span> <span class="string">&#x27;000&#x27;</span> <span class="string">&#x27;111&#x27;</span> <span class="string">&#x27;222&#x27;</span>;<span class="comment">-- 000111222</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- concat_ws，合并字符串，与上面不同的是，此处第一个参数是分隔符</span></span><br><span class="line"><span class="keyword">select</span> concat_ws(<span class="string">&#x27;-&#x27;</span>, <span class="string">&#x27;000&#x27;</span>, <span class="string">&#x27;111&#x27;</span>, <span class="string">&#x27;222&#x27;</span>);<span class="comment">-- 000-111-222</span></span><br><span class="line"><span class="keyword">select</span> concat_ws(<span class="keyword">null</span>, <span class="string">&#x27;000&#x27;</span>, <span class="string">&#x27;111&#x27;</span>, <span class="string">&#x27;222&#x27;</span>);<span class="comment">-- null</span></span><br><span class="line"><span class="keyword">select</span> concat_ws(<span class="string">&#x27;-&#x27;</span>, <span class="string">&#x27;000&#x27;</span>, <span class="keyword">null</span>, <span class="string">&#x27;222&#x27;</span>);<span class="comment">-- 000-222</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- length，返回字符串的字节长度</span></span><br><span class="line"><span class="keyword">select</span> length(<span class="string">&#x27;0123456&#x27;</span>);<span class="comment">-- 7</span></span><br><span class="line"><span class="keyword">select</span> length(<span class="string">&#x27;半月无霜&#x27;</span>);<span class="comment">-- 12</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- reverse，反转字符串</span></span><br><span class="line"><span class="keyword">select</span> reverse(<span class="string">&#x27;0123456&#x27;</span>);<span class="comment">-- 6543210</span></span><br><span class="line"><span class="keyword">select</span> reverse(<span class="string">&#x27;半月无霜&#x27;</span>);<span class="comment">-- 霜无月半</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- lower，将字符串中的所有字母都变成小写</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">upper</span>(<span class="string">&#x27;ABCD&#x27;</span>);<span class="comment">-- abcd</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- upper，将字符串中的所有字母都变成大写</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">upper</span>(<span class="string">&#x27;abcd&#x27;</span>);<span class="comment">-- ABCD</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- left，从左到右进行截取指定数量的字符</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">left</span>(<span class="string">&#x27;0123456&#x27;</span>, <span class="number">2</span>);<span class="comment">-- 01</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- right，从右到左进行截取指定数量的字符</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">right</span>(<span class="string">&#x27;0123456&#x27;</span>, <span class="number">2</span>);<span class="comment">-- 56</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- lpad，从字符串左边进行填充，直到长度到达指定字符长度</span></span><br><span class="line"><span class="keyword">select</span> lpad(<span class="string">&#x27;1&#x27;</span>, <span class="number">5</span>, <span class="string">&#x27;0&#x27;</span>);<span class="comment">-- 00001</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- rpad，从字符串右边进行填充，直到长度到达指定字符长度</span></span><br><span class="line"><span class="keyword">select</span> rpad(<span class="string">&#x27;1&#x27;</span>, <span class="number">5</span>, <span class="string">&#x27;0&#x27;</span>);<span class="comment">-- 10000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- ltrim，去除字符串右边的空格</span></span><br><span class="line"><span class="keyword">select</span> ltrim(<span class="string">&#x27;   1000&#x27;</span>);<span class="comment">-- 1000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- rtrim，去除字符串右边的空格</span></span><br><span class="line"><span class="keyword">select</span> rtrim(<span class="string">&#x27;1000   &#x27;</span>);<span class="comment">-- 1000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- trim，去除字符串左右两边的空格</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">trim</span>(<span class="string">&#x27;  1000  &#x27;</span>);<span class="comment">-- 1000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- repeat，将字符串重复指定的次数</span></span><br><span class="line"><span class="keyword">select</span> repeat(<span class="string">&#x27;1000&#x27;</span>, <span class="number">3</span>);<span class="comment">-- 100010001000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- replace，将字符串替换其中指定的字符</span></span><br><span class="line"><span class="keyword">select</span> replace(<span class="string">&#x27;我喜欢你&#x27;</span>, <span class="string">&#x27;喜欢&#x27;</span>, <span class="string">&#x27;讨厌&#x27;</span>);<span class="comment">-- 我讨厌你</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- strcmp，字符串比较</span></span><br><span class="line"><span class="keyword">select</span> strcmp(<span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;abc&#x27;</span>);<span class="comment">-- 0，相等返回0</span></span><br><span class="line"><span class="keyword">select</span> strcmp(<span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;abcd&#x27;</span>);<span class="comment">-- -1，前字符串&lt;后字符串 返回1</span></span><br><span class="line"><span class="keyword">select</span> strcmp(<span class="string">&#x27;abcd&#x27;</span>, <span class="string">&#x27;abc&#x27;</span>);<span class="comment">-- 1，前字符串&gt;后字符串 返回-1</span></span><br><span class="line"><span class="keyword">select</span> strcmp(<span class="string">&#x27;abc&#x27;</span>, <span class="keyword">null</span>);<span class="comment">-- null，有null值计算，返回null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- substring，截取字符串，从指定的位置开始，截取指定数量的字符</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">substring</span>(<span class="string">&#x27;0123456&#x27;</span>, <span class="number">2</span>, <span class="number">1</span>);<span class="comment">-- 1</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">substring</span>(<span class="string">&#x27;0123456&#x27;</span>, <span class="number">2</span>, <span class="number">4</span>);<span class="comment">-- 1234</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- insert，替换字符串，将从指定的位置开始，到指定的数量的字符串，替换为新字符串</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">insert</span>(<span class="string">&#x27;0123456&#x27;</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="string">&#x27;A&#x27;</span>);<span class="comment">-- 0A23456</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">insert</span>(<span class="string">&#x27;0123456&#x27;</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="string">&#x27;ABCD&#x27;</span>);<span class="comment">-- 0ABCD56</span></span><br></pre></td></tr></table></figure><h3 id="3）数字计算函数">3）数字计算函数</h3><p>除去加减乘除的符号外，数字计算上，<code>MySQL</code>也提供了一些常用的数学计算函数。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- abs，绝对值</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">abs</span>(<span class="number">-1</span>);<span class="comment">-- 1</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">abs</span>(<span class="number">1</span>);<span class="comment">-- 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- sqrt, 开平方</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">sqrt</span>(<span class="number">4</span>);<span class="comment">-- 2</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">sqrt</span>(<span class="number">9</span>);<span class="comment">-- 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- mod，求余数</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">MOD</span>(<span class="number">9</span>, <span class="number">2</span>);<span class="comment">-- 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- ceil、ceiling，返回整数，向上取整</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">ceil</span>(<span class="number">3.14</span>);<span class="comment">-- 4</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">ceiling</span>(<span class="number">3.14</span>);<span class="comment">-- 4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- floor，返回整数，向下取整</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">floor</span>(<span class="number">3.14</span>);<span class="comment">-- 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- round，四舍五入</span></span><br><span class="line"><span class="keyword">select</span> round(<span class="number">3.14</span>);<span class="comment">-- 3</span></span><br><span class="line"><span class="keyword">select</span> round(<span class="number">2.76</span>);<span class="comment">-- 3</span></span><br><span class="line"><span class="keyword">select</span> round(<span class="number">2.8828</span>, <span class="number">2</span>);<span class="comment">-- 2.88</span></span><br><span class="line"><span class="keyword">select</span> round(<span class="number">2.8828</span>, <span class="number">3</span>);<span class="comment">-- 2.883</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- rand，返回一个0-1之间的随机数</span></span><br><span class="line"><span class="keyword">select</span> rand();<span class="comment">-- 0.5440051923915792</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- sign，返回参数的符号，负整数返回-1，正整数返回1，0返回0</span></span><br><span class="line"><span class="keyword">select</span> sign(<span class="number">0</span>);<span class="comment">-- 0</span></span><br><span class="line"><span class="keyword">select</span> sign(<span class="number">88</span>);<span class="comment">-- 1</span></span><br><span class="line"><span class="keyword">select</span> sign(<span class="number">-7</span>);<span class="comment">-- -1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- pow、power，幂次方</span></span><br><span class="line"><span class="keyword">select</span> pow(<span class="number">2</span>, <span class="number">3</span>);<span class="comment">-- 8</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">power</span>(<span class="number">2</span>, <span class="number">3</span>);<span class="comment">-- 8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- pi，圆周率π</span></span><br><span class="line"><span class="keyword">select</span> pi();<span class="comment">-- 3.141593</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- sin，正弦值</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">sin</span>(<span class="number">0.5</span><span class="operator">*</span>pi());<span class="comment">-- 1</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">sin</span>(<span class="number">1</span>);<span class="comment">-- 0.8414709848078965</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- asin，反正弦值</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">asin</span>(<span class="number">0.8414709848078965</span>)<span class="comment">-- 1</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">asin</span>(<span class="number">2</span>);<span class="comment">-- null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- cos，余弦值</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">cos</span>(<span class="number">0</span>);<span class="comment">-- 1</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">cos</span>(pi());<span class="comment">-- -1</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">cos</span>(<span class="number">1</span>);<span class="comment">-- 0.5403023058681398</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- acos，反余弦值</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">acos</span>(<span class="number">1</span>);<span class="comment">-- 0</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">acos</span>(<span class="number">-1</span>);<span class="comment">-- 3.141592653589793</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">acos</span>(<span class="number">2</span>);<span class="comment">-- null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- tan，正切值</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">tan</span>(<span class="number">0</span>);<span class="comment">-- 0</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">tan</span>(<span class="number">1</span>);<span class="comment">-- 1.5574077246549023</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- atan，反正切值</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">atan</span>(<span class="number">0</span>);<span class="comment">-- 0</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">atan</span>(<span class="number">1</span>, <span class="number">1</span>);<span class="comment">-- 0.7853981633974483</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- cot，余切值</span></span><br><span class="line"><span class="keyword">select</span> cot(<span class="number">1</span>);<span class="comment">-- 0.6420926159343306</span></span><br></pre></td></tr></table></figure><h3 id="4）流程控制函数">4）流程控制函数</h3><p>就是判断啦</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- if，判断函数</span></span><br><span class="line"><span class="keyword">select</span> if(<span class="number">88</span><span class="operator">&gt;</span><span class="number">60</span>, <span class="string">&#x27;合格&#x27;</span>, <span class="string">&#x27;不合格&#x27;</span>);<span class="comment">-- 合格</span></span><br><span class="line"><span class="keyword">select</span> if(<span class="number">59</span><span class="operator">&gt;</span><span class="number">60</span>, <span class="string">&#x27;合格&#x27;</span>, <span class="string">&#x27;不合格&#x27;</span>);<span class="comment">-- 不合格</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- ifnull，判断是否为空</span></span><br><span class="line"><span class="keyword">select</span> ifnull(<span class="keyword">null</span>, <span class="number">0</span>);<span class="comment">-- null</span></span><br><span class="line"><span class="keyword">select</span> ifnull(<span class="number">55</span>, <span class="number">0</span>);<span class="comment">-- 55</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- case when，也是个流程控制的，但不属于函数</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">case</span> </span><br><span class="line"><span class="keyword">when</span> <span class="number">80</span><span class="operator">&gt;</span><span class="number">90</span> <span class="keyword">then</span> <span class="string">&#x27;优秀&#x27;</span> </span><br><span class="line"><span class="keyword">when</span> <span class="number">80</span><span class="operator">&gt;</span><span class="number">70</span> <span class="keyword">then</span> <span class="string">&#x27;良好&#x27;</span> </span><br><span class="line"><span class="keyword">when</span> <span class="number">80</span><span class="operator">&gt;</span><span class="number">60</span> <span class="keyword">then</span> <span class="string">&#x27;一般&#x27;</span> </span><br><span class="line"><span class="keyword">else</span> <span class="string">&#x27;差劲&#x27;</span> <span class="keyword">end</span> <span class="keyword">as</span> rate;<span class="comment">-- 良好</span></span><br></pre></td></tr></table></figure><h3 id="5）日期函数">5）日期函数</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- curdate、current_date，返回当前日期</span></span><br><span class="line"><span class="keyword">select</span> curdate();<span class="comment">-- 2022-05-01</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">current_date</span>();<span class="comment">-- 2022-05-01</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- curtime、current_time，返回当前时间</span></span><br><span class="line"><span class="keyword">select</span> curtime();<span class="comment">-- 22:04:30</span></span><br><span class="line"><span class="keyword">select</span> 、();<span class="comment">-- 22:04:30</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- now、sysdate，返回当前日期时间</span></span><br><span class="line"><span class="keyword">select</span> now();<span class="comment">-- 2022-05-01 22:05:25</span></span><br><span class="line"><span class="keyword">select</span> sysdate();<span class="comment">-- 2022-05-01 22:05:25</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- unix_timestamp，返回当前unix时间戳</span></span><br><span class="line"><span class="keyword">select</span> unix_timestamp();<span class="comment">-- 1651414009</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- from_unixtime，格式化unix时间戳</span></span><br><span class="line"><span class="keyword">select</span> from_unixtime(<span class="number">1651414009</span>);<span class="comment">-- 2022-05-01 22:06:49</span></span><br><span class="line"><span class="keyword">select</span> from_unixtime(<span class="number">1651414009</span>, <span class="string">&#x27;%Y-%m-%d&#x27;</span>);<span class="comment">-- 2022-05-01</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- year，返回指定日期的年份</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">year</span>(now());<span class="comment">-- 2022</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- month，返回指定日期的月份</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">month</span>(now());<span class="comment">-- 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- monthname，返回指定日期的月份英文名</span></span><br><span class="line"><span class="keyword">select</span> monthname(now());<span class="comment">-- May</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- day、dayofmonth，返回指定日期是一月中的第几天</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">day</span>(now());<span class="comment">-- 1</span></span><br><span class="line"><span class="keyword">select</span> dayofmonth(now());<span class="comment">-- 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- dayofyear，返回指定日期是一年中的第几天</span></span><br><span class="line"><span class="keyword">select</span> dayofyear(now());<span class="comment">-- 121</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- dayofweek，返回指定日期在一周的第几天，星期天是第一天，星期一是第二天</span></span><br><span class="line"><span class="keyword">select</span> dayofweek(<span class="string">&#x27;2022-05-01 10:00:00&#x27;</span>);<span class="comment">-- 1</span></span><br><span class="line"><span class="keyword">select</span> dayofweek(<span class="string">&#x27;2022-05-02 10:00:00&#x27;</span>);<span class="comment">-- 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- weekday，返回指定日期在一周内的索引值，星期一是0，星期日是6</span></span><br><span class="line"><span class="keyword">select</span> weekday(<span class="string">&#x27;2022-05-01 10:00:00&#x27;</span>);<span class="comment">-- 6</span></span><br><span class="line"><span class="keyword">select</span> weekday(<span class="string">&#x27;2022-05-02 10:00:00&#x27;</span>);<span class="comment">-- 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- week，返回指定日期是一年中的第几周</span></span><br><span class="line"><span class="keyword">select</span> week(now());<span class="comment">-- 18</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- dayname，返回指定日期是星期几英文名</span></span><br><span class="line"><span class="keyword">select</span> dayname(now());<span class="comment">-- Sunday</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- time_to_sec，返回指定时间的秒数</span></span><br><span class="line"><span class="keyword">select</span> time_to_sec(<span class="string">&#x27;00:00:11&#x27;</span>);<span class="comment">-- 11</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- sec_to_time，返回指定秒数的时间</span></span><br><span class="line"><span class="keyword">select</span> sec_to_time(<span class="number">11</span>);<span class="comment">-- 00:00:11</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- date_add、adddate，将指定日期添加指定的时间间隔</span></span><br><span class="line"><span class="keyword">select</span> date_add(<span class="string">&#x27;2022-05-01 10:00:00&#x27;</span>, <span class="type">INTERVAL</span> <span class="number">30</span> <span class="keyword">SECOND</span>);<span class="comment">-- 2022-05-01 10:00:30</span></span><br><span class="line"><span class="keyword">select</span> date_add(<span class="string">&#x27;2022-05-01 10:00:00&#x27;</span>, <span class="type">INTERVAL</span> <span class="string">&#x27;30:30&#x27;</span> MINUTE_SECOND);<span class="comment">-- 2022-05-01 10:30:30</span></span><br><span class="line"><span class="keyword">select</span> date_add(<span class="string">&#x27;2022-05-01 10:00:00&#x27;</span>, <span class="type">INTERVAL</span> <span class="number">30</span> <span class="keyword">MINUTE</span>);<span class="comment">-- 2022-05-01 10:30:00</span></span><br><span class="line"><span class="keyword">select</span> date_add(<span class="string">&#x27;2022-05-01 10:00:00&#x27;</span>, <span class="type">INTERVAL</span> <span class="number">2</span> <span class="keyword">HOUR</span>);<span class="comment">-- 2022-05-01 12:00:00</span></span><br><span class="line"><span class="keyword">select</span> date_add(<span class="string">&#x27;2022-05-01 10:00:00&#x27;</span>, <span class="type">INTERVAL</span> <span class="number">2</span> <span class="keyword">DAY</span>);<span class="comment">-- 2022-05-03 10:00:00</span></span><br><span class="line"><span class="keyword">select</span> date_add(<span class="string">&#x27;2022-05-01 10:00:00&#x27;</span>, <span class="type">INTERVAL</span> <span class="number">1</span> <span class="keyword">MONTH</span>);<span class="comment">-- 2022-06-01 10:00:00</span></span><br><span class="line"><span class="keyword">select</span> date_add(<span class="string">&#x27;2022-05-01 10:00:00&#x27;</span>, <span class="type">INTERVAL</span> <span class="number">1</span> <span class="keyword">YEAR</span>);<span class="comment">-- 2023-05-01 10:00:00</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- date_sub、subdate，将指定日期减去指定的时间间隔</span></span><br><span class="line"><span class="keyword">select</span> date_sub(<span class="string">&#x27;2022-05-01 10:00:00&#x27;</span>, <span class="type">INTERVAL</span> <span class="number">30</span> <span class="keyword">SECOND</span>);<span class="comment">-- 2022-05-01 09:59:30</span></span><br><span class="line"><span class="keyword">select</span> date_sub(<span class="string">&#x27;2022-05-01 10:00:00&#x27;</span>, <span class="type">INTERVAL</span> <span class="string">&#x27;30:30&#x27;</span> MINUTE_SECOND);<span class="comment">-- 2022-05-01 09:29:30</span></span><br><span class="line"><span class="keyword">select</span> date_sub(<span class="string">&#x27;2022-05-01 10:00:00&#x27;</span>, <span class="type">INTERVAL</span> <span class="number">30</span> <span class="keyword">MINUTE</span>);<span class="comment">-- 2022-05-01 09:30:00</span></span><br><span class="line"><span class="keyword">select</span> date_sub(<span class="string">&#x27;2022-05-01 10:00:00&#x27;</span>, <span class="type">INTERVAL</span> <span class="number">2</span> <span class="keyword">HOUR</span>);<span class="comment">-- 2022-05-01 08:00:00</span></span><br><span class="line"><span class="keyword">select</span> date_sub(<span class="string">&#x27;2022-05-01 10:00:00&#x27;</span>, <span class="type">INTERVAL</span> <span class="number">2</span> <span class="keyword">DAY</span>);<span class="comment">-- 2022-04-29 10:00:00</span></span><br><span class="line"><span class="keyword">select</span> date_sub(<span class="string">&#x27;2022-05-01 10:00:00&#x27;</span>, <span class="type">INTERVAL</span> <span class="number">1</span> <span class="keyword">MONTH</span>);<span class="comment">-- 2022-04-01 10:00:00</span></span><br><span class="line"><span class="keyword">select</span> date_sub(<span class="string">&#x27;2022-05-01 10:00:00&#x27;</span>, <span class="type">INTERVAL</span> <span class="number">1</span> <span class="keyword">YEAR</span>);<span class="comment">-- 2021-05-01 10:00:00</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- addtime，将指定的日期添加指定的时间</span></span><br><span class="line"><span class="keyword">select</span> addtime(<span class="string">&#x27;2022-05-01 10:00:00&#x27;</span>, <span class="string">&#x27;01:30:30&#x27;</span>);<span class="comment">-- 2022-05-01 11:30:30</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- subtime，将指定的日期添加指定的时间</span></span><br><span class="line"><span class="keyword">select</span> subtime(<span class="string">&#x27;2022-05-01 10:00:00&#x27;</span>, <span class="string">&#x27;01:30:30&#x27;</span>);<span class="comment">-- 2022-05-01 08:29:30</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- datediff，返回两个日期间相差的天数，参数1-参数2的日期</span></span><br><span class="line"><span class="keyword">select</span> datediff(<span class="string">&#x27;2022-05-01 10:00:00&#x27;</span>, <span class="string">&#x27;2022-05-02 10:00:00&#x27;</span>);<span class="comment">-- -1</span></span><br><span class="line"><span class="keyword">select</span> datediff(<span class="string">&#x27;2022-05-01 23:59:59&#x27;</span>, <span class="string">&#x27;2022-05-02 00:00:00&#x27;</span>);<span class="comment">-- -1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- date_format，返回日期格式化</span></span><br><span class="line"><span class="keyword">select</span> date_format(now(), <span class="string">&#x27;%Y-%m-%d&#x27;</span>);<span class="comment">-- 2022-05-01</span></span><br><span class="line"><span class="keyword">select</span> date_format(now(), <span class="string">&#x27;%Y-%m-%d %T&#x27;</span>);<span class="comment">-- 2022-05-01 23:27:51</span></span><br><span class="line"><span class="keyword">select</span> date_format(now(), <span class="string">&#x27;%Y-%m-%d %H:%i:%s&#x27;</span>);<span class="comment">-- 2022-05-01 23:27:51</span></span><br></pre></td></tr></table></figure><p>格式化参数有</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>%a</td><td>工作日的缩写名称（Sun~Sat)</td></tr><tr><td>%b</td><td>月份的缩写名称（Jan…Dec)</td></tr><tr><td>%c</td><td>月份，数字形式（0~12)</td></tr><tr><td>%D</td><td>带有英语后缀的该月日期(0th, 2st, 3nd,…）</td></tr><tr><td>%d</td><td>该月日期，数字形式（00~31)</td></tr><tr><td>%e</td><td>该月日期，数字形式（(0~31)</td></tr><tr><td>%f</td><td>微秒（000000 …999999)</td></tr><tr><td>%H</td><td>以 2 位数表示 24 小时（00~23)</td></tr><tr><td>%h, %I</td><td>以 2 位数表示 12 小时（01~12)</td></tr><tr><td>%i</td><td>分钟，数字形式(00~59)</td></tr><tr><td>%j</td><td>—年中的天数（001~366)</td></tr><tr><td>%k</td><td>以 24 小时（0~23)表示</td></tr><tr><td>%l</td><td>以12小时（1~12)表示</td></tr><tr><td>%M</td><td>月份名称（January~December)</td></tr><tr><td>%m</td><td>月份，数字形式（00~12)</td></tr><tr><td>%p</td><td>上午（AM) 或下午（PM)</td></tr><tr><td>%r</td><td>时间，12小时制（小时 (hh): 分钟 (mm) : 秒数 (ss) 后加 AM 或 PM)</td></tr><tr><td>%S, %s</td><td>以 2 位数形式表示秒（00~59)</td></tr><tr><td>%T</td><td>时间，24 小时制（小时 (hh): 分钟 (mm): 秒数 (ss))</td></tr><tr><td>%U</td><td>周（00~53)，其中周日为每周的第一天</td></tr><tr><td>%u</td><td>周（00~53)，其中周一为每周的第一天</td></tr><tr><td>%V</td><td>周（01~53)，其中周日为每周的第一天，和％X同时使用</td></tr><tr><td>%v</td><td>周（01~53)，其中周一为每周的第一天，和%x同时使用</td></tr><tr><td>%W</td><td>星期标识（周日、周一、周二…周六）</td></tr><tr><td>%w</td><td>—周中的每日（0= 周日…6= 周六）</td></tr><tr><td>%X</td><td>该周的年份，其中周日为每周的第一天，数字形式，4 位数，和％V同时使用</td></tr><tr><td>%x</td><td>该周的年份，其中周一为每周的第一天，数字形式，4位数，和%v同时使用</td></tr><tr><td>%Y</td><td>4 位数形式表示年份</td></tr><tr><td>%y</td><td>2 位数形式表示年份</td></tr><tr><td>%%</td><td>%一个文字字符</td></tr></tbody></table><h3 id="6）类型转换函数">6）类型转换函数</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- cast、convert，类型转换函数</span></span><br><span class="line"><span class="comment">-- 转换为浮点</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">cast</span>(<span class="string">&#x27;2022.87&#x27;</span> <span class="keyword">as</span> <span class="type">DECIMAL</span>);<span class="comment">-- 2023</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">cast</span>(<span class="string">&#x27;2022.87&#x27;</span> <span class="keyword">as</span> <span class="type">DECIMAL</span>(<span class="number">11</span>, <span class="number">2</span>));<span class="comment">-- 2022.87</span></span><br><span class="line"><span class="comment">-- 转换为整数</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">cast</span>(<span class="string">&#x27;2022.87&#x27;</span> <span class="keyword">as</span> SIGNED);<span class="comment">-- 2022</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">cast</span>(<span class="string">&#x27;-2022.87&#x27;</span> <span class="keyword">as</span> SIGNED);<span class="comment">-- -2022</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">cast</span>(<span class="string">&#x27;2022.87&#x27;</span> <span class="keyword">as</span> UNSIGNED);<span class="comment">-- 2022</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">cast</span>(<span class="string">&#x27;-2022.87&#x27;</span> <span class="keyword">as</span> UNSIGNED);<span class="comment">-- 18446744073709549594，无符号整数类型不支持负数</span></span><br><span class="line"><span class="comment">-- 字符串转为日期、时间、日期时间，格式必须是yyyy-MM-dd 或 yyyy-MM-dd HH:mm:ss</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">cast</span>(<span class="string">&#x27;2022-05-01 10:00:00&#x27;</span> <span class="keyword">as</span> <span class="type">DATE</span>);<span class="comment">-- 2022-05-01</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">cast</span>(<span class="string">&#x27;2022-05-01 10:00:00&#x27;</span> <span class="keyword">as</span> <span class="type">TIME</span>);<span class="comment">-- 10:00:00</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">cast</span>(<span class="string">&#x27;2022-05-01 10:00:00&#x27;</span> <span class="keyword">as</span> DATETIME);<span class="comment">-- 2022-05-01 10:00:00</span></span><br><span class="line"><span class="comment">-- 数字转为字符串</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">cast</span>(<span class="number">123</span> <span class="keyword">as</span> <span class="type">CHAR</span>);<span class="comment">-- 123</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">cast</span>(<span class="number">123</span> <span class="keyword">as</span> <span class="type">BINARY</span>);<span class="comment">-- 123</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- convert，字符集转换</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">convert</span>(<span class="string">&#x27;abc&#x27;</span> <span class="keyword">USING</span> utf8);<span class="comment">-- abc</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">convert</span>(<span class="string">&#x27;你好&#x27;</span> <span class="keyword">USING</span> latin1);<span class="comment">-- 乱码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 不是函数，但可以使用加号类解决</span></span><br><span class="line"><span class="keyword">select</span> <span class="string">&#x27;123&#x27;</span> <span class="operator">+</span> <span class="number">0</span>;<span class="comment">-- 123，数字类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- concat、可以使数字合并为字符串</span></span><br><span class="line"><span class="keyword">select</span> concat(<span class="number">0</span>, <span class="string">&#x27;&#x27;</span>);<span class="comment">-- 0，字符串类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- date_format、可以使日期时间格式化为字符串</span></span><br></pre></td></tr></table></figure><h3 id="7）系统函数">7）系统函数</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- version，版本号</span></span><br><span class="line"><span class="keyword">select</span> version();<span class="comment">-- 5.7.32-log</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- connection_id，连接id</span></span><br><span class="line"><span class="keyword">select</span> connection_id();<span class="comment">-- 119394</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- user、system_user、session_user，连接的用户</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">user</span>();<span class="comment">-- banmoon@61.140.236.57</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">system_user</span>();<span class="comment">-- banmoon@61.140.236.57</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">session_user</span>();<span class="comment">-- banmoon@61.140.236.57</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- current_user，连接允许的主机</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">current_user</span>();<span class="comment">-- banmoon@%</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- database、schema，</span></span><br><span class="line"><span class="keyword">select</span> database();<span class="comment">-- test</span></span><br><span class="line"><span class="keyword">select</span> schema();<span class="comment">-- test</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- inet_ntoa，将IPv4地址的dotted-quad表示形式作为字符串，并以整数形式返回给定IP地址的数值</span></span><br><span class="line"><span class="keyword">select</span> inet_aton(<span class="string">&#x27;192.168.0.101&#x27;</span>);<span class="comment">-- 3232235621</span></span><br><span class="line"><span class="keyword">select</span> inet_aton(<span class="string">&#x27;-111&#x27;</span>);<span class="comment">-- null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- inet_ntoa，以网络字节顺序获取IPv4地址，然后以dotted-quad字符串表示形式返回该地址</span></span><br><span class="line"><span class="keyword">select</span> inet_ntoa(<span class="string">&#x27;3232235621&#x27;</span>);<span class="comment">-- 192.168.0.101</span></span><br><span class="line"><span class="keyword">select</span> inet_ntoa(<span class="string">&#x27;-222&#x27;</span>);<span class="comment">-- null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- last_insert_id，获取上次插入的主键</span></span><br><span class="line"><span class="keyword">select</span> last_insert_id();<span class="comment">-- 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- md5，md5加密</span></span><br><span class="line"><span class="keyword">select</span> md5(<span class="string">&#x27;123456&#x27;</span>);<span class="comment">-- e10adc3949ba59abbe56e057f20f883e</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- password，加密</span></span><br><span class="line"><span class="keyword">select</span> password(<span class="string">&#x27;123456&#x27;</span>);<span class="comment">-- *6BB4837EB74329105EE4568DDA7DC67ED2CA2AD9</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- encode，加密</span></span><br><span class="line"><span class="keyword">select</span> encode(<span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;abc&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- decode，解密</span></span><br><span class="line"><span class="keyword">select</span> decode(encode(<span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;abc&#x27;</span>), <span class="string">&#x27;abc&#x27;</span>)<span class="comment">-- 123456</span></span><br></pre></td></tr></table></figure><h2 id="三、最后">三、最后</h2><p>本来是想将函数的定义也放在这里的，但想了想还是分开吧，自定义函数可以和存储过程一起出。</p><p>我是半月，祝你幸福！！！</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot中读取配置的几种方式</title>
      <link href="/archive/3ef4f50/"/>
      <url>/archive/3ef4f50/</url>
      
        <content type="html"><![CDATA[<h1>SpringBoot中读取配置的几种方式</h1><h2 id="一、介绍">一、介绍</h2><p>在SpringBoot项目中，我们使用<code>application.yml</code>或者<code>application.properties</code>文件，那么在如何读取其中的配置参数呢？</p><p>有以下这么几种</p><ol><li class="lvl-3"><p>使用@Value注解</p></li><li class="lvl-3"><p>使用@ConfigurationProperties注解</p></li><li class="lvl-3"><p>使用@PropertySource+@Value注解</p></li><li class="lvl-3"><p>使用@PropertySource+@ConfigurationProperties注解</p></li><li class="lvl-3"><p>使用Environment.getProperty()</p></li></ol><p>前面两种大家都很熟悉，也在常常使用，剩下这几个就比较陌生了，一起来看看吧。</p><h2 id="二、方法">二、方法</h2><h3 id="1）-Value注解">1）@Value注解</h3><p>假如我们有这样的一个<code>application.yml</code>配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8888</span></span><br></pre></td></tr></table></figure><p>对于这样单条的配置，我们可以采用@Value去进行获取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test.job;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.Scheduled;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestJob</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer port;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;0/3 * * * * *&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;端口号：&#123;&#125;&quot;</span>, port);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220408193721.png" alt="image-20220408193720017" /></p><p>优缺点也很明显，<b>简单快捷</b>，但只能单个单个获取，如果要<b>获取一批配置就会显得十分繁琐</b></p><hr /><p><b>注意，@Value不能用来修饰静态属性，会读取不到，导致属性为Null的</b></p><p>修改一下上面的属性，让它变成静态属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test.job;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.Scheduled;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestJob</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Integer port;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;0/3 * * * * *&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;端口号：&#123;&#125;&quot;</span>, port);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220408194156.png" alt="image-20220408194155386" /></p><p>那么，如果非要使用静态属性该怎么办呢？虽然不建议使用，哎可以改成这样。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test.job;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.Scheduled;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestJob</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Integer port;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPort</span><span class="params">(Integer port)</span> &#123;</span><br><span class="line">        TestJob.port = port;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;0/3 * * * * *&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;端口号：&#123;&#125;&quot;</span>, port);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>聪明的你马上就知道了是怎么一回事了，这和<mark>Bean的初始化</mark>有关。如果不懂，还是不要使用了，不然说不定获取到的还是一个Null</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220408194534.png" alt="image-20220408194533045" /></p><h3 id="2）-ConfigurationProperties注解">2）@ConfigurationProperties注解</h3><p>这个注解也十分熟悉，它可以将配置信息映射成我们的一个Bean，通过这个Bean，我们就可以获取到配置的信息啦。它解决上面@Value只能一个一个去获取配置的繁琐痛点。</p><p>假设我们现在有这样的一个配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">user:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">banmoon</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">18</span></span><br><span class="line">  <span class="attr">sex:</span> <span class="string">男</span></span><br><span class="line">  <span class="attr">friends:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">阿超</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">九月</span></span><br></pre></td></tr></table></figure><p>那么，我们只需要这样做，就可以映射成我们这个Bean了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserProperties</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; friends;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们再获取一下这个Bean，打印一下里面的信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test.job;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.test.config.UserProperties;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.PostConstruct;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestJob</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserProperties userProperties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;user配置信息：&#123;&#125;&quot;</span>, userProperties);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220408195820.png" alt="image-20220408195819605" /></p><p>这个注解比起@Value，编码的效率就快了不少</p><h3 id="3）-PropertySource-Value注解">3）@PropertySource+@Value注解</h3><p>在开发中，我们不只有<code>application.yml</code>一个配置文件，我们可能有多个，如果要加载其他的配置文件时。</p><p>@PropertySource注解就派上用场了，指定了加载哪个配置文件作为配置源。</p><p>假设我们现在多了一个<code>user.properties</code>的配置文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">other.port</span>=<span class="string">2333</span></span><br></pre></td></tr></table></figure><p>只需要小改，在类上添加@PropertySource注解，指定加载这个配置文件即可。</p><p>由于@PropertySource只是指定了加载哪个配置文件，所以它还需要搭配@Value注解进行使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test.job;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.PropertySource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.Scheduled;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:user.properties&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestJob</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;other.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String port;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;0/3 * * * * *&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;其他端口：&#123;&#125;&quot;</span>, port);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220408231156.png" alt="image-20220408222910402" /></p><h3 id="4）-PropertySource-ConfigurationProperties注解">4）@PropertySource+@ConfigurationProperties注解</h3><p>既然@PropertySource注解是指定加载某个配置文件，需要搭配@Value使用，那么它也可以搭配@ConfigurationProperties注解进行使用。</p><p>同样在<code>user.properties</code>文件中</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">user.name</span>=<span class="string">banmoon</span></span><br><span class="line"><span class="attr">user.age</span>=<span class="string">18</span></span><br><span class="line"><span class="attr">user.sex</span>=<span class="string">男</span></span><br><span class="line"><span class="attr">user.friends[0]</span>=<span class="string">钟离</span></span><br><span class="line"><span class="attr">user.friends[1]</span>=<span class="string">巴尔</span></span><br></pre></td></tr></table></figure><p>我们只需要在类上指定上@PropertySource即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.PropertySource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:user.properties&quot;)</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserProperties</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; friends;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在使用上，同上，这里代码就不贴出来了</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220408231146.png" alt="image-20220408231145746" /></p><h3 id="5）Environment-getProperty">5）Environment.getProperty()</h3><p>最后一种，见都没有见过，环境获取参数？</p><p>同样测试一下，获取个端口看看</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test.job;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.env.Environment;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.Scheduled;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestJob</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Environment environment;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;0/3 * * * * *&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;【environment】当前端口：&#123;&#125;&quot;</span>, environment.getProperty(<span class="string">&quot;server.port&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220408234443.png" alt="image-20220408234442334" /></p><p>此方法，支持动态的获取需要的参数，虽然平常不常用，但还是做一下记录。</p><h2 id="三、-PropertySource加载yml文件">三、@PropertySource加载yml文件</h2><p>在上面的示例中，<mark>@PropertySource加载的是properties文件</mark>，不代表它只能加载properties文件</p><p>比如说这次我们添加一个<code>example.yml</code>文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">example:</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">半月无霜</span></span><br></pre></td></tr></table></figure><p>在加载时，我们只需要这样指定就行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test.job;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.test.config.YamlPropertySourceFactory;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.PropertySource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.Scheduled;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@PropertySource(value = &quot;classpath:example.yml&quot;, factory = YamlPropertySourceFactory.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestJob</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;example.name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;0/3 * * * * *&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;加载其他yaml文件：&#123;&#125;&quot;</span>, name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220409093417.png" alt="image-20220409093416702" /></p><p>至于<code>YamlPropertySourceFactory.java</code>，这是我们自己实现的一个类，如下可以直接使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.env.YamlPropertySourceLoader;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.env.PropertySource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.support.DefaultPropertySourceFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.support.EncodedResource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">YamlPropertySourceFactory</span> <span class="keyword">extends</span> <span class="title class_">DefaultPropertySourceFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> PropertySource&lt;?&gt; createPropertySource(String name, EncodedResource resource) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">if</span> (resource == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">super</span>.createPropertySource(name, resource);</span><br><span class="line">        List&lt;PropertySource&lt;?&gt;&gt; sources = <span class="keyword">new</span> <span class="title class_">YamlPropertySourceLoader</span>()</span><br><span class="line">                .load(resource.getResource().getFilename(), resource.getResource());</span><br><span class="line">        <span class="keyword">return</span> sources.get(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、最后">四、最后</h2><p>我是半月，祝你幸福！！！</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用axios下载文件</title>
      <link href="/archive/88f528d7/"/>
      <url>/archive/88f528d7/</url>
      
        <content type="html"><![CDATA[<h1>使用axios下载文件</h1><h2 id="一、介绍">一、介绍</h2><p>在前后端分离的开发项目中，我们常常有下载文件或者报表的需求。</p><p>如果只是简单的下载，我们可以简单使用a标签请求后端就可以了，不过一旦涉及到后端报错的回调、等待动画、进度条这种的，就没有任何办法了。</p><p>所以，这里可以使用axios进行请求，获取到后端的文件流后，自己进行生成文件。这样就可以完成上面的那三种情况了。</p><h2 id="二、使用">二、使用</h2><h3 id="1）下载Excel文件">1）下载Excel文件</h3><p>我们点击下载按钮，将表单内容传入，返回一个对应的excel文件。</p><p>前端界面的话，如下所示</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220403155849.png" alt="image-20220403155847861" /></p><p>定义一下<code>UserDTO.java</code>，用来进行传参</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo.dto;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDTO</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义一下<code>ResultData.java</code>，用来统一后端的响应</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo.dto;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResultData</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer errCode;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String errMsg;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ResultData <span class="title function_">success</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResultData</span>(<span class="number">0</span>, <span class="string">&quot;&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ResultData <span class="title function_">fail</span><span class="params">(String errMsg)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResultData</span>(-<span class="number">1</span>, errMsg, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再写一个<code>TestController.java</code>，用来处理下载请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.poi.excel.ExcelUtil;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.poi.excel.ExcelWriter;</span><br><span class="line"><span class="keyword">import</span> com.example.demo.dto.ResultData;</span><br><span class="line"><span class="keyword">import</span> com.example.demo.dto.UserDTO;</span><br><span class="line"><span class="keyword">import</span> com.example.demo.utils.MyFileUtil;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@CrossOrigin(exposedHeaders = &#123;&quot;Content-disposition&quot;, &quot;Access-Control-Allow-Origin&quot;&#125;)</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/download&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResultData <span class="title function_">download</span><span class="params">(<span class="meta">@RequestBody</span> UserDTO userDTO, HttpServletResponse response)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(userDTO.getAge()&gt;<span class="number">18</span>)</span><br><span class="line">            <span class="keyword">return</span> ResultData.fail(<span class="string">&quot;愿你永远18岁&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ExcelWriter</span> <span class="variable">writer</span> <span class="operator">=</span> ExcelUtil.getWriter(<span class="literal">true</span>);</span><br><span class="line">            writer.writeRow(userDTO, <span class="literal">true</span>);</span><br><span class="line">            MyFileUtil.downloadFile(response, writer, <span class="string">&quot;用户示例.xlsx&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;出错了&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> ResultData.fail(<span class="string">&quot;网络波动，请稍后再试&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有一个<code>MyFileUtil.java</code>，用来对外输入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.io.FileUtil;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.io.IoUtil;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.poi.excel.ExcelWriter;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletOutputStream;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.URLEncoder;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyFileUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">downloadFile</span><span class="params">(HttpServletResponse response, ExcelWriter writer, String filename)</span>&#123;</span><br><span class="line">        <span class="type">ServletOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            out = response.getOutputStream();</span><br><span class="line">            response.setContentType(<span class="string">&quot;application/vnd.ms-excel;charset=utf-8&quot;</span>);</span><br><span class="line">            response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>,<span class="string">&quot;attachment;filename=&quot;</span> + URLEncoder.encode(filename, <span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line"></span><br><span class="line">            writer.flush(out, <span class="literal">true</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;io异常&quot;</span>, e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            writer.close();</span><br><span class="line">            IoUtil.close(out);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">downloadFile</span><span class="params">(HttpServletResponse response, File file, String filename)</span>&#123;</span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            out = response.getOutputStream();</span><br><span class="line">            response.setContentType(<span class="string">&quot;application/octet-stream&quot;</span>);</span><br><span class="line">            response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>,<span class="string">&quot;attachment;filename=&quot;</span> + URLEncoder.encode(filename, <span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">            response.setHeader(<span class="string">&quot;Content-Length&quot;</span>, String.valueOf(FileUtil.size(file)));</span><br><span class="line"></span><br><span class="line">            <span class="type">BufferedInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file.getPath()));</span><br><span class="line">            <span class="type">OutputStream</span> <span class="variable">toClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(response.getOutputStream());</span><br><span class="line">            IoUtil.copy(fis, toClient);</span><br><span class="line">            out.flush();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;io异常&quot;</span>, e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            IoUtil.close(out);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，后端就准备完成了，接下来看看前端怎么写</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://unpkg.com/element-ui/lib/theme-chalk/index.css&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/element-ui/lib/index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>下载Excel<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">:model</span>=<span class="string">&quot;formData&quot;</span> <span class="attr">label-width</span>=<span class="string">&quot;80px&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 300px;&quot;</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;姓名&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;formData.name&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 200px;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;性别&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-radio-group</span> <span class="attr">v-model</span>=<span class="string">&quot;formData.sex&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-radio</span> <span class="attr">label</span>=<span class="string">&quot;男&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">el-radio</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-radio</span> <span class="attr">label</span>=<span class="string">&quot;女&quot;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">el-radio</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-radio-group</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;年龄&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-input-number</span> <span class="attr">v-model</span>=<span class="string">&quot;formData.age&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 200px;&quot;</span> <span class="attr">controls-position</span>=<span class="string">&quot;right&quot;</span> <span class="attr">:min</span>=<span class="string">&quot;1&quot;</span> <span class="attr">:max</span>=<span class="string">&quot;100&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input-number</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;download&quot;</span>&gt;</span>下载<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">formData</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">name</span>: <span class="string">&quot;半月无霜&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">sex</span>: <span class="string">&quot;男&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">age</span>: <span class="number">18</span></span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">download</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">let</span> url = <span class="string">&quot;http://localhost:8080/test/download&quot;</span></span></span><br><span class="line"><span class="language-javascript">                    axios.<span class="title function_">post</span>(url, <span class="variable language_">this</span>.<span class="property">formData</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">responseType</span>: <span class="string">&#x27;arraybuffer&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                    &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">window</span>.<span class="title function_">downloadExcel</span>(res);</span></span><br><span class="line"><span class="language-javascript">                    &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                        </span></span><br><span class="line"><span class="language-javascript">                    &#125;)</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 得到文件流后，前端生成文件，创建出a标签进行点击</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> downloadExcel = <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (!res) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> fileName = res.<span class="property">headers</span>[<span class="string">&quot;content-disposition&quot;</span>].<span class="title function_">split</span>(<span class="string">&quot;=&quot;</span>)[<span class="number">1</span>];</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> blob = <span class="keyword">new</span> <span class="title class_">Blob</span>([res.<span class="property">data</span>], &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">type</span>: <span class="string">&quot;application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=utf-8&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> url = <span class="variable language_">window</span>.<span class="property">URL</span>.<span class="title function_">createObjectURL</span>(blob);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> aLink = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;a&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            aLink.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&quot;none&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            aLink.<span class="property">href</span> = url;</span></span><br><span class="line"><span class="language-javascript">            aLink.<span class="title function_">setAttribute</span>(<span class="string">&quot;download&quot;</span>, <span class="built_in">decodeURI</span>(fileName));</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(aLink);</span></span><br><span class="line"><span class="language-javascript">            aLink.<span class="title function_">click</span>();</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(aLink);</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">window</span>.<span class="property">URL</span>.<span class="title function_">revokeObjectURL</span>(url);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>前端就就是这样的，你说没有异常显示和Loading加载？这很简单，自己加上去吧</p><h3 id="2）下载其他文件">2）下载其他文件</h3><p>在测试的时候，发现了excel文件有一定的特殊性，若是平常的文件，可以这样子做。</p><p>这里以<code>gif</code>图片为例，来进行下载。</p><p>首先是后端，下载请求<code>controller</code>控制器，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.io.FileUtil;</span><br><span class="line"><span class="keyword">import</span> com.example.demo.utils.MyFileUtil;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@CrossOrigin(exposedHeaders = &#123;&quot;Content-disposition&quot;, &quot;Access-Control-Allow-Origin&quot;&#125;)</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/downloadImage&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">downloadImage</span><span class="params">(<span class="meta">@RequestParam</span> String imgPath, HttpServletResponse response)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(FileUtil.exist(imgPath))&#123;</span><br><span class="line">            <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(imgPath);</span><br><span class="line">            <span class="type">String</span> <span class="variable">suffix</span> <span class="operator">=</span> FileUtil.getSuffix(file);</span><br><span class="line">            MyFileUtil.downloadFile(response, file, <span class="string">&quot;图片文件测试.&quot;</span> + suffix);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;成功&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;失败&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>MyFileUtil.java</code>就不贴出来了，上面就有</p><p>前端代码，这次<code>responseType</code>设置为<code>blob</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://unpkg.com/element-ui/lib/theme-chalk/index.css&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/element-ui/lib/index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>下载图片<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">            图片地址：&#123;&#123; imgPath &#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;downloadImage&quot;</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span>&gt;</span>下载<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">imgPath</span>: <span class="string">&quot;E:\\repository\\aaa.gif&quot;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">downloadImage</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">let</span> url = <span class="string">&quot;http://localhost:8080/test/downloadImage&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">axios</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">url</span>: url,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">method</span>: <span class="string">&quot;post&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">params</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                            <span class="attr">imgPath</span>: <span class="variable language_">this</span>.<span class="property">imgPath</span></span></span><br><span class="line"><span class="language-javascript">                        &#125;,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">responseType</span>: <span class="string">&#x27;blob&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">window</span>.<span class="title function_">downloadFile</span>(res);</span></span><br><span class="line"><span class="language-javascript">                    &#125;)</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> downloadFile = <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (!res) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> fileName = res.<span class="property">headers</span>[<span class="string">&quot;content-disposition&quot;</span>].<span class="title function_">split</span>(<span class="string">&quot;=&quot;</span>)[<span class="number">1</span>];</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> blob = <span class="keyword">new</span> <span class="title class_">Blob</span>([res.<span class="property">data</span>], &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">type</span>: <span class="string">&#x27;application/zip&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> url = <span class="variable language_">window</span>.<span class="property">URL</span>.<span class="title function_">createObjectURL</span>(blob);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> aLink = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;a&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            aLink.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&quot;none&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            aLink.<span class="property">href</span> = url;</span></span><br><span class="line"><span class="language-javascript">            aLink.<span class="title function_">setAttribute</span>(<span class="string">&quot;download&quot;</span>, <span class="built_in">decodeURI</span>(fileName));</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(aLink);</span></span><br><span class="line"><span class="language-javascript">            aLink.<span class="title function_">click</span>();</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(aLink);</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">window</span>.<span class="property">URL</span>.<span class="title function_">revokeObjectURL</span>(url);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>界面是这样的，十分简单，点击按钮就可进行下载了</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220407232411.png" alt="image-20220407232344253" /></p><h3 id="3）下载进度条">3）下载进度条</h3><p>如果我们想展示下载的进度条，那该怎么办，UI样式我们就选ElementUI，这次我们需要用到<code>axios</code>中一个叫<code>onDownloadProgress</code>的参数，它允许为下载处理进度事件</p><p>修改一下后端，为后端增加一个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.io.FileUtil;</span><br><span class="line"><span class="keyword">import</span> com.example.demo.utils.MyFileUtil;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@CrossOrigin(exposedHeaders = &#123;&quot;Content-disposition&quot;, &quot;Access-Control-Allow-Origin&quot;&#125;)</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/downloadProgress&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">downloadProgress</span><span class="params">(HttpServletResponse response)</span>&#123;</span><br><span class="line">        <span class="comment">// 尽量选择一个比较大的文件，50MB左右</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;E:\\repository\\123.exe&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">suffix</span> <span class="operator">=</span> FileUtil.getSuffix(file);</span><br><span class="line">        MyFileUtil.downloadFile(response, file, <span class="string">&quot;进度条下载测试.&quot;</span> + suffix);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;成功&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前端的样式及请求</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://unpkg.com/element-ui/lib/theme-chalk/index.css&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/element-ui/lib/index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>进度条<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;downloadProgress&quot;</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span>&gt;</span>下载<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-progress</span> <span class="attr">:percentage</span>=<span class="string">&quot;percentage&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-progress</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">percentage</span>: <span class="number">0</span>,</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">downloadProgress</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">let</span> url = <span class="string">&quot;http://localhost:8080/test/downloadProgress&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">percentage</span> = <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">axios</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">url</span>: url,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">method</span>: <span class="string">&quot;post&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">responseType</span>: <span class="string">&#x27;blob&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">onDownloadProgress</span>: <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                            <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span></span><br><span class="line"><span class="language-javascript">                            <span class="variable language_">this</span>.<span class="property">percentage</span> = <span class="title class_">Math</span>.<span class="title function_">round</span>(e.<span class="property">loaded</span> / e.<span class="property">total</span> * <span class="number">100</span>);</span></span><br><span class="line"><span class="language-javascript">                        &#125;</span></span><br><span class="line"><span class="language-javascript">                    &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">window</span>.<span class="title function_">downloadFile</span>(res);</span></span><br><span class="line"><span class="language-javascript">                    &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                    &#125;)</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> downloadFile = <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (!res) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> fileName = res.<span class="property">headers</span>[<span class="string">&quot;content-disposition&quot;</span>].<span class="title function_">split</span>(<span class="string">&quot;=&quot;</span>)[<span class="number">1</span>];</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> blob = <span class="keyword">new</span> <span class="title class_">Blob</span>([res.<span class="property">data</span>], &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">type</span>: <span class="string">&#x27;application/zip&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> url = <span class="variable language_">window</span>.<span class="property">URL</span>.<span class="title function_">createObjectURL</span>(blob);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> aLink = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;a&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            aLink.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&quot;none&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            aLink.<span class="property">href</span> = url;</span></span><br><span class="line"><span class="language-javascript">            aLink.<span class="title function_">setAttribute</span>(<span class="string">&quot;download&quot;</span>, <span class="built_in">decodeURI</span>(fileName));</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(aLink);</span></span><br><span class="line"><span class="language-javascript">            aLink.<span class="title function_">click</span>();</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(aLink);</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">window</span>.<span class="property">URL</span>.<span class="title function_">revokeObjectURL</span>(url);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>样式就像这样，当我们点击按钮，根据下载进度展示进度条</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220407230007.gif" alt="download" /></p><h2 id="三、主要代码">三、主要代码</h2><h3 id="1）后端">1）后端</h3><p>主要是自己定义的这个<code>MyFileUtil.java</code>中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.io.FileUtil;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.io.IoUtil;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.poi.excel.ExcelWriter;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletOutputStream;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.URLEncoder;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyFileUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">downloadFile</span><span class="params">(HttpServletResponse response, ExcelWriter writer, String filename)</span>&#123;</span><br><span class="line">        <span class="type">ServletOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            out = response.getOutputStream();</span><br><span class="line">            response.setContentType(<span class="string">&quot;application/vnd.ms-excel;charset=utf-8&quot;</span>);</span><br><span class="line">            response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>,<span class="string">&quot;attachment;filename=&quot;</span> + URLEncoder.encode(filename, <span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line"></span><br><span class="line">            writer.flush(out, <span class="literal">true</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;io异常&quot;</span>, e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            writer.close();</span><br><span class="line">            IoUtil.close(out);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">downloadFile</span><span class="params">(HttpServletResponse response, File file, String filename)</span>&#123;</span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            out = response.getOutputStream();</span><br><span class="line">            response.setContentType(<span class="string">&quot;application/octet-stream&quot;</span>);</span><br><span class="line">            response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>,<span class="string">&quot;attachment;filename=&quot;</span> + URLEncoder.encode(filename, <span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">            response.setHeader(<span class="string">&quot;Content-Length&quot;</span>, String.valueOf(FileUtil.size(file)));</span><br><span class="line"></span><br><span class="line">            <span class="type">BufferedInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file.getPath()));</span><br><span class="line">            <span class="type">OutputStream</span> <span class="variable">toClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(response.getOutputStream());</span><br><span class="line">            IoUtil.copy(fis, toClient);</span><br><span class="line">            out.flush();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;io异常&quot;</span>, e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            IoUtil.close(out);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2）前端">2）前端</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://unpkg.com/element-ui/lib/theme-chalk/index.css&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/element-ui/lib/index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>下载Excel<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">:model</span>=<span class="string">&quot;formData&quot;</span> <span class="attr">label-width</span>=<span class="string">&quot;80px&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 300px;&quot;</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;姓名&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;formData.name&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 200px;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;性别&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-radio-group</span> <span class="attr">v-model</span>=<span class="string">&quot;formData.sex&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-radio</span> <span class="attr">label</span>=<span class="string">&quot;男&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">el-radio</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-radio</span> <span class="attr">label</span>=<span class="string">&quot;女&quot;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">el-radio</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-radio-group</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;年龄&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-input-number</span> <span class="attr">v-model</span>=<span class="string">&quot;formData.age&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 200px;&quot;</span> <span class="attr">controls-position</span>=<span class="string">&quot;right&quot;</span> <span class="attr">:min</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">:max</span>=<span class="string">&quot;100&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input-number</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;download&quot;</span>&gt;</span>下载<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>下载图片<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">            图片地址：&#123;&#123; imgPath &#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;downloadImage&quot;</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span>&gt;</span>下载<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>进度条<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;downloadProgress&quot;</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span>&gt;</span>下载<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-progress</span> <span class="attr">:percentage</span>=<span class="string">&quot;percentage&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-progress</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">formData</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">name</span>: <span class="string">&quot;半月无霜&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">sex</span>: <span class="string">&quot;男&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">age</span>: <span class="number">18</span></span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">imgPath</span>: <span class="string">&quot;E:\\repository\\aaa.jpg&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">percentage</span>: <span class="number">0</span>,</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">download</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">let</span> url = <span class="string">&quot;http://localhost:8080/test/download&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">let</span> loading = <span class="variable language_">this</span>.$loading(&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">text</span>: <span class="string">&quot;正在下载&quot;</span></span></span><br><span class="line"><span class="language-javascript">                    &#125;);</span></span><br><span class="line"><span class="language-javascript">                    axios.<span class="title function_">post</span>(url, <span class="variable language_">this</span>.<span class="property">formData</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">responseType</span>: <span class="string">&#x27;arraybuffer&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                    &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">if</span> (res.<span class="property">headers</span>[<span class="string">&quot;content-type&quot;</span>] == <span class="string">&quot;application/json&quot;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                            <span class="keyword">let</span> resjson = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title function_">ab2str</span>(res.<span class="property">data</span>));</span></span><br><span class="line"><span class="language-javascript">                            <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(resjson.<span class="property">errMsg</span>);</span></span><br><span class="line"><span class="language-javascript">                        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                            <span class="variable language_">window</span>.<span class="title function_">downloadExcel</span>(res);</span></span><br><span class="line"><span class="language-javascript">                        &#125;</span></span><br><span class="line"><span class="language-javascript">                        loading.<span class="title function_">close</span>();</span></span><br><span class="line"><span class="language-javascript">                    &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(error);</span></span><br><span class="line"><span class="language-javascript">                    &#125;)</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">downloadImage</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">let</span> url = <span class="string">&quot;http://localhost:8080/test/downloadImage&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">axios</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">url</span>: url,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">method</span>: <span class="string">&quot;post&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">params</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                            <span class="attr">imgPath</span>: <span class="variable language_">this</span>.<span class="property">imgPath</span></span></span><br><span class="line"><span class="language-javascript">                        &#125;,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">responseType</span>: <span class="string">&#x27;blob&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">window</span>.<span class="title function_">downloadFile</span>(res);</span></span><br><span class="line"><span class="language-javascript">                    &#125;)</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">downloadProgress</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">let</span> url = <span class="string">&quot;http://localhost:8080/test/downloadProgress&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">percentage</span> = <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">axios</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">url</span>: url,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">method</span>: <span class="string">&quot;post&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">responseType</span>: <span class="string">&#x27;blob&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">onDownloadProgress</span>: <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                            <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span></span><br><span class="line"><span class="language-javascript">                            <span class="variable language_">this</span>.<span class="property">percentage</span> = <span class="title class_">Math</span>.<span class="title function_">round</span>(e.<span class="property">loaded</span> / e.<span class="property">total</span> * <span class="number">100</span>);</span></span><br><span class="line"><span class="language-javascript">                        &#125;</span></span><br><span class="line"><span class="language-javascript">                    &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">window</span>.<span class="title function_">downloadFile</span>(res);</span></span><br><span class="line"><span class="language-javascript">                    &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                    &#125;)</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> downloadExcel = <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (!res) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> fileName = res.<span class="property">headers</span>[<span class="string">&quot;content-disposition&quot;</span>].<span class="title function_">split</span>(<span class="string">&quot;=&quot;</span>)[<span class="number">1</span>];</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> blob = <span class="keyword">new</span> <span class="title class_">Blob</span>([res.<span class="property">data</span>], &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">type</span>: <span class="string">&quot;application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=utf-8&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> url = <span class="variable language_">window</span>.<span class="property">URL</span>.<span class="title function_">createObjectURL</span>(blob);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> aLink = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;a&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            aLink.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&quot;none&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            aLink.<span class="property">href</span> = url;</span></span><br><span class="line"><span class="language-javascript">            aLink.<span class="title function_">setAttribute</span>(<span class="string">&quot;download&quot;</span>, <span class="built_in">decodeURI</span>(fileName));</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(aLink);</span></span><br><span class="line"><span class="language-javascript">            aLink.<span class="title function_">click</span>();</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(aLink);</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">window</span>.<span class="property">URL</span>.<span class="title function_">revokeObjectURL</span>(url);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> downloadFile = <span class="keyword">function</span> (<span class="params">res</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (!res) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> fileName = res.<span class="property">headers</span>[<span class="string">&quot;content-disposition&quot;</span>].<span class="title function_">split</span>(<span class="string">&quot;=&quot;</span>)[<span class="number">1</span>];</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> blob = <span class="keyword">new</span> <span class="title class_">Blob</span>([res.<span class="property">data</span>], &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">type</span>: <span class="string">&#x27;application/zip&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> url = <span class="variable language_">window</span>.<span class="property">URL</span>.<span class="title function_">createObjectURL</span>(blob);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> aLink = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;a&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            aLink.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&quot;none&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            aLink.<span class="property">href</span> = url;</span></span><br><span class="line"><span class="language-javascript">            aLink.<span class="title function_">setAttribute</span>(<span class="string">&quot;download&quot;</span>, <span class="built_in">decodeURI</span>(fileName));</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(aLink);</span></span><br><span class="line"><span class="language-javascript">            aLink.<span class="title function_">click</span>();</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(aLink);</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">window</span>.<span class="property">URL</span>.<span class="title function_">revokeObjectURL</span>(url);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">ab2str</span>(<span class="params">buf</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> encodedString = <span class="title class_">String</span>.<span class="property">fromCharCode</span>.<span class="title function_">apply</span>(<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Uint8Array</span>(buf));</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> decodedString = <span class="built_in">decodeURIComponent</span>(<span class="built_in">escape</span>(encodedString));</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> decodedString;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">ab2hex</span>(<span class="params">buffer</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> hexArr = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">map</span>.<span class="title function_">call</span>(<span class="keyword">new</span> <span class="title class_">Uint8Array</span>(buffer), <span class="keyword">function</span> (<span class="params">bit</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> (<span class="string">&#x27;00&#x27;</span> + bit.<span class="title function_">toString</span>(<span class="number">16</span>)).<span class="title function_">slice</span>(-<span class="number">2</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> hexArr.<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="四、总结">四、总结</h2><p>基本上来说，上面的方法步骤都是一样的，只是流的类型不同。</p><ol><li class="lvl-3"><p>后端返回流，类型设置为<code>application/vnd.ms-excel;charset=utf-8</code>或者<code>application/octet-stream</code></p></li><li class="lvl-3"><p>前端axios请求，responseType设置为<code>arraybuffer</code>或者<code>blob</code></p></li><li class="lvl-3"><p>得到文件流后，前端生成文件，创建出模拟a标签进行点击</p></li></ol><blockquote><p>需要注意的点：</p><ol><li class="lvl-3">后端如果成功生成流并返回，<code>controller</code>上直接返回<code>null</code>即可</li><li class="lvl-3">由于是前后端分离项目，必定会有前后端跨域的问题，所以请注意<a href="https://www.banmoon.top/articles/65">跨域问题</a></li></ol></blockquote><p>千万不要等用到的时候，才到处翻博客</p><p>我是半月，祝你幸福！！！</p>]]></content>
      
      
      <categories>
          
          <category> 前后端分离 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> demo </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> axios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>力扣算法题：阶乘后的零</title>
      <link href="/archive/167aaf6b/"/>
      <url>/archive/167aaf6b/</url>
      
        <content type="html"><![CDATA[<h1>阶乘后的零</h1><h2 id="一、介绍">一、介绍</h2><p>此题出自力扣网题库第172题，我刚开始没有想到，后面看了题解才明白的。</p><p>先看看题目，讲得很简单</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220326174615.png" alt="image-20220326174614333" /></p><p>还有入参的限制，<code>0 &lt;= n &lt;= 104</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">trailingZeroes</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line"><span class="comment">// TODO ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><b>放一个计算器，一会自己可以看看规律</b></p><div style="background: rgba(135, 206, 235, 0.5); padding: 20px">    输入数字n：<input type=text value="1" id="input" placeholder="1<=n<=88" style="border: 1px #333 solid;">    <button id="btn" style="border: 1px #333 solid; padding: 0 5px;" onclick="function sab(a){                              if (a == 1){                              return BigInt(1);                              }else{                              return BigInt(a) * sab(a - 1);                              }                              };var $input = document.getElementById('input');var $result = document.getElementById('result');var val = $input.value;                              if(val>=1 && val<=88){                              var result = sab(val);                              $result.innerHTML = BigInt(result);                              }else {                              $result.innerHTML = '请输入正确的数字，1 <= n <= 88';                              }">计算</button>    <br>    结果：<span id="result">1</span></div><h2 id="二、解题思路">二、解题思路</h2><h3 id="1）暴力破解">1）暴力破解</h3><p>暴力破解，算出答案，再转字符串，计算出末尾零的个数。</p><p>这种方法想都不要想，这可是阶乘，数字量很大的，很容易溢出。不然上面用计算器来试试。</p><h3 id="2）优化">2）优化</h3><p>不知道你用计算器试过了没有，也不知道你有没有得到规律，我们先一步一步来分析</p><ol><li class="lvl-3"><p>首先要看这道题想要的结果是什么，是零的个数</p></li><li class="lvl-3"><p>再看题目，阶乘阶乘，里面都是乘法计算，所以<b>想要得到零，必须要乘上10</b>，那么这个10就是因子</p></li><li class="lvl-3"><p>思路到这，第一步就清除了，查询<code>n</code>中有多少个10或者10的倍数，就有多少个零</p></li></ol><p>然而，当你用计算器去试了一下，结果发现，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>5</mn><mo stretchy="false">!</mo><mo>=</mo><mn>120</mn></mrow><annotation encoding="application/x-tex">5! = 120</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord">5</span><span class="mclose">!</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">120</span></span></span></span>，这也有一个零</p><ol><li class="lvl-3"><p>思维再次扩展，可以发现5*偶数=10的倍数的，这样一来因子是5，而不是10</p></li><li class="lvl-3"><p>由于偶数很多，所以我们只需要计算出<code>n</code>中有多少个5的倍数这样的数，就可以正确得到答案了</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">trailingZeroes</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> n / <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>思维发散至这里，已经很强了，但还不够！！！因为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>25</mn><mo stretchy="false">!</mo><mo>=</mo><mn>15511210043330985984000000</mn></mrow><annotation encoding="application/x-tex">25! = 15511210043330985984000000</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord">25</span><span class="mclose">!</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">15511210043330985984000000</span></span></span></span>，足足有6个0，这是为什么？？？</p><ol><li class="lvl-3"><p>如果只是遍历5的倍数，算出总共有多少<mark>5因子</mark>的倍数的话，还是不够的</p></li><li class="lvl-3"><p>但要注意25这个数，是由5*5而来，要多算一个零。同理125，是由5 * 5 * 5 而来，再多算一个零</p></li><li class="lvl-3"><p>按照步骤2，我们需要 <mark>(n/5) + (n/25) + (n/125) + … ​</mark></p></li><li class="lvl-3"><p>可以对步骤3的公式进行优化，提取出<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mi mathvariant="normal">/</mi><mn>5</mn></mrow><annotation encoding="application/x-tex">n/5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">n</span><span class="mord">/5</span></span></span></span>，来进行计算，直到n小于5为止，所以就得到了下面这个答案</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">trailingZeroes</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(n &gt;= <span class="number">5</span>) &#123;</span><br><span class="line">            count += n / <span class="number">5</span>;</span><br><span class="line">            n /= <span class="number">5</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、最后">三、最后</h2><p>这道题，我拿到确实懵逼了，直到看完题解才恍然大悟，只能大声高呼，牛逼。</p><p>我是半月，祝你幸福！！！</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 力扣算法题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于MySQL的几道面试题</title>
      <link href="/archive/f725265/"/>
      <url>/archive/f725265/</url>
      
        <content type="html"><![CDATA[<h1>关于MySQL的几道面试题</h1><h2 id="一、介绍">一、介绍</h2><p>MySQL大家都很熟悉了，最常用的开源数据库，也是面试官高发常问的技术。</p><p>简单列出几道MySQL的几道面试题，一起来看看</p><ol><li class="lvl-3"><p>B树和B+树之间的区别是什么</p></li><li class="lvl-3"><p><code>Innodb</code>中的B+树有什么特点</p></li><li class="lvl-3"><p><code>Innodb</code>中的索引和B+树</p></li><li class="lvl-3"><p>B+树可以存储多少的数据</p></li><li class="lvl-3"><p>索引类型有哪些</p></li><li class="lvl-3"><p>索引失效的场景</p></li></ol><h2 id="二、问题">二、问题</h2><h3 id="1）B树和B-树之间的区别是什么">1）B树和B+树之间的区别是什么</h3><p>大家都知道，MySQL中使用存储数据的结构是B+树，那么他和B树有什么区别吗？</p><p>首先我们得先了解什么是B树，先看看B树的一些概念</p><blockquote><ul class="lvl-1"><li class="lvl-2"><p>排序方式：所有节点储存都是有序的，都遵循左小右大的原则进行排序</p></li><li class="lvl-2"><p>子节点数：非叶节点的子节点数&gt;1，且&lt;=M ，且M&gt;=2</p><ul class="lvl-3"><li class="lvl-4">M是什么：在B树中，一个的子节点数目的最大值，即为M。这颗树也称为M阶数</li></ul></li><li class="lvl-2"><p>关键字数：<mark>枝节点（B树中去除掉根节点和叶子节点的剩余节点）内的关键字数</mark>&gt;= <code>ceil(M/2)</code>，且&lt;M-1</p><ul class="lvl-3"><li class="lvl-4">关键字数K：<code>ceil(M/2)&lt;=K&lt;=M-1</code></li><li class="lvl-4">ceil函数：天花板，向正方向取整</li><li class="lvl-4">M：枝节点的子节点数量</li></ul></li><li class="lvl-2"><p>叶子节点：所有的叶子节点都在同一层，也就是最后一层都应该是叶子节点</p></li></ul></blockquote><p>好的，概念就这些，简单画一个B树出来</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220313201518_B%E6%A0%91.png" alt="image-20220313201516682" /></p><p>这些概念和公式不用记，我们直接来看B+树</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220313201811.png" alt="image-20220313201810636" /></p><p>B树和B+树的区别</p><ul class="lvl-0"><li class="lvl-2"><p>叶子节点：每个叶子节点都多出了个指针，指向下一个叶子节点。</p></li><li class="lvl-2"><p>非叶子节点：非叶子节点中的元素存储的都是，在叶子节点中出现过的。</p><ul class="lvl-2"><li class="lvl-4">也就是说：叶子节点，保存了所有的数据。非叶子节点中的数据是冗余的</li></ul></li></ul><p>看完了上面B树和B+树，也可以总结出他们的区别。B+树也就是B树的升级版，对原本的B树做出的一些升级。</p><h3 id="2）Innodb中的B-树有什么特点">2）<code>Innodb</code>中的B+树有什么特点</h3><p>在上一段中，简单说了一下B树和B+树的区别，但没有对<code>Innodb</code>的B+树展开详细的说明。</p><p>看看<a href="https://dev.mysql.com/doc/internals/en/innodb-fil-header.html">官网</a>，MySQL的B+树和上面举例的B+树还不完全一样</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220314110934.png" alt="image-20220314110926815" /></p><p>所以<code>Innodb</code>使用的B+树，实际上就是对B树的做出的一定升级改动。</p><p>但为什么要这么改呢，简单的来说，就是为了索引。</p><p>那么B+树和索引有什么关系呢，继续看下一章</p><h3 id="3）Innodb中的索引和B-树">3）<code>Innodb</code>中的索引和B+树</h3><p>我们来进行模拟实验一下，创建一张数据表，并将数据进行插入</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `test` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `a` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `b` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `c` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `d` <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `test`(`id`, `a`, `b`, `c`, `d`) <span class="keyword">VALUES</span> (<span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="string">&#x27;5&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `test`(`id`, `a`, `b`, `c`, `d`) <span class="keyword">VALUES</span> (<span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="string">&#x27;4&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `test`(`id`, `a`, `b`, `c`, `d`) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `test`(`id`, `a`, `b`, `c`, `d`) <span class="keyword">VALUES</span> (<span class="number">6</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="string">&#x27;6&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `test`(`id`, `a`, `b`, `c`, `d`) <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="string">&#x27;3&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `test`(`id`, `a`, `b`, `c`, `d`) <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="string">&#x27;2&#x27;</span>);</span><br></pre></td></tr></table></figure><p>执行完成后，查询表<code>select * from test</code>，查看结果</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220315212536.png" alt="image-20220315212534994" /></p><p>大家要注意插入的主键ID顺序是乱序的，可结果出来的确实按照主键ID进行了排序，按理来说，应该会是我插入的顺序进行展示。但结果确实有顺序的，一定在某个时刻进行了排序</p><p>那么是在什么时候进行的排序，是在<mark>插入的时候</mark>，还是在<mark>查询的时候</mark>？</p><p>结果一想可知，一定是插入的时候，因为查询效率是高性能数据库最重要的指标之一，不可能放在使用的时候去处理这么繁琐的工作。</p><p>那么MySQL是如何存储这些数据的呢，还记得B+数的节点吗，在<code>Innodb</code>的这颗B+树中，<mark>节点被称为<b>页</b></mark>，一页是<code>16kb</code>，而MySQL在进行数据检索时，<mark>每一次进行磁盘IO都会拉取一页的数据</mark>，也就是一次读取16kb的数据，进行查找。</p><p>简单看看这单个页中都有什么数据。</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220315222801.png" alt="image-20220315222759952" /></p><p>正因为插入的时候，按照了顺序插入，所以查询的时候就可以按照顺序输出。</p><p>那么我们看看<code>select * from test where id = 6</code>这条语句是什么情况，大家虽然都知道这段查询语句会走主键索引，但却不知道主键索引到底为何物。先看看<code>explain</code>的解释</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">6</span>;</span><br></pre></td></tr></table></figure><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220315223309.png" alt="image-20220315223308398" /></p><p>好可以看到是语句是直接走的主键索引的，这个没什么问题。</p><p>至于索引为何物？如果我们有一大本新华字典，里面的汉字是我们的数据，那我们是通过什么去快速查询到想要的字的呢？是通过<b>目录</b>，我们通过新华字典的目录去查询到对应汉字所在的页数，从而快速的检索。</p><p>在MySQL中，索引就是目录，它记录了一个指针，一个指向真正存储用户数据的一个内存地址。这就是索引的简单解释，不急，会继续深入的。</p><p>所以，在上面的描述下，知道了<code>select * from test where id = 6</code>这段查询语句是<b>通过查询页目录</b>从而去获取到一整行数据的。</p><hr /><p>刚刚只讲到了一个节点，也就是<b>一页</b>。一页的容量大小是<code>16kb</code>，随着数据的插入，这一页数据总会被插满的，那时B+树会发生什么变化呢？</p><p>答案很明显，就是再开一页。这里我们假设，每一页可以存5条数据，总数有20条，那么就是四页，来看看效果图</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220317210240.png" alt="image-20220317210238554" /></p><p>现在我们将执行<code>select * from test where id = 20</code>，如果只是上面的这种结构的话，执行上面那段语句，<code>Innodb</code>会怎么去查找<code>id=20</code>的数据？</p><p>难道是取出第一页，查询页目录，一直往后找页目录，直到找到为止？这才简简单单的20条数据啊，如果出现成百万千万的数据，不得查询老半天，而且每一次读取页，都是<code>16kb</code>的磁盘IO，很耗时间。这样的索引结构不行，那么是否还有一些没有考虑到的地方呢？</p><p>不要忘记了，<code>Innodb</code>使用的B+树结构，现在只是出现了存储用户数据的叶子节点，枝节点和根节点还什么都没有出来呢？那么这些节点存什么东西呢？重新来看看图</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220317211806.png" alt="image-20220317211805553" /></p><p>这是两层结构的B+树，那么针对上面那条sql语句<code>select * from test where id = 20</code>，只需要取出根节点，就知道了下一个要去第四页去取自己想要的数据。</p><p>如此一来就大大的降低了遍历页目录的时间，这就是索引的魅力。</p><blockquote><p>所以<code>Innodb</code>中，B+树是怎么存储数据的，就一目了然了</p><p><mark>叶子节点主要存储用户数据，非叶子节点存储索引数据</mark>。其中它们还存有一些页头信息，用来标注和互相引用</p></blockquote><p>事实上，每一页的存储的数据远不止5条，但效果是一样的。都是先去根节点找到下一个叶子节点该去哪里，找到对应的页，再对页中的页目录进行遍历，就能很快的找到自己想要的数据了。</p><h3 id="4）B-树可以存储多少的数据">4）B+树可以存储多少的数据</h3><p>假设<code>Innodb</code>中的这个B+树是三层的，那么我们只需要计算一页能够存储多少个主键，因为每一个主键记录的都是下一层节点页目录的开始的主键。</p><p>假设这个主键是<code>int</code>类型的，<code>int</code>占用4个字节，指针指向下一层占用6个字节。那么根节点16kb可以存储多少个主键记录呢？</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>16</mn><mi>k</mi><mi>b</mi><mi mathvariant="normal">/</mi><mo stretchy="false">(</mo><mn>4</mn><mi>b</mi><mo>+</mo><mn>6</mn><mi>b</mi><mo stretchy="false">)</mo><mo>=</mo><mn>1638</mn></mrow><annotation encoding="application/x-tex">16kb/(4b+6b)=1638</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">16</span><span class="mord mathnormal">kb</span><span class="mord">/</span><span class="mopen">(</span><span class="mord">4</span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">6</span><span class="mord mathnormal">b</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1638</span></span></span></span></p><p>1638个主键记录，那么也就是说，第二层可以有1638个枝节点。而枝节点的结构和根节点一致，也是1638个主键记录。所以第三层的叶子节点该有多少个</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1638</mn><mo>∗</mo><mn>1638</mn><mo>=</mo><mn>2</mn><mo separator="true">,</mo><mn>683</mn><mo separator="true">,</mo><mn>044</mn></mrow><annotation encoding="application/x-tex">1638*1638=2,683,044</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1638</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1638</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">683</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">044</span></span></span></span></p><p>好的那这样的话，我们将有<code>268万</code>的叶子节点，接下来只需要再算出叶子节点一页可以存储多少条数据就可以了。</p><p>这得根据表的大小来看，假设一条用户数据占用1kb，我们再忽略页头的那点占用，那就是一页可以存储</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>16</mn><mi>k</mi><mi>b</mi><mi mathvariant="normal">/</mi><mn>1</mn><mi>k</mi><mi>b</mi><mo>=</mo><mn>16</mn></mrow><annotation encoding="application/x-tex">16kb/1kb=16</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">16</span><span class="mord mathnormal">kb</span><span class="mord">/1</span><span class="mord mathnormal">kb</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">16</span></span></span></span></p><p>我们再计算所有的叶子节点和每页存储的数量</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2683044</mn><mo>∗</mo><mn>16</mn><mo>=</mo><mn>42</mn><mo separator="true">,</mo><mn>928</mn><mo separator="true">,</mo><mn>704</mn></mrow><annotation encoding="application/x-tex">2683044*16=42,928,704</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">2683044</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">16</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">42</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">928</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">704</span></span></span></span></p><p>所以得到答案，在我们理想以及假设的情况下，一共可以存储<code>4000万</code>的数据</p><hr /><p>在真实的开发情况中，主键不一定是<code>int</code>，也可能是<code>bigint</code>，那样的话，只需要重新计算叶子节点的个数。</p><p>根据上面的情况来看，MySQL不要使用UUID做主键的原因就是在这里。原本<code>int</code>可以指向很多个子节点，UUID由于占用大，指向子节点的数量大大降低，一个三层B+数存储数据的数量也会大大降低。而且UUID是无序的，这将带来插入的性能问题。</p><p>如果不想被人知道系统的数据量，推荐雪花算法生成的主键ID吧，看着挺乱，但是确是有序的，占用与<code>bigint</code>一样。</p><h3 id="5）索引类型">5）索引类型</h3><p>按功能来分，我们可以分为<mark>普通索引</mark>、<mark>唯一索引</mark>、<mark>主键索引</mark>和<mark>全文索引</mark></p><p>按数据存储来分，我们可以分为<mark>聚集索引</mark>和<mark>非聚集索引</mark></p><h4 id="5-1）按功能来分">5.1）按功能来分</h4><h5 id="普通索引">普通索引</h5><p>先看普通索引，这是作用于普通列的索引，没有其他的约束。这种索引的创建，就是为了提高查询的效率</p><p>它的创建语句是</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 创建表时，直接指定普通索引</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `test` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `a` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `b` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `c` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `d` <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  KEY `index_a` (`a`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4</span><br><span class="line"></span><br><span class="line"># 已有表，添加普通索引</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `test` <span class="keyword">ADD</span> INDEX `index_a`(`a`);</span><br></pre></td></tr></table></figure><p>通过上面的创建语句，将额外多出的一个以a字段作为索引列的B+树。</p><h5 id="唯一索引">唯一索引</h5><p>唯一索引和普通索引的区别就是，普通索引的字段是普通字段而来的，而唯一索引的字段是有唯一性约束的。</p><p>它的创建语句是</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 创建表时，直接指定唯一索引</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `test` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `a` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `b` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `c` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `d` <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `unique_a` (`a`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4</span><br><span class="line"></span><br><span class="line"># 已有表，添加唯一索引</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `test` <span class="keyword">ADD</span> <span class="keyword">UNIQUE</span> INDEX `unique_a`(`a`);</span><br></pre></td></tr></table></figure><p>通过上面的创建语句，将额外多出一个以<code>a</code>字段作为索引列的B+树。</p><h5 id="主键索引">主键索引</h5><p>主键索引，是指定主键创建的索引。</p><p>这个主键列最大的特点是<mark>唯一且不能为空</mark>，而上面的唯一索引它是允许<code>null</code>值的存在的。</p><p>一张表最多只有一个主键索引，不过我们可以选择多个字段作为主键。</p><p>创建主键的语句不需要多说，每张表都应该要有</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `test` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `a` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `b` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `c` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `d` <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`,`a`,`b`,`c`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4</span><br></pre></td></tr></table></figure><h5 id="全文索引">全文索引</h5><p>老实说，如果是真的想用全文搜索的功能，建议是使用<code>ElasticSearch</code>。</p><p>MySQL确实也有全文索引的功能，但在使用时，得注意一下MySQL的版本。</p><ul class="lvl-0"><li class="lvl-2"><p><b>MySQL5.6及以前</b>：只有<code>MyISAM</code>才支持全文索引</p></li><li class="lvl-2"><p><b>MySQL5.7以后</b>：<code>Innodb</code>才开始支持全文索引</p></li><li class="lvl-2"><p><b>MySQL5.7.6</b>：在刚开始，<code>Innodb</code>支持英文的分词索引。在此版本之后，才开始支持中文的全文分词索引</p></li></ul><p>创建语句是</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 创建表时，直接指定全文索引</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `test` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `a` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `b` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `c` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `d` <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE,</span><br><span class="line">  FULLTEXT KEY `fulltext_d` (`d`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4</span><br><span class="line"></span><br><span class="line"># 已有表，添加全文索引</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `test` <span class="keyword">ADD</span> FULLTEXT INDEX `fulltext_d`(`d`);</span><br></pre></td></tr></table></figure><blockquote><p>注意一下，全文索引只能作用在<code>char</code>、<code>varchar</code>、<code>text</code>等的文本字段上才行</p></blockquote><h4 id="5-2）按数据存储来分">5.2）按数据存储来分</h4><p>什么是数据存储，大家都知道<code>Innodb</code>是按B+树来进行存储的，那就是看B+树的叶子节点上存储的数据是什么。</p><h5 id="聚集索引">聚集索引</h5><p>根据上面这个特性，主要看B+树的叶子节点存储的是否是完整的行数据，那就可以判断出这个B+树是不是聚集索引了。</p><p>最典型的聚集索引就是主键索引，通过主键就能找到完整的数据行。</p><p>但是，千万要理清楚，主键索引一定是聚集索引，但聚集索引不一定是主键索引。</p><p>万一这个表没有指定主键呢？所以会出现以下这种情况</p><ol><li class="lvl-3"><p>如果表定义了主键，将使用主键索引作为聚集索引</p></li><li class="lvl-3"><p>没有定义主键，将会使用该表第一个<mark>唯一且非空</mark>的字段作为聚集索引</p></li><li class="lvl-3"><p>如果上面两个都没有，<code>Innodb</code>内部将会产生一个隐藏<code>6个字节</code>的列，使用这个列作为聚集索引</p></li></ol><h5 id="非聚集索引">非聚集索引</h5><p>除去聚集索引，剩下的就被成为非聚集索引了。</p><p>所以与聚集索引不同的是，非聚集索引的叶子节点存储的不再是完整的行数据，而是主键值。</p><p>一段查询sql，用到了这个非聚集索引的话，先找到这个B+树叶子节点的主键值，再根据这主键值，去查询主键索引。</p><p>虽然不一定是主键索引，存的也不一定是主键值。但这个过程被称为<mark>回表</mark>，也就是查询了两棵不同的B+树。这也是非聚集索引又被称为<mark>辅助索引</mark>或者<mark>二级索引</mark>的原因。</p><blockquote><p>一张表只有一个聚集索引，不过可以有多个非聚集索引。</p><p>在查询时，尽量走聚集索引，聚集索引的速度快。而在走非聚集索引时，尽量控制查询的字段就是非聚集索引的列，避免去回表。</p><p>在插入时，二者都会进行重新计算排序，这也是聚集索引推荐自增主键的原因，数据往后添加即可，避免重新计算排序。</p></blockquote><h3 id="6）索引失效的场景">6）索引失效的场景</h3><p>在平常使用查询时，还常常会出现一些不走索引的场景，也就是全表扫描。</p><p>全表扫描，这是查询的大忌，导致了慢查询，所以查看下面这段些查询sql，判断下他们会不会走索引</p><p>首先，把现在的表结构和数据给大家罗列一下</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `test` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `a` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `b` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `c` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `d` <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE,</span><br><span class="line">  KEY `index_a` (`a`),</span><br><span class="line">  KEY `index_b_c_d` (`b`,`c`,`d`) <span class="keyword">USING</span> BTREE,</span><br><span class="line">  KEY `index_d` (`d`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `test`(`id`, `a`, `b`, `c`, `d`) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="string">&#x27;111&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `test`(`id`, `a`, `b`, `c`, `d`) <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="string">&#x27;222&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `test`(`id`, `a`, `b`, `c`, `d`) <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="string">&#x27;333&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `test`(`id`, `a`, `b`, `c`, `d`) <span class="keyword">VALUES</span> (<span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="string">&#x27;444&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `test`(`id`, `a`, `b`, `c`, `d`) <span class="keyword">VALUES</span> (<span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="string">&#x27;555&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `test`(`id`, `a`, `b`, `c`, `d`) <span class="keyword">VALUES</span> (<span class="number">6</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="string">&#x27;666&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `test`(`id`, `a`, `b`, `c`, `d`) <span class="keyword">VALUES</span> (<span class="number">7</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="string">&#x27;777&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `test`(`id`, `a`, `b`, `c`, `d`) <span class="keyword">VALUES</span> (<span class="number">8</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="string">&#x27;888&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `test`(`id`, `a`, `b`, `c`, `d`) <span class="keyword">VALUES</span> (<span class="number">9</span>, <span class="number">9</span>, <span class="number">9</span>, <span class="number">9</span>, <span class="string">&#x27;999&#x27;</span>);</span><br></pre></td></tr></table></figure><p>简单点来看，一个主键索引，三个普通索引，表中有9条数据。</p><hr /><p>开始以下几道sql，能不能用到索引</p><table><thead><tr><th>序号</th><th>查询sql</th><th>是否走索引</th><th>说明</th></tr></thead><tbody><tr><td>1</td><td>select * from test where id = 6</td><td>主键索引</td><td></td></tr><tr><td>2</td><td>select * from test where id &gt; 3</td><td>主键索引</td><td>先找到3，再返回后面所有的数据。<br />同理，主键ID范围查找直接走主键索引</td></tr><tr><td>3</td><td>select * from test where a = 3</td><td>index_a</td><td>走自己定义的<code>index_a</code>普通索引<br />需要经历一次回表</td></tr><tr><td>4</td><td>select b, c, d from test where b = 3 and c = 3 and d = ‘333’</td><td>index_b_c_d</td><td>走自己定义的<code>index_b_c_d</code>普通索引<br />b和c是索引的记录的列，所以不需要经历回表</td></tr><tr><td>5</td><td>select b, c, d from test where  c = 3 and d = ‘333’</td><td>全表扫描</td><td>不遵循最左前缀原则，故索引不生效</td></tr><tr><td>6</td><td>select b, c, d from test where  b = 3 and d = ‘333’</td><td>index_b_c_d</td><td>遵循最左前缀原则<br />就算c字段不存在，只要b字段存在就行</td></tr><tr><td>7</td><td>select b, c, d from test where d = ‘333’ and b = 3</td><td>index_b_c_d</td><td>遵循最左前缀原则<br />查询sql的where条件顺序不重要，只需要保证b存在就行</td></tr><tr><td>8</td><td>select * from test where  b &gt;= 1</td><td>全表扫描</td><td>情况特殊，单独说说</td></tr><tr><td>9</td><td>select * from test where d like ‘%3%’</td><td>全表扫描</td><td>模糊匹配全表扫描</td></tr><tr><td>10</td><td>select * from test where d like ‘3%’</td><td>index_d</td><td>模糊右匹配，支持索引</td></tr><tr><td>11</td><td>select * from test where d = 333</td><td>全表扫描</td><td>隐式转换会导致索引失效</td></tr><tr><td>12</td><td>select * from test where d is not null</td><td>全表扫描</td><td>not null 导致全表扫描</td></tr><tr><td>13</td><td>select * from test where d != ‘444’</td><td>全表扫描</td><td>!= 导致全表扫描</td></tr></tbody></table><p>差不多了，就这么几条。</p><p>前面2条都很好理解，走的是主键索引。</p><p><b>回表</b></p><p>第3条，在<code>index_a</code>的B+树上找到主键ID，再通过主键ID去查询到所有的列。同理，第4、5、6、7条，查询的列在索引的B+树上就完全存在，所以不需要再进行回表。</p><p><b>最左匹配原则</b></p><p>where条件中查询的列，一定要有索引中定义的最左的字段，才能使用到这个索引。顺序不重要，就像第7条。所以只要出现了b字段，就可以使用到<code>index_b_c_d</code>这个索引。</p><p><b>模糊匹配</b></p><p>第9、10条，这个模糊匹配，分为左右模糊匹配，就是看<code>%</code>出现的位置，只要它不出现在开头，这个查询就可以走到对应的索引。</p><p><b>第8条：特殊的情况</b></p><p>先看下第8条的查询语句，<code>select * from test where  b &gt;= 1</code></p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220322105004.png" alt="image-20220322105003574" /></p><p>这是为什么，按理来说第8条是和第2条是一样的，找到指定的数，再返回后面所有的数。然而实际上，竟然是全表扫描？？？</p><p>这里很简单，就一个原因<mark>回表</mark>，正是因为回表，导致了<code>Innodb</code>不再去走<code>index_b_c_d</code>的索引。</p><p>你想啊，条件<code>b &gt;= 1</code>的数据一共有9条，如果要走<code>index_b_c_d</code>索引的话，还需要回表9次，这就相当于绕路了。</p><p>所以在范围查询除去主键的普通列时，尽量避免查询所有列，也就是<code>select *</code></p><p>不信就来试试，这次只查索引中有的字段，<code>select b, c, d from test where b &gt;= 1</code></p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220322110027.png" alt="image-20220322110026815" /></p><p><b>隐式转换</b></p><p>在11条中，d字段定义的是字符串，而sql中是用数字进行查询的。这里会进行隐式转换，从而导致索引失效</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220323094445.png" alt="image-20220323094443748" /></p><p><b>不等于、不包含</b></p><p>在12、13条中，使用到了<code>!=</code>、<code>not null</code>的条件，这些条件会导致索引失效。类似的条件还有<code>&lt;&gt;</code>、<code>!&lt;</code>、<code>!&gt;</code>、<code>not exists</code>、<code>not in</code>、<code>not like</code>，避免使用上述的条件。</p><h2 id="三、最后">三、最后</h2><p>MySQL的存储，索引的结构，说简单也简单。说难点，MySQL自身的瓶颈也就在那了，想突破确实困难。</p><p>一般来说，<code>Innodb</code>的B+树往往3层是就是顶天了，往4层开始，这个查询速度就会非常的慢。具体一个3层的B+树，可以存储多少的数据量，大家可以根据自己定义的表字段大小，对每一页进行计算，估算出存储的数据量。</p><p>对于分库分表，我只是知道一些概念的东西。前路漫长，我只是在追逐前人的脚步罢了。</p><p>我是半月，祝你幸福！！！</p>]]></content>
      
      
      <categories>
          
          <category> 程序人生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>跨域问题及解决方案</title>
      <link href="/archive/3ba91626/"/>
      <url>/archive/3ba91626/</url>
      
        <content type="html"><![CDATA[<h1>跨域问题及解决方案</h1><h2 id="一、介绍">一、介绍</h2><p>在前后端分离项目中，跨域问题是一定会遇到的。跨域问题的出现，会导致css、js或者ajax对后端请求等资源无法访问的情况。</p><p>要想解决跨域问题，首先先得了解什么是跨域问题。</p><blockquote><p><mark>问题：什么是跨域</mark></p></blockquote><p>跨越问题是由于浏览器的同源策略，是浏览器强制要求的安全策略，所以想要了解跨域，首先得了解同源。</p><p>所谓同源是指，<b>协议</b>、<b>域名</b>、<b>端口</b>均一致，只要以上三者有一个不一致，就会引发跨域问题</p><table><thead><tr><th>前端页面</th><th>后端接口</th><th>是否跨域</th><th>原因</th></tr></thead><tbody><tr><td><a href="http://banmoon.cn/index.html">http://banmoon.cn/index.html</a></td><td><a href="http://banmoon.cn/user/get">http://banmoon.cn/user/get</a></td><td>否</td><td>皆一致</td></tr><tr><td><a href="http://banmoon.cn/index.html">http://banmoon.cn/index.html</a></td><td><a href="https://banmoon.cn/user/get">https://banmoon.cn/user/get</a></td><td>是</td><td>协议不一致</td></tr><tr><td><a href="http://banmoon.cn/index.html">http://banmoon.cn/index.html</a></td><td><a href="http://other.com/user/get">http://other.com/user/get</a></td><td>是</td><td>域名不一致</td></tr><tr><td><a href="http://banmoon.cn/index.html">http://banmoon.cn/index.html</a></td><td><a href="http://banmoon.cn:8080/user/get">http://banmoon.cn:8080/user/get</a></td><td>是</td><td>端口不一致</td></tr><tr><td><a href="http://localhost/index.html">http://localhost/index.html</a></td><td><a href="http://127.0.0.1/user/get">http://127.0.0.1/user/get</a></td><td>是</td><td>域名和IP路径也会导致跨域</td></tr><tr><td><a href="http://aaa.banmoon.cn/index.html">http://aaa.banmoon.cn/index.html</a></td><td><a href="http://bbb.banmoon.cn/user/get">http://bbb.banmoon.cn/user/get</a></td><td>是</td><td>二级域名不一致（cookie也不能访问）</td></tr></tbody></table><h2 id="二、解决跨域问题的方法">二、解决跨域问题的方法</h2><h3 id="1、jsonp请求">1、jsonp请求</h3><blockquote><p>不做详解，列出优缺点，主要使用cors通信</p></blockquote><ul class="lvl-0"><li class="lvl-2"><p><mark>优点</mark>：</p><ul class="lvl-2"><li class="lvl-4">兼容性很好，能在许多低版本的浏览器上运行</li></ul></li><li class="lvl-2"><p><mark>缺点</mark>：</p><ul class="lvl-2"><li class="lvl-4">只支持get请求，而不支持post及其他请求</li><li class="lvl-4">在调用失败时不会返回各种http的状态码</li><li class="lvl-4">只支持跨域http请求，不能解决跨域访问资源修改的问题</li><li class="lvl-4">安全性，容易被注入</li></ul></li></ul><h3 id="2、CORS通信">2、CORS通信</h3><h4 id="1）介绍">1）介绍</h4><p>CORS 是一个 W3C 标准，全称是“跨域资源共享”（Cross-origin resource sharing）。它允许浏览器向跨域的服务器，发出<code>XMLHttpRequest</code>请求，从而克服了AJAX只能同源使用的限制。</p><p>CORS 需要浏览器和服务器同时支持。目前，所有浏览器都支持该功能。</p><p>整个 CORS 通信过程，都是浏览器自动完成，不需要用户参与。对于开发者来说，CORS 通信与普通的 AJAX 通信没有差别，代码完全一样。浏览器一旦发现 AJAX 请求跨域，就会自动添加一些附加的头信息，有时还会多出一次附加的请求，但用户不会有感知。因此，实现 CORS 通信的关键是服务器。只要服务器实现了 CORS 接口，就可以跨域通信。</p><h4 id="2）简单请求与非简单请求">2）简单请求与非简单请求</h4><p>CORS可分为两种请求，简单请求（simple-request）和非简单请求（no-so-simple-request）</p><ul class="lvl-0"><li class="lvl-2"><p>简单请求</p><p>以下条件均满足的为简单请求，否则为非简单请求</p><blockquote><p>情况一：请求方式，为以下其中之一</p><ul class="lvl-3"><li class="lvl-2">get</li><li class="lvl-2">post</li><li class="lvl-2">head</li></ul><p>情况二：请求头，不能出现以下没有的</p><ul class="lvl-3"><li class="lvl-2"><p>Accept</p></li><li class="lvl-2"><p>Accept-Language</p></li><li class="lvl-2"><p>Content-Language</p></li><li class="lvl-2"><p>Content-Type （需要注意额外的限制）</p></li><li class="lvl-2"><p>DPR</p></li><li class="lvl-2"><p>Downlink</p></li><li class="lvl-2"><p>Save-Data</p></li><li class="lvl-2"><p>Viewport-Width</p></li><li class="lvl-2"><p>Width</p></li></ul><p>情况三：Content-Type 的值仅限于下列三者之一</p><ul class="lvl-3"><li class="lvl-2"><p>text/plain</p></li><li class="lvl-2"><p>multipart/form-data</p></li><li class="lvl-2"><p>application/x-www-form-urlencoded</p></li></ul></blockquote><p>如果是简单请求，</p></li></ul><ol><li class="lvl-3"><p>浏览会在请求的头信息中添加<code>Origin</code>，请求直接到后端符文</p></li><li class="lvl-3"><p>后端服务根据请求头<code>Origin</code>（协议 + 域名 + 端口），判断本次请求是否允许跨域</p></li><li class="lvl-3"><p>后端设置<code>Access-Control-Allow-Origin</code>（* 或者 传入的Origin）响应头，表示同意本次请求跨域</p></li><li class="lvl-3"><p>浏览器识别是否有<code>Access-Control-Allow-Origin</code>，如果没有则抛出错误</p></li></ol><ul class="lvl-0"><li class="lvl-2"><p>非简单请求当不满足简单请求的构成条件时，该请求就为非简单请求如果是非简单请求</p></li></ul><ol><li class="lvl-3"><p>浏览器会提前发送一个请求方式为<code>options</code>的预检请求</p><blockquote><p><code>Origin</code>：同简单请求一样（协议 + 域名 + 端口）</p><p><mark>预检请求还包含两个特殊的请求头</mark></p><p><code>Access-Control-Request-Method</code>：该字段是必须的，本次请求会用到哪些方法</p><p><code>Access-Control-Request-Headers</code>：本次请求额外携带的请求头，多个时用逗号分隔</p></blockquote></li><li class="lvl-3"><p>服务器需要进行处理，并成功响应返回成功的状态码，并设置以下响应头</p><blockquote><p><code>Access-Control-Allow-Origin</code>：可设置为*，也可设置为具体的请求地址（协议 + 域名 + 端口）</p><p><code>Access-Control-Allow-Methods</code>：必须，表示服务器所支持的所有请求方法，多个时用逗号分隔</p><p><code>Access-Control-Allow-Headers</code>：表示服务端所支持额外的请求头字段，多个时用逗号分隔</p><p><code>Access-Control-Allow-Credentials</code>：布尔值，代表服务端是否同意发送cookie</p><p><code>Access-Control-Max-Age</code>：本次预检请求的有效期（秒），在此期间浏览器不用再次发送预检请求</p></blockquote></li><li class="lvl-3"><p>浏览器判断预检请求回来的响应头信息，判断本次是否允许跨域</p></li><li class="lvl-3"><p>允许跨域后，发送真正的请求，携带真实的数据进行传输请求</p></li><li class="lvl-3"><p>如果不允许，则控制台打印报错，不会发送真正的请求</p></li></ol><blockquote><p><b>注意</b>：</p><ol><li class="lvl-3"><p>CORS默认不发送Cookie，想要发送cookie必须如下设置</p><ol><li class="lvl-6"><p>服务端必须将<code>Access-Control-Allow-Credentials</code>响应头设置为true，表示服务端同意传输cookie</p></li><li class="lvl-6"><p>前端必须设置<code>withCredentials</code>，浏览器处理同意传输cookie</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原生 xml 的设置方式</span></span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">xhr.<span class="property">withCredentials</span> = <span class="literal">true</span>;</span><br><span class="line"><span class="comment">// axios 设置方式</span></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">withCredentials</span> = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure></li><li class="lvl-6"><p>服务端响应头<code>Access-Control-Allow-Origin</code>不能再设置为*，只能是具体的（协议 + 域名 + 端口），与<code>Origin</code>请求头保持一致</p></li></ol></li><li class="lvl-3"><p>新版谷歌浏览器看不见options请求</p><ol><li class="lvl-6">在浏览器地址栏输入<code>chrome://flags/#out-of-blink-cors</code></li><li class="lvl-6">将其设置为disabled，然后重启浏览器</li></ol></li></ol></blockquote><h2 id="三、CORS服务端设置响应">三、CORS服务端设置响应</h2><h3 id="1、SpringBoot简单设置，-CrossOrigin注解设置">1、SpringBoot简单设置，<code>@CrossOrigin</code>注解设置</h3><p>对于没有发送cookie要求的，我们可以直接使用<code>@CrossOrigin</code>注解，加在控制类或者方法上</p><p>SpringBoot会自动将<code>Access-Control-Allow-Origin</code>的值设置为*</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CrossOrigin</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@CrossOrigin</span></span><br><span class="line">    <span class="meta">@PostMapper(&quot;/create&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResultInfo <span class="title function_">create</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、SpringBoot简单设置，配置类实现WebMvcConfigurer接口设置">2、SpringBoot简单设置，配置类实现<code>WebMvcConfigurer</code>接口设置</h3><p>此方式可以指定某几个地址访问，比上一种灵活一点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebMvcConfiguration</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> &#123;</span><br><span class="line">    registry.addMapping(<span class="string">&quot;/**&quot;</span>)<span class="comment">//设置允许跨域的路径</span></span><br><span class="line">            .allowedOrigins(<span class="string">&quot;*&quot;</span>)<span class="comment">//设置允许跨域请求的域名</span></span><br><span class="line">            .allowCredentials(<span class="literal">true</span>)<span class="comment">//是否允许证书 不再默认开启</span></span><br><span class="line">            .allowedMethods(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;POST&quot;</span>, <span class="string">&quot;PUT&quot;</span>, <span class="string">&quot;DELETE&quot;</span>)<span class="comment">//设置允许的方法</span></span><br><span class="line">            .maxAge(<span class="number">6000</span>);<span class="comment">//跨域允许时间</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、SpringBoot拦截器设置">3、SpringBoot拦截器设置</h3><p>此方法灵活程度最高，可以自行设置，允许cookie传输可通过此方法设置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.lang.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.handler.HandlerInterceptorAdapter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* CORS的拦截器</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CorsInterceptor</span> <span class="keyword">extends</span> <span class="title class_">HandlerInterceptorAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">origin</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;Origin&quot;</span>);</span><br><span class="line">response.setHeader(<span class="string">&quot;Access-Control-Allow-Headers&quot;</span>, <span class="string">&quot;Sso-Token,token&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Access-Control-Allow-Methods&quot;</span>, <span class="string">&quot;GET, HEAD, POST, PUT, DELETE, TRACE, OPTIONS, PATCH&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(StringUtils.isBlank(origin))&#123;</span><br><span class="line">    response.setHeader(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="string">&quot;*&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    response.setHeader(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, origin);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (HttpMethod.OPTIONS.toString().equals(request.getMethod())) &#123;</span><br><span class="line">    response.setStatus(HttpStatus.NO_CONTENT.value());</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 注册使用拦截器</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebMvcConfiguration</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> CorsInterceptor corsInterceptor;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor(corsInterceptor).addPathPatterns(<span class="string">&quot;/**&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、使用Nginx设置响应头达到CORS对服务器的配置">4、使用Nginx设置响应头达到CORS对服务器的配置</h3><p><code>ngx_http_headers_module</code>是nginx编译时默认自带的模块，里面有<code>add_header</code>和<code>expires</code>等</p><p>使用该模块下的<code>add_header</code>可以完成添加头信息的操作</p><ul class="lvl-0"><li class="lvl-2"><p>语法：<mark>add_ header name value [always]</mark>;</p></li><li class="lvl-2"><p>作用：可以添加自定义的响应头信息</p></li><li class="lvl-2"><p>作用域：可以在http、server、location、if in location中使用</p></li><li class="lvl-2"><p><mark>注意</mark>：</p><ul class="lvl-2"><li class="lvl-4">当前作用域没有<code>add_header</code>，才会继承上一层设置的响应头。也就是说，<code>add_header</code>可以在最上层统一设置，然后个性化独立设置</li><li class="lvl-4">Nginx 1. 7. 5后增加了always语法，即便后端接口发生500错误，设置的响应头也能生效</li></ul></li><li class="lvl-2"><p>简单使用</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">443</span> ssl;</span><br><span class="line">    <span class="attribute">server_name</span> banmoon.com;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">add_header</span> <span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span> <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">    <span class="attribute">add_header</span> <span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span> <span class="string">&#x27;DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,bird-idempotency&#x27;</span>;</span><br><span class="line">    <span class="attribute">add_header</span> <span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span> <span class="string">&#x27;GET,PUT,POST,DELETE,OPTIONS&#x27;</span>;</span><br><span class="line">    <span class="attribute">add_header</span> <span class="string">&#x27;Access-Control-Allow-Credentials&#x27;</span> <span class="string">&#x27;true&#x27;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> localhost:<span class="number">8080</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li class="lvl-2"><p>需要传递cookie时</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">443</span> ssl;</span><br><span class="line">    <span class="attribute">server_name</span> banmoon.com;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">if</span> (<span class="variable">$request_method</span> = <span class="string">&#x27;OPTIONS&#x27;</span>)&#123;</span><br><span class="line">        <span class="attribute">add_header</span> <span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span> <span class="string">&quot;<span class="variable">$http_origin</span>&quot;</span>;</span><br><span class="line">        <span class="attribute">add_header</span> <span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span> <span class="string">&#x27;DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,bird-idempotency&#x27;</span>;</span><br><span class="line">        <span class="attribute">add_header</span> <span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span> <span class="string">&#x27;GET,PUT,POST,DELETE,OPTIONS&#x27;</span>;</span><br><span class="line">        <span class="attribute">add_header</span> <span class="string">&#x27;Access-Control-Allow-Credentials&#x27;</span> <span class="string">&#x27;true&#x27;</span>;</span><br><span class="line">        <span class="attribute">return</span> <span class="number">204</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">if</span> (<span class="variable">$request_method</span> != <span class="string">&#x27;OPTIONS&#x27;</span>)&#123;</span><br><span class="line">        <span class="attribute">add_header</span> <span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span> <span class="string">&quot;<span class="variable">$http_origin</span>&quot;</span>;</span><br><span class="line">        <span class="attribute">add_header</span> <span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span> <span class="string">&#x27;DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,bird-idempotency&#x27;</span>;</span><br><span class="line">        <span class="attribute">add_header</span> <span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span> <span class="string">&#x27;GET,PUT,POST,DELETE,OPTIONS&#x27;</span>;</span><br><span class="line">        <span class="attribute">add_header</span> <span class="string">&#x27;Access-Control-Allow-Credentials&#x27;</span> <span class="string">&#x27;true&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> localhost:<span class="number">8080</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="四、最后">四、最后</h2><p>我是半月，祝你幸福！！！</p>]]></content>
      
      
      <categories>
          
          <category> 前后端分离 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis的持久化策略RDB和AOF</title>
      <link href="/archive/8c746a2c/"/>
      <url>/archive/8c746a2c/</url>
      
        <content type="html"><![CDATA[<h1>Redis的持久化策略RDB和AOF</h1><h2 id="一、介绍">一、介绍</h2><p>众所周知，redis是一个内存数据库，是一个经典的<code>NOSQL</code>类型的数据库。</p><p>我们常常拿redis来当成缓存，这得益于它存储数据的位置在内存中，这样在进行取数时，不用再进行磁盘IO，速度也会大大增加。</p><p>但是，也正是它存储在内存中，服务器若是断点、宕机，内存中的数据岂不是没有了。所以，redis还有它自己的持久化策略，将自己内存中的数据保存一份在磁盘中，以备不时之需。</p><h2 id="二、持久化策略">二、持久化策略</h2><h3 id="1）RDB（默认）">1）RDB（默认）</h3><p><code>rdb</code>持久化策略，每隔一段时间将内存中的数据保存下来。等下次redis启动，就会自动加载这个文件的数据到内存中，进行恢复。</p><p>时间间隔、文件名都是可以设置的，修改<code>redis.conf</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">################################ SNAPSHOTTING  ################################</span></span><br><span class="line"><span class="comment"># 当900秒内至少有1个键值对发生变动，触发持久化</span></span><br><span class="line"><span class="string">save</span> <span class="number">900</span> <span class="number">1</span></span><br><span class="line"><span class="comment"># 当300秒内至少有10个键值对发生变动，触发持久化</span></span><br><span class="line"><span class="string">save</span> <span class="number">300</span> <span class="number">10</span></span><br><span class="line"><span class="comment"># 当60秒内至少有10000个键值对发生变动，触发持久化</span></span><br><span class="line"><span class="string">save</span> <span class="number">60</span> <span class="number">10000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 转储数据库的文件名</span></span><br><span class="line"><span class="string">dbfilename</span> <span class="string">dump.rdb</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 持久化文件的目录</span></span><br><span class="line"><span class="string">dir</span> <span class="string">./</span></span><br></pre></td></tr></table></figure><p>此外，执行<code>flushall</code>命令清空数据库时，以及执行<code>shutdown</code>命令等手段退出Redis时，都会直接触发持久化。</p><h3 id="2）AOF">2）AOF</h3><p><code>AOF</code>全称为<code>Append Only File</code>，指的是当我们执行每一条redis命令时（查询不会记录），都会追加到<code>AOF</code>文件的末尾。等下次redis启动时，redis会重新执行<code>AOF</code>文件中的命令，用来恢复数据。</p><p>在我们执行一条redis命令时，这条命令会先保存在一个叫做<code>oscache</code>的缓存，进而再保存至<code>AOF</code>文件当中。</p><p>由于<code>AOF</code>不是默认的持久化方式，我们需要在配置文件中打开它</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打开AOF，可以和RDB一起使用</span></span><br><span class="line"><span class="string">appendonly</span> <span class="literal">no</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这是AOF追加命令的三种策略，触发一个叫做fsync的指令追加命令</span></span><br><span class="line"><span class="comment"># appendfsync always</span></span><br><span class="line"><span class="string">appendfsync</span> <span class="string">everysec</span></span><br><span class="line"><span class="comment"># appendfsync no</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重写机制</span></span><br><span class="line"><span class="comment"># 当AOF文件大于64mb，并且比上一次重写的文件体积大了至少一倍，就会AOF重写</span></span><br><span class="line"><span class="string">auto-aof-rewrite-percentage</span> <span class="number">100</span></span><br><span class="line"><span class="string">auto-aof-rewrite-min-size</span> <span class="string">64mb</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>追加命令的三种策略</p><ul class="lvl-2"><li class="lvl-4"><b>always</b>：每次有新的修改数据的命令，就会将缓冲区内的命令同步追加到AOF文件，十分安全，但是效率低</li><li class="lvl-4"><b>everysec</b>：默认每秒将缓冲区内的命令同步追加到AOF文件，但是无法做到实时持久化，还是会可能丢失一秒的数据</li><li class="lvl-4"><b>no</b>：交给操作系统来决定什么时候去同步追加数据</li></ul></li><li class="lvl-2"><p>重写机制当命令一直持续不断的追加到<code>AOF</code>文件当中，文件会变得越来越大。所以就有了一个重写机制，它能将当前的<code>AOF</code>文件中的命令进行优化，重新恢复到最小指令集文件，这样文件的大小就会变小，在redis重启后，也能快速的恢复数据。</p></li></ul><h2 id="三、最后">三、最后</h2><p><b><code>RDB</code>和<code>AOF</code>的优缺点</b></p><table><thead><tr><th>对比说明</th><th>RDB</th><th>AOF</th></tr></thead><tbody><tr><td>数据的准确度、安全性<br />由于<code>RDB</code>有一定的时间间隔，在服务器宕机时，数据恢复没有那么准确<br />而<code>AOF</code>可以做到异步的命令追加，可以带来相当高的数据准确性</td><td>×</td><td>√</td></tr><tr><td>数据恢复<br />如果数据量比较大，<code>RDB</code>的优势会比较明显，可以快速的进行恢复<br /><code>AOF</code>由于需要执行命令集，在数据恢复的速度方面会比较慢</td><td>√</td><td>×</td></tr><tr><td>文件大小<br /><code>RDB</code>文件小，<code>AOF</code>文件较大</td><td>—</td><td>—</td></tr></tbody></table><p>所以，如何选择<code>RDB</code>和<code>AOF</code>，需要在数据准确度还是数据恢复的速度上进行考虑。当然，如果有需要，都启用也是可以的。</p><p>我是半月，祝你幸福！！！</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于spring事务你需要知道的知识点</title>
      <link href="/archive/c9de584f/"/>
      <url>/archive/c9de584f/</url>
      
        <content type="html"><![CDATA[<h1>关于spring事务你需要知道的知识点</h1><h2 id="一、介绍">一、介绍</h2><p>大家都知道，在<code>SpringBoot</code>中，使用事务只需要添加<code>@Transactional</code>就可以添加事务，很是方便。</p><p>那么它到底是怎么工作的呢？</p><p>这么说有点晕头晕脑的，那来简单看下</p><h2 id="二、事务失效的场景">二、事务失效的场景</h2><h3 id="1）事务需要代理类启动">1）事务需要代理类启动</h3><p>基本的配置我就贴出来了，就一个连接数据库的配置有啥好看的，数据库表也是一样</p><p>那么接下来，先来一个<code>UserDao</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">()</span>&#123;</span><br><span class="line">        jdbcTemplate.execute(<span class="string">&quot;INSERT INTO `user`(`name`) VALUES (&#x27;半月无霜&#x27;)&quot;</span>);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert2</span><span class="params">()</span>&#123;</span><br><span class="line">        jdbcTemplate.execute(<span class="string">&quot;INSERT INTO `user`(`name`) VALUES (&#x27;半月&#x27;)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再来一个<code>UserService</code>，<mark>并在14行打上断点</mark></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.test.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">()</span>&#123;</span><br><span class="line">        userDao.insert();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写段测试，调用一下这个插入方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.test.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ServiceTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">insertTest</span><span class="params">()</span> &#123;</span><br><span class="line">        userService.insert();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>debug</code>启动后，我们发现这个<code>userDao</code>是<code>CGlib</code>创建了一个代理类</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220306174247.png" alt="image-20220306173738993" /></p><p>放行，可以发现报错，继续看看事务会不会回滚</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220306174239.png" alt="image-20220306174137289" /></p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220306174217.png" alt="image-20220306174214964" /></p><p>代码中抛出的空指针异常就是我们写的那段，说明插入语句已经执行了。但看到数据库中，没有自己执行插入的数据，那证明了事务确实生效了。</p><p>那如果没有这个代理类，真的事务就不会生效吗？把测试代码改一下，不再依赖<code>spring</code>注入，我们自己来创建实例对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Setter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Setter</span><span class="comment">// 加上set方法，jdbc从外部给予</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">()</span>&#123;</span><br><span class="line">        jdbcTemplate.execute(<span class="string">&quot;INSERT INTO `user`(`name`) VALUES (&#x27;半月无霜&#x27;)&quot;</span>);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert2</span><span class="params">()</span>&#123;</span><br><span class="line">        jdbcTemplate.execute(<span class="string">&quot;INSERT INTO `user`(`name`) VALUES (&#x27;半月&#x27;)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.test.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.test.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ServiceTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">insertTest</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">UserDao</span> <span class="variable">userDao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserDao</span>();</span><br><span class="line">        userDao.setJdbcTemplate(jdbcTemplate);</span><br><span class="line">        userDao.insert();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看结果，依然报错，这是肯定的。但数据库，表里却已经有了数据。事务失效了，这一次的<code>userDao</code>是自己创建的实例，而不是动态代理类。</p><p>动态代理类，在使用<code>@Transactional</code>的方法时，前置通知开启事务，后置通知决定是提交还是回滚。</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220307220307.png" alt="image-20220306175629369" /></p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220307220315.png" alt="image-20220306175742286" /></p><h3 id="2）修饰在非public方法上时">2）修饰在非public方法上时</h3><p>如果<code>@Transactional</code>修饰在非public修饰的方法上，事务将会失效。</p><p>这是因为<code>CGlib</code>在创建代理类时，它会查找目标方法是否是<code>public</code></p><p>主要类在此：<code>org.springframework.transaction.interceptor.AbstractFallbackTransactionAttributeSource</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">protected</span> TransactionAttribute <span class="title function_">computeTransactionAttribute</span><span class="params">(Method method, <span class="meta">@Nullable</span> Class&lt;?&gt; targetClass)</span> &#123;</span><br><span class="line">    <span class="comment">// 判断方法是不是public</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.allowPublicMethodsOnly() &amp;&amp; !Modifier.isPublic(method.getModifiers())) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 其他逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是个抽象类，<code>allowPublicMethodsOnly</code>方法由它的子类来实现，本身默认的实现是返回<code>false</code>。</p><p>在使用<code>@Transactional</code>时，使用到<code>public</code>的方法上。所以这也是我不建议将注解使用在类上的原因，你以为类中的方法都有事务了，但实际不然。</p><h3 id="3）在同一个类中调用方法">3）在同一个类中调用方法</h3><p>还是简单的代码，讲的是同一个类中调用方法，这个方法有<code>@Transactional</code>。</p><p>这里修改一下<code>UserDao</code>这个类，使得<code>insert</code>方法去调用<code>insert2</code>方法，查看事务是否生效</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Setter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">()</span>&#123;</span><br><span class="line">        insert2();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert2</span><span class="params">()</span>&#123;</span><br><span class="line">        jdbcTemplate.execute(<span class="string">&quot;INSERT INTO `user`(`name`) VALUES (&#x27;半月&#x27;)&quot;</span>);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试代码启动</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.test.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ServiceTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">insertTest</span><span class="params">()</span> &#123;</span><br><span class="line">        userDao.insert();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看结果，报错是肯定的，那么数据呢？</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220307220324.png" alt="image-20220306192905742" /></p><p>插入成功，怎么回事？</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220307220332.png" alt="image-20220306192950529" /></p><p>原因估计还是出在代理类上，和第一条不同的是，代理类虽然有代理类，但<code>insert</code>方法直接调用了<code>insert2</code>方法，这个是目标类中自己调用的，所以事务没有生效。</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220307220342.png" alt="image-20220306194333888" /></p><h3 id="4）注解属性-propagation-设置错误">4）注解属性 propagation 设置错误</h3><p>如使用了<code>SUPPORTS</code>、<code>NOT_SUPPORTED</code>传播机制，这些传播机制讲的是不再创建事务。</p><p>详见第三章</p><h3 id="5）注解属性rollbackFor设置错误">5）注解属性rollbackFor设置错误</h3><p><b>rollbackFor</b>：这个注解属性的作用是可以指定能够触发事务回滚的异常类型。</p><p>而在默认情况下，<code>spring</code>只会对非检查的异常做回滚。</p><ul class="lvl-0"><li class="lvl-2"><p>检查异常：派生于Error或者RuntimeException的异常成为非检查异常</p><ul class="lvl-2"><li class="lvl-4">例如：<code>NullPointerException</code>、<code>ArithmeticException</code></li></ul></li><li class="lvl-2"><p>非检查异常：剩下的就是非检查异常了；在写出后，编译器要我们进行及时处理的异常，要么自己捕获，要么抛出</p><ul class="lvl-2"><li class="lvl-4">例如：<code>IOException</code>、<code>TimeOutExpetion</code></li></ul></li></ul><p>所以在抛出其他类型的异常时，我们得指定<code>rollbackFor</code>属性。一旦有它和它的子类异常被抛出，事务也能够生效</p><h3 id="6）异常被自己捕获">6）异常被自己捕获</h3><p>事务判断是否提交，还是回滚，就是根据是否捕获到非检查异常。</p><p>所以，如果在程序中自己<code>try...catch...</code>捕获掉，那么事务将会当做成功执行，将事务提交。</p><p>自己写了<code>try...catch...</code>的话，要么自己手动提交回滚，要么就是再抛出一个非检查异常。</p><h2 id="三、事务的传播机制">三、事务的传播机制</h2><p>事务的传播机制，简单的来说，就是一个方法，调用另一个方法。原本就有的事务，在遇到一个新的事务后会发生什么机制。这就是我们要讲得事务传播机制。</p><p>通过<code>@Transactional</code>的<code>propagation</code>属性我们可以进行配置事务的传播机制，我们先看看这个枚举里面都有些什么</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.transaction.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Propagation</span> &#123;</span><br><span class="line">    REQUIRED(<span class="number">0</span>),</span><br><span class="line">    SUPPORTS(<span class="number">1</span>),</span><br><span class="line">    MANDATORY(<span class="number">2</span>),</span><br><span class="line">    REQUIRES_NEW(<span class="number">3</span>),</span><br><span class="line">    NOT_SUPPORTED(<span class="number">4</span>),</span><br><span class="line">    NEVER(<span class="number">5</span>),</span><br><span class="line">    NESTED(<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> value;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Propagation</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">value</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简简单单，没有说明，一个一个来看吧。先写出两个<code>Dao</code>，一会测试用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">()</span>&#123;</span><br><span class="line">        jdbcTemplate.execute(<span class="string">&quot;INSERT INTO `user`(`name`) VALUES (&#x27;半月&#x27;)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PlatformDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">()</span>&#123;</span><br><span class="line">        jdbcTemplate.execute(<span class="string">&quot;INSERT INTO `platform`(`name`) VALUES (&#x27;博客平台&#x27;)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1）REQUIRED（默认）">1）REQUIRED（默认）</h3><p>这是<code>spring</code>默认的事务传播机制。</p><ul class="lvl-0"><li class="lvl-2"><p>如果外部方法已经有事务了，那么本方法将加入这个事务</p></li><li class="lvl-2"><p>如果外部方法没有事务，那么本方法就自己建事务</p></li></ul><p>我们写一个<code>Service</code>去调用上面两个<code>Dao</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.test.dao.PlatformDao;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.test.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PlatformDao platformDao;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果外部方法已经有事务了，那么本方法将加入这个事务</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">// 此处将创建事务</span></span><br><span class="line">        userDao.insert();</span><br><span class="line"><span class="comment">// 此处将创建事务，如果发生异常，只会回滚自己的事务</span></span><br><span class="line">        platformDao.insert();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.test.dao.PlatformDao;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.test.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PlatformDao platformDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 外部方法有事务，里面的两个方法的事务，将直接加入到外部方法的事务中</span></span><br><span class="line"><span class="comment">     * 如果发生异常，导致外部方法中整个事务的回滚</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 不创建事务了，加入到外部事务</span></span><br><span class="line">        userDao.insert();</span><br><span class="line">        <span class="comment">// 不创建事务了，加入到外部事务</span></span><br><span class="line">        platformDao.insert();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2）SUPPORTS">2）SUPPORTS</h3><ul class="lvl-0"><li class="lvl-2"><p>如果外部方法已经有事务了，那么本方法将加入这个事务</p></li><li class="lvl-2"><p>如果外部方法没有事务，那么本方法就以非事务的方式执行，不再创建事务</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.test.dao.PlatformDao;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.test.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PlatformDao platformDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 外部方法有事务，里面的两个方法的事务，将直接加入到外部方法的事务中</span></span><br><span class="line"><span class="comment">     * 如果发生异常，导致外部方法中整个事务的回滚</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">// 这里的修饰是@Transactional(propagation = Propagation.SUPPORTS)</span></span><br><span class="line">        userDao.insert();</span><br><span class="line"><span class="comment">// 这里的修饰是@Transactional(propagation = Propagation.SUPPORTS)</span></span><br><span class="line">        platformDao.insert();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 外部方法没有事务，里面的两个方法不再会创建事务，直接以非事务的方式运行</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">// 这里的修饰是@Transactional(propagation = Propagation.SUPPORTS)</span></span><br><span class="line">        userDao.insert();</span><br><span class="line"><span class="comment">// 这里的修饰是@Transactional(propagation = Propagation.SUPPORTS)</span></span><br><span class="line">        platformDao.insert();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3）MANDATORY">3）MANDATORY</h3><ul class="lvl-0"><li class="lvl-2"><p>如果外部方法已经有事务了，那么本方法将加入这个事务</p></li><li class="lvl-2"><p>如果外部方法没有事务，将抛出异常</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.test.dao.PlatformDao;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.test.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PlatformDao platformDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 外部方法有事务，里面的两个方法的事务，将直接加入到外部方法的事务中</span></span><br><span class="line"><span class="comment">     * 如果发生异常，导致外部方法中整个事务的回滚</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">// 这里的修饰是@Transactional(propagation = Propagation.MANDATORY)</span></span><br><span class="line">        userDao.insert();</span><br><span class="line"><span class="comment">// 这里的修饰是@Transactional(propagation = Propagation.MANDATORY)</span></span><br><span class="line">        platformDao.insert();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 外部方法没有事务，里面直接会抛出异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">// 这里的修饰是@Transactional(propagation = Propagation.MANDATORY)</span></span><br><span class="line">        userDao.insert();</span><br><span class="line"><span class="comment">// 这里的修饰是@Transactional(propagation = Propagation.MANDATORY)</span></span><br><span class="line">        platformDao.insert();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来看看异常吧</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220307210941.png" alt="image-20220307210837620" /></p><h3 id="4）REQUIRES-NEW">4）REQUIRES_NEW</h3><ul class="lvl-0"><li class="lvl-2"><p>如果外部方法已经有事务了，重新创建一个新的事务</p></li><li class="lvl-2"><p>如果外部方法没有事务，重新创建一个新的事务</p></li></ul><p>这也就是说，无论外部有无事务，内部方法都将会创建新的事务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.test.dao.PlatformDao;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.test.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PlatformDao platformDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 外部方法已经有事务了，内部方法还是会重新创建一个新的事务</span></span><br><span class="line"><span class="comment">     * 如果发生异常，只会导致自己所在的方法事务回滚</span></span><br><span class="line"><span class="comment">     * 这里创建了三个事务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">// 这里的修饰是@Transactional(propagation = Propagation.REQUIRES_NEW)</span></span><br><span class="line">        userDao.insert();</span><br><span class="line"><span class="comment">// 这里的修饰是@Transactional(propagation = Propagation.REQUIRES_NEW)</span></span><br><span class="line">        platformDao.insert();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 外部方法没有事务，内部方法会创建一个新的事务</span></span><br><span class="line"><span class="comment">     * 如果发生异常，只会导致自己所在的方法事务回滚</span></span><br><span class="line"><span class="comment">     * 这里创建了两个事务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">// 这里的修饰是@Transactional(propagation = Propagation.REQUIRES_NEW)</span></span><br><span class="line">        userDao.insert();</span><br><span class="line"><span class="comment">// 这里的修饰是@Transactional(propagation = Propagation.REQUIRES_NEW)</span></span><br><span class="line">        platformDao.insert();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5）NOT-SUPPORTED">5）NOT_SUPPORTED</h3><ul class="lvl-0"><li class="lvl-2"><p>如果外部方法已经有事务了，以非事务的方式运行</p></li><li class="lvl-2"><p>如果外部方法没有事务，以非事务的方式运行</p></li></ul><p>也就是说，无论外部方法有无事务，里面的方法执行都是没有事务的。</p><p>但我有点疑惑，如果里面方法抛出异常了，外部方法会怎么样。简单测试一下吧</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.test.dao.PlatformDao;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.test.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PlatformDao platformDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 无论外部方法有无事务，里面的方法执行都是没有事务的</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">// 这里的修饰是@Transactional(propagation = Propagation.NOT_SUPPORTED)</span></span><br><span class="line">        userDao.insert();</span><br><span class="line">        <span class="comment">// 外部方法的执行</span></span><br><span class="line">        jdbcTemplate.execute(<span class="string">&quot;INSERT INTO `user`(`name`) VALUES (&#x27;半月1&#x27;)&quot;</span>);</span><br><span class="line">        <span class="comment">// 这里的修饰是@Transactional(propagation = Propagation.NOT_SUPPORTED)</span></span><br><span class="line">        platformDao.insert();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我执行了，结果是只有<code>26</code>行的数据插入被回退。</p><p><code>24</code>行和<code>28</code>行是非事务运行的，就算异常了也不会回退</p><h3 id="6）NEVER">6）NEVER</h3><ul class="lvl-0"><li class="lvl-2"><p>如果外部方法已经有事务了，抛出异常</p></li><li class="lvl-2"><p>如果外部方法没有事务，以非事务的方式运行</p></li></ul><p>和<code>SUPPORTS</code>相反的一个传播机制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.test.dao.PlatformDao;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.test.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PlatformDao platformDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 外部方法已经有事务了，将抛出异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">// 这里的修饰是@Transactional(propagation = Propagation.NEVER)</span></span><br><span class="line">        userDao.insert();</span><br><span class="line"><span class="comment">// 这里的修饰是@Transactional(propagation = Propagation.NEVER)</span></span><br><span class="line">        platformDao.insert();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 外部方法没有事务，内部方法也不再创建，以非事务的方式运行</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">// 这里的修饰是@Transactional(propagation = Propagation.NEVER)</span></span><br><span class="line">        userDao.insert();</span><br><span class="line"><span class="comment">// 这里的修饰是@Transactional(propagation = Propagation.NEVER)</span></span><br><span class="line">        platformDao.insert();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7）NESTED">7）NESTED</h3><ul class="lvl-0"><li class="lvl-2"><p>如果外部方法已经有事务了，内部方法将创建事务，和外部事务组成嵌套事务</p></li><li class="lvl-2"><p>如果外部方法没有事务，内部方法将创建事务</p></li></ul><blockquote><p>组成嵌套事务是什么意思呢？</p><p>我们将外部方法的事务称为父事务，内部方法创建的事务为子事务</p><ul class="lvl-1"><li class="lvl-2"><p>当子事务回滚时，不影响父事务</p></li><li class="lvl-2"><p>当父事务回滚时，子事务一起回滚</p></li></ul></blockquote><p>这里同样，我们来进行测试一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.test.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.test.dao.PlatformDao;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.test.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PlatformDao platformDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 这里的修饰是@Transactional(propagation = Propagation.NESTED)</span></span><br><span class="line">        userDao.insert();</span><br><span class="line">        <span class="comment">// 外部方法的执行</span></span><br><span class="line">        jdbcTemplate.execute(<span class="string">&quot;INSERT INTO `user`(`name`) VALUES (&#x27;半月1&#x27;)&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 这里的修饰是@Transactional(propagation = Propagation.NESTED)</span></span><br><span class="line">            platformDao.insert();<span class="comment">// 此处将抛出空指针</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 这里的修饰是@Transactional(propagation = Propagation.NESTED)</span></span><br><span class="line">        userDao.insert();</span><br><span class="line">        <span class="comment">// 外部方法的执行</span></span><br><span class="line">        jdbcTemplate.execute(<span class="string">&quot;INSERT INTO `user`(`name`) VALUES (&#x27;半月1&#x27;)&quot;</span>);</span><br><span class="line">        <span class="comment">// 这里的修饰是@Transactional(propagation = Propagation.NESTED)</span></span><br><span class="line">        platformDao.insert();</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointException</span>();<span class="comment">// 此处将抛出空指针</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行<code>insert()</code>，这是子事务中抛出的异常。结果是只有<code>30</code>行的插入数据回滚。注意的就是，内部方法的异常要自己捕获，别被父事务发现了。如果发现了，大家就一起回滚吧。</p><p>执行<code>insert1()</code>，这是父事务中抛出的异常。结果发现所有插入的数据都回滚了。</p><h2 id="四、结语">四、结语</h2><p>我是半月，祝你幸福！！！</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于final关键字的两个面试题</title>
      <link href="/archive/b668dca2/"/>
      <url>/archive/b668dca2/</url>
      
        <content type="html"><![CDATA[<h1>关于final关键字的两个面试题</h1><h2 id="一、介绍">一、介绍</h2><p><code>final</code>关键字常用，但真的了解它吗。我做一下记录，仅供参考</p><ul class="lvl-0"><li class="lvl-2"><p>简述<code>final</code>的作用</p></li><li class="lvl-2"><p>为什么局部内部类和匿名内部类只能访问局部的<code>final</code>变量</p></li></ul><h2 id="二、简述final的作用">二、简述final的作用</h2><p><code>final</code>是一个修饰符，表示最终的，不可被修改</p><ul class="lvl-0"><li class="lvl-2"><p>修饰类：表示类不可被继承，所以抽象类不能使用<code>final</code>关键字</p></li><li class="lvl-2"><p>修饰方法：表示方法不能被重写，但是可以进行重载</p></li><li class="lvl-2"><p>修饰变量：表示赋值后就不能修改该变量的值</p></li></ul><p><b>修饰变量时，有几种情况</b></p><ul class="lvl-0"><li class="lvl-2"><p>修饰成员变量时</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 声明时直接赋值</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在代码块中进行赋值</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> b;</span><br><span class="line">    &#123;</span><br><span class="line">        b = <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在构造函数中进行赋值</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> c;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Demo</span><span class="params">(<span class="type">int</span> c)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.c = c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li class="lvl-2"><p>修饰局部变量时</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo0</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="keyword">final</span> <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;<span class="comment">// 一旦赋值无法改变</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> b;<span class="comment">// 在声明时，可以不赋值</span></span><br><span class="line">        b = <span class="number">2</span>;<span class="comment">// 在使用前一定要进行赋值</span></span><br><span class="line">        System.out.println(a + b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li class="lvl-2"><p>修饰静态变量时</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 直接赋值</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 在静态代码块中赋值</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> b;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        b = <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li class="lvl-2"><p>修饰基本数据类型和引用类型时</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        a = <span class="number">2</span>;<span class="comment">// 不可修改</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">final</span> <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;半月&quot;</span>, <span class="number">18</span>);</span><br><span class="line">        person.setName(<span class="string">&quot;半月无霜&quot;</span>);<span class="comment">// 可以进行修改，final声明的只是person这个局部变量</span></span><br><span class="line">        person = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;半月无霜&quot;</span>, <span class="number">22</span>);<span class="comment">// 不允许修改</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="三、局部内部类和匿名内部类">三、局部内部类和匿名内部类</h2><p><b><mark>为什么局部内部类和匿名内部类只能访问局部的<code>final</code>变量</mark></b></p><p>这的确是一个好问题，我们一起来看看</p><p>先简单写出局部内部类和匿名内部类，发现他们使用外部的变量时，外部变量都要用<code>final</code>修饰，不然idea直接爆红了。</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220305184217.png" alt="image-20220305184215565" /></p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220305190656.png" alt="image-20220305190654868" /></p><blockquote><p><b>Variable used in lambda expression should be final or effectively final</b></p><p>简单翻译一下：在lambda表达式中使用变量应该是<code>final</code>或者有效的<code>final</code></p><p>还有局部内部类，也有这样的问题</p><p><b>Variable ‘number1’ is accessed from within inner class, needs to be final or effectively final</b></p><p>在内部类中访问<code>number1</code>，需要<code>final</code>或者有效的<code>final</code></p></blockquote><p>它提到了<code>final</code>，要进行修饰这些变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.algorithm.order;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Demo</span> <span class="variable">demo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Demo</span>();</span><br><span class="line">        demo.test1(<span class="number">10</span>);</span><br><span class="line">        demo.test2(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">(<span class="type">int</span> number1)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">number2</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        number1 = number1 + number2;</span><br><span class="line">        number2 = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">finalNumber</span> <span class="operator">=</span> number1;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">finalNumber1</span> <span class="operator">=</span> number2;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            System.out.println(finalNumber);</span><br><span class="line">            System.out.println(finalNumber1);</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">(<span class="type">int</span> number1)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">number2</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        number1 = number1 + number2;</span><br><span class="line">        number2 = <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">finalNumber</span> <span class="operator">=</span> number1;</span><br><span class="line">        <span class="type">int</span> <span class="variable">finalNumber1</span> <span class="operator">=</span> number2;</span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">InnerClass</span> &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span>&#123;</span><br><span class="line">                System.out.println(finalNumber);</span><br><span class="line">                System.out.println(finalNumber1);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为什么不能直接使用呢，原因也很简单。</p><p>因为，在进行编译<code>java</code>文件时，上面提到了内部类会生成<mark>独立的<code>class</code>文件</mark>。</p><p>那么问题随之而来，匿名内部类和局部内部类想要使用外部的变量该怎么办，编译时候它是怎么做的？<mark>它直接将外部的变量复制了一份在内部类中。</mark></p><p>好的那么，问题又来了。外部类中有一份，内部类中也有一份，<mark>数据不一致</mark>该怎么办。干脆一刀切算了，直接使用<code>final</code>关键字吧。</p><p>像上面示例的27和28行，虽然它没有<code>final</code>修饰，但也可以编译通过，这两个变量已经不会再做更改了。不过在使用内部类的时候，还是得小心，最好还是加上<code>final</code>吧</p><h2 id="四、最后想说的话">四、最后想说的话</h2><p>我是半月，祝你幸福！！！</p>]]></content>
      
      
      <categories>
          
          <category> 程序人生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> jdk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows强制删除被占用的文件</title>
      <link href="/archive/31fa67a6/"/>
      <url>/archive/31fa67a6/</url>
      
        <content type="html"><![CDATA[<h1>windows强制删除被占用的文件</h1><h2 id="一、介绍">一、介绍</h2><p>在<code>windows</code>中，想删除一个文件，往往被进程占用，导致删除不掉改怎么办。</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220305121841.png" alt="image-20220305121837058" /></p><p>遇到问题不要慌，这里可以给你解决</p><h2 id="二、解决">二、解决</h2><h3 id="1）使用文件粉碎功能">1）使用文件粉碎功能</h3><p>如360大师、<a href="https://www.huorong.cn/">火绒</a>、电脑管家，等</p><p>不过我不喜欢用这种方式添加软件，毕竟有几个程序员的电脑上有这些软件呢</p><h3 id="2）创建bat脚本">2）创建bat脚本</h3><p>不知道哪个大神写的bat脚本，亲测还是挺好用的</p><ol><li class="lvl-3"><p>创建新的txt</p></li><li class="lvl-3"><p>粘贴复制以下代码</p></li><li class="lvl-3"><p>修改后缀为bat</p></li><li class="lvl-3"><p>将要删除的文件拖动到此文件上就好</p></li></ol><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exist</span> \\?\%<span class="number">1</span> (</span><br><span class="line">   <span class="built_in">echo</span> 将要删除的文件托至本程序即可,不能直接运行本程序 </span><br><span class="line">   <span class="built_in">echo</span> BY ma6174 </span><br><span class="line"></span><br><span class="line">   <span class="built_in">pause</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">exit</span></span><br><span class="line">)</span><br><span class="line"><span class="built_in">echo</span> y|<span class="built_in">Cacls</span> %* /c /t /p Everyone:f</span><br><span class="line"><span class="built_in">DEL</span> /F /A /Q \\?\%<span class="number">1</span></span><br><span class="line"><span class="built_in">RD</span> /S /Q \\?\%<span class="number">1</span></span><br><span class="line"><span class="built_in">DEL</span> /F /A /S /Q  %*</span><br><span class="line"><span class="built_in">RD</span> /S /Q \\?\%*</span><br><span class="line"><span class="built_in">DEL</span> /F /A /Q %*</span><br><span class="line"><span class="built_in">RD</span> /S /Q \\?\%*</span><br><span class="line"><span class="built_in">DEL</span> /F /A /S /Q \\?\%<span class="number">1</span></span><br><span class="line"><span class="built_in">RD</span> /S /Q \\?\%<span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="3）使用rimraf">3）使用rimraf</h3><p>感谢这位开发者写出的插件工具，很好用</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220305121409.png" alt="image-20220305121407949" /></p><ol><li class="lvl-3"><p>安装rimraf</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install rimraf -g</span><br></pre></td></tr></table></figure></li><li class="lvl-3"><p>删除指定的文件或文件夹</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rimraf node_modules</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>你都有node_modules了，别告诉我你没有安装node.js</p></blockquote><h2 id="三、最后">三、最后</h2><p>我是半月，祝你幸福！！！</p>]]></content>
      
      
      <categories>
          
          <category> 程序人生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> code life </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java设计模式详解</title>
      <link href="/archive/3c8916d6/"/>
      <url>/archive/3c8916d6/</url>
      
        <content type="html"><![CDATA[<h1>设计模式详解</h1><h2 id="一、介绍">一、介绍</h2><p>设计模式（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。</p><p>设计模式，就是为了一套对写代码的写法经验的总结，怎么写效率更高，可读性更强，上手更简单。简单的抽象形容，就是摩天大楼和简易茅草屋的区别，前者使用更大更强的地基，有更加强大的设计蓝图，所以才能高耸入云；而茅草屋，只是简单的材料拼接而成的房子，来一场风可能就塌了。所以程序也是一样，要想做到和摩天大楼一样的程序，设计模式是必不可少的。</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220108193628.png" alt="image-20220108193404306" /></p><p>大部分人写代码应该都是茅草屋吧，我也是一样。哈哈哈，在写公司的代码时，只想着把功能做出来，常常就忽略的架构上的东西。</p><p>本文的绝大部分，都源自于哔哩哔哩尚硅谷学堂，谢谢他们的教程</p><h3 id="1）GOF（Gang-of-Four）">1）GOF（Gang of Four）</h3><p>GOF，我们通常叫四人帮。在 1994 年，由 Erich Gamma、Richard Helm、Ralph Johnson 和 John Vlissides 四人合著出版了一本名为 <b>Design Patterns - Elements of Reusable Object-Oriented Software（中文译名：设计模式 - 可复用的面向对象软件元素）</b> 的书，该书首次提到了软件开发中设计模式的概念。</p><p>一想到如今的我还得学近30年前的知识，我就觉得我好嫩，哈哈哈。</p><h3 id="2）七大原则">2）七大原则</h3><p>在四人帮的著作中，通过以下7种设计原则，为我们展现了23种设计模式。这7大原则分别是</p><ol><li class="lvl-3"><p>单一职责原则</p></li><li class="lvl-3"><p>接口隔离原则</p></li><li class="lvl-3"><p>依赖倒转原则</p></li><li class="lvl-3"><p>里氏替换原则</p></li><li class="lvl-3"><p>开闭原则</p></li><li class="lvl-3"><p>迪米特原则</p></li><li class="lvl-3"><p>合成复用原则</p></li></ol><blockquote><p>设计模式到底有几大原则，有人说是五种，有人说6种，而本文列举了七种。对比了一下其他的说法，发现了可以进行组合。具体组合成什么，还请继续往下看</p><p>按五大原则划分：1、（2、6）、（3、4）、5、7</p><p>按六大原则划分：1、（2、6）、3、4、5、7</p></blockquote><p>听不懂？没关系，一会通俗的讲解下</p><h4 id="2-1）单一职责原则">2.1）单一职责原则</h4><p>简单的来说，就是一个类只负责一项职责。如果一个类A负责了两项不同的职责，则要将类的细粒度分解为A1，A2。</p><p>常见的场景不好说，比如说一个<code>UserMapper</code>，只进行处理用户相关的职责，而不能处理其他的功能。</p><p>别问为什么要这样，问就是强迫症。</p><p>但原则是死的，人是活的，自己怎么舒服怎么来，让别人恶心去吧。额，面试的时候可别这样说，还有不要被自己多年前的代码恶心到就行。</p><h4 id="2-2）接口隔离原则">2.2）接口隔离原则</h4><p>一个类它所实现的接口，这个接口细粒度一定是最低的。这句话很是难懂，使用一个图解来进行描述</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220108213936.png" alt="image-20220108213934902" /></p><p>简单的图解，上述写法就违背了接口隔离原则,一个接口被类实现，却没有完全实现其接口内的方法。接口隔离原则，一个接口的细粒度需要拉到最低，仅看类需要完全实现的方法，不然不用添加到接口方法中去。</p><p>那么上述的代码要怎么改呢，既然类B只需要实现方法01和方法02，我们就创建一个接口给它，同样对应类C；</p><p>修改过后的关系</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220108214955.png" alt="image-20220108214954153" /></p><h4 id="2-3）依赖倒转原则">2.3）依赖倒转原则</h4><p>依赖倒转原则，有的翻译又叫依赖倒置原则。本质上他是对面向对象的使用，必须要使用上接口进行编程，将<b>具体的对象抽象化</b>。</p><p>在Java中，将对象进行抽象成接口或者抽象类。接口只需要定义规范，具体的实现交给具体的类。我们在进行使用时，都通过对抽象接口或者抽象类进行使用。如此一来，也就实现了高内聚，低耦合的效果。</p><p>下面写一段测试代码，效果是一个人接受到邮件，展示一下没有用到依赖倒转原则的效果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">banmoon</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;半月&quot;</span>);</span><br><span class="line">        banmoon.receive(<span class="keyword">new</span> <span class="title class_">Email</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Email</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getInfo</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;邮件&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receive</span><span class="params">(Email email)</span>&#123;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.name + <span class="string">&quot;收到了&quot;</span> + email.getInfo());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果就不贴了，挺简单的代码。简单的基础上，进行扩展就有一定的问题了。倘若这个人接受到的不是邮件，而是其他的短信或者微信呢，我们不得再重载<code>receive</code>方法？确实是一条思路，但路子走窄了，这就违背了依赖倒转原则。</p><p>我们应该规定一个<code>Email</code>，以及其他消息的抽象接口，看下列优化结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">banmoon</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;半月&quot;</span>);</span><br><span class="line">        banmoon.receive(<span class="keyword">new</span> <span class="title class_">Email</span>());</span><br><span class="line">        banmoon.receive(<span class="keyword">new</span> <span class="title class_">Wechat</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Something</span>&#123;</span><br><span class="line">    String <span class="title function_">getInfo</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Email</span> <span class="keyword">implements</span> <span class="title class_">Something</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getInfo</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;邮件&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Wechat</span> <span class="keyword">implements</span> <span class="title class_">Something</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getInfo</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;微信消息&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receive</span><span class="params">(Something sth)</span>&#123;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.name + <span class="string">&quot;收到了&quot;</span> + sth.getInfo());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果，在进行改进的过程中，原本的<code>main</code>方法都不用改动，效果是嘎嘎的好，后续扩展就很舒服了。</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220108231358.png" alt="image-20220108231357159" /></p><h4 id="2-4）里氏替换原则">2.4）里氏替换原则</h4><p>里氏替换原则，简单的来说是对面向对象语言的继承特性做出的限制。它规定以下几点</p><ol><li class="lvl-3"><p>一个类最好来自与继承抽象类或者实现接口，而不是继承一个具体类。具体的类已经是一个完整的个体，不应该进行继承。</p></li><li class="lvl-3"><p>如果非要继承，尽量<b>不要重写父类的方法</b>。否则在使用时，会造成方法调用不明确的问题</p></li></ol><p>总的来说，就是<b>不要用继承</b>，尽量不要用。继承会使得类之间增加耦合性，当想修改父类的方法逻辑时，必须要考虑到它的所有子类</p><h4 id="2-5）开闭原则">2.5）开闭原则</h4><p>开闭原则，是良好程序架构中最基础最重要的设计原则。</p><p>简单的来说，对程序的扩展开启，对修改关闭。比如说一个类，当需要新增一个功能时，最好不要影响到原有的方法和属性。原有的功能，能跑就行，只做增强，不做修改，这就是开闭原则。我马上能想到的就是AOP技术，就是对开闭原则最好的诠释。</p><p>像其他的原则，本质上都是在遵循开闭原则。</p><h4 id="2-6）迪米特原则">2.6）迪米特原则</h4><p>迪米特原则，又叫最少知道原则。</p><p>它指的是类之间的依赖关系，应当做到最小，细粒度要拉到最小，以减少类之间的耦合度 。</p><ol><li class="lvl-3"><p>只和直接朋友类发生依赖</p></li><li class="lvl-3"><p>不要依赖其他陌生的类</p></li></ol><blockquote><p>直接朋友，当一个类中的使用到其他类，出现的位置在类成员变量，方法参数，方法返回值时。这就说明两个类是直接朋友。</p><p>相反的，只在代码块或者方法中出现的类，我们称为陌生的类</p></blockquote><h4 id="2-7）合成复用原则">2.7）合成复用原则</h4><p>合成复用原则，要尽量使用对象聚合和组合，而不是继承关系达到软件复用的目的。</p><p>举个例子，类A中的方法1需要使用到类B的方法1和方法2，不应该使用继承，使类A继承类B。这就违背了合成复用原则。</p><p>我们可以使用聚合或组合的方式，来进行使用</p><ul class="lvl-0"><li class="lvl-2"><p>聚合：将类B作为类A的成员属性，再创建一个set方法，在使用类A的方法1前，先使用set方法将类B进行设置</p></li><li class="lvl-2"><p>组合：将类B作为类A的成员属性，通过类A的构造方法进行实例化</p></li></ul><h2 id="二、设计模式介绍">二、设计模式介绍</h2><p>上面的章节介绍了设计模式的由来，和它的七大设计原则。那么在设计模式的书中，一共列举了23种设计模式，可以分为三大类</p><ol><li class="lvl-3"><p><b>创建型模式</b>：单例模式、工厂模式、抽象工厂模式、原型模式、建造者模式</p></li><li class="lvl-3"><p><b>结构型模式</b>：适配器模式、桥接模式、装饰模式、组合模式、外观模式、享元模式、代理模式</p></li><li class="lvl-3"><p><b>行为型模式</b>：模板方法模式、命令模式、访问者模式、迭代器模式、观察者模式、中介者模式、备忘录模式、解释器模式、状态模式、策略模式、责任链模式</p></li></ol><p>由于设计模式是针对软件程序的代码做出了规范，所以它并不局限于一种语言，本文列举的是Java语言。</p><p>其次，设计模式有很多，上文中列举的23种，是前人总结经验得到的，一般都能覆盖程序出现的设计问题。如果您有什么新的设计模式，请让我学习学习。</p><h2 id="三、创建型设计模式">三、创建型设计模式</h2><h3 id="1）单例模式">1）单例模式</h3><p>单例模式，相信大家这这个模式都不陌生，可以说经常听到了。</p><p>不过这里还是要讲解一下他的概念，它主要体现在一个类只能有一个实例。</p><p>如果其他类想要使用这个类，对不起，你不能直接构造出我的实例，而是只能获取到我有且唯一的一个实例进行使用。</p><p>单例模式也可以分为很多种，分别是</p><ol><li class="lvl-3"><p>饿汉式（静态常量）</p></li><li class="lvl-3"><p>饿汉式（静态代码块）</p></li><li class="lvl-3"><p>懒汉式（线程不安全）</p></li><li class="lvl-3"><p>懒汉式（线程安全，同步方法）</p></li><li class="lvl-3"><p>懒汉式（线程安全，同步代码块）</p></li><li class="lvl-3"><p>双重检查</p></li><li class="lvl-3"><p>静态内部类</p></li><li class="lvl-3"><p>枚举</p></li></ol><blockquote><p>单例模式的使用场景</p><ul class="lvl-1"><li class="lvl-2">需要频繁进行创建和销毁，且创建对象时耗时过多或耗费资源过多（重量级对象）</li><li class="lvl-2">经常用到的工具类对象、频繁访问数据库或文件的对象（比如数据源、session工厂等）</li></ul></blockquote><h4 id="1-1）饿汉式（静态常量）">1.1）饿汉式（静态常量）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.singleton;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 饿汉式（静态常量）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton01</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton01</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">Singleton01</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton01</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton01 <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>步骤</p><ol><li class="lvl-3"><p>将构造器私有化，这样其他类就不能通过new来创建该类的实例了</p></li><li class="lvl-3"><p>写静态常量，并直接给予一个实例</p></li><li class="lvl-3"><p>在写一个静态方法，获取上面的静态常量实例</p></li></ol><p>这种方法，是利用了类的加载机制，在Java启动，类装载的时候，进行的实例化，从而达到单例的效果。</p><p>在程序中，这个实例会一直伴随着我们，不会被回收，直到服务死亡。如果我们一直没有去使用它，这个实例也一直会存在，从而会造成一定资源的浪费。</p><h4 id="1-2）饿汉式（静态代码块）">1.2）饿汉式（静态代码块）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.singleton;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 饿汉式（静态代码块）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton02</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton02</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton02 instance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        instance = <span class="keyword">new</span> <span class="title class_">Singleton02</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton02 <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对比第一种饿汉式，没有直接指定实例，而是在静态代码块中进行赋值。</p><h4 id="1-3）懒汉式（线程不安全）">1.3）懒汉式（线程不安全）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.singleton;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 懒汉式（线程不安全）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton03</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton03</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton03 instance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton03 <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance==<span class="literal">null</span>)</span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title class_">Singleton03</span>();</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对比前面的饿汉式，这种方法避免了资源的浪费。用的时候才会判断，没有则会创建。</p><p>如此一来，便达到了懒加载的效果。但同时也会带来新的问题，那就是线程不安全。试想一下，如果同时有很多线程获取实例，还没有来得及创建实例，别的线程就又通过了判断，需要创建实例了。</p><p>所以在使用这种方式前，只能提前确定当前使用的是否为多线程。</p><h4 id="1-4）懒汉式（线程安全，同步方法）">1.4）懒汉式（线程安全，同步方法）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.singleton;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 懒汉式（线程安全，同步方法）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton04</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton04</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton04 instance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton04 <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance==<span class="literal">null</span>)</span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title class_">Singleton04</span>();</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>和上面的懒汉式的区别主要是添加了<code>synchronized</code>，以此来保证线程的安全。</p><h4 id="1-5）懒汉式（线程安全，同步代码块）">1.5）懒汉式（线程安全，同步代码块）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.singleton;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 懒汉式（线程安全，同步代码块）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton05</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton05</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton05 instance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton05 <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span>(Singleton05.class)&#123;</span><br><span class="line">            <span class="keyword">if</span>(instance==<span class="literal">null</span>)</span><br><span class="line">                instance = <span class="keyword">new</span> <span class="title class_">Singleton05</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>和上面的懒汉式对比，仅仅只是将<code>synchronized</code>修饰位置变化一下，对性能的提升不大。</p><p>大家都知道，线程安全问题解决，就是需要建立在效率的牺牲上。但无论怎么说，都要比单线程的效率来得高。</p><h4 id="1-6）双重检查">1.6）双重检查</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.singleton;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 双重检查</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton06</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton06</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton06 instance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton06 <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span>(Singleton06.class)&#123;</span><br><span class="line">                <span class="keyword">if</span>(instance==<span class="literal">null</span>)</span><br><span class="line">                    instance = <span class="keyword">new</span> <span class="title class_">Singleton06</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>双重检查，就是对实例判断了两次，并有<code>volatile</code>关键字保证了实例的可见性。相当于对饿汉式（同步代码块）的再度升级版。</p><p>这种方式推荐在项目中使用，既有懒加载，线程安全，同时它的效率也相对较高。</p><h4 id="1-7）静态内部类">1.7）静态内部类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.singleton;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 静态内部类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton07</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton07</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span>  <span class="title class_">SingletonInstance</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Singleton07</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton07</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton07 <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonInstance.instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方式使用了静态内部类的方法，从而达到懒加载的效果。</p><p>怎么会懒加载呢，这里利用了静态内部类的加载特性，当JVM装载<code>Singleton07</code>类时，其内部类并不会进行装载，也就是静态内部类的静态变量还没有初始化。直到<code>getInstance</code>被调用去获取内部类的静态变量时，内部类才进行初始化。</p><p>同时，这个静态内部类的装载过程是线程安全的。</p><p>这种方式的单例一定得要记住，面试官问你的时候，就可以把面试官往JVM的知识上面引。</p><h4 id="1-8）枚举">1.8）枚举</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.singleton;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 枚举</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Singleton08</span> &#123;</span><br><span class="line"></span><br><span class="line">    INSTANCE();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>借助了jdk1.5添加的枚举来实现单例模式，这里只进行编写一个实例，在使用的时候直接取这个实例。这种方式，可以避免线程安全的问题，而且还能防止反序列化时重新创建新对象的问题。</p><h3 id="2）工厂模式">2）工厂模式</h3><p>当我们想创建一个对象的实例时，我们通常会使用new进行创建，这没什么问题，大多数情况下当然可以这样干。</p><p>但如果这个对象的创建比较复杂，需要进行一系列的判断后才知道需要创建哪个对象。一次两次还好，多次创建肯定很烦人，干脆我们把进行创建的那段逻辑代码进行封装，需要获取新的对象时，只需要调用那段封装的代码就可以获取到对象。</p><p>所以，工厂模式就来了。它里面封装了一些创建对象的具体细节，外部程序不需要知道，只要自己使用这个工厂类可以获取到自己需要的对象就可以了。</p><h4 id="2-1）简单工厂模式">2.1）简单工厂模式</h4><p>简单工厂模式，又称为静态工厂模式。其原因是内部的创建是固定的，外部需要什么对象，我生产什么对象。</p><p>现有一家面馆，里面售卖牛肉面，鸡蛋面，杂酱面等，那我们将如何使用简单工厂模式获取这些实例呢。</p><p>首先我们先写出这三个类，我们用一个抽象类来表示面食，让这三个类去继承它。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.factory.noodle;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 面食抽象类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Noodle</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String area;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Noodle</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.area = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setArea</span><span class="params">(String area)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.area = area;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> area+name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.factory.noodle;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 牛肉面</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BeefNoodle</span> <span class="keyword">extends</span> <span class="title class_">Noodle</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BeefNoodle</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(<span class="string">&quot;牛肉面&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.factory.noodle;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 鸡蛋面</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EggNoodle</span> <span class="keyword">extends</span> <span class="title class_">Noodle</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">EggNoodle</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(<span class="string">&quot;鸡蛋面&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.factory.noodle;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 杂酱面</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MeatSauceNoodle</span> <span class="keyword">extends</span> <span class="title class_">Noodle</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MeatSauceNoodle</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(<span class="string">&quot;杂酱面&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>面食的类已经写完，我们接下来编写工厂方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.factory.simple;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 面食工厂</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NoodleFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Noodle <span class="title function_">getNoodle</span><span class="params">(<span class="type">int</span> type)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(type==<span class="number">1001</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BeefNoodle</span>();</span><br><span class="line">        <span class="keyword">if</span>(type==<span class="number">1002</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">EggNoodle</span>();</span><br><span class="line">        <span class="keyword">if</span>(type==<span class="number">1003</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MeatSauceNoodle</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;未知的面食&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就这就这？对的没错，这段代码就是我们封装进工厂中的繁琐的判断逻辑，通过判断传入的编号，获取面食。</p><p>简单写个main方法，进行使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.factory.noodle.Noodle;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.factory.simple.NoodleFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Noodle</span> <span class="variable">noodle1</span> <span class="operator">=</span> NoodleFactory.getNoodle(<span class="number">1001</span>);</span><br><span class="line">        <span class="type">Noodle</span> <span class="variable">noodle2</span> <span class="operator">=</span> NoodleFactory.getNoodle(<span class="number">1002</span>);</span><br><span class="line">        <span class="type">Noodle</span> <span class="variable">noodle3</span> <span class="operator">=</span> NoodleFactory.getNoodle(<span class="number">1003</span>);</span><br><span class="line">        System.out.println(noodle1.getName());</span><br><span class="line">        System.out.println(noodle2.getName());</span><br><span class="line">        System.out.println(noodle3.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看执行结果，这里小偷一个懒，获取到的实例需要做判空处理。工厂不可能什么面食都有的，你输入的编号很可能会返回一个<code>null</code>。</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220111235735.png" alt="image-20220111235725912" /></p><blockquote><p>为什么如此简单的判断逻辑，需要进行封装？</p><p>因为我这里仅仅只是为了方便举例，在实际的项目中，一个对象的创建远比这要来的复杂。当你只创建一次，那当然按照怎么舒服怎么来。但一旦同样的判断逻辑出现，我建议你封装成工厂进行创建对象。</p></blockquote><h4 id="2-2）工厂方法模式">2.2）工厂方法模式</h4><p>上面介绍了简单工厂模式，这里介绍一下工厂方法模式。</p><p>面食的几个类就沿用之前的就好，这里只需要示范下工厂方法模式的写法就好，我们需要一个工厂接口或者工厂抽象类，让其它的子类工厂来实现继承它。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.factory.method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.factory.noodle.Noodle;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 抽象工厂类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractNoodleFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">abstract</span> Noodle <span class="title function_">getNoodle</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.factory.method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.factory.noodle.BeefNoodle;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.factory.noodle.Noodle;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 牛肉面工厂类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BeefNoodleFactory</span> <span class="keyword">extends</span> <span class="title class_">AbstractNoodleFactory</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    Noodle <span class="title function_">getNoodle</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BeefNoodle</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.factory.method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.factory.noodle.EggNoodle;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.factory.noodle.Noodle;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 鸡蛋面工厂类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EggNoodleFactory</span> <span class="keyword">extends</span> <span class="title class_">AbstractNoodleFactory</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    Noodle <span class="title function_">getNoodle</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">EggNoodle</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.factory.method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.factory.noodle.MeatSauceNoodle;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.factory.noodle.Noodle;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 杂酱面工厂类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MeatSauceNoodleFactory</span> <span class="keyword">extends</span> <span class="title class_">AbstractNoodleFactory</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    Noodle <span class="title function_">getNoodle</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MeatSauceNoodle</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到一个子类工厂只对应生产一种面，在获取面食的时候得到对应的工厂能可以获取到对应的实例了。</p><p>好处在于，我们不用去修改原有的代码了。如果又有一种新的炒面，泡面等，只需要再进行添加类即可，对原本的程序代码侵入性几乎为零。</p><p>缺点也有，这种方法造成了类爆炸的问题，这也是Java语言被人诟病的原因之一。</p><h3 id="3）抽象工厂模式">3）抽象工厂模式</h3><p>抽象工厂模式，是上面工厂模式的组合，就是将简单工厂和工厂方法组合弄出了一个更高级的工厂。</p><p>这个更高级的工厂就是抽象工厂，它下面有不同的实现工厂，每一个实现工厂都负责生产自己的实例对象。</p><p>在这里我们添加一种汤抽象类，并且有两个子类继承于它。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.factory.soup;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 汤抽象类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Soup</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String area;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Soup</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.area = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setArea</span><span class="params">(String area)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.area = area;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> area+name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.factory.soup;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 蛋花汤</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EggDropSoup</span> <span class="keyword">extends</span> <span class="title class_">Soup</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">EggDropSoup</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(<span class="string">&quot;蛋花汤&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.factory.soup;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 鲜鱼汤</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FishSoup</span> <span class="keyword">extends</span> <span class="title class_">Soup</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">FishSoup</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(<span class="string">&quot;鲜鱼汤&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于汤的类创建完毕，接下来还要创建抽象工厂，这次我们使用接口定义抽象工厂</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.factory.abs;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.factory.noodle.Noodle;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.factory.soup.Soup;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AbstractFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    Noodle <span class="title function_">createNoodle</span><span class="params">(<span class="type">int</span> type)</span>;</span><br><span class="line"></span><br><span class="line">    Soup <span class="title function_">createSoup</span><span class="params">(<span class="type">int</span> type)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以及它的两个子类，具体的工厂</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.factory.abs;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.factory.noodle.BeefNoodle;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.factory.noodle.EggNoodle;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.factory.noodle.MeatSauceNoodle;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.factory.noodle.Noodle;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.factory.soup.EggDropSoup;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.factory.soup.FishSoup;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.factory.soup.Soup;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BJShopFactory</span> <span class="keyword">implements</span> <span class="title class_">AbstractFactory</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Noodle <span class="title function_">createNoodle</span><span class="params">(<span class="type">int</span> type)</span> &#123;</span><br><span class="line">        <span class="type">Noodle</span> <span class="variable">noodle</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(type==<span class="number">1001</span>)</span><br><span class="line">            noodle = <span class="keyword">new</span> <span class="title class_">BeefNoodle</span>();</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(type==<span class="number">1002</span>)</span><br><span class="line">            noodle = <span class="keyword">new</span> <span class="title class_">EggNoodle</span>();</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(type==<span class="number">1003</span>)</span><br><span class="line">            noodle = <span class="keyword">new</span> <span class="title class_">MeatSauceNoodle</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(noodle==<span class="literal">null</span>)</span><br><span class="line">            System.out.println(<span class="string">&quot;未知的面食&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            noodle.setArea(<span class="string">&quot;北京&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> noodle;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Soup <span class="title function_">createSoup</span><span class="params">(<span class="type">int</span> type)</span> &#123;</span><br><span class="line">        <span class="type">Soup</span> <span class="variable">soup</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(type==<span class="number">2001</span>)</span><br><span class="line">            soup = <span class="keyword">new</span> <span class="title class_">EggDropSoup</span>();</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(type==<span class="number">2002</span>)</span><br><span class="line">            soup = <span class="keyword">new</span> <span class="title class_">FishSoup</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(soup==<span class="literal">null</span>)</span><br><span class="line">            System.out.println(<span class="string">&quot;未知的汤&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            soup.setArea(<span class="string">&quot;北京&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> soup;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.factory.abs;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.factory.noodle.BeefNoodle;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.factory.noodle.EggNoodle;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.factory.noodle.MeatSauceNoodle;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.factory.noodle.Noodle;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.factory.soup.EggDropSoup;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.factory.soup.FishSoup;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.factory.soup.Soup;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GZShopFactory</span> <span class="keyword">implements</span> <span class="title class_">AbstractFactory</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Noodle <span class="title function_">createNoodle</span><span class="params">(<span class="type">int</span> type)</span> &#123;</span><br><span class="line">        <span class="type">Noodle</span> <span class="variable">noodle</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(type==<span class="number">1001</span>)</span><br><span class="line">            noodle = <span class="keyword">new</span> <span class="title class_">BeefNoodle</span>();</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(type==<span class="number">1002</span>)</span><br><span class="line">            noodle = <span class="keyword">new</span> <span class="title class_">EggNoodle</span>();</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(type==<span class="number">1003</span>)</span><br><span class="line">            noodle = <span class="keyword">new</span> <span class="title class_">MeatSauceNoodle</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(noodle==<span class="literal">null</span>)</span><br><span class="line">            System.out.println(<span class="string">&quot;未知的面食&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            noodle.setArea(<span class="string">&quot;广州&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> noodle;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Soup <span class="title function_">createSoup</span><span class="params">(<span class="type">int</span> type)</span> &#123;</span><br><span class="line">        <span class="type">Soup</span> <span class="variable">soup</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(type==<span class="number">2001</span>)</span><br><span class="line">            soup = <span class="keyword">new</span> <span class="title class_">EggDropSoup</span>();</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(type==<span class="number">2002</span>)</span><br><span class="line">            soup = <span class="keyword">new</span> <span class="title class_">FishSoup</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(soup==<span class="literal">null</span>)</span><br><span class="line">            System.out.println(<span class="string">&quot;未知的汤&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            soup.setArea(<span class="string">&quot;广州&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> soup;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单获取一种工厂，并得到它生产的实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.factory.abs.AbstractFactory;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.factory.abs.GZShopFactory;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.factory.noodle.Noodle;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.factory.soup.Soup;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">AbstractFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GZShopFactory</span>();</span><br><span class="line">        <span class="type">Noodle</span> <span class="variable">noodle</span> <span class="operator">=</span> factory.createNoodle(<span class="number">1001</span>);</span><br><span class="line">        <span class="type">Soup</span> <span class="variable">soup</span> <span class="operator">=</span> factory.createSoup(<span class="number">2001</span>);</span><br><span class="line">        System.out.println(noodle.getName());</span><br><span class="line">        System.out.println(soup.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220113223126.png" alt="image-20220113223051902" /></p><blockquote><p>工厂模式并不算复杂，难的是如何结合业务，造出一个高度复用的轮子。</p><p>大家都可以去看看优秀的工厂案例，分析一下他们使用的是哪种工厂模式。</p><p><code>LoggerFactory</code>，<code>BeanFactory</code>，<code>java.util.Calendar#createCalendar</code></p></blockquote><h3 id="4）原型模式">4）原型模式</h3><p>知道克隆羊多莉吗，这是从两只羊的细胞克隆出来的羊，通过现代工程创造出来的绵羊，也是世界之初第一个成功克隆的哺乳动物。</p><p>那么在程序的世界里，对象的克隆就显得十分重要了。简单看下面这个类，目前我有一个实例，如何快速的克隆这个对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.prototype;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Sheep</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String color;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.prototype.Sheep;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Sheep</span> <span class="variable">sheep</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Sheep</span>(<span class="string">&quot;多莉&quot;</span>, <span class="number">6</span>, <span class="string">&quot;白色&quot;</span>);</span><br><span class="line">        System.out.println(sheep);</span><br><span class="line">        System.out.println(<span class="string">&quot;=========== 分割线 ===========&quot;</span>);</span><br><span class="line">        <span class="comment">// 克隆</span></span><br><span class="line">        <span class="type">Sheep</span> <span class="variable">sheep1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Sheep</span>(sheep.getName(), sheep.getAge(), sheep.getColor());</span><br><span class="line">        <span class="type">Sheep</span> <span class="variable">sheep2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Sheep</span>(sheep.getName(), sheep.getAge(), sheep.getColor());</span><br><span class="line">        <span class="type">Sheep</span> <span class="variable">sheep3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Sheep</span>(sheep.getName(), sheep.getAge(), sheep.getColor());</span><br><span class="line">        <span class="type">Sheep</span> <span class="variable">sheep4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Sheep</span>(sheep.getName(), sheep.getAge(), sheep.getColor());</span><br><span class="line">        System.out.println(sheep1);</span><br><span class="line">        System.out.println(sheep2);</span><br><span class="line">        System.out.println(sheep3);</span><br><span class="line">        System.out.println(sheep4);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看结果，属性完全一致，克隆成功<br /><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220114213841.png" alt="image-20220114213840052" /></p><p>但这样是有问题的，万一这羊突然增加了一个属性，我们每一个克隆的代码就都要进行修改，这明显违背的开闭原则。</p><h4 id="4-1）浅拷贝">4.1）浅拷贝</h4><p>我们可以这样改进，修改羊实现<code>Cloneable</code>，调用<code>clone</code>方法即可，这是java为我们准备好的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.prototype;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Sheep</span> <span class="keyword">implements</span> <span class="title class_">Cloneable</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String color;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Object <span class="title function_">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.prototype;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Sheep</span> <span class="keyword">implements</span> <span class="title class_">Cloneable</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String color;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Object <span class="title function_">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果，这样就可以达到克隆的效果了</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220114215102.png" alt="image-20220114215100480" /></p><p>那么，我们在添加一个新的类，对这个农场主进行克隆会怎么样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.prototype;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Estanciero</span> <span class="keyword">implements</span> <span class="title class_">Cloneable</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Sheep&gt; sheepList;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Object <span class="title function_">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.prototype;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.collection.CollUtil;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.StrUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PrototypeMain</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException &#123;</span><br><span class="line">        <span class="type">Sheep</span> <span class="variable">sheep</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Sheep</span>(<span class="string">&quot;多莉&quot;</span>, <span class="number">6</span>, <span class="string">&quot;白色&quot;</span>);</span><br><span class="line">        <span class="type">Estanciero</span> <span class="variable">estanciero</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Estanciero</span>(<span class="string">&quot;农场主A&quot;</span>, CollUtil.newArrayList(sheep));</span><br><span class="line">        System.out.println(estanciero);</span><br><span class="line">        System.out.println(<span class="string">&quot;=========== 分割线 ===========&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Estanciero</span> <span class="variable">estanciero1</span> <span class="operator">=</span> (Estanciero) estanciero.clone();</span><br><span class="line">        System.out.println(estanciero1);</span><br><span class="line">        System.out.println(StrUtil.format(<span class="string">&quot;农场主是否一致：&#123;&#125;，羊是否一致：&#123;&#125;&quot;</span>,</span><br><span class="line">                estanciero==estanciero1, estanciero.getSheepList()==estanciero1.getSheepList()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果，发现了克隆出来的农场主是新的实例，但它的引用对象还是指向了原来的空间，这就是浅拷贝。</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220114223201.png" alt="image-20220114223159562" /></p><h4 id="4-2）套娃型深拷贝">4.2）套娃型深拷贝</h4><p>套娃型深拷贝？为什么这么叫呢，这种方法就是将重写clone方法，自己加上引用对象的克隆。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.prototype;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Estanciero</span> <span class="keyword">implements</span> <span class="title class_">Cloneable</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Sheep&gt; sheepList;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Object <span class="title function_">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException &#123;</span><br><span class="line">        <span class="type">Estanciero</span> <span class="variable">estanciero</span> <span class="operator">=</span> (Estanciero) <span class="built_in">super</span>.clone();</span><br><span class="line">        <span class="keyword">if</span>(estanciero.getSheepList()!=<span class="literal">null</span>)&#123;</span><br><span class="line">            ArrayList&lt;Sheep&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            estanciero.getSheepList().forEach(sheep -&gt; list.add(sheep));</span><br><span class="line">            estanciero.setSheepList(list);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> estanciero;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重新执行测试结果，你也可以将list里面的羊拿出来做对比，克隆出来的引用都是新的对象。</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220115181357.png" alt="image-20220115181356315" /></p><h4 id="4-3）序列化深拷贝">4.3）序列化深拷贝</h4><p>上面套娃型深拷贝有个弊端，即类中所有引用的对象都要像浅拷贝那样，实现<code>Cloneable</code>接口。如果引用的对象还有引用，那么恭喜你，你要套娃去写<code>Cloneable</code> 了。</p><p>这上面的就是它的弊端，所以序列化深拷贝来了。</p><p>我们将<code>Estanciero</code>和<code>Sheep</code>类实现<code>Serializable</code>序列化接口，再写一个序列化反序列化克隆的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.prototype;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.io.IoUtil;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Estanciero</span> <span class="keyword">implements</span> <span class="title class_">Cloneable</span>, Serializable &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Sheep&gt; sheepList;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Object <span class="title function_">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException &#123;</span><br><span class="line">        <span class="type">Estanciero</span> <span class="variable">estanciero</span> <span class="operator">=</span> (Estanciero) <span class="built_in">super</span>.clone();</span><br><span class="line">        <span class="keyword">if</span>(estanciero.getSheepList()!=<span class="literal">null</span>)&#123;</span><br><span class="line">            ArrayList&lt;Sheep&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            estanciero.getSheepList().forEach(sheep -&gt; list.add(sheep));</span><br><span class="line">            estanciero.setSheepList(list);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> estanciero;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Estanciero <span class="title function_">cloneBySerializable</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 创建输出流</span></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// 创建输入流</span></span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 序列化当前对象</span></span><br><span class="line">            bos = <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            oos = <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(bos);</span><br><span class="line">            oos.writeObject(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 反序列化</span></span><br><span class="line">            bis = <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bos.toByteArray());</span><br><span class="line">            ois = <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(bis);</span><br><span class="line">            <span class="type">Estanciero</span> <span class="variable">copyEstanciero</span> <span class="operator">=</span> (Estanciero) ois.readObject();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> copyEstanciero;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 关闭流</span></span><br><span class="line">            IoUtil.close(bos);</span><br><span class="line">            IoUtil.close(oos);</span><br><span class="line">            IoUtil.close(bis);</span><br><span class="line">            IoUtil.close(ois);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.prototype;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.collection.CollUtil;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.StrUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PrototypeMain</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException &#123;</span><br><span class="line">        <span class="type">Sheep</span> <span class="variable">sheep</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Sheep</span>(<span class="string">&quot;多莉&quot;</span>, <span class="number">6</span>, <span class="string">&quot;白色&quot;</span>);</span><br><span class="line">        <span class="type">Estanciero</span> <span class="variable">estanciero</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Estanciero</span>(<span class="string">&quot;农场主A&quot;</span>, CollUtil.newArrayList(sheep));</span><br><span class="line">        System.out.println(estanciero);</span><br><span class="line">        System.out.println(<span class="string">&quot;=========== 分割线 ===========&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        Estanciero estanciero1 = (Estanciero) estanciero.clone();</span></span><br><span class="line">        <span class="type">Estanciero</span> <span class="variable">estanciero1</span> <span class="operator">=</span> estanciero.cloneBySerializable();</span><br><span class="line">        System.out.println(estanciero1);</span><br><span class="line">        System.out.println(StrUtil.format(<span class="string">&quot;农场主是否一致：&#123;&#125;，羊是否一致：&#123;&#125;&quot;</span>,</span><br><span class="line">                estanciero==estanciero1, estanciero.getSheepList()==estanciero1.getSheepList()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果，这种方法也可以实现深拷贝，也是比较推荐的方法</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220115191956.png" alt="image-20220115191954678" /></p><h4 id="4-4）使用第三方工具包">4.4）使用第三方工具包</h4><p>上面的原型只做了解，讲真我不喜欢用，不是因为有工具类，单纯觉得上面的方法难用（不难用的话，对应的工具包都出不来）。</p><p>使用apache的BeanUtils，实现克隆</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.prototype;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.collection.CollUtil;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.StrUtil;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.BeanUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CopyUtilMain</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InvocationTargetException, IllegalAccessException, InstantiationException, NoSuchMethodException &#123;</span><br><span class="line">        <span class="type">Sheep</span> <span class="variable">sheep</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Sheep</span>(<span class="string">&quot;多莉&quot;</span>, <span class="number">6</span>, <span class="string">&quot;白色&quot;</span>);</span><br><span class="line">        <span class="type">Estanciero</span> <span class="variable">estanciero</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Estanciero</span>(<span class="string">&quot;农场主A&quot;</span>, CollUtil.newArrayList(sheep));</span><br><span class="line">        System.out.println(estanciero);</span><br><span class="line"></span><br><span class="line">        System.out.println(System.lineSeparator() + <span class="string">&quot;=========== 分割线 Apache ===========&quot;</span>);</span><br><span class="line">        <span class="type">Estanciero</span> <span class="variable">estanciero1</span> <span class="operator">=</span> (Estanciero) BeanUtils.cloneBean(estanciero);</span><br><span class="line">        System.out.println(estanciero1);</span><br><span class="line">        System.out.println(StrUtil.format(<span class="string">&quot;农场主是否一致：&#123;&#125;，羊是否一致：&#123;&#125;&quot;</span>,</span><br><span class="line">                estanciero==estanciero1, estanciero.getSheepList()==estanciero1.getSheepList()));</span><br><span class="line"></span><br><span class="line">        System.out.println(System.lineSeparator() + <span class="string">&quot;=========== 分割线 Spring ===========&quot;</span>);</span><br><span class="line">        <span class="type">Estanciero</span> <span class="variable">estanciero2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Estanciero</span>();</span><br><span class="line">        org.springframework.beans.BeanUtils.copyProperties(estanciero, estanciero2);</span><br><span class="line">        System.out.println(estanciero2);</span><br><span class="line">        System.out.println(StrUtil.format(<span class="string">&quot;农场主是否一致：&#123;&#125;，羊是否一致：&#123;&#125;&quot;</span>,</span><br><span class="line">                estanciero==estanciero2, estanciero.getSheepList()==estanciero2.getSheepList()));</span><br><span class="line"></span><br><span class="line">        System.out.println(System.lineSeparator() + <span class="string">&quot;=========== 分割线 fastjson序列化 ===========&quot;</span>);</span><br><span class="line">        <span class="type">Estanciero</span> <span class="variable">estanciero3</span> <span class="operator">=</span> JSON.parseObject(JSON.toJSONString(estanciero), Estanciero.class);</span><br><span class="line">        System.out.println(estanciero3);</span><br><span class="line">        System.out.println(StrUtil.format(<span class="string">&quot;农场主是否一致：&#123;&#125;，羊是否一致：&#123;&#125;&quot;</span>,</span><br><span class="line">                estanciero==estanciero3, estanciero.getSheepList()==estanciero3.getSheepList()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果，注意看它们的克隆是浅拷贝还是深拷贝</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220115201511.png" alt="image-20220115201510378" /></p><h3 id="5）建造者模式">5）建造者模式</h3><p>建造者模式，就是将一个对象组装出来，通过这个对象内的成员属性，一步一步的将这个类实例化。还有不一样的构建顺序，可能导致最终构造出来的实例也是不同的</p><h4 id="5-1）示例">5.1）示例</h4><p>比如说，房子的创建步骤可以简单分为打地基、砌墙、封顶。但不同的房子，他们每一个步骤都不是一样的。想想看，普通房子和高楼大厦使用的是一样吗。</p><p>所以我们就先创建一个抽象类，将打地基、砌墙、封顶作为抽象方法，让具体的类去实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.builder.house;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.StrUtil;</span><br><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"><span class="keyword">import</span> lombok.Setter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">House</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String subgrade;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String wall;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String roof;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> StrUtil.format(<span class="string">&quot;地基：&#123;&#125;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;砌墙：&#123;&#125;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;封顶：&#123;&#125;&quot;</span>, subgrade, wall, roof);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两个具体的实现类，高楼房类和公共平房类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.builder.house;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HighHouse</span> <span class="keyword">extends</span> <span class="title class_">House</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.builder.house;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonHouse</span> <span class="keyword">extends</span> <span class="title class_">House</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两个房子弄好了后，我们需要建造者。同样对应上面的房子，一个抽象，两个实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.builder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.builder.house.House;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">HouseBuilder</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> House house;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HouseBuilder</span><span class="params">(House house)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.house = house;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> HouseBuilder <span class="title function_">buildSubgrade</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> HouseBuilder <span class="title function_">buildWall</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> HouseBuilder <span class="title function_">buildRoof</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> House <span class="title function_">build</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> house;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.builder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.builder.house.HighHouse;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.builder.house.House;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HighHouseBuilder</span> <span class="keyword">extends</span> <span class="title class_">HouseBuilder</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HighHouseBuilder</span><span class="params">(House house)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(<span class="keyword">new</span> <span class="title class_">HighHouse</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> HouseBuilder <span class="title function_">buildSubgrade</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.house.setSubgrade(<span class="string">&quot;打10米深的地基&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> HouseBuilder <span class="title function_">buildWall</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.house.setWall(<span class="string">&quot;打20厘米宽的墙&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> HouseBuilder <span class="title function_">buildRoof</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.house.setRoof(<span class="string">&quot;盖钢化玻璃封顶&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.builder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.builder.house.CommonHouse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonHouseBuilder</span> <span class="keyword">extends</span> <span class="title class_">HouseBuilder</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CommonHouseBuilder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(<span class="keyword">new</span> <span class="title class_">CommonHouse</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> HouseBuilder <span class="title function_">buildSubgrade</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.house.setSubgrade(<span class="string">&quot;打2米深的地基&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> HouseBuilder <span class="title function_">buildWall</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.house.setWall(<span class="string">&quot;打10厘米宽的墙&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> HouseBuilder <span class="title function_">buildRoof</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.house.setRoof(<span class="string">&quot;盖瓦片封顶&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时，还需要一个指挥者，与建造者进行组合。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.builder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.builder.house.House;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Director</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> HouseBuilder builder;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Director</span><span class="params">(HouseBuilder builder)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.builder = builder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> House <span class="title function_">construct</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> builder.buildSubgrade()</span><br><span class="line">                .buildWall()</span><br><span class="line">                .buildRoof()</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，就准备完了，如何使用呢</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.builder.CommonHouseBuilder;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.builder.Director;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.builder.house.House;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">House</span> <span class="variable">house</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Director</span>(<span class="keyword">new</span> <span class="title class_">CommonHouseBuilder</span>()).construct();</span><br><span class="line">        System.out.println(house.toString());</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;=========== 分割线 ===========&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="type">House</span> <span class="variable">house1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Director</span>(<span class="keyword">new</span> <span class="title class_">CommonHouseBuilder</span>()).construct();</span><br><span class="line">        System.out.println(house1.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看结果</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220117223904.png" alt="image-20220117223903059" /></p><p>由于它们之间的关系比较复杂，所以画了一个UML类图加深理解</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220117231034.png" alt="image-20220117231031962" /></p><h4 id="5-2）简化与问题">5.2）简化与问题</h4><p>在上述的示例中，我们能感觉到十分的繁琐。在实际开发中，我们可以进行一些简化</p><ul class="lvl-0"><li class="lvl-2"><p>如果只有一个具体对象，那么我们也就不需要抽象建造者了，只需要一个具体建造者</p></li><li class="lvl-2"><p>如果创建的对象对建造顺序不重要，那么我们可以取消掉指挥者</p></li></ul><p>由于建造者的书写十分繁琐，所以Lombok推出了简化，使用注解<code>@Builder</code>，示例如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.builder.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Builder;</span><br><span class="line"><span class="keyword">import</span> lombok.ToString;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserInfo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String nickname;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.builder.demo.UserInfo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">UserInfo</span> <span class="variable">userInfo</span> <span class="operator">=</span> UserInfo.builder()</span><br><span class="line">                .username(<span class="string">&quot;banmoon&quot;</span>)</span><br><span class="line">                .password(<span class="string">&quot;2022&quot;</span>)</span><br><span class="line">                .nickname(<span class="string">&quot;半月无霜&quot;</span>)</span><br><span class="line">                .address(<span class="string">&quot;广州&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">        System.out.println(userInfo);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>建造模式与工厂模式的区别</p><p>我相信这是很多人比较困扰的，实际上这很好理解。</p><ul class="lvl-1"><li class="lvl-2"><p>工厂模式不关心内部的构造，只需要准备好参数，让工厂直接返回实例即可。</p></li><li class="lvl-2"><p>造者不同，它的每一步外部都是知道的，更关心创建内部的细节。</p></li><li class="lvl-2"><p>建造者模式更加注重方法的调用顺序，可以灵活调用，而工厂模式不关心内部参数的调用顺序</p></li></ul></blockquote><blockquote><p>在什么场景下使用建造模式</p><ul class="lvl-1"><li class="lvl-2">相同的方法，不同的执行顺序，产生不同的结果。</li><li class="lvl-2">多个部件或零件，都可以装配到一个对象中，但是产生的结果又不相同。</li><li class="lvl-2">产品类非常复杂，或者产品类中不同的调用顺序产生不同的作用。</li><li class="lvl-2">初始化一个对象特别复杂，参数多，而且很多参数都具有默认值。</li></ul></blockquote><h2 id="四、结构型设计模式">四、结构型设计模式</h2><h3 id="6）适配器模式">6）适配器模式</h3><p>在生活中，我们常常会遇到充电口不匹配的情况，出去旅游的小伙伴感触会深点，国外的插座和我们的不是一个型号，这样的话，我们只需要一个中间层充当适配器的角色，所以适配器模式它来了。</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220119203228.png" alt="image-20220119203226491" /></p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220119203344.png" alt="image-20220119203343191" /></p><p>简单了解以前这三点命名概念</p><ul class="lvl-0"><li class="lvl-2"><p>source：源，被适配的对象，对应的就是上图描述的插座</p></li><li class="lvl-2"><p>adapter：适配器，对应的就是充电转接器</p></li><li class="lvl-2"><p>target：目标，对应的就是充电器</p></li></ul><p>适配器模式可以分为<b>类适配器模式</b>、<b>对象适配器模式</b>、<b>接口适配器模式</b>。</p><h4 id="6-1）类适配器模式">6.1）类适配器模式</h4><p>我们来对电压进行讲解，平常的家庭用电都是220V，经过充电头的转换，将220V的电压转为5V，这样的低电压手机才能使用。</p><p>先写一个输出220V电压的类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.adapter.classmode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.StrUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Electricity220V</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">voltage</span> <span class="operator">=</span> <span class="number">220</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">output</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(StrUtil.format(<span class="string">&quot;输出电压：&#123;&#125;V&quot;</span>, voltage));</span><br><span class="line">        <span class="keyword">return</span> voltage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时我们需要一个充电器，这个充电器就是一个适配器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.adapter.classmode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ElectricityAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">transform</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.adapter.classmode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.StrUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Electricity220VTo5VAdapter</span> <span class="keyword">extends</span> <span class="title class_">Electricity220V</span> <span class="keyword">implements</span> <span class="title class_">ElectricityAdapter</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">transform</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">voltage</span> <span class="operator">=</span> <span class="built_in">super</span>.output();</span><br><span class="line">        <span class="type">int</span> <span class="variable">newVoltage</span> <span class="operator">=</span> voltage - <span class="number">215</span>;</span><br><span class="line">        System.out.println(StrUtil.format(<span class="string">&quot;成功：已将&#123;&#125;V转化为&#123;&#125;V&quot;</span>, voltage, newVoltage));</span><br><span class="line">        System.out.println(StrUtil.format(<span class="string">&quot;输出电压：&#123;&#125;V&quot;</span>, newVoltage));</span><br><span class="line">        <span class="keyword">return</span> newVoltage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再来一个手机，里面给一个充电的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.adapter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Phone</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">recharge</span><span class="params">(<span class="type">int</span> voltage)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(voltage==<span class="number">5</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;手机正在充电中&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;电压不匹配，手机要爆了&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们进行测试，在使用适配器后，电压会降低为5V给手机供电</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.adapter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.adapter.classmode.Electricity220VTo5VAdapter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Phone</span> <span class="variable">phone</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Phone</span>();</span><br><span class="line">        phone.recharge(<span class="keyword">new</span> <span class="title class_">Electricity220VTo5VAdapter</span>().transform());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220119211143.png" alt="image-20220119211141703" /></p><p>类适配器的特点，由于是继承源对象，所以造成了一定的耦合。</p><p>而且，如果适配器没有重写源对象的方法，那就意味着适配器上就可以获得源对象的方法和属性。</p><p>所以这点原因，此适配器不推荐使用</p><h4 id="6-2）对象适配器模式">6.2）对象适配器模式</h4><p>在里氏替换原则中，能不用继承就不用继承，改用组合，聚合的方法来代替继承。</p><p>这点很好理解，在外部将返回的电压转换就可以了。</p><p>220V电压，没什么问题，也不做改动</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.adapter.objmode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.StrUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Electricity220V</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">voltage</span> <span class="operator">=</span> <span class="number">220</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">output</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(StrUtil.format(<span class="string">&quot;输出电压：&#123;&#125;V&quot;</span>, voltage));</span><br><span class="line">        <span class="keyword">return</span> voltage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>适配器接口，不做改变</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.adapter.objmode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ElectricityAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">transform</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>适配器类将不再继承220V电压，改用组合的形式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.adapter.objmode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.StrUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Electricity220VTo5VAdapter</span> <span class="keyword">implements</span> <span class="title class_">ElectricityAdapter</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Electricity220V electricity220V;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Electricity220VTo5VAdapter</span><span class="params">(Electricity220V electricity220V)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.electricity220V = electricity220V;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">transform</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">voltage</span> <span class="operator">=</span> electricity220V.output();</span><br><span class="line">        <span class="type">int</span> <span class="variable">newVoltage</span> <span class="operator">=</span> voltage - <span class="number">215</span>;</span><br><span class="line">        System.out.println(StrUtil.format(<span class="string">&quot;成功：已将&#123;&#125;V转化为&#123;&#125;V&quot;</span>, voltage, newVoltage));</span><br><span class="line">        System.out.println(StrUtil.format(<span class="string">&quot;输出电压：&#123;&#125;V&quot;</span>, newVoltage));</span><br><span class="line">        <span class="keyword">return</span> newVoltage;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们再进行一个测试使用，在使用适配器时，需要传入一个220V的实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.adapter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.adapter.objmode.Electricity220V;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.adapter.objmode.Electricity220VTo5VAdapter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Phone</span> <span class="variable">phone</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Phone</span>();</span><br><span class="line">        <span class="type">Electricity220VTo5VAdapter</span> <span class="variable">adapter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Electricity220VTo5VAdapter</span>(<span class="keyword">new</span> <span class="title class_">Electricity220V</span>());</span><br><span class="line">        phone.recharge(adapter.transform());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220119213223.png" alt="image-20220119213218720" /></p><h4 id="6-3）接口适配器模式">6.3）接口适配器模式</h4><p>当一个接口有四个方法，而这四个方法都需要实现，这是正常的实现类，没什么问题。</p><p>但问题是，如果一个类就不想实现其中的两个方法，只需要实现两个就够了，那该怎么办。</p><p>这时，我想到了偶像练习生。一般来说，他们都会唱、跳、Rap、篮球。但总有几个练习生拉跨怎么办。接口适配器可以解决这个问题。</p><p>接口适配器，又叫默认（缺省）适配器。先将使用一个抽象类来实现这个接口，里面写上默认的方法。由于是抽象类，它又不能直接实例化，抽象类也需要被继承才能实例化。而此时，就可以想实现哪个方法，就实现哪个方法了。</p><p>我们就举偶像练习生这个例子，我们先写一个接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.adapter.interfacemode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ITrainee</span> &#123;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">getName</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    String[] chang();</span><br><span class="line"></span><br><span class="line">    String[] tiao();</span><br><span class="line"></span><br><span class="line">    String[] rap();</span><br><span class="line"></span><br><span class="line">    String[] lanqiu();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着我们需要一个中间层的适配器，里面默认他什么都不会，但这只是一个抽象的练习生</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.adapter.interfacemode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbsTrainee</span> <span class="keyword">implements</span> <span class="title class_">ITrainee</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AbsTrainee</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String[] chang() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String[] tiao() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String[] rap() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String[] lanqiu() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们来一个真正的练习生类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.adapter.interfacemode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CXK</span> <span class="keyword">extends</span> <span class="title class_">AbsTrainee</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CXK</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String[] chang() &#123;</span><br><span class="line">        String[] chang = &#123;<span class="string">&quot;鸡你太美&quot;</span>, <span class="string">&quot;鸡你太美鬼畜版&quot;</span>&#125;;</span><br><span class="line">        <span class="keyword">return</span> chang;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String[] tiao() &#123;</span><br><span class="line">        String[] tiao = &#123;<span class="string">&quot;与篮球的独舞&quot;</span>&#125;;</span><br><span class="line">        <span class="keyword">return</span> tiao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String[] lanqiu() &#123;</span><br><span class="line">        String[] lanqiu = &#123;<span class="string">&quot;美国校队担当&quot;</span>&#125;;</span><br><span class="line">        <span class="keyword">return</span> lanqiu;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再来一个舞台吧，用来展示练习生的才艺的舞台</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.adapter.interfacemode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.ArrayUtil;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.StrUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Stage</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">(ITrainee iTrainee)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> iTrainee.getName();</span><br><span class="line">        String[] chang = iTrainee.chang();</span><br><span class="line">        System.out.println(StrUtil.format(<span class="string">&quot;&#123;&#125;开始唱歌：&#123;&#125;&quot;</span>, name,</span><br><span class="line">                ArrayUtil.isEmpty(chang)? <span class="string">&quot;他怎么什么都不会&quot;</span>: chang));</span><br><span class="line">        String[] tiao = iTrainee.tiao();</span><br><span class="line">        System.out.println(StrUtil.format(<span class="string">&quot;&#123;&#125;开始跳舞：&#123;&#125;&quot;</span>, name,</span><br><span class="line">                ArrayUtil.isEmpty(tiao)? <span class="string">&quot;他怎么什么都不会&quot;</span>: tiao));</span><br><span class="line">        String[] rap = iTrainee.rap();</span><br><span class="line">        System.out.println(StrUtil.format(<span class="string">&quot;&#123;&#125;开始rap：&#123;&#125;&quot;</span>, name,</span><br><span class="line">                ArrayUtil.isEmpty(rap)? <span class="string">&quot;他怎么什么都不会&quot;</span>: rap));</span><br><span class="line">        String[] lanqiu = iTrainee.lanqiu();</span><br><span class="line">        System.out.println(StrUtil.format(<span class="string">&quot;&#123;&#125;开始打篮球：&#123;&#125;&quot;</span>, name,</span><br><span class="line">                ArrayUtil.isEmpty(lanqiu)? <span class="string">&quot;他怎么什么都不会&quot;</span>: lanqiu));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>准备就绪，我们来进行测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.adapter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.adapter.interfacemode.AbsTrainee;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.adapter.interfacemode.CXK;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.adapter.interfacemode.Stage;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Stage</span> <span class="variable">stage</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Stage</span>();</span><br><span class="line">        stage.show(<span class="keyword">new</span> <span class="title class_">CXK</span>(<span class="string">&quot;KUN&quot;</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;================== 分隔符 ==================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        stage.show(<span class="keyword">new</span> <span class="title class_">AbsTrainee</span>(<span class="string">&quot;初音&quot;</span>) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> String[] chang() &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;甩葱歌&quot;</span>&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果，除了CXK这个类外，还有另外一个匿名内部类，她的甩葱歌是真的洗脑</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220119221754.png" alt="image-20220119221753343" /></p><h3 id="7）桥接模式">7）桥接模式</h3><p>在现实生活中，手机有着不同的品牌，型号。如果用Java来将他们作为类，你该怎么搞。</p><p>可以使用继承，顶上一个父类<code>Phone</code>，它的子类就会出现小米牌手机<code>MiPhone</code>、华为手机<code>HuaweiPhone</code>等等。乍一看没什么问题，也可以使，但是要是加上型号呢？那就会出现下图的结果</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220123115444.png" alt="image-20220123115442713" /></p><p>这种问题被称为类爆炸问题，当然你也可以将品牌和型号作为手机的一个属性，这样来区分他们的不同品牌型号的手机。然而桥接模式就是这样思考的。</p><p>桥接模式，将上述类型拆成两部分。比如说上面的手机，一部分为抽象类手机，另一部分则拆为品牌接口。抽象类手机则有这样的一个品牌属性，这样抽象类手机的子类就能明确知道是什么品牌型号的手机了。</p><p>这一层被称为实现层。先写出一个品牌接口，以及它的两个实现类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.birdge.brand;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 品牌接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Brand</span> &#123;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">getBrandName</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.birdge.brand;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Huawei</span> <span class="keyword">implements</span> <span class="title class_">Brand</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getBrandName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;华为&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.birdge.brand;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Mi</span> <span class="keyword">implements</span> <span class="title class_">Brand</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getBrandName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;小米&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这一层叫做抽象层，会将上面实现层的类作为属性使用。写一个抽象类，再写它的两个子类，分别为<mark>折叠屏手机</mark>和<mark>全面屏手机</mark>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.birdge.phone;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.birdge.brand.Brand;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Phone</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Brand brand;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Phone</span><span class="params">(Brand brand)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.brand = brand;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title function_">getPhoneName</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.birdge.phone;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.birdge.brand.Brand;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FullScreenPhone</span> <span class="keyword">extends</span> <span class="title class_">Phone</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">FullScreenPhone</span><span class="params">(Brand brand)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(brand);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPhoneName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;全面屏&quot;</span> + brand.getBrandName() + <span class="string">&quot;手机&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.birdge.phone;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.birdge.brand.Brand;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FoldablePhone</span> <span class="keyword">extends</span> <span class="title class_">Phone</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">FoldablePhone</span><span class="params">(Brand brand)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(brand);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPhoneName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;折叠屏&quot;</span> + brand.getBrandName() + <span class="string">&quot;手机&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面两层都已经写完，我们再来进行测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.birdge;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.birdge.brand.Huawei;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.birdge.brand.Mi;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.birdge.phone.FoldablePhone;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.birdge.phone.FullScreenPhone;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BirdgeMain</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">FullScreenPhone</span> <span class="variable">phone</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FullScreenPhone</span>(<span class="keyword">new</span> <span class="title class_">Mi</span>());</span><br><span class="line">        <span class="type">String</span> <span class="variable">phoneName</span> <span class="operator">=</span> phone.getPhoneName();</span><br><span class="line">        System.out.println(phoneName);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;============= 分割线 =============&quot;</span>);</span><br><span class="line">        <span class="type">FoldablePhone</span> <span class="variable">phone1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FoldablePhone</span>(<span class="keyword">new</span> <span class="title class_">Huawei</span>());</span><br><span class="line">        <span class="type">String</span> <span class="variable">phoneName1</span> <span class="operator">=</span> phone1.getPhoneName();</span><br><span class="line">        System.out.println(phoneName1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220123145015.png" alt="image-20220123145011769" /></p><blockquote><p>以上面手机举例，它有两层维度。一个是品牌，一个是型号。</p><p>桥接模式，只是将一个维度作为了抽象层，另一个维度作为实现层，通过组合的方式进行关联。上面举例将品牌作为了抽象层，将型号作为了实现层，这个我觉得反过来定义也没有什么问题。不过具体设计时，还是要根据实际业务出发，达到一个容易理解的设计。</p><p>若以后还有什么新的品牌，只需要再进行实现品牌接口即可，对原本的代码没有侵害。</p><p>如果需要新增维度，那么只需要将其再作为实现层，通过组合的方式进行关联即可。</p></blockquote><h3 id="8）装饰模式">8）装饰模式</h3><p>我们来简单实现下这个功能，点杯咖啡，咖啡种类挺多，有美式咖啡，有浓缩咖啡等。这还不够，额外还可以添加方糖，牛奶或者巧克力。</p><p>上述添加选择完后，就是我们想要的，问如何设计上述场景的结构。</p><h4 id="8-1）我的设计">8.1）我的设计</h4><p>额，在我没有学习装饰模式前，我会这样设计。</p><p>既然方糖，牛奶，巧克力都是添加至到咖啡内的，我就将咖啡弄成一个抽象类，抽象类中有三个属性，分别是方糖，牛奶和巧克力。不同的咖啡种类继承这个咖啡抽象类。在使用时，根据自己的情况先点咖啡，再选择自己的方糖等调料。</p><p>我用代码简单来演示一下，先写出方糖、牛奶、巧克力三个类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.decorator.myimpl.dosing;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Sugar</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Float</span> <span class="variable">price</span> <span class="operator">=</span> <span class="number">2F</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;方糖&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.decorator.myimpl.dosing;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Milk</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Float</span> <span class="variable">price</span> <span class="operator">=</span> <span class="number">3F</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;牛奶&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.decorator.myimpl.dosing;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Chocolate</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Float</span> <span class="variable">price</span> <span class="operator">=</span> <span class="number">4F</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;巧克力&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再来个咖啡的抽象类，里面定义上述几个类的属性，自身的价格，两个抽象的方法交由子类去重写。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.decorator.myimpl.coffee;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.decorator.myimpl.dosing.Chocolate;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.decorator.myimpl.dosing.Milk;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.decorator.myimpl.dosing.Sugar;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Coffee</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Float price;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Sugar sugar;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Milk milk;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Chocolate chocolate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> Float <span class="title function_">cost</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title function_">getDesc</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再来两个，美式咖啡和浓缩咖啡</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.decorator.myimpl.coffee;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LongBlack</span> <span class="keyword">extends</span> <span class="title class_">Coffee</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LongBlack</span><span class="params">()</span> &#123;</span><br><span class="line">        setPrice(<span class="number">10F</span>);</span><br><span class="line">        setName(<span class="string">&quot;美式咖啡&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Float <span class="title function_">cost</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Float</span> <span class="variable">price</span> <span class="operator">=</span> getPrice();</span><br><span class="line">        price += getSugar()==<span class="literal">null</span>? <span class="number">0F</span>: getSugar().getPrice();</span><br><span class="line">        price += getMilk()==<span class="literal">null</span>? <span class="number">0F</span>: getMilk().getPrice();</span><br><span class="line">        price += getChocolate()==<span class="literal">null</span>? <span class="number">0F</span>: getChocolate().getPrice();</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDesc</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">desc</span> <span class="operator">=</span> getName();</span><br><span class="line">        <span class="keyword">if</span>(getSugar()!=<span class="literal">null</span>)</span><br><span class="line">            desc += <span class="string">&quot; &amp;&amp; &quot;</span> + getSugar().getName() + <span class="string">&quot; &quot;</span> + getSugar().getPrice();</span><br><span class="line">        <span class="keyword">if</span>(getMilk()!=<span class="literal">null</span>)</span><br><span class="line">            desc += <span class="string">&quot; &amp;&amp; &quot;</span> + getMilk().getName() + <span class="string">&quot; &quot;</span> + getMilk().getPrice();</span><br><span class="line">        <span class="keyword">if</span>(getChocolate()!=<span class="literal">null</span>)</span><br><span class="line">            desc += <span class="string">&quot; &amp;&amp; &quot;</span> + getChocolate().getName() + <span class="string">&quot; &quot;</span> + getChocolate().getPrice();</span><br><span class="line">        <span class="keyword">return</span> desc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.decorator.myimpl.coffee;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Espresso</span> <span class="keyword">extends</span> <span class="title class_">Coffee</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Espresso</span><span class="params">()</span> &#123;</span><br><span class="line">        setPrice(<span class="number">8F</span>);</span><br><span class="line">        setName(<span class="string">&quot;浓缩咖啡&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Float <span class="title function_">cost</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Float</span> <span class="variable">price</span> <span class="operator">=</span> getPrice();</span><br><span class="line">        price += getSugar()==<span class="literal">null</span>? <span class="number">0F</span>: getSugar().getPrice();</span><br><span class="line">        price += getMilk()==<span class="literal">null</span>? <span class="number">0F</span>: getMilk().getPrice();</span><br><span class="line">        price += getChocolate()==<span class="literal">null</span>? <span class="number">0F</span>: getChocolate().getPrice();</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDesc</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">desc</span> <span class="operator">=</span> getName();</span><br><span class="line">        <span class="keyword">if</span>(getSugar()!=<span class="literal">null</span>)</span><br><span class="line">            desc += <span class="string">&quot; &amp;&amp; &quot;</span> + getSugar().getName() + <span class="string">&quot; &quot;</span> + getSugar().getPrice();</span><br><span class="line">        <span class="keyword">if</span>(getMilk()!=<span class="literal">null</span>)</span><br><span class="line">            desc += <span class="string">&quot; &amp;&amp; &quot;</span> + getMilk().getName() + <span class="string">&quot; &quot;</span> + getMilk().getPrice();</span><br><span class="line">        <span class="keyword">if</span>(getChocolate()!=<span class="literal">null</span>)</span><br><span class="line">            desc += <span class="string">&quot; &amp;&amp; &quot;</span> + getChocolate().getName() + <span class="string">&quot; &quot;</span> + getChocolate().getPrice();</span><br><span class="line">        <span class="keyword">return</span> desc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基本已经完成，我们来进行测试一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.decorator.myimpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.decorator.myimpl.coffee.Coffee;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.decorator.myimpl.coffee.Espresso;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.decorator.myimpl.coffee.LongBlack;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.decorator.myimpl.dosing.Chocolate;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.decorator.myimpl.dosing.Milk;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.decorator.myimpl.dosing.Sugar;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CoffeeShopMain</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">LongBlack</span> <span class="variable">longBlack</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LongBlack</span>();</span><br><span class="line">        longBlack.setMilk(<span class="keyword">new</span> <span class="title class_">Milk</span>());</span><br><span class="line">        longBlack.setSugar(<span class="keyword">new</span> <span class="title class_">Sugar</span>());</span><br><span class="line">        System.out.println(longBlack.getDesc());</span><br><span class="line">        System.out.println(<span class="string">&quot;金额是：&quot;</span> + longBlack.cost());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;==================== 分割线 ====================&quot;</span>);</span><br><span class="line">        <span class="type">Coffee</span> <span class="variable">espresso</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Espresso</span>();</span><br><span class="line">        espresso.setMilk(<span class="keyword">new</span> <span class="title class_">Milk</span>());</span><br><span class="line">        espresso.setSugar(<span class="keyword">new</span> <span class="title class_">Sugar</span>());</span><br><span class="line">        espresso.setChocolate(<span class="keyword">new</span> <span class="title class_">Chocolate</span>());</span><br><span class="line">        System.out.println(espresso.getDesc());</span><br><span class="line">        System.out.println(<span class="string">&quot;金额是：&quot;</span> + espresso.cost());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220128205024.png" alt="image-20220128204948630" /></p><p>测试发现，咖啡选择，配料的添加，金额的计算没有出现问题。但如果从设计层面上讲，我这样写代码，绝对会被领导批，为什么？</p><p>试想一下，如果需求改变，添加了个豆浆的配料呢。好说，再加一个属性豆浆嘛，那这样就违反了开闭原则了，尽量不要修改到以前的代码。</p><blockquote><p>关于有人说可以将配料抽出一个接口或者抽象类，让咖啡持有一个List就好。其实我也有考虑过这样设计，简单方便。</p><p>这样的话，添加一个配料倒是没什么问题，如果添加的是包装费呢。如果把包装费也算作是配料的话，感觉不太对啊。</p><p>关键时刻还是得，装饰模式出场。</p></blockquote><h4 id="8-2）装饰模式实现">8.2）装饰模式实现</h4><p>装饰模式，其实就是封装主体，在外围包上一层，也可以包上多层。这每一层的包装，就是装饰。</p><p>如果是上面咖啡的例子的话，美式咖啡、浓缩咖啡就是<mark>被装饰的主体</mark>，而其他的配料就是装饰，需要什么配料包上去就行。</p><p>如何包装，这个是一个问题，我们先来看代码，需要一个抽象类，这和上面没有什么区别</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.decorator.optimize;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.StrUtil;</span><br><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"><span class="keyword">import</span> lombok.Setter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Drink</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Float price;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDesc</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> StrUtil.format(<span class="string">&quot;&#123;&#125; &#123;&#125;元&quot;</span>, name, price);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> Float <span class="title function_">cost</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再来个咖啡的类，以及美式咖啡和浓缩咖啡</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.decorator.optimize.coffee;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.decorator.optimize.Drink;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Coffee</span> <span class="keyword">extends</span> <span class="title class_">Drink</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Float <span class="title function_">cost</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getPrice();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.decorator.optimize.coffee;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LongBlack</span> <span class="keyword">extends</span> <span class="title class_">Coffee</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LongBlack</span><span class="params">()</span> &#123;</span><br><span class="line">        setPrice(<span class="number">10F</span>);</span><br><span class="line">        setName(<span class="string">&quot;美式咖啡&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.decorator.optimize.coffee;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Espresso</span> <span class="keyword">extends</span> <span class="title class_">Coffee</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Espresso</span><span class="params">()</span> &#123;</span><br><span class="line">        setPrice(<span class="number">8F</span>);</span><br><span class="line">        setName(<span class="string">&quot;浓缩咖啡&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面是咖啡，是被装饰的主体，接下来要编写装饰者</p><p>同样装饰者也需要继承<code>Drink</code>类，同时它还组合一个<code>Drink</code>的属性。这也就是说装饰者，必须有一个被装饰的主体</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.decorator.optimize;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.StrUtil;</span><br><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Decorator</span> <span class="keyword">extends</span> <span class="title class_">Drink</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Drink drink;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Decorator</span><span class="params">(Drink drink)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.drink = drink;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDesc</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> StrUtil.format(<span class="string">&quot;&#123;&#125; | &#123;&#125;&quot;</span>, <span class="built_in">super</span>.getDesc(), drink.getDesc());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Float <span class="title function_">cost</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.getPrice() + drink.cost();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在编写装饰者的几个子类，在此例中，他们都是具体的调料。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.decorator.optimize.dosing;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.decorator.optimize.Decorator;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.decorator.optimize.Drink;</span><br><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Chocolate</span> <span class="keyword">extends</span> <span class="title class_">Decorator</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Chocolate</span><span class="params">(Drink drink)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(drink);</span><br><span class="line">        setPrice(<span class="number">4F</span>);</span><br><span class="line">        setName(<span class="string">&quot;巧克力&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.decorator.optimize.dosing;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.decorator.optimize.Decorator;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.decorator.optimize.Drink;</span><br><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Milk</span> <span class="keyword">extends</span> <span class="title class_">Decorator</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Milk</span><span class="params">(Drink drink)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(drink);</span><br><span class="line">        setPrice(<span class="number">3F</span>);</span><br><span class="line">        setName(<span class="string">&quot;牛奶&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.decorator.optimize.dosing;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.decorator.optimize.Decorator;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.decorator.optimize.Drink;</span><br><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Sugar</span> <span class="keyword">extends</span> <span class="title class_">Decorator</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Sugar</span><span class="params">(Drink drink)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(drink);</span><br><span class="line">        setPrice(<span class="number">2F</span>);</span><br><span class="line">        setName(<span class="string">&quot;方糖&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如此一来，被装饰的主体和装饰者都已经写好了，马上来测试一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.decorator.optimize;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.decorator.optimize.coffee.Espresso;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.decorator.optimize.coffee.LongBlack;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.decorator.optimize.dosing.Chocolate;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.decorator.optimize.dosing.Milk;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.decorator.optimize.dosing.Sugar;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CoffeeShopMain</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Drink</span> <span class="variable">longBlack</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LongBlack</span>();</span><br><span class="line">        longBlack = <span class="keyword">new</span> <span class="title class_">Milk</span>(longBlack);</span><br><span class="line">        longBlack = <span class="keyword">new</span> <span class="title class_">Sugar</span>(longBlack);</span><br><span class="line">        System.out.println(longBlack.getDesc());</span><br><span class="line">        System.out.println(<span class="string">&quot;金额是：&quot;</span> + longBlack.cost());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;==================== 分割线 ====================&quot;</span>);</span><br><span class="line">        <span class="type">Drink</span> <span class="variable">espresso</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Espresso</span>();</span><br><span class="line">        espresso = <span class="keyword">new</span> <span class="title class_">Milk</span>(espresso);</span><br><span class="line">        espresso = <span class="keyword">new</span> <span class="title class_">Sugar</span>(espresso);</span><br><span class="line">        espresso = <span class="keyword">new</span> <span class="title class_">Chocolate</span>(espresso);</span><br><span class="line">        espresso = <span class="keyword">new</span> <span class="title class_">Chocolate</span>(espresso);<span class="comment">// 点两份巧克力</span></span><br><span class="line">        System.out.println(espresso.getDesc());</span><br><span class="line">        System.out.println(<span class="string">&quot;金额是：&quot;</span> + espresso.cost());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220129175946.png" alt="image-20220129175945539" /></p><p>简单画一个类图，他们的关系会是这样</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220129181825.png" alt="image-20220129181823631" /></p><p>按照上面的设计结构，如果是添加一个包装费，也很容易实现扩展。</p><p>只要将包装费弄成一个装饰者，马上实现产品的需求，而且对之前的结构没有产生任何影响。</p><blockquote><p>在jkd中，它的IO流就是使用的装饰模式，可以翻翻看。</p></blockquote><h3 id="9）组合模式">9）组合模式</h3><p>组合模式，又叫部分整体模式，是用于把一组相似的对象当作一个单一的对象。组合模式依据树形结构来组合对象，用来表示部分以及整体层次。这种类型的设计模式属于结构型模式，它创建了对象组的树形结构。</p><p>简单而言，就是多个结构，你中有我，我中有很多个他，他的心中又有许多人。每一个人都是部分，组合起来就是整体。这就是部分-整体的结构概念。</p><p>现在简单来看看这三个部分，学校、学院和专业。</p><ul class="lvl-0"><li class="lvl-2"><p>这三个从学校开始，学校包含学院，学院包含专业</p></li><li class="lvl-2"><p>支持学校增加删除学院，学院增加删除专业</p></li></ul><p>首先定义一个抽象类用来管理学校，学院和专业，让他们继承这个抽象类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.composite;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"><span class="keyword">import</span> lombok.Setter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">OrganizationComponent</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;<span class="comment">// 名称</span></span><br><span class="line">    <span class="keyword">private</span> String desc;<span class="comment">// 简介</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(OrganizationComponent component)</span>&#123;</span><br><span class="line">        <span class="comment">// 默认实现，抛出不支持操作异常</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(OrganizationComponent component)</span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>学校、学院、专业</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.composite;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 学校</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">University</span> <span class="keyword">extends</span> <span class="title class_">OrganizationComponent</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;OrganizationComponent&gt; orgList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">University</span><span class="params">(String name, String desc)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name, desc);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(OrganizationComponent component)</span> &#123;</span><br><span class="line">        orgList.add(component);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(OrganizationComponent component)</span> &#123;</span><br><span class="line">        orgList.remove(component);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;===========&quot;</span> + getName() + <span class="string">&quot;===========&quot;</span>);</span><br><span class="line">        orgList.forEach(OrganizationComponent::show);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.composite;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.StrUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 学院</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">College</span> <span class="keyword">extends</span> <span class="title class_">OrganizationComponent</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;OrganizationComponent&gt; orgList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">College</span><span class="params">(String name, String desc)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name, desc);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(OrganizationComponent component)</span> &#123;</span><br><span class="line">        System.out.println(StrUtil.format(<span class="string">&quot;&#123;&#125;添加了《&#123;&#125;》专业&quot;</span>, getName(), component.getName()));</span><br><span class="line">        orgList.add(component);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(OrganizationComponent component)</span> &#123;</span><br><span class="line">        System.out.println(StrUtil.format(<span class="string">&quot;&#123;&#125;移除了《&#123;&#125;》专业&quot;</span>, getName(), component.getName()));</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> orgList.remove(component);</span><br><span class="line">        <span class="keyword">if</span>(!b)</span><br><span class="line">            System.out.println(StrUtil.format(<span class="string">&quot;笑死，根本就没有《&#123;&#125;》这个专业&quot;</span>, component.getName()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;===========&quot;</span> + getName() + <span class="string">&quot;===========&quot;</span>);</span><br><span class="line">        orgList.forEach(OrganizationComponent::show);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.composite;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.StrUtil;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 专业</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Specialty</span> <span class="keyword">extends</span> <span class="title class_">OrganizationComponent</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Specialty</span><span class="params">(String name, String desc)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name, desc);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(StrUtil.format(<span class="string">&quot;&#123;&#125; =&gt; &#123;&#125;&quot;</span>, getName(), getDesc()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述就已经完成组合的结构了，写段代码来测试一下效果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.composite;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CompositeMain</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">University</span> <span class="variable">university</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">University</span>(<span class="string">&quot;清华大学&quot;</span>, <span class="string">&quot;清华大学&quot;</span>);</span><br><span class="line">        <span class="type">College</span> <span class="variable">collegeA</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">College</span>(<span class="string">&quot;计算机学院&quot;</span>, <span class="string">&quot;计算机学院&quot;</span>);</span><br><span class="line">        <span class="type">College</span> <span class="variable">collegeB</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">College</span>(<span class="string">&quot;信息工程学院&quot;</span>, <span class="string">&quot;信息工程学院&quot;</span>);</span><br><span class="line">        university.add(collegeA);</span><br><span class="line">        university.add(collegeB);</span><br><span class="line">        collegeA.add(<span class="keyword">new</span> <span class="title class_">Specialty</span>(<span class="string">&quot;软件工程&quot;</span>, <span class="string">&quot;软件工程掉头发啊&quot;</span>));</span><br><span class="line">        collegeA.add(<span class="keyword">new</span> <span class="title class_">Specialty</span>(<span class="string">&quot;网络工程&quot;</span>, <span class="string">&quot;网络工程掉头发啊&quot;</span>));</span><br><span class="line">        collegeA.add(<span class="keyword">new</span> <span class="title class_">Specialty</span>(<span class="string">&quot;计算机科学技术&quot;</span>, <span class="string">&quot;计算机科学技术掉头发啊&quot;</span>));</span><br><span class="line">        collegeB.add(<span class="keyword">new</span> <span class="title class_">Specialty</span>(<span class="string">&quot;通信工程&quot;</span>, <span class="string">&quot;通信工程掉头发啊&quot;</span>));</span><br><span class="line">        collegeB.add(<span class="keyword">new</span> <span class="title class_">Specialty</span>(<span class="string">&quot;信息工程&quot;</span>, <span class="string">&quot;信息工程掉头发啊&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查看学校的信息</span></span><br><span class="line">        university.show();</span><br><span class="line">        <span class="comment">// 只查看其他的院系</span></span><br><span class="line"><span class="comment">//        collegeA.show();</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220208222807.png" alt="image-20220208222806004" /></p><p>同样，我也可以从学院进行展示</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220208222937.png" alt="image-20220208222936458" /></p><h3 id="10）外观模式">10）外观模式</h3><p>在现实生活中，常常存在办事较复杂的例子。如办理什么证件，需要这的那的一大堆材料，有时要同多个部门联系，这时要是有一个综合部门能解决一切手续问题就好了。</p><p>软件设计也是这样，一个大的功能下，包含了许多子功能。尽量不要让客户端知道里面的细节，也能可以将事情办成。在一系列复杂的操作上再加上一层，这就是外观模式，也叫<mark>过程模式</mark>。</p><p>简单看下这个场景，电脑的开关机。我们知道电脑中有cpu，硬盘，内存，显卡等，但我们不关心内部具体的启动，只需要在机箱上点击启动键。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.facade;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ComputerComponent</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">open</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.facade;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cpu</span> <span class="keyword">implements</span> <span class="title class_">ComputerComponent</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">open</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;cpu启动&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;cpu关闭&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.facade;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Ddr</span> <span class="keyword">implements</span> <span class="title class_">ComputerComponent</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">open</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;内存启动&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;内存关闭&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.facade;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PowerSupply</span> <span class="keyword">implements</span> <span class="title class_">ComputerComponent</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">open</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;接通电源&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;关闭电源&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.facade;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Ssd</span> <span class="keyword">implements</span> <span class="title class_">ComputerComponent</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">open</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;硬盘启动&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;硬盘关闭&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再写一个外观类，通过组合的方式将内部组件配在一起</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.facade;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ComputerFacade</span> <span class="keyword">implements</span> <span class="title class_">ComputerComponent</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Cpu cpu;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Ddr ddr;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> PowerSupply ps;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Ssd ssd;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ComputerFacade</span><span class="params">()</span> &#123;</span><br><span class="line">        cpu = <span class="keyword">new</span> <span class="title class_">Cpu</span>();</span><br><span class="line">        ddr = <span class="keyword">new</span> <span class="title class_">Ddr</span>();</span><br><span class="line">        ps = <span class="keyword">new</span> <span class="title class_">PowerSupply</span>();</span><br><span class="line">        ssd = <span class="keyword">new</span> <span class="title class_">Ssd</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">open</span><span class="params">()</span> &#123;</span><br><span class="line">        ps.open();</span><br><span class="line">        cpu.open();</span><br><span class="line">        ddr.open();</span><br><span class="line">        ssd.open();</span><br><span class="line">        System.out.println(<span class="string">&quot;==== 电脑启动成功 ====&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span> &#123;</span><br><span class="line">        ddr.close();</span><br><span class="line">        cpu.close();</span><br><span class="line">        ssd.close();</span><br><span class="line">        ps.close();</span><br><span class="line">        System.out.println(<span class="string">&quot;==== 电脑关闭成功 ====&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来个客户端进行开关机吧</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.facade;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FacadeMain</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ComputerFacade</span> <span class="variable">computerFacade</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ComputerFacade</span>();</span><br><span class="line">        <span class="comment">// 开启</span></span><br><span class="line">        computerFacade.open();</span><br><span class="line">        <span class="comment">// 关闭</span></span><br><span class="line">        computerFacade.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/facade.png" alt="image-20220212123701372" /></p><blockquote><p>外观模式和工厂模式的区别。有些人不理解，但这其实很好理解。</p><p>外观模式是过程，大动作里面有一系列的小动作，将这些小动作进行封装，形成的就是外观模式。</p><p>工厂模式是实例结果，为了得到这个对象，里面封装的许多对象的细节，这就是工厂模式。</p><p>虽然都在外部包上了一层，但结构型和创建型的区别就在这里。</p></blockquote><h3 id="11）享元模式">11）享元模式</h3><p>享元模式，主要用于减少创建对象的数量，以减少内存占用和提高性能。这种模式在我们的代码中经常用到，比如说连接池，或者线程池，这池子就是一个享元模式。</p><p>比如说，我们可以看下面这个五子棋例子，棋盘和下棋的一段示例代码。</p><p>棋子类，有个颜色的属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.flyweight;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ChessPieces</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String color;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再来一个工厂类，让工厂类去控制棋子类的生产</p><blockquote><p>与前面讲到的工厂类有点区别</p><p>享元模式的这个会将生产出来的棋子实例放入容器中，后续有需要将从这个容器中去取，从而控制棋子的实例数量。</p><p>上面工厂模式是只管创建，外部需要，工厂就创建一个新的实例进行返回</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.flyweight;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChessPiecesFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, ChessPieces&gt; chessPiecesContainer = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ChessPieces <span class="title function_">getChessPieces</span><span class="params">(String type)</span>&#123;</span><br><span class="line">        <span class="type">ChessPieces</span> <span class="variable">chessPieces</span> <span class="operator">=</span> chessPiecesContainer.get(type);</span><br><span class="line">        <span class="keyword">if</span>(!chessPiecesContainer.containsKey(type))&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">&quot;white&quot;</span>.equals(type))&#123;</span><br><span class="line">                chessPieces = <span class="keyword">new</span> <span class="title class_">ChessPieces</span>(<span class="string">&quot;白&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;black&quot;</span>.equals(type))&#123;</span><br><span class="line">                chessPieces = <span class="keyword">new</span> <span class="title class_">ChessPieces</span>(<span class="string">&quot;黑&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            chessPiecesContainer.put(type, chessPieces);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> chessPieces;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再来一个棋盘类，里面有落子和展示的方法，暂时不要管重复落子的BUG</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.flyweight;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.activation.UnknownObjectException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Chessboard</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ChessPieces[][] chessboard = <span class="keyword">new</span> <span class="title class_">ChessPieces</span>[<span class="number">19</span>][<span class="number">19</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">ChessPiecesFactory</span> <span class="variable">chessPiecesFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChessPiecesFactory</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, String type)</span> <span class="keyword">throws</span> UnknownObjectException &#123;</span><br><span class="line">        <span class="keyword">if</span>(x&lt;<span class="number">0</span> || x&gt;<span class="number">18</span> || y&lt;<span class="number">0</span> || y&gt;<span class="number">18</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>(<span class="string">&quot;不能在此落子&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(!<span class="string">&quot;white&quot;</span>.equals(type) &amp;&amp; !<span class="string">&quot;black&quot;</span>.equals(type))</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnknownObjectException</span>(<span class="string">&quot;未知的棋子&quot;</span>);</span><br><span class="line">        chessboard[x][y] = chessPiecesFactory.getChessPieces(type);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showChessboard</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; chessboard.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (ChessPieces chessPieces : chessboard[i]) &#123;</span><br><span class="line">                <span class="keyword">if</span>(chessPieces!=<span class="literal">null</span>)</span><br><span class="line">                    System.out.print(chessPieces.getColor());</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    System.out.print(<span class="string">&quot;空&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写段代码测试一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.flyweight;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.activation.UnknownObjectException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FlyweightMain</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> UnknownObjectException &#123;</span><br><span class="line">        <span class="type">Chessboard</span> <span class="variable">chessboard</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Chessboard</span>();</span><br><span class="line">        chessboard.put(<span class="number">0</span>, <span class="number">0</span>, <span class="string">&quot;black&quot;</span>);</span><br><span class="line">        chessboard.put(<span class="number">0</span>, <span class="number">1</span>, <span class="string">&quot;black&quot;</span>);</span><br><span class="line">        chessboard.put(<span class="number">1</span>, <span class="number">0</span>, <span class="string">&quot;white&quot;</span>);</span><br><span class="line">        chessboard.put(<span class="number">1</span>, <span class="number">1</span>, <span class="string">&quot;white&quot;</span>);</span><br><span class="line">        System.out.println(chessboard.chessboard[<span class="number">0</span>][<span class="number">0</span>] == chessboard.chessboard[<span class="number">0</span>][<span class="number">1</span>]);</span><br><span class="line">        System.out.println(chessboard.chessboard[<span class="number">1</span>][<span class="number">0</span>] == chessboard.chessboard[<span class="number">1</span>][<span class="number">1</span>]);</span><br><span class="line"><span class="comment">//        chessboard.showChessboard();</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看结果，大家也可以将<code>showChessboard()</code>展示出来看看效果</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220214195013.png" alt="image-20220214195011770" /></p><p>在此处，需要区分对象实例的内部属性和外部属性。在此处，内部属性就是颜色，外部属性就是坐标的x和y，将两者进行区分，否则会造成系统的混乱。</p><blockquote><p>在jdk中，我们常用的Integer就使用到了享元模式。对的，就是那个缓存，具体可以看看源码，和本文的示例不同，但也是享元模式的思想。</p></blockquote><h3 id="12）代理模式">12）代理模式</h3><p>代理模式，大家肯定很熟悉了，它也是属于结构型设计模式的一种，对原本的功能做出的一种增强，而不用影响到原来的代码。</p><p>简单的来说，是为目标对象提供一个代替的对象，称之为替身。我们通过使用替身来进行访问目标对象的一些方法。如此一来，我们在替身上就可以做出一些额外的操作，也就是功能增强。</p><p>代理模式的分类可以分为两种</p><ul class="lvl-0"><li class="lvl-2"><p>静态代理：是我们编写出的结构型代理，编译完成后，就存在有替身的class文件</p></li><li class="lvl-2"><p>动态代理：在内存中动态为对象创建替身</p><ul class="lvl-2"><li class="lvl-4">JDK代理：又叫接口代理</li><li class="lvl-4">Cglib代理</li></ul></li></ul><h4 id="12-1）静态代理">12.1）静态代理</h4><p>静态代理，目标类和替身类实现同一个接口，替身类再重写的方法中去调用目标类的方法。</p><p>先简单来个接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.proxy.staticproxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ITeacher</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">teach</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再有一个它的实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.proxy.staticproxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Teacher</span> <span class="keyword">implements</span> <span class="title class_">ITeacher</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">teach</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;老师授课中&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在代理对象出场，它聚合了目标对象。这里可以选择组合也没有问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.proxy.staticproxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TeacherProxy</span> <span class="keyword">implements</span> <span class="title class_">ITeacher</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Teacher teacherDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">teach</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;上课铃声响了&quot;</span>);</span><br><span class="line">        teacherDao.teach();</span><br><span class="line">        System.out.println(<span class="string">&quot;下课铃声响了&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;老师开始布置作业&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在简单使用一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.proxy.staticproxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StaticProxyMain</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">TeacherProxy</span> <span class="variable">proxy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TeacherProxy</span>(<span class="keyword">new</span> <span class="title class_">Teacher</span>());</span><br><span class="line">        proxy.teach();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220214222820-proxy.png" alt="image-20220214222818655" /></p><p>静态代理平常不怎么使用，因为实在过于繁杂。这就有了动态代理</p><h4 id="12-2）动态代理之jdk代理">12.2）动态代理之jdk代理</h4><p>jdk动态代理，是使用了jdk中的一个api，代理需要<code>java.lang.reflect.InvocationHandler</code>接口和 <code>java.lang.reflect.Proxy</code>类，以及它生产代理类的核心方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">newProxyInstance</span><span class="params">(ClassLoader loader,</span></span><br><span class="line"><span class="params">                                          Class&lt;?&gt;[] interfaces,</span></span><br><span class="line"><span class="params">                                          InvocationHandler h)</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 简单说明一下几个参数</span></span><br><span class="line"><span class="comment"> * ClassLoader loader：指定目标对象的类加载器，获取加载器的方式是固定的</span></span><br><span class="line"><span class="comment"> * Class&lt;?&gt;[] interfaces：目标对象实现的接口类型数组</span></span><br><span class="line"><span class="comment"> * InvocationHandler h：事件处理，执行目标对象方法时，会触发此执行器的方法。函数式接口，该接口只有一个方法</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>照样我们将上面静态代理改成jdk代理的方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.proxy.jdkproxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ITeacher</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">teach</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.proxy.jdkproxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Teacher</span> <span class="keyword">implements</span> <span class="title class_">ITeacher</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">teach</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;老师授课中&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写一个工厂类，将需要代理的对象传入，工厂会生产出这个对象的代理对象的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.proxy.jdkproxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdkProxyFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JdkProxyFactory</span><span class="params">(Object target)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getProxyInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 简化使用了lambda表达式，需要大家能看懂</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">proxyInstance</span> <span class="operator">=</span> Proxy.newProxyInstance(target.getClass().getClassLoader(),</span><br><span class="line">                target.getClass().getInterfaces(),</span><br><span class="line">                (p, m, args) -&gt; &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;JDK代理开始&quot;</span>);</span><br><span class="line">                    <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> m.invoke(target, args);</span><br><span class="line">                    System.out.println(<span class="string">&quot;后置作业通知&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span> result;</span><br><span class="line">                &#125;</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">return</span> proxyInstance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写完了，我们来测试一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.proxy.jdkproxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdkProxyMain</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建目标对象</span></span><br><span class="line">        <span class="type">ITeacher</span> <span class="variable">teacher</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Teacher</span>();</span><br><span class="line">        <span class="comment">// 将目标对象传入，让其工厂生产代理对象</span></span><br><span class="line">        <span class="type">ITeacher</span> <span class="variable">teacherProxy</span> <span class="operator">=</span> (ITeacher) <span class="keyword">new</span> <span class="title class_">JdkProxyFactory</span>(teacher).getProxyInstance();</span><br><span class="line">        <span class="comment">// 查看代理对象Class</span></span><br><span class="line">        System.out.println(<span class="string">&quot;teacherProxy：&quot;</span> + teacherProxy.getClass());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;============ 分割线 ============&quot;</span>);</span><br><span class="line">        <span class="comment">// 调用代理对象teach方法</span></span><br><span class="line">        teacherProxy.teach();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220215214735.png" alt="image-20220215214732944" /></p><p>可以看到结果，目标对象成功被代理，而<code>teacherProxy</code>对象就是其代理对象，大家可以看看它的包路径，是jdk动态生成的。</p><h4 id="12-3）动态代理之Cglib代理">12.3）动态代理之Cglib代理</h4><p>前面的两种代理方式都需要目标对象是有实现一个接口的，但有时候目标对象仅仅只是一个对象，没有实现任何接口。这时候就需要Cglib代理了。</p><p>如何选择代理模式</p><ul class="lvl-0"><li class="lvl-2"><p>目标对象实现了接口，可以使用jdk代理</p></li><li class="lvl-2"><p>目标对象没有实现接口，用Cglib代理，更推荐</p></li></ul><p>Cglib时一个强大的高性能的代码生成包，它的底层是通过使用字节码处理框架ASM来转换字节码并生成新的类。所以，就保证了Java在运行时，可以扩展Java的类。它被广泛的运用到其他AOP框架中，如Spring AOP。</p><p>Cglib代理又称为<mark>子类代理</mark>，所以对目标对象有了一定的限制</p><ul class="lvl-0"><li class="lvl-2"><p>目标对象的class不能是final类</p></li><li class="lvl-2"><p>目标对象中<code>final</code>和<code>static</code>方法，不能被拦截代理</p></li></ul><p>引入包依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cglib<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cglib<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>继续演示教师的例子，这次没有教师接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.proxy.cglibproxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Teacher</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">teach</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;老师授课中&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现<code>MethodInterceptor</code>接口，并重写，这个相当于jdk代理的<code>InvocationHandler</code>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.proxy.cglibproxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.Enhancer;</span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.MethodInterceptor;</span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.MethodProxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CglibProxyFactory</span> <span class="keyword">implements</span> <span class="title class_">MethodInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CglibProxyFactory</span><span class="params">(Object target)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getProxyInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 1、创建工具类</span></span><br><span class="line">        <span class="type">Enhancer</span> <span class="variable">enhancer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Enhancer</span>();</span><br><span class="line">        <span class="comment">// 2、设置父类</span></span><br><span class="line">        enhancer.setSuperclass(target.getClass());</span><br><span class="line">        <span class="comment">// 3、设置回调函数，实现了MethodInterceptor的类对象实例，这里传入this</span></span><br><span class="line">        enhancer.setCallback(<span class="built_in">this</span>);</span><br><span class="line">        <span class="comment">// 4、创建子类对象，即代理对象</span></span><br><span class="line">        <span class="keyword">return</span> enhancer.create();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">intercept</span><span class="params">(Object o, Method method, Object[] args, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Cglib代理 开始&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> method.invoke(target, args);</span><br><span class="line">        System.out.println(<span class="string">&quot;Cglib代理 后置通知&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单测试一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.proxy.cglibproxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CglibProxyMain</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Teacher</span> <span class="variable">teacher</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Teacher</span>();</span><br><span class="line">        <span class="type">Teacher</span> <span class="variable">teacherProxy</span> <span class="operator">=</span> (Teacher) <span class="keyword">new</span> <span class="title class_">CglibProxyFactory</span>(teacher).getProxyInstance();</span><br><span class="line">        System.out.println(<span class="string">&quot;teacherProxy：&quot;</span> + teacherProxy.getClass());</span><br><span class="line">        teacherProxy.teach();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220215231904.png" alt="image-20220215231902753" /></p><blockquote><p>在日常的项目中，我们常常使用Spring AOP比较多，这个功能可以单独出一篇文章来进行讲解使用。</p></blockquote><h2 id="五、行为型设计模式">五、行为型设计模式</h2><h3 id="13）模板模式">13）模板模式</h3><p>模板模式，又称为模板方法模式。它定义了一套流程，有一定的实现步骤，就和模板一样。只是其中有些方法在模板中不清楚，所以将这些方法让子类去进行实现，子类继承模板类并重写关键的几个方法。这就是模板模式，是行为型设计模式的一种。</p><p>基本上，模板类是一个抽象类，负责封装了一个模板方法和其他多个基本方法组成。</p><ul class="lvl-0"><li class="lvl-2"><p>模板方法：在此方法中按照一定的顺序调用了其他基本方法</p></li><li class="lvl-2"><p>基本方法：除模板方法外的其他方法</p><ul class="lvl-2"><li class="lvl-4">抽象方法：模板定义的抽象方法，需要由子类继续实现的方法</li><li class="lvl-4">具体方法：模板中已经定义实现，必要时在子类中可以重写它</li><li class="lvl-4">钩子方法：模板中已经定义实现，此类方法用于判断，必要时在子类中可以重写它</li></ul></li></ul><p>在日常生活中，我们常常去医院挂号看病，大致的流程都是一样的吧，挂号，就诊，获取诊单，签字付钱，手术，康复，出院……根据这样一个流程，我们可以把这些步骤弄成一个模板类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.template;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">HospitalTemplate</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模板方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">goHospital</span><span class="params">()</span>&#123;</span><br><span class="line">        registration();</span><br><span class="line">        seeADoctor();</span><br><span class="line">        <span class="keyword">if</span>(getOrder()&gt;<span class="number">5</span>)&#123;</span><br><span class="line">            payMoney();</span><br><span class="line">            operation();</span><br><span class="line">            recovery();</span><br><span class="line">        &#125;</span><br><span class="line">        leaveHospital();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registration</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;挂号成功，等待就诊中~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">seeADoctor</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;正在就诊中~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">int</span> <span class="title function_">getOrder</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">payMoney</span><span class="params">()</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation</span><span class="params">()</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">recovery</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;康复了，好开心~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">leaveHospital</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;终于离开这该死的医院了~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来一个黑心医院</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.template;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DirtyHospital</span> <span class="keyword">extends</span> <span class="title class_">HospitalTemplate</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getOrder</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;医生心中暗喜，冤大头来了&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">8</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">payMoney</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;支付医疗费用 $2333333&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;麻醉，简单输了点葡萄糖~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再来一个公共医院</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.template;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonHospital</span> <span class="keyword">extends</span> <span class="title class_">HospitalTemplate</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registration</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;挂号，收取费用￥5&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">seeADoctor</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;医生认真检查中~&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;医生并未发现疾病隐患&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getOrder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">leaveHospital</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;走喽~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来写段代码测试一下上面两个医院</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.template;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TemplateMain</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">DirtyHospital</span> <span class="variable">dirtyHospital</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DirtyHospital</span>();</span><br><span class="line">        dirtyHospital.goHospital();</span><br><span class="line">        System.out.println(<span class="string">&quot;=========== 分割线 ===========&quot;</span>);</span><br><span class="line">        <span class="type">CommonHospital</span> <span class="variable">commonHospital</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CommonHospital</span>();</span><br><span class="line">        commonHospital.goHospital();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220216233905.png" alt="image-20220216233904361" /></p><blockquote><p>在学习的过程中，我发现许多弹幕说模板方法模式不就是建造者模式吗，也有的弹幕说是外观模式。<s>这不是一样的吗，这样也能挣到钱，我真的是</s>。他们肯定没有多想，为什么设计模式会分类型，来看看它们的区别吧。</p><p><b>模板方法模式、建造者和外观模式的区别</b></p><ul class="lvl-1"><li class="lvl-2"><p>建造者模式：这是一个构造型设计模式，重点在于提供细节<mark>构建出一个对象实例</mark>。</p></li><li class="lvl-2"><p>外观模式：这是一个结构型设计模式，将许多的类封装出一个外观类，通过这个外观类从而<mark>省略掉客户端一系列麻烦的操作</mark>。上面我举的例子是电脑主机，有CPU、显卡、内存和电源这些类，而外观类相当于机箱，客户端只对机箱进行使用。</p></li><li class="lvl-2"><p>模板方法模式：这是一个行为型设计模式，主要在于行为，模板类规定了模板方法，其他方法有的自己默认实现，有的则交给具体的子类去实现，这就是行为不同。由此看来，<mark>子类是模板类行为的扩展</mark>，是这个模板的具体例子。</p></li></ul></blockquote><h3 id="14）命令模式">14）命令模式</h3><p>在日常的生活中，我们总扮演者两种角色，官府和小吏，领导和员工，分为了指挥的人和做事的人，而在他们之间是一道命令。在程序中，也是有发起者和执行者，所以命令模式，就是将发起者和执行者进行解耦。</p><blockquote><p>如何解耦，我们可以看看这个例子。将军调兵的场景，按理说将军可以直接命令军队，但现在不同，需要一道有虎符的军令。军队不听将军，只听这道有虎符的军令。所以解耦，这中间层就是命令。</p></blockquote><p>上面例子对应的几个角色：</p><ul class="lvl-0"><li class="lvl-2"><p><b>请求者（Invoker）</b>：命令的发起人，在上面的例子就是将军</p></li><li class="lvl-2"><p><b>接收者（Receiver）</b>：具体的执行者，执行的方法叫做行动方法，如上例子便是军队</p></li><li class="lvl-2"><p><b>命令（Command）</b>：命令的抽象类或者接口，军令</p></li><li class="lvl-2"><p><b>具体命令（ConcreteCommand）</b>：具体的命令，负责调用接收者的行动方法。在上面没有特别举例，这是一个具体的军令，如列阵、行军等具体的军令</p></li></ul><p>根据上面的例子，我们来写写看具体的代码。先简单写个命令抽象类当做军令</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.command;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 军令</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Command</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>等等再写具体的军令，先写出接受者，也就是军队。里面有两个行动方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.command;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 军队</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Army</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Army</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">advance</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.name + <span class="string">&quot;正在向前方冲锋&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">retreat</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.name + <span class="string">&quot;正在有序撤退&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在可以写出具体的军令了，命令要聚合一个军队进去</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.command;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 冲锋命令</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AdvanceCommand</span> <span class="keyword">implements</span> <span class="title class_">Command</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Army army;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AdvanceCommand</span><span class="params">(Army army)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.army = army;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span> &#123;</span><br><span class="line">        army.advance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.command;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 撤退命令</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RetreatCommand</span> <span class="keyword">implements</span> <span class="title class_">Command</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Army army;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RetreatCommand</span><span class="params">(Army army)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.army = army;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span> &#123;</span><br><span class="line">        army.retreat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样一来，就只差个请求者了。嗯对，缺一个将军</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.command;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将军</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">General</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Army&gt; armyList;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">General</span><span class="params">()</span> &#123;</span><br><span class="line">        armyList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Army&gt;()&#123;&#123;</span><br><span class="line">            add(<span class="keyword">new</span> <span class="title class_">Army</span>(<span class="string">&quot;调查兵团&quot;</span>));</span><br><span class="line">            add(<span class="keyword">new</span> <span class="title class_">Army</span>(<span class="string">&quot;宪兵团&quot;</span>));</span><br><span class="line">            add(<span class="keyword">new</span> <span class="title class_">Army</span>(<span class="string">&quot;驻扎兵团&quot;</span>));</span><br><span class="line">        &#125;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">advance</span><span class="params">(<span class="type">int</span> i)</span>&#123;</span><br><span class="line">        <span class="type">AdvanceCommand</span> <span class="variable">advanceCommand</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AdvanceCommand</span>(armyList.get(i));</span><br><span class="line">        advanceCommand.execute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">retreat</span><span class="params">(<span class="type">int</span> i)</span>&#123;</span><br><span class="line">        <span class="type">RetreatCommand</span> <span class="variable">retreatCommand</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RetreatCommand</span>(armyList.get(i));</span><br><span class="line">        retreatCommand.execute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写段代码测试一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.command;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommandMain</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">General</span> <span class="variable">general</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">General</span>();</span><br><span class="line">        general.advance(<span class="number">0</span>);</span><br><span class="line">        general.advance(<span class="number">1</span>);</span><br><span class="line">        general.advance(<span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;======== 分割线 ========&quot;</span>);</span><br><span class="line">        general.retreat(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220219133432command.png" alt="image-20220219133430683" /></p><blockquote><p>代码写完了，但有一段时间我还是迷茫的。我没有立马想到这个模式的使用场景，考虑不到具体的编码业务场景</p><p>后来看了网上许多示例写的都是什么遥控器，比如说我有一个万能遥控器，可以控制顶灯、空调、窗帘等许多物品。我乍一听这不该是外观模式吗？</p><p>上面举例的几个物品支持开关操作对吧，如果是外观模式，遥控器这个外观类上就会有m*n个方法，去控制物品的开和关。</p><p>但只要使用了命令模式，因为物品只有开和关两个操作，所以我们只需要在遥控器上写两个方法即可。</p><p>至此，我才能理解命令模式的思想和它带来的便捷。<img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220219134617.png" alt="image-20220219134605904" style="zoom:25%;" /></p></blockquote><h3 id="15）访问者模式">15）访问者模式</h3><p>首先，我们先来看一个场景。</p><p>比方说在一个歌手选秀现场，评委和现场观众都要对歌手进行打分。打分是一种操作，其他的操作还有直接晋级，直接淘汰。</p><p>在开始，选秀节目不够有互动性，仅有三个操作还不太够。结果后来再多出了一个操作，复活评分。</p><p>经过这次甜头，导演难免又要瞎整什么骚操作了。你是架构师，该如何设计程序架构对应对付以上导演的刁难。</p><p>别慌，访问者可以解决这个问题，这个设计模式针对的是对象不变，但操作频繁扩展的情况。我们先来看看对应的几个角色定义</p><ul class="lvl-0"><li class="lvl-2"><p><b>访问者（Visitor）</b>：</p><ul class="lvl-2"><li class="lvl-4">访问者定义为接口或者抽象类，它的几个实现类对应具体的操作。</li><li class="lvl-4">按理来说，它的参数是一个具体的元素，每一个具体的元素都应该有一个自己的方法。</li><li class="lvl-4">对应上边例子的打分、直接复活等操作</li></ul></li><li class="lvl-2"><p><b>元素（Element）</b>：</p><ul class="lvl-2"><li class="lvl-4">元素，本来是操作具体的实施角色，但由于操作被抽离出去变成了访问者，那么元素就仅仅只是个操作的发起者而已了。</li><li class="lvl-4">它定义了一个接受访问者的一个<code>accept</code>方法，指的是每个元素都可以被访问者访问。</li><li class="lvl-4">对应上边例子就是评委和现场观众</li></ul></li><li class="lvl-2"><p><b>ObjectStructure</b>：用来管理元素的一个类，可以有也可以无</p></li></ul><p>我们先来定义一下元素这个角色的抽象类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.visitor.element;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.visitor.visitor.Operation;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 元素（Element）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Operation operation)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再定义一下访问者的抽象类吧</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.visitor.visitor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.visitor.element.Judge;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.visitor.element.Spectator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 访问者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Operation</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">operation</span><span class="params">(Judge judge)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">operation</span><span class="params">(Spectator spectator)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，访问者和元素就聚合在一起了，我们再来写出它们的子类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.visitor.element;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.visitor.visitor.Operation;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 评委</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Judge</span> <span class="keyword">extends</span> <span class="title class_">Person</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Judge</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Operation operation)</span> &#123;</span><br><span class="line">        operation.operation(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.visitor.element;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.visitor.visitor.Operation;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 现场观众</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Spectator</span> <span class="keyword">extends</span> <span class="title class_">Person</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Spectator</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Operation operation)</span> &#123;</span><br><span class="line">        operation.operation(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问者的几个子类操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.visitor.visitor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.visitor.element.Judge;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.visitor.element.Spectator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 打分</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GradeOperation</span> <span class="keyword">extends</span> <span class="title class_">Operation</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation</span><span class="params">(Judge judge)</span> &#123;</span><br><span class="line">        System.out.println(judge.getName() + <span class="string">&quot;正在打分&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation</span><span class="params">(Spectator spectator)</span> &#123;</span><br><span class="line">        System.out.println(spectator.getName() + <span class="string">&quot;正在打分&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.visitor.visitor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.visitor.element.Judge;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.visitor.element.Spectator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 直接晋级</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RiseOperation</span> <span class="keyword">extends</span> <span class="title class_">Operation</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation</span><span class="params">(Judge judge)</span> &#123;</span><br><span class="line">        System.out.println(judge.getName() + <span class="string">&quot;推荐歌手直接晋级&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation</span><span class="params">(Spectator spectator)</span> &#123;</span><br><span class="line">        System.out.println(spectator.getName() + <span class="string">&quot;推荐歌手直接晋级&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.visitor.visitor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.visitor.element.Judge;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.visitor.element.Spectator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 淘汰</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WeedOutOperation</span> <span class="keyword">extends</span> <span class="title class_">Operation</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation</span><span class="params">(Judge judge)</span> &#123;</span><br><span class="line">        System.out.println(judge.getName() + <span class="string">&quot;建议歌手直接淘汰&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation</span><span class="params">(Spectator spectator)</span> &#123;</span><br><span class="line">        System.out.println(spectator.getName() + <span class="string">&quot;建议歌手直接淘汰&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再来一个<code>ObjectStructure</code>类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.visitor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.visitor.element.Judge;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.visitor.element.Person;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.visitor.element.Spectator;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.visitor.visitor.Operation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ObjectStructure</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Person&gt; personElementList;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ObjectStructure</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.personElementList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="built_in">this</span>.personElementList.add(<span class="keyword">new</span> <span class="title class_">Judge</span>(<span class="string">&quot;评委A&quot;</span>));</span><br><span class="line">        <span class="built_in">this</span>.personElementList.add(<span class="keyword">new</span> <span class="title class_">Judge</span>(<span class="string">&quot;评委B&quot;</span>));</span><br><span class="line">        <span class="built_in">this</span>.personElementList.add(<span class="keyword">new</span> <span class="title class_">Judge</span>(<span class="string">&quot;评委C&quot;</span>));</span><br><span class="line">        <span class="built_in">this</span>.personElementList.add(<span class="keyword">new</span> <span class="title class_">Spectator</span>(<span class="string">&quot;观众甲&quot;</span>));</span><br><span class="line">        <span class="built_in">this</span>.personElementList.add(<span class="keyword">new</span> <span class="title class_">Spectator</span>(<span class="string">&quot;观众乙&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Person person)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.personElementList.add(person);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Person <span class="title function_">remove</span><span class="params">(Person person)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.remove(person);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Operation operation, <span class="type">int</span> index)</span>&#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="built_in">this</span>.personElementList.get(index);</span><br><span class="line">        <span class="keyword">if</span>(person==<span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>();</span><br><span class="line">        person.accept(operation);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这边你可以继续继承操作来试试，我们先来测试下当前的效果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.visitor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.visitor.visitor.GradeOperation;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.visitor.visitor.RiseOperation;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.visitor.visitor.WeedOutOperation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VisitorMain</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ObjectStructure</span> <span class="variable">objectStructure</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectStructure</span>();</span><br><span class="line">        <span class="type">GradeOperation</span> <span class="variable">gradeOperation</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GradeOperation</span>();</span><br><span class="line">        <span class="type">WeedOutOperation</span> <span class="variable">weedOutOperation</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WeedOutOperation</span>();</span><br><span class="line">        <span class="type">RiseOperation</span> <span class="variable">riseOperation</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RiseOperation</span>();</span><br><span class="line"></span><br><span class="line">        objectStructure.accept(gradeOperation, <span class="number">0</span>);</span><br><span class="line">        objectStructure.accept(gradeOperation, <span class="number">1</span>);</span><br><span class="line">        objectStructure.accept(gradeOperation, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        objectStructure.accept(weedOutOperation, <span class="number">3</span>);</span><br><span class="line">        objectStructure.accept(riseOperation, <span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220220205427.png" alt="image-20220220205425208" /></p><blockquote><p>对于扩展：</p><p>新的操作：如果由新的操作的话，只需要继承访问者就可以完成快速扩展了</p><p>新的元素：对于新的元素，每个访问者都要进行修改。如果要频繁的改动元素，那么说明访问者模式不适用这种情况</p></blockquote><h3 id="16）迭代器模式">16）迭代器模式</h3><p>迭代器模式，在集合中常用它进行遍历。它提供了一种方法给你用顺序去访问里面的元素，而不暴露里面的具体存数逻辑。里面可能是数组、链表或者二叉树，这些在外部看来不重要的细节，将被迭代器隐藏。</p><p>那么它是怎么被使用的呢，我们先来看一个<code>Iterator</code>接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.function.Consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Iterator</span>&lt;E&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    E <span class="title function_">next</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>(<span class="string">&quot;remove&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">forEachRemaining</span><span class="params">(Consumer&lt;? <span class="built_in">super</span> E&gt; action)</span> &#123;</span><br><span class="line">        Objects.requireNonNull(action);</span><br><span class="line">        <span class="keyword">while</span> (hasNext())</span><br><span class="line">            action.accept(next());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接口定义的几个方法都很简单，我们主要实现这个接口，为一段元素创造一个迭代器，从而可以实现自己的迭代逻辑。</p><p>这边我举例书架上的书，我们将对书架上的书进行遍历。</p><p>先来看看迭代器模式中的一个成员角色吧</p><ul class="lvl-0"><li class="lvl-2"><p><b>元素（Element）</b>：迭代器中的元素，对应上面例子就是书</p></li><li class="lvl-2"><p><b>迭代器接口（Iterator）</b>：迭代器接口，我们使用jdk中的这个就好</p><ul class="lvl-2"><li class="lvl-4"><b>迭代器实现类（IteratorImpl）</b>：对应上面元素，每一个元素都应该有自己的迭代器接口实现类</li></ul></li><li class="lvl-2"><p><b>总计接口（Aggregate）</b>：一个总计的接口，里面将要有一系列元素的集合，不管这个集合你是怎么实现的。并且这个接口定义了<code>createIterator</code>方法，通过这个方法我们可以去创建对应的迭代器</p><ul class="lvl-2"><li class="lvl-4"><b>总计实现</b>：实现类，对应上面例子就应该是书架，管理着书本。</li></ul></li></ul><p>我们先来个书本类，以及它具体的书本迭代器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;《&quot;</span> + name + <span class="string">&quot;》&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookIterator</span> <span class="keyword">implements</span> <span class="title class_">Iterator</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Book&gt; bookList;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> index;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BookIterator</span><span class="params">(List&lt;Book&gt; bookList)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(bookList, -<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookList!=<span class="literal">null</span> &amp;&amp; bookList.size()&gt;index+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookList.get(++index);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义一下<code>Aggregate</code>接口，它将是书架类的一个接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Aggregate</span> &#123;</span><br><span class="line"></span><br><span class="line">    Iterator <span class="title function_">createIterator</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再来一个书架类，这里我们简单点，直接用<code>List</code>集合，真实的情况可能是自己写的节点内部类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Bookshelf</span> <span class="keyword">implements</span> <span class="title class_">Aggregate</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Book&gt; bookList;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Bookshelf</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bookList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Iterator <span class="title function_">createIterator</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BookIterator</span>(bookList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单的迭代器就完成了，我们简单来测试一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IteratorMain</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Bookshelf</span> <span class="variable">bookshelf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bookshelf</span>();</span><br><span class="line">        bookshelf.add(<span class="keyword">new</span> <span class="title class_">Book</span>(<span class="string">&quot;Java从入门到入土&quot;</span>));</span><br><span class="line">        bookshelf.add(<span class="keyword">new</span> <span class="title class_">Book</span>(<span class="string">&quot;Java虚拟机&quot;</span>));</span><br><span class="line">        bookshelf.add(<span class="keyword">new</span> <span class="title class_">Book</span>(<span class="string">&quot;Java内存模型&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> bookshelf.createIterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220221223243.png" alt="image-20220221223239369" /></p><h3 id="17）观察者模式">17）观察者模式</h3><p>在现实生活中，我们常常会遇到一个对象改变从而影响其他对象的变化。这种类似于发布订阅的业务情况，我们可以使用观察者模式来进行解决。</p><p>简单举两个例子，</p><ul class="lvl-0"><li class="lvl-2"><p>Excel表格中的数据和它对应的图表</p></li><li class="lvl-2"><p>天气气象站和对应的天气网站</p></li></ul><p>观察者模式的特点是，一个对象与多个对象之间的联动，存在一对多的依赖关系，当这个对象有所改动，我们就该通知其他对象进行处理。所以，对应的几个角色关系是下面这样的</p><ul class="lvl-0"><li class="lvl-2"><p><b>抽象主题（Subject）</b>：指的是那一个对象的抽象接口，它提供了一个用于保存观察者对象的聚集类和增加、删除观察者对象的方法，以及通知所有观察者的抽象方法。</p><ul class="lvl-2"><li class="lvl-4"><b>具体主题（Concrete Subject）</b>：它将实现抽象目标中的通知方法，当具体主题的内部状态发生改变时，通知所有注册过的观察者对象。对应上面就是Excel中的数据</li></ul></li><li class="lvl-2"><p><b>抽象观察者（Observer）</b>：它包含了一个更新自己的抽象方法，当接到具体主题的更改通知时被调用。</p><ul class="lvl-2"><li class="lvl-4"><b>具体观察者（Concrete Observer）</b>：它将实现一个更新自己的一个操作方法，将在更改通知时被调用。对应上面例子就是Excel中的图表</li></ul></li></ul><p>用气象站和天气网站来进行举例，我们先写出两个接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.observer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Subject</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">addObserver</span><span class="params">(Observer observer)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">removeObserver</span><span class="params">(Observer observer)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">notifyAllObserver</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.observer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Observer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(<span class="type">int</span> temperature, <span class="type">int</span> pressure, <span class="type">int</span> humidity)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">showData</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>提供一个具体的气象站</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.observer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WeatherBureau</span> <span class="keyword">implements</span> <span class="title class_">Subject</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> temperature;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> pressure;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> humidity;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Observer&gt; observerList;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">WeatherBureau</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.observerList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setData</span><span class="params">(<span class="type">int</span> temperature, <span class="type">int</span> pressure, <span class="type">int</span> humidity)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;气象局天气数据更新&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.temperature = temperature;</span><br><span class="line">        <span class="built_in">this</span>.pressure = pressure;</span><br><span class="line">        <span class="built_in">this</span>.humidity = humidity;</span><br><span class="line">        <span class="comment">// 通知</span></span><br><span class="line">        notifyAllObserver();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addObserver</span><span class="params">(Observer observer)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.observerList.add(observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeObserver</span><span class="params">(Observer observer)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.observerList.remove(observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">notifyAllObserver</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;正在通知所有观察者&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.observerList.forEach(item -&gt; item.update(<span class="built_in">this</span>.temperature, <span class="built_in">this</span>.pressure, <span class="built_in">this</span>.humidity));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再来两个具体的观察者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.observer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.StrUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaiduWebsite</span> <span class="keyword">implements</span> <span class="title class_">Observer</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> temperature;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> pressure;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> humidity;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(<span class="type">int</span> temperature, <span class="type">int</span> pressure, <span class="type">int</span> humidity)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.temperature = temperature;</span><br><span class="line">        <span class="built_in">this</span>.pressure = pressure;</span><br><span class="line">        <span class="built_in">this</span>.humidity = humidity;</span><br><span class="line">        showData();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showData</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;********* 百度天气 *********&quot;</span>);</span><br><span class="line">        System.out.println(StrUtil.format(<span class="string">&quot;=== 温度：&#123;&#125; ===&quot;</span>, <span class="built_in">this</span>.temperature));</span><br><span class="line">        System.out.println(StrUtil.format(<span class="string">&quot;=== 气压：&#123;&#125; ===&quot;</span>, <span class="built_in">this</span>.pressure));</span><br><span class="line">        System.out.println(StrUtil.format(<span class="string">&quot;=== 湿度：&#123;&#125; ===&quot;</span>, <span class="built_in">this</span>.humidity));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.observer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.StrUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SinaWebsite</span> <span class="keyword">implements</span> <span class="title class_">Observer</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> temperature;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> pressure;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> humidity;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(<span class="type">int</span> temperature, <span class="type">int</span> pressure, <span class="type">int</span> humidity)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.temperature = temperature;</span><br><span class="line">        <span class="built_in">this</span>.pressure = pressure;</span><br><span class="line">        <span class="built_in">this</span>.humidity = humidity;</span><br><span class="line">        showData();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showData</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;========== 新浪天气 ==========&quot;</span>);</span><br><span class="line">        System.out.println(StrUtil.format(<span class="string">&quot;~~~ 温度：&#123;&#125; ~~~&quot;</span>, <span class="built_in">this</span>.temperature));</span><br><span class="line">        System.out.println(StrUtil.format(<span class="string">&quot;~~~ 气压：&#123;&#125; ~~~&quot;</span>, <span class="built_in">this</span>.pressure));</span><br><span class="line">        System.out.println(StrUtil.format(<span class="string">&quot;~~~ 湿度：&#123;&#125; ~~~&quot;</span>, <span class="built_in">this</span>.humidity));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写段代码来测试一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.observer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ObserverMain</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">WeatherBureau</span> <span class="variable">weatherBureau</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WeatherBureau</span>();</span><br><span class="line">        weatherBureau.addObserver(<span class="keyword">new</span> <span class="title class_">BaiduWebsite</span>());</span><br><span class="line">        weatherBureau.addObserver(<span class="keyword">new</span> <span class="title class_">SinaWebsite</span>());</span><br><span class="line"></span><br><span class="line">        weatherBureau.setData(<span class="number">15</span>, <span class="number">3</span>, <span class="number">6</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220222214858.png" alt="image-20220222214857116" /></p><blockquote><p>观察者模式的缺点，一定得注意</p><ul class="lvl-1"><li class="lvl-2">主题和观察者是通过抽象接口进行解耦，但没有完全解耦，所以可能会出现循环调用的情况，得注意。</li><li class="lvl-2">具体主题实现会有观察者的集合，当观察者过多时，通知会花费过大的时间，影响程序的效率</li></ul></blockquote><h3 id="18）中介模式">18）中介模式</h3><p>在生活中，我们常常会有需要中介的场景。如买房租房需要中介，国家间的贸易有了WTO组织进行贸易等等。中介模式就是这样，它将由一个中介类来管理一组对象，不让这些对象之间产生联系。</p><p>我们简单看看租房的这样一个例子吧，我想要找一个房子，距离地铁500米内，三楼，有阳台，且租金要少于2000元的租房。我只需要找中介就好，中介手里有好多这样的房子，如果需要一个一个的找房东，那不得麻烦死。</p><p>所以简单看看它们的角色</p><ul class="lvl-0"><li class="lvl-2"><p><b>抽象中介（Mediator）</b>：定义了同事类的注册以及转发同事对象信息的抽象方法。</p></li><li class="lvl-2"><p><b>具体中介（Concrete Mediator）</b>：实现中介者接口，定义一个集合来管理同事对象，用于协调调用具体同事对象。</p></li><li class="lvl-2"><p><b>抽象同事（Colleague）</b>：同事类抽象出来的方法，将自己注册到中介中管理，实现所有相互影响的同事类的公共功能。</p></li><li class="lvl-2"><p><b>具体同事（Concrete Colleague）</b>：具体的同事，里面有具体的属性及实现方法</p></li></ul><p>整活开始，先写一个房子类吧，里面有一些基本的信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.mediator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.StrUtil;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">House</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> floor;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> distance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> balcony;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> rent;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showInfo</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(StrUtil.format(<span class="string">&quot;租房信息【&#123;&#125;楼，距离地铁&#123;&#125;米，&#123;&#125;阳台，租金仅要&#123;&#125;元】&quot;</span>,</span><br><span class="line">                floor, distance, balcony? <span class="string">&quot;有&quot;</span>: <span class="string">&quot;没有&quot;</span>, rent));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再写出抽象层，抽象中介和抽象同事</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.mediator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractLandlord</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Mediator mediator;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;House&gt; houseList;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AbstractLandlord</span><span class="params">(String name, Mediator mediator)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.mediator = mediator;</span><br><span class="line">        <span class="built_in">this</span>.houseList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="built_in">this</span>.mediator.register(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">sendMessage</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.mediator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Mediator</span> &#123;</span><br><span class="line"></span><br><span class="line">    List&lt;AbstractLandlord&gt; landlordList;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Mediator</span><span class="params">()</span> &#123;</span><br><span class="line">        landlordList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">register</span><span class="params">(AbstractLandlord landlord)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.landlordList.add(landlord);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">getMessage</span><span class="params">(AbstractLandlord landlord, <span class="type">int</span> type)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">abstract</span> House <span class="title function_">findHouse</span><span class="params">(<span class="type">int</span> floor, <span class="type">int</span> distance, <span class="type">boolean</span> balcony, <span class="type">int</span> rent)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写出房东的两个具体同事类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.mediator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GoodLandlord</span> <span class="keyword">extends</span> <span class="title class_">AbstractLandlord</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">GoodLandlord</span><span class="params">(String name, Mediator mediator, House... houses)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name, mediator);</span><br><span class="line">        <span class="built_in">super</span>.setHouseList(Arrays.asList(houses));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">sendMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        getMediator().getMessage(<span class="built_in">this</span>, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.mediator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BadLandlord</span> <span class="keyword">extends</span> <span class="title class_">AbstractLandlord</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BadLandlord</span><span class="params">(String name, Mediator mediator, House... houses)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name, mediator);</span><br><span class="line">        <span class="built_in">super</span>.setHouseList(Arrays.asList(houses));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">sendMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Mediator</span> <span class="variable">mediator</span> <span class="operator">=</span> getMediator();</span><br><span class="line">        mediator.getMessage(<span class="built_in">this</span>, <span class="number">1</span>);</span><br><span class="line">        mediator.getMessage(<span class="built_in">this</span>, <span class="number">2</span>);</span><br><span class="line">        mediator.getMessage(<span class="built_in">this</span>, <span class="number">3</span>);</span><br><span class="line">        mediator.getMessage(<span class="built_in">this</span>, <span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>中介要有一个具体的中介</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.mediator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Optional;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcreteMediator</span> <span class="keyword">extends</span> <span class="title class_">Mediator</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">getMessage</span><span class="params">(AbstractLandlord landlord, <span class="type">int</span> type)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(type==<span class="number">1</span>)</span><br><span class="line">            showHouseInfo(landlord);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            System.out.println(landlord.getName() + <span class="string">&quot;，你TM哪来的这么多要求&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> House <span class="title function_">findHouse</span><span class="params">(<span class="type">int</span> floor, <span class="type">int</span> distance, <span class="type">boolean</span> balcony, <span class="type">int</span> rent)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (AbstractLandlord landlord : getLandlordList()) &#123;</span><br><span class="line">            List&lt;House&gt; houseList = landlord.getHouseList();</span><br><span class="line">            Optional&lt;House&gt; first = houseList.stream().filter(house -&gt; house.getFloor() == floor</span><br><span class="line">                    &amp;&amp; house.getDistance() &lt;= distance</span><br><span class="line">                    &amp;&amp; house.isBalcony() == balcony</span><br><span class="line">                    &amp;&amp; house.getRent() &lt;= rent).findFirst();</span><br><span class="line">            <span class="keyword">if</span>(first.isPresent())</span><br><span class="line">                <span class="keyword">return</span> first.get();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">showHouseInfo</span><span class="params">(AbstractLandlord landlord)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;========== &quot;</span>+ landlord.getName() +<span class="string">&quot;的房子 ==========&quot;</span>);</span><br><span class="line">        List&lt;House&gt; houses = landlord.getHouseList();</span><br><span class="line">        houses.forEach(House::showInfo);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>万事俱备，只差调用，写段代码来测试一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.mediator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MediatorMain</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ConcreteMediator</span> <span class="variable">mediator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConcreteMediator</span>();</span><br><span class="line">        <span class="type">GoodLandlord</span> <span class="variable">goodLandlord</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GoodLandlord</span>(<span class="string">&quot;李四&quot;</span>, mediator,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">House</span>(<span class="number">3</span>, <span class="number">500</span>, <span class="literal">true</span>, <span class="number">1800</span>),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">House</span>(<span class="number">6</span>, <span class="number">500</span>, <span class="literal">true</span>, <span class="number">2000</span>));</span><br><span class="line">        <span class="type">BadLandlord</span> <span class="variable">badLandlord</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadLandlord</span>(<span class="string">&quot;李四&quot;</span>, mediator,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">House</span>(<span class="number">3</span>, <span class="number">800</span>, <span class="literal">false</span>, <span class="number">2000</span>),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">House</span>(<span class="number">6</span>, <span class="number">800</span>, <span class="literal">true</span>, <span class="number">2200</span>));</span><br><span class="line"></span><br><span class="line">        goodLandlord.sendMessage();</span><br><span class="line">        badLandlord.sendMessage();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;============== 分割线 ==============&quot;</span>);</span><br><span class="line">        <span class="comment">// 找一个距离地铁500米内，三楼，有阳台，且租金要少于2000元的租房</span></span><br><span class="line">        <span class="type">House</span> <span class="variable">house</span> <span class="operator">=</span> mediator.findHouse(<span class="number">3</span>, <span class="number">500</span>, <span class="literal">true</span>, <span class="number">2000</span>);</span><br><span class="line">        <span class="keyword">if</span>(house!=<span class="literal">null</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;找到了&quot;</span>);</span><br><span class="line">            house.showInfo();</span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">            System.out.println(<span class="string">&quot;可惜没有找到&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220223220652.png" alt="image-20220223220651200" /></p><blockquote><p>中介模式和外观模式的区别，它们两个真的好像</p><ul class="lvl-1"><li class="lvl-2">中介模式：这几个同事类互相纠缠，互相调用，中介模式强调对它们进行解耦，都来找我吧。<ul class="lvl-3"><li class="lvl-4">上面例子不是特别好，用户和房东应该是同事类，用户去找中介应该是找房子，房东去找中介应该是放出房子信息</li><li class="lvl-4">如果电脑cpu，内存，主板，电源等要改成中介模式，那就是cpu，内存启动需要电源提供的电量，通过主板中介进行中转电量，嗯这样才对。</li></ul></li><li class="lvl-2">外观模式：外观模式强调的是对外提供统一的接口</li></ul></blockquote><h3 id="19）备忘录模式">19）备忘录模式</h3><p>在现实中，我们做错了事，那这件事就会一直存在，伴随着我们的一生。但在程序的世界中，我们并不是这样。</p><ul class="lvl-0"><li class="lvl-2"><p><code>ctrl+c</code>撤销上一步操作</p></li><li class="lvl-2"><p>单机游戏的存档功能点</p></li></ul><p>那么如此一个，可以支持撤销，回退到以前的状态的程序该如何进行设计呢。前人为我们总结出了备忘录模式。</p><p>备忘录模式：在不破坏对象的封装性的前提下，捕获一个对象的内部状态，并在对象之外保存这个状态。这样一来随时可以将对象恢复到原先保存的状态。备忘录模式常常与原型模式一同使用。</p><p>我们简单看看这个例子，即将挑战Boss的主角有三个属性，生命、攻击和防御。在进行挑战时，主角随时会有阵亡，而且还有其他的减攻击力和防御力的debuff效果。在挑战Boss前，将备份存档，如果主角出现意外，我们将恢复他的存档。</p><p>根据上面例子，看看备忘录模式需要哪些类进行完成</p><ul class="lvl-0"><li class="lvl-2"><p><b>发起人（Originator）</b>：记录当前时刻的内部状态信息，提供创建备忘录和恢复备忘录数据的功能，实现其他业务功能，它可以访问备忘录里的所有信息。<mark>此角色将会有生命、攻击、防御三个属性</mark></p></li><li class="lvl-2"><p><b>备忘录（Memento）</b>：负责存储发起人的内部状态，在需要的时候提供这些内部状态给发起人。<mark>此角色会保存住发起人需要保存的属性</mark></p></li><li class="lvl-2"><p><b>管理者（Caretaker）</b>：对备忘录进行管理，提供保存与获取备忘录的功能，但其不能对备忘录的内容进行访问与修改。里面保存着每一个存档位，也就是备忘录</p></li></ul><p>根据上面角色，我们先写出有三个属性的发起人，它有生成备忘录和读取备忘录的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.memento;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.StrUtil;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Originator</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> hp;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> atk;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> def;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Memento <span class="title function_">createMemento</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Memento</span>(hp, atk, def);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showCurrentStatus</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(StrUtil.format(<span class="string">&quot;血量：&#123;&#125;，攻击力：&#123;&#125;，防御力：&#123;&#125;&quot;</span>, hp, atk, def));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">restoreMemento</span><span class="params">(Memento m)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.setHp(m.getHp());</span><br><span class="line">        <span class="built_in">this</span>.setAtk(m.getAtk());</span><br><span class="line">        <span class="built_in">this</span>.setDef(m.getDef());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>备忘录，里面保存着发起人需要保存的属性信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.memento;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Memento</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> hp;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> atk;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> def;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>管理者，当然是备忘录的管理者啦，里面用数组管理者备忘录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.memento;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Caretaker</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Memento[] mementoArr = <span class="keyword">new</span> <span class="title class_">Memento</span>[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setMemento</span><span class="params">(<span class="type">int</span> i, Memento memento)</span>&#123;</span><br><span class="line">        mementoArr[i] = memento;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Memento <span class="title function_">getMemento</span><span class="params">(<span class="type">int</span> i)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mementoArr[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好了，来测试一下吧</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.memento;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MementoMain</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Originator</span> <span class="variable">originator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Originator</span>(<span class="number">5000</span>, <span class="number">1226</span>, <span class="number">888</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;即将挑战Boss，先进行存档&quot;</span>);</span><br><span class="line">        Caretaker.setMemento(<span class="number">0</span>, originator.createMemento());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;======= 挑战boss中 =======&quot;</span>);</span><br><span class="line">        originator.setHp(originator.getHp()/<span class="number">2</span>);</span><br><span class="line">        originator.setAtk((<span class="type">int</span>)(originator.getAtk()*<span class="number">1.5</span>));</span><br><span class="line">        originator.showCurrentStatus();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;======= 挑战boss中，我还能坚持 =======&quot;</span>);</span><br><span class="line">        originator.setHp(originator.getHp()/<span class="number">2</span>);</span><br><span class="line">        originator.setAtk(originator.getAtk()/<span class="number">5</span>);</span><br><span class="line">        originator.showCurrentStatus();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;======= 挑战boss中，有点难度，再存个档 =======&quot;</span>);</span><br><span class="line">        Caretaker.setMemento(<span class="number">1</span>, originator.createMemento());</span><br><span class="line">        originator.setHp(originator.getHp()/<span class="number">2</span>);</span><br><span class="line">        originator.setDef(originator.getDef()/<span class="number">5</span>);</span><br><span class="line">        originator.showCurrentStatus();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;======= 挑战boss中，不行啦，抓紧读档 =======&quot;</span>);</span><br><span class="line">        originator.restoreMemento(Caretaker.getMemento(<span class="number">0</span>));</span><br><span class="line">        originator.showCurrentStatus();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220224220116.png" alt="image-20220224220114715" /></p><h3 id="20）解释器模式">20）解释器模式</h3><p>解释器模式实现了一个表达式接口，该接口解释一个特定的上下文。这种模式被用在 SQL 解析、符号处理引擎、正则表达等。在平常项目中的使用不是特别大。</p><p>给定一个表达式，定义它的各种解释器。一般来说都有一个抽象的解释器，而它的子类会有许多实现，对每一个符号都有一个对应的解释器子类。</p><p>例如输入：<code>a+b-c</code></p><ul class="lvl-0"><li class="lvl-2"><p><b>AbstractExpression</b>：抽象的解释器，声明了一个解释方法</p></li><li class="lvl-2"><p><b>TerminalExpression</b>：终结符解释器，会继承抽象解释器，实现表达式中最后终止的一个解释操作</p></li><li class="lvl-2"><p><b>NoTerminalExpression</b>：非终结符解释器，同样会继承抽象解释器，实现表示式中的一个解释操作</p></li><li class="lvl-2"><p><b>Context</b>：上下文环境，在这个环境中，我们将整合上面的表达式和它对应的每个解释器，以及一个解释的入口</p></li></ul><p>首先，一个顶级的抽象解释器，它定义了一个解释方法。这个解释方法的入参是具体的值<code>map</code>，假如表达式是<code>a+b</code>，那么这里将传入<code>&#123;a: 10, b: 20&#125;</code>这样的一个<code>map</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.interpreter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 抽象解释器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Expression</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解释方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">int</span> <span class="title function_">interpreter</span><span class="params">(Map&lt;String, Integer&gt; map)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再来一个值解释器，这是一个具体的解释器，用来解释表达式中的数字占位如表达式为<code>a+b</code>，它将解释<code>a</code>和<code>b</code>，将从<code>map</code>中将取出对应的数字值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.interpreter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 值解释器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ValueExpression</span> <span class="keyword">extends</span> <span class="title class_">Expression</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String key;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ValueExpression</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.key = key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 值解释器，将对应的值返回</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">interpreter</span><span class="params">(Map&lt;String, Integer&gt; map)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> map.get(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>有了值解释器还不够，我们还要定义符号的解释器，准确来说是左右形式的符号解释器。</p><p>这个符号解释器是个抽象类，定义了左边的解释器和右边的解释器，在使用时将会传入值解释器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.interpreter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 符号解释器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">SymbolExpression</span> <span class="keyword">extends</span> <span class="title class_">Expression</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Expression left;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Expression right;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SymbolExpression</span><span class="params">(Expression left, Expression right)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.left = left;</span><br><span class="line">        <span class="built_in">this</span>.right = right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">int</span> <span class="title function_">interpreter</span><span class="params">(Map&lt;String, Integer&gt; map)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加法解释器，继承于符号解释器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.interpreter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AddExpression</span> <span class="keyword">extends</span> <span class="title class_">SymbolExpression</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AddExpression</span><span class="params">(Expression left, Expression right)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(left, right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">interpreter</span><span class="params">(Map&lt;String, Integer&gt; map)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.getLeft().interpreter(map) + <span class="built_in">super</span>.getRight().interpreter(map);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>减法解释器，同样也是继承于符号解释器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.interpreter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SubtractExpression</span> <span class="keyword">extends</span> <span class="title class_">SymbolExpression</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SubtractExpression</span><span class="params">(Expression left, Expression right)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(left, right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">interpreter</span><span class="params">(Map&lt;String, Integer&gt; map)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.getLeft().interpreter(map) - <span class="built_in">super</span>.getRight().interpreter(map);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的几个解释器定义好了，如何使用？这时，我们将创建一个上下文环境的类来使用这些解释器。</p><p>上下文环境有点长，请耐心观看，必要时拉下来跑一跑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.interpreter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.convert.Convert;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.StrUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Context</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String expStr;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Expression expression;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造函数，输入表达式，对表达式进行分析，得出对应的解释器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> expStr</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Context</span><span class="params">(String expStr)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建栈，一会分析表达式</span></span><br><span class="line">        Stack&lt;Expression&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 分析表达式</span></span><br><span class="line">        <span class="type">char</span>[] charArr = expStr.toCharArray();</span><br><span class="line"></span><br><span class="line">        <span class="type">Expression</span> <span class="variable">left</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Expression</span> <span class="variable">right</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; charArr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">switch</span> (charArr[i])&#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">                    left = stack.pop();</span><br><span class="line">                    right = <span class="keyword">new</span> <span class="title class_">ValueExpression</span>(StrUtil.toString(charArr[++i]));</span><br><span class="line">                    stack.push(<span class="keyword">new</span> <span class="title class_">AddExpression</span>(left, right));</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">                    left = stack.pop();</span><br><span class="line">                    right = <span class="keyword">new</span> <span class="title class_">ValueExpression</span>(StrUtil.toString(charArr[++i]));</span><br><span class="line">                    stack.push(<span class="keyword">new</span> <span class="title class_">SubtractExpression</span>(left, right));</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    stack.push(<span class="keyword">new</span> <span class="title class_">ValueExpression</span>(StrUtil.toString(charArr[i])));</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.expression = stack.pop();</span><br><span class="line">        <span class="built_in">this</span>.expStr = expStr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 进行计算</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">count</span><span class="params">(Map&lt;String, Integer&gt; map)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="built_in">this</span>.expression.interpreter(map);</span><br><span class="line">        System.out.println(expStr + <span class="string">&quot;=&quot;</span> + result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 快速创建表达式上下文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Context <span class="title function_">createContext</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入表达式：&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">expStr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in)).readLine();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Context</span>(expStr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据当前的表单事，提供输入具体值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, Integer&gt; <span class="title function_">setValMap</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        HashMap&lt;String, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> ch : expStr.toCharArray()) &#123;</span><br><span class="line">            <span class="keyword">if</span>((ch&gt;=<span class="string">&#x27;a&#x27;</span> &amp;&amp; ch&lt;=<span class="string">&#x27;z&#x27;</span>) || (ch&gt;=<span class="string">&#x27;A&#x27;</span> &amp;&amp; ch&lt;=<span class="string">&#x27;Z&#x27;</span>))&#123;</span><br><span class="line">                System.out.print(StrUtil.format(<span class="string">&quot;请输入&#123;&#125;的值：&quot;</span>, ch));</span><br><span class="line">                <span class="type">String</span> <span class="variable">number</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in)).readLine();</span><br><span class="line">                map.put(StrUtil.toString(ch), Convert.toInt(number, <span class="number">0</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>事不宜迟，写段代码来测试一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.interpreter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExpressionMain</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Context</span> <span class="variable">context</span> <span class="operator">=</span> Context.createContext();</span><br><span class="line">        Map&lt;String, Integer&gt; valMap = context.setValMap();</span><br><span class="line">        context.count(valMap);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过控制台写入表达式<code>a+b</code>，输入值<code>&#123;a: 10, b: 30&#125;</code>，查看结果</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220303212028.png" alt="image-20220303212025761" /></p><p>再来测试下减法，输入表达式<code>a+b-c</code>，输入值<code>&#123;a: 10, b: 10, c: 5&#125;</code></p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220303212154.png" alt="image-20220303212152634" /></p><p>好的完成，个人认为这个一个最难的设计模式。它和表达式的解析概念高度融合，好在我们平常没有什么解析的需求存在。</p><h3 id="21）状态模式">21）状态模式</h3><p>在软件开发中，常常有对象有着不同的状态，而这些不同的状态往往会让对象执行不同的方法，如果使用<code>if</code>来判断的话。喂，这是谁写的代码，查看历史提交，好的吧，半年前的我。现在我可以使用状态模式来对这对象作出优化。</p><p>在现实生活中，人们常常会有各种状态，心情好心情差，兴奋度高或者兴奋度低之类的，有些事情只有你在特性的心情状态下才会去进行的。这种情况，我们就可以使用状态模式。</p><p>再比如游戏中，吃药，复活，探险是三个操作，而血量的状态却有满血、半血、空血等。</p><ul class="lvl-0"><li class="lvl-2"><p>只有在半血的时候才能吃药</p></li><li class="lvl-2"><p>只有不是空血状态的时候，才能进行探险</p></li><li class="lvl-2"><p>只有在空血的时候，才能进行复活</p></li></ul><p>好的，上面的关系已经罗列出来了，来看看状态模式对这种情况会如何划分角色</p><ul class="lvl-0"><li class="lvl-2"><p><b>状态抽象类（State）</b>：状态的抽象层，这里定义了一些操作，将由具体的实现类去实现</p><ul class="lvl-2"><li class="lvl-4"><b>具体状态类（ConcreteState）</b>：具体的状态，它实现了上层抽象状态的一些操作方法</li></ul></li><li class="lvl-2"><p><b>环境（Context）</b>：上下文环境，这个对象将持有状态，对状态进行更变。</p></li></ul><p>首先，状态抽象类先出，没什么问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.state;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"><span class="keyword">import</span> lombok.Setter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractState</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> hp;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AbstractState</span><span class="params">(<span class="type">int</span> hp)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.hp = hp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">takeMedicine</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">resurrect</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">adventure</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写出它的三个状态子类，注意这里关联了一个上下文环境类，也就是<code>Person</code>类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.state;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 空血状态</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NoHpState</span> <span class="keyword">extends</span> <span class="title class_">AbstractState</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Person person;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">NoHpState</span><span class="params">(Person person)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">this</span>.person = person;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">takeMedicine</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;阵亡啦，当前状态不能吃药，快去复活&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">resurrect</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;正在返回出生点，请稍后&quot;</span>);</span><br><span class="line">        person.setState(<span class="keyword">new</span> <span class="title class_">FullHpState</span>(person));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">adventure</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;阵亡啦，当前状态不能探险，快去复活&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">package com.<span class="property">banmoon</span>.<span class="property">state</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 满血状态</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">public <span class="keyword">class</span> <span class="title class_">FullHpState</span> <span class="keyword">extends</span> <span class="title class_ inherited__">AbstractState</span>&#123;</span><br><span class="line"></span><br><span class="line">    private <span class="title class_">Person</span> person;</span><br><span class="line"></span><br><span class="line">    public <span class="title class_">FullHpState</span>(<span class="title class_">Person</span> person) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(<span class="number">100</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">person</span> = person;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @<span class="title class_">Override</span></span><br><span class="line">    public <span class="keyword">void</span> <span class="title function_">takeMedicine</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(<span class="string">&quot;满血不能吃药&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @<span class="title class_">Override</span></span><br><span class="line">    public <span class="keyword">void</span> <span class="title function_">resurrect</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(<span class="string">&quot;还活着，你复活啥?&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @<span class="title class_">Override</span></span><br><span class="line">    public <span class="keyword">void</span> <span class="title function_">adventure</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title class_">Person</span>.<span class="title function_">adventure</span>(person);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.state;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 半血状态</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HalfHpState</span> <span class="keyword">extends</span> <span class="title class_">AbstractState</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Person person;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HalfHpState</span><span class="params">(Person person, <span class="type">int</span> hp)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(hp);</span><br><span class="line">        <span class="built_in">this</span>.person = person;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">takeMedicine</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;快吃药~&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="built_in">super</span>.getHp() + <span class="number">30</span>;</span><br><span class="line">        <span class="keyword">if</span>(i&gt;=<span class="number">100</span>)&#123;</span><br><span class="line">            person.setState(<span class="keyword">new</span> <span class="title class_">FullHpState</span>(person));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">resurrect</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;还活着，你复活啥?&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">adventure</span><span class="params">()</span> &#123;</span><br><span class="line">        Person.adventure(person);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateHp</span><span class="params">(<span class="type">int</span> hp)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.setHp(hp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面有关联的<code>Person</code>类再补上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.state;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"><span class="keyword">import</span> lombok.Setter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AbstractState state;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">        state = <span class="keyword">new</span> <span class="title class_">FullHpState</span>(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">takeMedicine</span><span class="params">()</span>&#123;</span><br><span class="line">        state.takeMedicine();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">resurrect</span><span class="params">()</span>&#123;</span><br><span class="line">        state.resurrect();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">adventure</span><span class="params">()</span>&#123;</span><br><span class="line">        state.adventure();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">adventure</span><span class="params">(Person person)</span>&#123;</span><br><span class="line">        <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;正在探险中~~~&quot;</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">hp</span> <span class="operator">=</span> person.getState().getHp() - random.nextInt(<span class="number">40</span>);</span><br><span class="line">            <span class="keyword">if</span>(hp&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;已阵亡，停止探险&quot;</span>);</span><br><span class="line">                person.setState(<span class="keyword">new</span> <span class="title class_">NoHpState</span>(person));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(hp&lt;<span class="number">100</span>)&#123;</span><br><span class="line">                <span class="type">AbstractState</span> <span class="variable">state</span> <span class="operator">=</span> person.getState();</span><br><span class="line">                <span class="keyword">if</span>(state <span class="keyword">instanceof</span> FullHpState)&#123;</span><br><span class="line">                    person.setState(<span class="keyword">new</span> <span class="title class_">HalfHpState</span>(person, hp));</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(state <span class="keyword">instanceof</span> HalfHpState)&#123;</span><br><span class="line">                    ((HalfHpState) state).updateHp(hp);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样基本的就写完了，简单来测试一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.state;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StateMain</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        <span class="comment">// 试试吃药</span></span><br><span class="line">        person.takeMedicine();</span><br><span class="line">        <span class="comment">// 试试复活</span></span><br><span class="line">        person.resurrect();</span><br><span class="line">        <span class="comment">// 试试探险</span></span><br><span class="line">        person.adventure();</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;========= 分割线 =========&quot;</span>);</span><br><span class="line">        <span class="comment">// 试试吃药</span></span><br><span class="line">        person.takeMedicine();</span><br><span class="line">        <span class="comment">// 试试复活</span></span><br><span class="line">        person.resurrect();</span><br><span class="line">        <span class="comment">// 试试探险</span></span><br><span class="line">        person.adventure();</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;========= 分割线 =========&quot;</span>);</span><br><span class="line">        <span class="comment">// 试试吃药</span></span><br><span class="line">        person.takeMedicine();</span><br><span class="line">        <span class="comment">// 试试复活</span></span><br><span class="line">        person.resurrect();</span><br><span class="line">        <span class="comment">// 试试探险</span></span><br><span class="line">        person.adventure();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220303230302.png" alt="image-20220303230301162" /></p><p>额，好像没有把<code>hp</code>打印出来，不能很直观的反应出状态。没事，效果也差不多。</p><h3 id="22）策略模式">22）策略模式</h3><p>在策略模式中，我们创建表示各种策略的对象和一个行为随着策略对象改变而改变的 context 对象。策略对象改变 context 对象的执行算法。</p><p>乍一听，什么都听不懂。诶，实际上它和我们的生活息息相关。</p><p>比如说，旅游的出行方式，我们可以选择坐高铁，可以选择坐飞机，这些不同的出行方式都是一种策略。</p><p>就根据上面的例子，查看下我们需要哪些角色</p><ul class="lvl-0"><li class="lvl-2"><p><b>策略接口（Strategy）</b>：策略接口，定义了一个该策略的执行类</p><ul class="lvl-2"><li class="lvl-4"><b>具体策略（ConcreteStrategy）</b>：具体策略，每一个具体的出行方式</li></ul></li><li class="lvl-2"><p><b>上下文环境（Context）</b>：此上下文环境将会聚合策略</p></li></ul><p>话不多说，直接先来一个策略接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.strategy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Strategy</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">trip</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>高铁策略</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.strategy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GTrainStrategy</span> <span class="keyword">implements</span> <span class="title class_">Strategy</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">trip</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;高铁出行，就是快&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>飞机策略</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.strategy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AirplaneStrategy</span> <span class="keyword">implements</span> <span class="title class_">Strategy</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">trip</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;飞机出行，我看行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上下文环境，本次为<code>Person</code>，聚合了一个策略</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.strategy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Strategy strategy;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(Strategy strategy)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.strategy = strategy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">travel</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;去旅行啦&quot;</span>);</span><br><span class="line">        packing();</span><br><span class="line">        strategy.trip();</span><br><span class="line">        play();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">packing</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;正在收拾行李&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">play</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;玩得好开心，旅游真好&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写个客户端来测试一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.strategy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StrategyMain</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="keyword">new</span> <span class="title class_">AirplaneStrategy</span>());</span><br><span class="line">        person.travel();</span><br><span class="line">        System.out.println(<span class="string">&quot;========== 分割线 ==========&quot;</span>);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="keyword">new</span> <span class="title class_">GTrainStrategy</span>());</span><br><span class="line">        person1.travel();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220305005754.png" alt="image-20220305005752380" /></p><p>策略模式在开发中特别常见，以前工作的时候做的一个小程序聊天，分别可以发送文字、图片、语音，这就是可以使用策略模式来进行优化。</p><p>再比如我这个博客后台系统，支持本地文件上传和OSS文件上传，这也是使用了策略模式。</p><h3 id="23）责任链模式">23）责任链模式</h3><p>在生活中，我们常常会遇到踢皮球的现象，到一个部门处理说这不是我负责了，踢到了另一个部门，其他部门也是如此。有些部门确实是没有处理事件的能力，但有些部门就是怕承担责任，秉着多一事不如少一事的原则，把我们当做皮球来回踢。搞得我们身心俱疲，想骂而又没有力气。</p><p>在程序中，我们为了避免这种事情的发生，客户端不需要清楚的知道该找谁，只需要将问题请求出去，处理类会进行处理，如果自己真的处理不了，那将会将请求丢给下一个处理类处理。而这是处理类内部责任划分，客户端是无感知的。</p><p>那么来举个例子，就比如说学生请假，<code>x</code>为请假天数</p><ul class="lvl-0"><li class="lvl-2"><p><code>1&lt;=x&lt;=2</code>：班主任有权限，可以批准</p></li><li class="lvl-2"><p><code>2&lt;x&lt;=7</code>：系主任有权限，可以批准</p></li><li class="lvl-2"><p><code>7&lt;x&lt;=14</code>：副院长有权限，可以批准</p></li><li class="lvl-2"><p><code>14&lt;x</code>：只能由院长进行批准</p></li></ul><p>要在以前，我绝对写一大堆的<code>if...else...</code>，但现在有了责任链模式，可以很方便的进行处理。</p><p>先来过一遍，责任链中的角色有哪些</p><ul class="lvl-0"><li class="lvl-2"><p><b>抽象处理者（Handler）</b>：抽象类，定义了一个<code>handler</code>，表示责任链上下一个处理者，同时定义了一个处理的方法，将由子类去实现。</p></li><li class="lvl-2"><p><b>具体处理者（ConcreteHandler）</b>：抽象处理者的子类，实现了处理请求的方法。同时此处，责任链上下一个具体处理者也已经完成。</p></li><li class="lvl-2"><p><b>请求（Request）</b>：包含了请求的一些具体信息</p></li></ul><p>好的，我们先写出请求，包含了名字和请假天数两个属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.responsible;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeaveRequest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer number;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再写出一个抽象处理者，它主要持有一个责任链上下个处理者的对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.responsible;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Handler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Handler nextHandler;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">executeRequest</span><span class="params">(LeaveRequest request)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这一块我们倒着写，先写出院长，它不再有下一位处理者，所以为<code>null</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.responsible;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.StrUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dean</span> <span class="keyword">extends</span> <span class="title class_">Handler</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dean</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(<span class="string">&quot;院长&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">executeRequest</span><span class="params">(LeaveRequest request)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(request.getNumber()&gt;<span class="number">14</span>)</span><br><span class="line">            System.out.println(StrUtil.format(<span class="string">&quot;&#123;&#125;批准了&#123;&#125;同学的&#123;&#125;天请假条&quot;</span>, <span class="built_in">super</span>.getName(), request.getName(), request.getNumber()));</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            System.out.println(StrUtil.format(<span class="string">&quot;&#123;&#125;拒绝了&#123;&#125;同学的&#123;&#125;天请假&quot;</span>, <span class="built_in">super</span>.getName(), request.getName(), request.getNumber()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>副院长</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.responsible;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.StrUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VicePresident</span> <span class="keyword">extends</span> <span class="title class_">Handler</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">VicePresident</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(<span class="string">&quot;副院长&quot;</span>, <span class="keyword">new</span> <span class="title class_">Dean</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">executeRequest</span><span class="params">(LeaveRequest request)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(request.getNumber()&lt;=<span class="number">14</span>)</span><br><span class="line">            System.out.println(StrUtil.format(<span class="string">&quot;&#123;&#125;批准了&#123;&#125;同学的&#123;&#125;天请假条&quot;</span>, <span class="built_in">super</span>.getName(), request.getName(), request.getNumber()));</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">super</span>.getNextHandler().executeRequest(request);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>系主任</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.responsible;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.StrUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DepartmentHead</span> <span class="keyword">extends</span> <span class="title class_">Handler</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DepartmentHead</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(<span class="string">&quot;系主任&quot;</span>, <span class="keyword">new</span> <span class="title class_">VicePresident</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">executeRequest</span><span class="params">(LeaveRequest request)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(request.getNumber()&lt;=<span class="number">7</span>)</span><br><span class="line">            System.out.println(StrUtil.format(<span class="string">&quot;&#123;&#125;批准了&#123;&#125;同学的&#123;&#125;天请假条&quot;</span>, <span class="built_in">super</span>.getName(), request.getName(), request.getNumber()));</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">super</span>.getNextHandler().executeRequest(request);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>班主任</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.responsible;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.StrUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClassAdviser</span> <span class="keyword">extends</span> <span class="title class_">Handler</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ClassAdviser</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(<span class="string">&quot;班主任&quot;</span>, <span class="keyword">new</span> <span class="title class_">DepartmentHead</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">executeRequest</span><span class="params">(LeaveRequest request)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(request.getNumber()&lt;=<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>();</span><br><span class="line">        <span class="keyword">if</span>(request.getNumber()&lt;=<span class="number">2</span>)</span><br><span class="line">            System.out.println(StrUtil.format(<span class="string">&quot;&#123;&#125;批准了&#123;&#125;同学的&#123;&#125;天请假条&quot;</span>, <span class="built_in">super</span>.getName(), request.getName(), request.getNumber()));</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">super</span>.getNextHandler().executeRequest(request);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>万事俱备，只差调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.responsible;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResponsibleMain</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">LeaveRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LeaveRequest</span>(<span class="string">&quot;半月&quot;</span>, <span class="number">15</span>);</span><br><span class="line">        <span class="type">LeaveRequest</span> <span class="variable">request1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LeaveRequest</span>(<span class="string">&quot;九月&quot;</span>, <span class="number">5</span>);</span><br><span class="line">        <span class="type">ClassAdviser</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassAdviser</span>();</span><br><span class="line">        handler.executeRequest(request);</span><br><span class="line">        handler.executeRequest(request1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220305105919.png" alt="image-20220305105917841" /></p><p>结果已经看到了，挺方便的一个模式。责任链模式被<code>springMVC</code>使用，就是拦截器。和本文示例有些差别，链路的顺序是由外部控制的，拦截器中优先级的设置。不像本章示例这样，在内部定死。</p><h2 id="六、最后想说的话">六、最后想说的话</h2><p>这些设计模式，以前只是零零散散的整理，但像这样一次性整理还是挺少的。也断断续续的从去年末整理到现在，不为别人而做的努力，只是让自己有个回顾的文章。</p><p>在程序方面，上面将的设计模式示例并不能生搬硬套解决问题，而是需要一定的融会贯通，将设计模式变种，融合来进行解决实际程序中的问题。</p><p>对比与框架中的源码，如果懂了设计模式，对于今后<mark>debug源码</mark>也会有很大的帮助。</p><p>本文参考：<a href="https://www.bilibili.com/video/BV1G4411c7N4?p=1">bilibili尚硅谷</a>、<a href="http://c.biancheng.net/view/1317.html">C语言编程网</a>、<a href="https://www.runoob.com/design-pattern/design-pattern-tutorial.html">菜鸟教程</a></p><p>想说的话就这些，与其共勉。</p><p>我是半月，祝你幸福！！！</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> demo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>apply、call、bind函数的区别</title>
      <link href="/archive/5c70b7cf/"/>
      <url>/archive/5c70b7cf/</url>
      
        <content type="html"><![CDATA[<h1>apply、call、bind函数的区别</h1><h2 id="一、前言">一、前言</h2><p>大多数人都知道，使用apply、call、bind可以调用函数，并改变函数中<code>this</code>的指向。</p><p>做一个简单记录，免得以后忘记了。</p><h2 id="二、apply">二、apply</h2><ul class="lvl-0"><li class="lvl-2"><p>使用：<code>函数.apply(obj, arg[])</code></p></li><li class="lvl-2"><p>参数：</p><ul class="lvl-2"><li class="lvl-4">第一个参数为函数中<code>this</code>指向的对象</li><li class="lvl-4">第二个参数是函数中原本的参数，由数组进行封装</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable constant_">JAVASCRIPT</span></span><br><span class="line"><span class="keyword">var</span> user = &#123;</span><br><span class="line">    <span class="attr">username</span>: <span class="string">&quot;半月无霜&quot;</span>,</span><br><span class="line">    <span class="attr">showInfo</span>: <span class="keyword">function</span>(<span class="params">age</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`名字：<span class="subst">$&#123;<span class="variable language_">this</span>.username&#125;</span>，年龄：<span class="subst">$&#123;age&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 普通调用</span></span><br><span class="line">user.<span class="title function_">showInfo</span>(<span class="number">18</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个其他对象，使用apply</span></span><br><span class="line"><span class="keyword">var</span> other = &#123;</span><br><span class="line">    <span class="attr">username</span>: <span class="string">&quot;九月&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">19</span></span><br><span class="line">&#125;</span><br><span class="line">user[<span class="string">&quot;showInfo&quot;</span>].<span class="title function_">apply</span>(other, [other.<span class="property">age</span>]);</span><br></pre></td></tr></table></figure><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220302130054.png" alt="" /></p><h2 id="三、call">三、call</h2><ul class="lvl-0"><li class="lvl-2"><p>使用：<code>函数.call(obj, args...)</code></p></li><li class="lvl-2"><p>参数：第一个参数为函数中<code>this</code>指向的对象，后面的参数跟着原本的函数就好，加在后面就行</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable constant_">JAVASCRIPT</span></span><br><span class="line"><span class="keyword">var</span> user = &#123;</span><br><span class="line">    <span class="attr">username</span>: <span class="string">&quot;半月无霜&quot;</span>,</span><br><span class="line">    <span class="attr">showInfo</span>: <span class="keyword">function</span>(<span class="params">age, sex</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`名字：<span class="subst">$&#123;<span class="variable language_">this</span>.username&#125;</span>，年龄：<span class="subst">$&#123;age&#125;</span>，性别：<span class="subst">$&#123;sex&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 普通调用</span></span><br><span class="line">user.<span class="title function_">showInfo</span>(<span class="number">18</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个其他对象，使用call</span></span><br><span class="line"><span class="keyword">var</span> other = &#123;</span><br><span class="line">    <span class="attr">username</span>: <span class="string">&quot;yooyeon&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">17</span>,</span><br><span class="line">    <span class="attr">sex</span>: <span class="string">&quot;女&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">user[<span class="string">&quot;showInfo&quot;</span>].<span class="title function_">call</span>(other, other.<span class="property">age</span>, other.<span class="property">sex</span>);</span><br></pre></td></tr></table></figure><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220302130809.png" alt="" /></p><h2 id="四、bind">四、bind</h2><p><code>bind</code>和前面两个有所不同，先看示例，一会再讲使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable constant_">JAVASCRIPT</span></span><br><span class="line"><span class="keyword">var</span> user = &#123;</span><br><span class="line">    <span class="attr">username</span>: <span class="string">&quot;半月无霜&quot;</span>,</span><br><span class="line">    <span class="attr">showInfo</span>: <span class="keyword">function</span>(<span class="params">age, sex</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`名字：<span class="subst">$&#123;<span class="variable language_">this</span>.username&#125;</span>，年龄：<span class="subst">$&#123;age&#125;</span>，性别：<span class="subst">$&#123;sex&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 普通调用</span></span><br><span class="line">user.<span class="title function_">showInfo</span>(<span class="number">18</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个其他对象，使用bind</span></span><br><span class="line"><span class="keyword">var</span> other = &#123;</span><br><span class="line">    <span class="attr">username</span>: <span class="string">&quot;yooyeon&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">17</span>,</span><br><span class="line">    <span class="attr">sex</span>: <span class="string">&quot;女&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 返回了一个改变了this指向的函数</span></span><br><span class="line"><span class="keyword">var</span> showInfo2 = user.<span class="property">showInfo</span>.<span class="title function_">bind</span>(other);</span><br><span class="line"><span class="title function_">showInfo2</span>(other.<span class="property">age</span>, other.<span class="property">sex</span>);</span><br></pre></td></tr></table></figure><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220302135153.png" alt="20220302135153.png (320×119) (aliyuncs.com)" /></p><p>可以看到，<code>bind</code>在使用的时候会返回一个改变<code>this</code>的新函数，使用需要重新调用这个新函数才行。</p><p>传参和<code>call</code>一致，在后面添加原函数的参数就可以</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable constant_">JAVASCRIPT</span></span><br><span class="line"><span class="comment">// 也可以这样写，效果是一样的</span></span><br><span class="line">user.<span class="property">showInfo</span>.<span class="title function_">bind</span>(other, other.<span class="property">age</span>, other.<span class="property">sex</span>)();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以这样</span></span><br><span class="line"><span class="keyword">var</span> showInfo2 = user.<span class="property">showInfo</span>.<span class="title function_">bind</span>(other, other.<span class="property">age</span>);</span><br><span class="line"><span class="title function_">showInfo2</span>(other.<span class="property">sex</span>);</span><br></pre></td></tr></table></figure><h2 id="五、总结">五、总结</h2><p>上面对比，总结一下<code>apply</code>、<code>call</code>、<code>bind</code>他们的异同点</p><ul class="lvl-0"><li class="lvl-2"><p>相同点：都可以改变函数中<code>this</code>的指向，且都将作为第一个参数进行使用</p></li><li class="lvl-2"><p>不同点（传参方面）</p><ul class="lvl-2"><li class="lvl-4">apply：在传入改变<code>this</code>的对象之后，将原来的函数参数，打包成一个数组进行传参</li><li class="lvl-4">call：在传入改变<code>this</code>的对象之后，依次传入原本的函数参数</li><li class="lvl-4">bind：由于特性，它的传参分为一次参数和二次传参，一次传参与<code>call</code>相同；二次传参首次传参与<code>call</code>类似，后一次调用传参补全原函数剩余的参数</li></ul></li><li class="lvl-2"><p>不同点（调用方面）</p><ul class="lvl-2"><li class="lvl-4">apply、call：<code>函数.apply()</code>或者<code>函数.call()</code>，即可发起调用</li><li class="lvl-4">bind：先返回一个改变指向的函数，再通过这个函数进行调用</li></ul></li></ul><p>我是半月，祝你幸福！！！</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>疯了！js中this到底指向什么？</title>
      <link href="/archive/fb54eff2/"/>
      <url>/archive/fb54eff2/</url>
      
        <content type="html"><![CDATA[<h1>疯了！js中this到底指向什么？</h1><h2 id="一、前言">一、前言</h2><p>前段时间，公司让我改一个界面，我心想改个界面还不简单吗？结果呃，我低估了这颗炸弹的威力。</p><p>好吧是我太菜，总结一下，这个<code>this</code>的指向问题。</p><h2 id="二、测试例子">二、测试例子</h2><p>首先说明一点。在js中，<code>this</code>的指向在<b>定义函数的时候是确定不了的</b>，只有在使用这个函数的时候才能确定<code>this</code>的指向。</p><p>一般来说在使用时，谁调用的这个函数，函数中的<code>this</code>就指向它。</p><h3 id="2-1）普通函数">2.1）普通函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> username = <span class="string">&quot;BANMOON&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> age = <span class="number">18</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">showInfo</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(username);<span class="comment">// BANMOON</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">username</span>);<span class="comment">// BANMOON</span></span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(age);<span class="comment">// 18</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">age</span>);<span class="comment">// undefined</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">showInfo</span>();</span><br><span class="line"><span class="comment">// window.showInfo();</span></span><br></pre></td></tr></table></figure><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220228170130.png" alt="image-20220228170121758" /></p><p>这里还涉及到<code>var</code>和<code>let</code>的区别，</p><ul class="lvl-0"><li class="lvl-2"><p><code>let</code>的作用域是在当前的代码块中，且它挂载的对象是<code>script</code>，而不是<code>window</code></p></li><li class="lvl-2"><p><code>var</code>的作用域是在全局，且挂载与window</p></li></ul><p>由于上面两个区别，所以可以看到直接运行普通函数，其中的<code>this</code>是指向<code>window</code>的。</p><p>你可以把11行放开，这是一样的效果</p><h3 id="2-2）对象函数">2.2）对象函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> me = &#123;</span><br><span class="line">    <span class="attr">username</span>: <span class="string">&quot;BANMOON&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="attr">showName</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">username</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">me.<span class="title function_">showName</span>();<span class="comment">// BANMOON</span></span><br></pre></td></tr></table></figure><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220228171048.png" alt="image-20220228171047113" /></p><p>好的，和上面的呈现了不一样的效果。对象中的函数，在运行时<code>this</code>指向了<code>me</code>这个对象。</p><p>我们可以再加点料</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> showName = me.<span class="property">showName</span>;</span><br><span class="line"><span class="title function_">showName</span>();<span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220228171426.png" alt="image-20220228171425765" /></p><p>这次又变成了<code>undefined</code>，我们现在再回去看看刚刚解释的那句话。</p><blockquote><p>在js中，<code>this</code>的指向在<b>定义函数的时候是确定不了的</b>，只有在使用这个函数的时候才能确定<code>this</code>的指向。</p></blockquote><p>这样，我稍微能理解点了，简单的来说就是谁调用的这个函数，函数里面的<code>this</code>就指向谁。</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220228172503.png" alt="image-20220228172502346" /></p><p>如果真的这么简单就好了，别急还有</p><h3 id="2-3）构造函数">2.3）构造函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Person</span> = <span class="keyword">function</span>(<span class="params">name, age</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">getName</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">getFirendName</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firend</span>.<span class="title function_">getName</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> me = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;BANMOON&quot;</span>, <span class="number">18</span>)</span><br><span class="line">    me.<span class="property">firend</span> = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;阿超&quot;</span>, <span class="number">18</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`我的名字：<span class="subst">$&#123;me.getName()&#125;</span>`</span>);<span class="comment">// BANMOON</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`朋友的名字：<span class="subst">$&#123;me.getFirendName()&#125;</span>`</span>);<span class="comment">// 阿超</span></span><br></pre></td></tr></table></figure><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220228173339.png" alt="image-20220228173338770" /></p><p>这里没有什么好说的，同样查看谁起调的函数就好了。谁调用的那个函数，函数中的<code>this</code>就指向它</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">User</span> = <span class="keyword">function</span>(<span class="params">username</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">username</span> = username;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">getName</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;阿超&quot;</span>, <span class="number">18</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> user = <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;BANMOON&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(user.<span class="title function_">getName</span>());<span class="comment">// 阿超</span></span><br></pre></td></tr></table></figure><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220228173806.png" alt="image-20220228173805575" /></p><p>这段代码，为什么又会变成阿超呢？主要是这段函数出现了返回值，它把<code>Person</code>对象返回了。</p><p>所以在外部看来，user是User这个函数创建的一个对象，但实际上已经被掉包成了<code>Person</code>的一个对象。所以这时候，<code>this</code>的真正指向就是返回的那个对象。</p><h3 id="2-4）setTimeout，apply等方法">2.4）setTimeout，apply等方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> username = <span class="string">&quot;九月&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> me = &#123;</span><br><span class="line">    <span class="attr">username</span>: <span class="string">&quot;BANMOON&quot;</span>,</span><br><span class="line">    <span class="attr">showName</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">username</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">me.<span class="title function_">showName</span>();<span class="comment">// BANMOON</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(me.<span class="property">showName</span>, <span class="number">0</span>);<span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220228224724.png" alt="image-20220228224723702" /></p><p>第八行大家都知道，适应上面的逻辑，没有什么问题。可就是这个第十行，怎么就输出了九月了呢。</p><p>为什么<code>this</code>会指向<code>window</code>，请注意第10行，传入的是一个函数，<code>me.showName</code>没有括号。如此，这段的解释就是，在<code>window</code>环境下启用这个定时器，将立刻执行<code>me.showName</code>这个函数。</p><p>由此来看，定时器启动的函数中的<code>this</code>都是指向与<code>window</code>。我们再来看这个</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> username = <span class="string">&quot;九月&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> me = &#123;</span><br><span class="line">    <span class="attr">username</span>: <span class="string">&quot;BANMOON&quot;</span>,</span><br><span class="line">    <span class="attr">showName</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">username</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">showName2</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="variable language_">this</span>.<span class="property">showName</span>, <span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">me.<span class="title function_">showName</span>();<span class="comment">// BANMOON</span></span><br><span class="line">me.<span class="title function_">showName2</span>();<span class="comment">// 九月</span></span><br></pre></td></tr></table></figure><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220228224724.png" alt="image-20220228224723702" /></p><p>如果一定要使用定时器，又不想它指向<code>window</code>，那该怎么办呢？</p><p><code>apply</code>，<code>call</code>，<code>bind</code>可以解决<code>this</code>指向的问题</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> username = <span class="string">&quot;九月&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> me = &#123;</span><br><span class="line">    <span class="attr">username</span>: <span class="string">&quot;BANMOON&quot;</span>,</span><br><span class="line">    <span class="attr">showName</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">username</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> showName = me.<span class="property">showName</span>;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    showName.<span class="title function_">apply</span>(me);</span><br><span class="line">&#125;, <span class="number">0</span>);<span class="comment">// BANMOON</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    showName.<span class="title function_">call</span>(me);</span><br><span class="line">&#125;, <span class="number">0</span>);<span class="comment">// BANMOON</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> show = showName.<span class="title function_">bind</span>(me);</span><br><span class="line">    <span class="title function_">show</span>();</span><br><span class="line">&#125;, <span class="number">0</span>);<span class="comment">// BANMOON</span></span><br></pre></td></tr></table></figure><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220228230641.png" alt="image-20220228230640516" /></p><p>关于他们的具体使用，本文不做详述。只是将<code>this</code>想指向的对象作为上面函数的参数即可。</p><h3 id="2-5）箭头函数">2.5）箭头函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> username = <span class="string">&quot;阿超&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> me = &#123;</span><br><span class="line">    <span class="attr">username</span>: <span class="string">&quot;BANMOON&quot;</span>,</span><br><span class="line">    <span class="attr">showName</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">username</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line">me.<span class="title function_">showName</span>();<span class="comment">// 阿超</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> aother = &#123;</span><br><span class="line">    <span class="attr">username</span>: <span class="string">&quot;BANMOON&quot;</span>,</span><br><span class="line">    <span class="attr">showName</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">username</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">aother.<span class="title function_">showName</span>();<span class="comment">// BANMOON</span></span><br></pre></td></tr></table></figure><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20220228231716.png" alt="image-20220228231715405" /></p><p>下面那个很好理解，<code>this</code>指向的就是<code>aother</code>。</p><p>那么上面的箭头函数该如何理解呢。其实是这样，箭头函数没有<code>this</code>，它的<code>this</code>来源于上一个，是继承于外面的环境。</p><p>所以<code>me.showName()</code>调用时，<code>me</code>不再生效，<code>this</code>将指向于<code>window</code></p><p>你说箭头函数套娃？那么遇到一个往上找一个环境，直到不是箭头函数为止。</p><h2 id="三、结语">三、结语</h2><p>上面的<code>this</code>指向，网上很有多，但我平常没有在意。用到的时候，发现储备不足。</p><p>就这样吧，我整理了一下，希望可以帮到自己。</p><p>我是半月，祝你们幸福！！！</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>经典排序算法</title>
      <link href="/archive/e60315ad/"/>
      <url>/archive/e60315ad/</url>
      
        <content type="html"><![CDATA[<h1>经典排序算法</h1><h2 id="一、介绍">一、介绍</h2><p>作为入门级基本算法，徒手写出是基本要求，下面列取几种基本的算法实现。</p><p>可以查看对应的<a href="http://tools.jb51.net/static/api/paixu_ys/index.html">动画演示</a>，可以更好的理解排序方法</p><h2 id="二、实现">二、实现</h2><h3 id="2-1）冒泡排序">2.1）冒泡排序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.algorithm.order;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 冒泡算法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo01</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[length];</span><br><span class="line">        <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; length; i++)</span><br><span class="line">            arr[i] = random.nextInt(length);</span><br><span class="line">        System.out.println(<span class="string">&quot;排序前的数组：&quot;</span> + Arrays.toString(arr));</span><br><span class="line">        <span class="type">int</span>[] sortArr = sort(arr);</span><br><span class="line">        System.out.println(<span class="string">&quot;排序后的数组：&quot;</span> + Arrays.toString(sortArr));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] sort(<span class="type">int</span>[] arr)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length-<span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i+<span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(arr[i]&gt;arr[j])&#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">                    arr[i] = arr[j];</span><br><span class="line">                    arr[j] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ol><li class="lvl-3"><p>比较相邻的元素。如果第一个比第二个大，就交换它们两个</p></li><li class="lvl-3"><p>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对，这样在最后的元素会是最大的数</p></li><li class="lvl-3"><p>针对所有的元素重复以上的步骤，除了最后一个</p></li><li class="lvl-3"><p>重复步骤1~3，直到排序完成</p></li></ol></blockquote><h3 id="2-2）快速排序">2.2）快速排序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.algorithm.order;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 快速排序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo02</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[length];</span><br><span class="line">        <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; length; i++)</span><br><span class="line">            arr[i] = random.nextInt(length);</span><br><span class="line">        System.out.println(<span class="string">&quot;排序前的数组：&quot;</span> + Arrays.toString(arr));</span><br><span class="line">        <span class="type">int</span>[] sortArr = sort(arr, <span class="number">0</span> , arr.length-<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;排序后的数组：&quot;</span> + Arrays.toString(sortArr));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span>[] sort(<span class="type">int</span>[] arr, <span class="type">int</span> start, <span class="type">int</span> end) &#123;</span><br><span class="line">        <span class="comment">// 在递归过程中，会传入只有一个元素的数组，也就是start和end相等，将不做排序处理</span></span><br><span class="line">        <span class="keyword">if</span>(start&lt;end)&#123;</span><br><span class="line">            <span class="comment">// 定义比较的标准数</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">standard</span> <span class="operator">=</span> arr[start];</span><br><span class="line">            <span class="comment">// 定义低位和高位的下标</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">low</span> <span class="operator">=</span> start;</span><br><span class="line">            <span class="type">int</span> <span class="variable">high</span> <span class="operator">=</span> end;</span><br><span class="line">            <span class="comment">// 循环让对应下标的值和标准数对比，进行迁移</span></span><br><span class="line">            <span class="keyword">while</span> (low&lt;high)&#123;</span><br><span class="line">                <span class="comment">// 先判断高位下标的数</span></span><br><span class="line">                <span class="keyword">while</span> (low&lt;high &amp;&amp; standard&lt;=arr[high])</span><br><span class="line">                    high--;</span><br><span class="line">                <span class="comment">// 将高位的值赋值给低位</span></span><br><span class="line">                arr[low] = arr[high];</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 再判断低位下标的数</span></span><br><span class="line">                <span class="keyword">while</span> (low&lt;high &amp;&amp; arr[low]&lt;=standard)</span><br><span class="line">                    low++;</span><br><span class="line">                arr[high] = arr[low];</span><br><span class="line">            &#125;</span><br><span class="line">            arr[low] = standard;</span><br><span class="line">            <span class="comment">// 将分割左边的数组，递归进行处理</span></span><br><span class="line">            sort(arr, start, low);</span><br><span class="line">            <span class="comment">// 将分割右边的数组，递归进行处理</span></span><br><span class="line">            sort(arr, low+<span class="number">1</span>, end);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ol><li class="lvl-3"><p>定义一个标准数，作为比较</p></li><li class="lvl-3"><p>将比这个标准数小的放在左边，比标准数大的放在右边</p></li><li class="lvl-3"><p>左边放一个下标会向后移动一位，右边放一个下标会向前移动一位，直到左右两边下标重合</p></li><li class="lvl-3"><p>会根据重合的下标，重新划分高位低位，进行递归，将重复1-3</p></li></ol></blockquote><h3 id="2-3）插入排序">2.3）插入排序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.algorithm.order;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 插入排序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo03</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[length];</span><br><span class="line">        <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; length; i++)</span><br><span class="line">            arr[i] = random.nextInt(length);</span><br><span class="line">        System.out.println(<span class="string">&quot;排序前的数组：&quot;</span> + Arrays.toString(arr));</span><br><span class="line">        <span class="type">int</span>[] sortArr = sort(arr);</span><br><span class="line">        System.out.println(<span class="string">&quot;排序后的数组：&quot;</span> + Arrays.toString(sortArr));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] sort(<span class="type">int</span>[] arr)&#123;</span><br><span class="line">        <span class="comment">// 从第二个元素开始向后遍历</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="comment">// 当前元素和前一个元素进行对比，如果当前元素小的话</span></span><br><span class="line">            <span class="keyword">if</span>(arr[i]&lt;arr[i-<span class="number">1</span>])&#123;</span><br><span class="line">                <span class="comment">// 则记录当前元素进行记录</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">                <span class="type">int</span> j;</span><br><span class="line">                <span class="comment">// 对当前元素下标前的元素进行遍历，如果前一个元素比当前元素大，则将前一个元素向后移动位置</span></span><br><span class="line">                <span class="keyword">for</span> (j = i-<span class="number">1</span>; j&gt;=<span class="number">0</span> &amp;&amp; temp&lt;arr[j]; j--) &#123;</span><br><span class="line">                    arr[j+<span class="number">1</span>] = arr[j];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 直到结束后，将移动的下标，赋值当前元素</span></span><br><span class="line">                arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ol><li class="lvl-3"><p>从第二个数开始向后遍历</p></li><li class="lvl-3"><p>每一个数都将向前遍历，根据自己的大小找到自己的位置</p></li></ol></blockquote><h3 id="2-4）希尔排序">2.4）希尔排序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.algorithm.order;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 希尔排序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo04</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[length];</span><br><span class="line">        <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; length; i++)</span><br><span class="line">            arr[i] = random.nextInt(length);</span><br><span class="line">        System.out.println(<span class="string">&quot;排序前的数组：&quot;</span> + Arrays.toString(arr));</span><br><span class="line">        <span class="type">int</span>[] sortArr = sort(arr);</span><br><span class="line">        System.out.println(<span class="string">&quot;排序后的数组：&quot;</span> + Arrays.toString(sortArr));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] sort(<span class="type">int</span>[] arr)&#123;</span><br><span class="line">        <span class="comment">// 定义步长</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">step</span> <span class="operator">=</span> arr.length/<span class="number">2</span>;</span><br><span class="line">        <span class="comment">// 遍历步长，直到为1后执行最后一次</span></span><br><span class="line">        <span class="keyword">while</span> (step&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">// 从步长开始，遍历数组后的元素</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> step; i &lt; arr.length; i++) &#123;</span><br><span class="line">                <span class="comment">// 遍历同组内的元素，通过步长，从后向前遍历</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i-step; j &gt;= <span class="number">0</span>; j-=step) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(arr[j]&gt;arr[j+step])&#123;</span><br><span class="line">                        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[j];</span><br><span class="line">                        arr[j] = arr[j+step];</span><br><span class="line">                        arr[j+step] = temp;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 对步长进行二分缩短</span></span><br><span class="line">            step /= <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>希尔排序是插入排序的升级版，如果一个很小的数出现在了最末的位置，那只是插入排序的效率将会大大降低。</p><p>希尔排序则是，通过步长，将元素化为同一组，让他们在同组中进行插入排序</p><ol><li class="lvl-3"><p>定义步长，初始步长为n/2，最后一次步长则为1</p></li><li class="lvl-3"><p>同插入排序一样，选择第二个元素，向前遍历找到他自己的位置。希尔排序这边同理，从步长位置开始，往前遍历步长个位置，找到他自己元素的位置</p></li><li class="lvl-3"><p>直到步长为1，进行最后一次插入逻辑后，完成排序</p></li></ol></blockquote><h3 id="2-5）选择排序">2.5）选择排序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.algorithm.order;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 选择排序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo05</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[length];</span><br><span class="line">        <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; length; i++)</span><br><span class="line">            arr[i] = random.nextInt(length);</span><br><span class="line">        System.out.println(<span class="string">&quot;排序前的数组：&quot;</span> + Arrays.toString(arr));</span><br><span class="line">        <span class="type">int</span>[] sortArr = sort(arr);</span><br><span class="line">        System.out.println(<span class="string">&quot;排序后的数组：&quot;</span> + Arrays.toString(sortArr));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] sort(<span class="type">int</span>[] arr)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length-<span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">tempIndex</span> <span class="operator">=</span> i;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i+<span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(arr[tempIndex]&gt;arr[j])</span><br><span class="line">                    tempIndex = j;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">            arr[i] = arr[tempIndex];</span><br><span class="line">            arr[tempIndex] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ol><li class="lvl-3"><p>从第0个开始向后遍历，每次初始默认自己是最小的，并记录下标</p></li><li class="lvl-3"><p>每一个元素，都会向后遍历，选择看看有没有比自己还要小的。如果有，覆盖下标</p></li><li class="lvl-3"><p>当步骤2走完，当前下标元素和最小下标元素进行替换</p></li><li class="lvl-3"><p>重复步骤1-3，玩成排序</p></li></ol><p>选择排序和冒泡排序的遍历有点像，但不同出现在选择是记录最小的小标，最后开始替换；冒泡则是每次比较后，都可能会进行一次替换，保证当前下标元素永远是最小的。</p></blockquote><h3 id="2-6）归并排序">2.6）归并排序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.algorithm.order;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 归并排序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo06</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[length];</span><br><span class="line">        <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; length; i++)</span><br><span class="line">            arr[i] = random.nextInt(length);</span><br><span class="line">        System.out.println(<span class="string">&quot;排序前的数组：&quot;</span> + Arrays.toString(arr));</span><br><span class="line">        <span class="type">int</span>[] sortArr = sort(arr, <span class="number">0</span>, arr.length-<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;排序后的数组：&quot;</span> + Arrays.toString(sortArr));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] sort(<span class="type">int</span>[] arr, <span class="type">int</span> start, <span class="type">int</span> end)&#123;</span><br><span class="line">        <span class="keyword">if</span>(start&lt;end)&#123;</span><br><span class="line">            <span class="comment">// 找到中间的下标</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (start +end)/<span class="number">2</span>;</span><br><span class="line">            <span class="comment">// 开始至中间，为一个数组，进行递归</span></span><br><span class="line">            sort(arr, start, mid);</span><br><span class="line">            <span class="comment">// 中间至结束，为一个数组，进行递归</span></span><br><span class="line">            sort(arr, mid+<span class="number">1</span>, end);</span><br><span class="line">            <span class="comment">// 归并两个左右两个数组</span></span><br><span class="line">            marge(arr, start, mid, end);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 归并排序</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> start 开始元素的下标</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mid   中间，左开右闭，</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> end   结束元素的下标</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">marge</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> start, <span class="type">int</span> mid, <span class="type">int</span> end)</span>&#123;</span><br><span class="line">        <span class="comment">// 需要创建一个新的数组容器</span></span><br><span class="line">        <span class="type">int</span>[] tempArr = <span class="keyword">new</span> <span class="title class_">int</span>[end-start+<span class="number">1</span>];</span><br><span class="line">        <span class="comment">// 定义下标</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start;</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> mid+<span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 定义容器的下标</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i&lt;=mid &amp;&amp; j&lt;=end)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i]&lt;=arr[j])&#123;</span><br><span class="line">                tempArr[index] = arr[i];</span><br><span class="line">                i++;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                tempArr[index] = arr[j];</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 查看还有哪部分没有遍历完</span></span><br><span class="line">        <span class="keyword">while</span> (i&lt;=mid)&#123;</span><br><span class="line">            tempArr[index] = arr[i];</span><br><span class="line">            i++;</span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (j&lt;=end)&#123;</span><br><span class="line">            tempArr[index] = arr[j];</span><br><span class="line">            j++;</span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 还要将排序好的临时容器中的数，放回到原数组中</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; tempArr.length; k++) &#123;</span><br><span class="line">            arr[start+k] = tempArr[k];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>归并排序的思想来自于，两个已经有序的数组进行有序合并。</p><p>如<code>[1, 3, 5, 7, 9]</code>和<code>[2, 4, 6, 8]</code>，将合并成<code>[1, 2, 3, 4, 5, 6, 7, 8, 9]</code></p><p>对上面两个数组进行有序合并很简单</p><ol><li class="lvl-3"><p>记录两个下标，左右两边的元素两两进行比较，谁小就谁先进入新数组；同时下标向后移动</p></li><li class="lvl-3"><p>直到一方下标移动完成，将另一方剩下的全部丢进新数组</p></li></ol><p>经过上面的步骤，合并排序完成。但是如果是只有一个数组，且数据都还不是有序的呢，那将如何进行排序呢。</p><ol start="3"><li class="lvl-3"><p>传入一个数组，只需要定义左下标，中间下标，右下标，就可以确定出两个数组了</p><ol><li class="lvl-6">左下标到中间下标的元素算作左数组</li><li class="lvl-6">中间下标+1到右下标的元素算作右数组</li></ol></li><li class="lvl-3"><p>当一个无序的数组，定义两边数组相关参数，向下递归。将它的左右数组缩小，最小为左右数组都只有一个元素时，进行上面步骤1-2有序合并</p></li><li class="lvl-3"><p>每一次递归，都可以看做将两个有序数组进行有序合并，而这次新合并出来的有序数组，将会作为上级调用者的左右有序数组</p></li></ol></blockquote><h3 id="2-7）基数排序">2.7）基数排序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.algorithm.order;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.jmx.remote.internal.ArrayQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Function;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.IntStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基数排序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo07</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//        int[] arr = &#123;128, 359, 26, 78, 98, 5, 789, 12, 6, 2&#125;;</span></span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">2</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">0</span>&#125;;</span><br><span class="line">        System.out.println(<span class="string">&quot;排序前的数组：&quot;</span> + Arrays.toString(arr));</span><br><span class="line">        <span class="type">int</span>[] sortArr = sort(arr);</span><br><span class="line">        System.out.println(<span class="string">&quot;排序后的数组：&quot;</span> + Arrays.toString(sortArr));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] sort(<span class="type">int</span>[] arr)&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> arr[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(max&lt;arr[i])</span><br><span class="line">                max = arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxLength</span> <span class="operator">=</span> String.valueOf(max).length();</span><br><span class="line">        Map&lt;Integer, LinkedList&gt; containerMap = IntStream.range(<span class="number">0</span>, <span class="number">10</span>).boxed()</span><br><span class="line">                .collect(Collectors.toMap(Function.identity(), a -&gt; <span class="keyword">new</span> <span class="title class_">LinkedList</span>()));</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, n=<span class="number">1</span>; i &lt; maxLength; i++, n*=<span class="number">10</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[j]/n%<span class="number">10</span>;</span><br><span class="line">                containerMap.get(temp).add(arr[j]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">int</span>[] index = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">            IntStream.range(<span class="number">0</span>, <span class="number">10</span>).boxed().forEach(key -&gt; &#123;</span><br><span class="line">                <span class="type">LinkedList</span> <span class="variable">list</span> <span class="operator">=</span> containerMap.get(key);</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; list.size(); k++) &#123;</span><br><span class="line">                    arr[index[<span class="number">0</span>]] = (<span class="type">int</span>) list.get(k);</span><br><span class="line">                    index[<span class="number">0</span>]++;</span><br><span class="line">                &#125;</span><br><span class="line">                containerMap.put(key, <span class="keyword">new</span> <span class="title class_">LinkedList</span>());</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>基数排序，主要使用了分类，利用了以空间换时间的思想。</p><ol><li class="lvl-3">数组中的元素将，遍历他们的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">10^{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6644em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span></span></span></span>位，如个位、十位、百位……这将取决于数组中最大的那个数</li><li class="lvl-3">每次都将对数组中的元素进行判断，判断当前位上是哪个数字，再放进对应的队列中<ol><li class="lvl-6">如果当前为个位遍历，判断<code>123</code>，则将放入序号为<code>3</code>的队列之中</li><li class="lvl-6">这样的队列一共有10个，分别为标记为<code>0~9</code></li></ol></li><li class="lvl-3">当数组中的元素都判断完成，依次从<code>0~9</code>的顺序从队列取数，放入到数组中</li><li class="lvl-3">重复上面步骤<code>1~3</code>，直到遍历完成最大的一位，会发现数组排序完成</li></ol></blockquote><h3 id="2-8）堆排序">2.8）堆排序</h3><p>堆排序和上面的几种排序都不太一样，它是基于顺序存储的二叉树进行的一种排序，故此新开了一章进行讲解。</p><p><a href="https://www.banmoon.top/articles/86">传送门</a></p><h2 id="三、最后想说的话">三、最后想说的话</h2><p>排序算法是最基本的算法，上面几个排序的方法，总的来说，用到了遍历、递归、双指针（双下标）这样的方法，也可以算初步找回以前刷算法题的感觉。</p><p>上面还有一个排序还有一个堆排序没有列出来，这我要先回顾全二叉堆，再进行更新了。</p><p>对应代码，已丢至<a href="https://gitee.com/ban-moon/algorithm_learn/tree/master/">码云</a>，后续的算法题我也会在此进行更新</p><p>我是半月，祝你幸福！</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 经典算法题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java的juc并发编程包</title>
      <link href="/archive/c8dd8042/"/>
      <url>/archive/c8dd8042/</url>
      
        <content type="html"><![CDATA[<h1>Juc并发编程包</h1><h2 id="一、介绍">一、介绍</h2><p>关于Java如何创建线程，大家都可以马上能想到有两种方法，无非不就是继承 <code>Thread</code>类和实现 <code>Runnable</code>接口嘛，顶多再加上个实现 <code>Callable</code>接口。而且 <code>synchronized</code>解决并发问题，如果学艺不精，锁住的对象是哪个都不知道，实在是不友好。</p><p>所以，我们在企业开发中基本不这样使用线程。在线程的启动上，我们常使用线程池。对于线程池的使用，可以看我另一篇博客，讲到了<a href="https://www.banmoon.top/articles/54">线程池的使用</a>。</p><p>本文将讲解，线程池所在的包 <code>java.util.concurrent</code>，在这个包下，还有什么值得关注的类和方法。</p><p>附上<a href="https://www.matools.com/api/java8">java8在线文档</a>，边看边学</p><h2 id="二、线程安全集合">二、线程安全集合</h2><p>在使用的集合中，<code>ArrayList</code>或者是 <code>HashMap</code>都是平常我们接触比较多的。但很遗憾，这两个集合类，他们在多线程的情况下，并不是安全的。如果需要使用线程安全的集合，将要有特殊的方法和类。</p><p>我们先来演示一下，在多线程情况下，此类集合发生的问题。</p><h3 id="1）不安全集合示例">1）不安全集合示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.TreeSet;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 线程不安全的集合</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        testArrayList();</span><br><span class="line"><span class="comment">//        testHashMap();</span></span><br><span class="line"><span class="comment">//        testSet();</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testArrayList</span><span class="params">()</span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">                list.add(Thread.currentThread().getName());</span><br><span class="line">                System.out.println(list);</span><br><span class="line">            &#125;, <span class="string">&quot;线程&quot;</span> + i).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testHashMap</span><span class="params">()</span>&#123;</span><br><span class="line">        HashMap&lt;Integer, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> i;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">                map.put(temp, Thread.currentThread().getName());</span><br><span class="line">                System.out.println(map);</span><br><span class="line">            &#125;, <span class="string">&quot;线程&quot;</span> + i).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testSet</span><span class="params">()</span>&#123;</span><br><span class="line">        TreeSet&lt;String&gt; set = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">                set.add(Thread.currentThread().getName());</span><br><span class="line">                System.out.println(set);</span><br><span class="line">            &#125;, <span class="string">&quot;线程&quot;</span> + i).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分别执行 <code>testArrayList</code>、<code>testHashMap</code>和 <code>testSet</code>，执行结果如下</p><p><img src="https://gitee.com/ban-moon/blogImg/raw/master/image/20211218201453.png" alt="image-20211218201452050" /></p><p><img src="https://gitee.com/ban-moon/blogImg/raw/master/image/20211218201830.png" alt="image-20211218201829175" /></p><p><img src="https://gitee.com/ban-moon/blogImg/raw/master/image/20211218202649.png" alt="image-20211218202646969" /></p><p>执行结果有时候会出现 <code>java.util.ConcurrentModificationException</code>异常，字面意思就是并发修改异常，也就说明了原本喜欢用的 <code>ArrayList</code>和 <code>HashMap</code>是线程不安全的。</p><p>为何线程不安全，主要还是关键字 <code>synchronized</code>，可以查看上述集合的添加方法，并没有添加这个关键字。所以，我们在多线程的时候，要避免使用以上这些不安全的集合类。</p><h3 id="2）Collections工具类之sync方法">2）<code>Collections</code>工具类之sync方法</h3><p>上述讲的集合类都是线程不安全的，但是有办法使他们转换成线程安全的集合类。只需要 <code>Collections</code>工具类使用对应的方法进行转换即可。</p><p><img src="https://gitee.com/ban-moon/blogImg/raw/master/image/20211218204317.png" alt="image-20211218204316219" /></p><p>方法的实现就是将集合作为参数构造出了另一个线程安全的集合类。转换的方法还是比较多的，简单讲前三个就好。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 线程安全集合</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        testArrayList();</span><br><span class="line"><span class="comment">//        testHashMap();</span></span><br><span class="line"><span class="comment">//        testSet();</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testArrayList</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;String&gt; list = Collections.synchronizedList(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">                list.add(Thread.currentThread().getName());</span><br><span class="line">                System.out.println(list);</span><br><span class="line">            &#125;, <span class="string">&quot;线程&quot;</span> + i).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testHashMap</span><span class="params">()</span>&#123;</span><br><span class="line">        Map&lt;Integer, String&gt; map = Collections.synchronizedMap(<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;());</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> i;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">                map.put(temp, Thread.currentThread().getName());</span><br><span class="line">                System.out.println(map);</span><br><span class="line">            &#125;, <span class="string">&quot;线程&quot;</span> + i).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testSet</span><span class="params">()</span>&#123;</span><br><span class="line">        Set&lt;String&gt; set = Collections.synchronizedSet(<span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;());</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">                set.add(Thread.currentThread().getName());</span><br><span class="line">                System.out.println(set);</span><br><span class="line">            &#125;, <span class="string">&quot;线程&quot;</span> + i).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就不贴执行结果了，自己可以试试，保证不出并发修改异常</p><h3 id="3）juc下的安全集合">3）juc下的安全集合</h3><p>不对啊，上面的集合都在 <code>java.util</code>下面，怎么没有juc什么事呢？别急，要来了，juc包下的线程安全集合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CopyOnWriteArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CopyOnWriteArraySet;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * juc并发包下的集合</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo3</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        testArrayList();</span><br><span class="line"><span class="comment">//        testHashMap();</span></span><br><span class="line"><span class="comment">//        testSet();</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testArrayList</span><span class="params">()</span>&#123;</span><br><span class="line">        CopyOnWriteArrayList&lt;Object&gt; list = <span class="keyword">new</span> <span class="title class_">CopyOnWriteArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">                list.add(Thread.currentThread().getName());</span><br><span class="line">                System.out.println(list);</span><br><span class="line">            &#125;, <span class="string">&quot;线程&quot;</span> + i).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testHashMap</span><span class="params">()</span>&#123;</span><br><span class="line">        ConcurrentHashMap&lt;Integer, String&gt; map = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> i;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">                map.put(temp, Thread.currentThread().getName());</span><br><span class="line">                System.out.println(map);</span><br><span class="line">            &#125;, <span class="string">&quot;线程&quot;</span> + i).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testSet</span><span class="params">()</span>&#123;</span><br><span class="line">        CopyOnWriteArraySet&lt;String&gt; set = <span class="keyword">new</span> <span class="title class_">CopyOnWriteArraySet</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">                set.add(Thread.currentThread().getName());</span><br><span class="line">                System.out.println(set);</span><br><span class="line">            &#125;, <span class="string">&quot;线程&quot;</span> + i).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4）Vector类">4）Vector类</h3><p>关于有人提到一个叫 <code>Vector</code>的类，也是线程安全的。的确是这样，线程是安全的，我们查看他的 <code>add</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Vector</span>&lt;E&gt;</span><br><span class="line">    <span class="keyword">extends</span> <span class="title class_">AbstractList</span>&lt;E&gt;</span><br><span class="line">    <span class="keyword">implements</span> <span class="title class_">List</span>&lt;E&gt;, RandomAccess, Cloneable, java.io.Serializable</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">        modCount++;</span><br><span class="line">        ensureCapacityHelper(elementCount + <span class="number">1</span>);</span><br><span class="line">        elementData[elementCount++] = e;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>比较简单，主要使用了 <code>synchronized</code>关键字，来保证了线程安全。</p><p>没什么问题，但更推荐使用新的 <code>lock</code>锁写的 <code>CopyOnWriteArrayList</code>等类。</p><p>至于什么是 <code>lock</code>，它的优势在哪里，可以继续查看下一章</p><h2 id="三、Lock锁">三、Lock锁</h2><p>由文档可知，Lock是个接口。使用得从它的几个实现类中入手</p><p><img src="https://gitee.com/ban-moon/blogImg/raw/master/image/20211219170627.png" alt="image-20211219170625977" /></p><h3 id="1）简单使用">1）简单使用</h3><p>使用 <code>ReentrantLock</code>类，来完成线程安全的取票操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ReentrantLock</span></span><br><span class="line"><span class="comment"> * 1、创建公共Lock锁</span></span><br><span class="line"><span class="comment"> * 2、使用lock方法进行上锁</span></span><br><span class="line"><span class="comment"> * 3、在finally代码块中释放锁</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo4</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">TicketServer</span> <span class="variable">ticketServer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TicketServer</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(ticketServer, <span class="string">&quot;A&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(ticketServer, <span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(ticketServer, <span class="string">&quot;C&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TicketServer</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">ticketNum</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建锁</span></span><br><span class="line">    <span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> Thread.currentThread().getName();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="comment">// 上锁</span></span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(ticketNum&lt;=<span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                System.out.println(name + <span class="string">&quot;：取到了第&quot;</span> + ticketNum + <span class="string">&quot;张票&quot;</span>);</span><br><span class="line">                <span class="comment">// 模拟网络延迟</span></span><br><span class="line">                Thread.sleep(<span class="number">200</span>);</span><br><span class="line">                ticketNum--;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="comment">// 最后始终都要释放锁</span></span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果，与使用 <code>synchronized</code>关键字无异</p><p><img src="https://gitee.com/ban-moon/blogImg/raw/master/image/20211219173054.png" alt="image-20211219173052726" /></p><p>lock锁的基本操作</p><ul class="lvl-0"><li class="lvl-2"><p>创建公共Lock锁，注意所有的线程访问到的 <code>lock</code>都是同一个</p></li><li class="lvl-2"><p>使用lock方法进行上锁</p></li><li class="lvl-2"><p>在finally代码块中释放锁，必须要手动释放</p></li></ul><h3 id="2）生产者消费者模式">2）生产者消费者模式</h3><p>在使用 <code>synchronized</code>关键词时，线程之间使用 <code>wait</code>方法进行阻塞释放锁，以及使用 <code>notify</code>方法进行唤醒阻塞线程。</p><p>而在 <code>Lock</code>锁中，需要创建锁的状态监视器，也就是 <code>Condition</code>。在 <code>Condition</code>中，也有相对应的方法，他们则是 <code>await</code>方法和 <code>signal</code>方法。</p><p><img src="https://gitee.com/ban-moon/blogImg/raw/master/image/20211219180258.png" alt="image-20211219180257685" /></p><p>使用 <code>Condition</code>类来实现生产者消费者模式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Condition;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 简单的生产者消费者模式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo5</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyDemo5</span> <span class="variable">myDemo4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyDemo5</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) myDemo4.increment();</span><br><span class="line">        &#125;, <span class="string">&quot;线程A&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) myDemo4.decrement();</span><br><span class="line">        &#125;, <span class="string">&quot;线程B&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) myDemo4.increment();</span><br><span class="line">        &#125;, <span class="string">&quot;线程C&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) myDemo4.decrement();</span><br><span class="line">        &#125;, <span class="string">&quot;线程D&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyDemo5</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过lock创建出监视状态对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">Condition</span> <span class="variable">condition</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">increment</span><span class="params">()</span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (number==<span class="number">1</span>)</span><br><span class="line">                condition.await();</span><br><span class="line">            number++;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;：&quot;</span> + number);</span><br><span class="line">            condition.signalAll();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">decrement</span><span class="params">()</span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (number==<span class="number">0</span>)</span><br><span class="line">                condition.await();</span><br><span class="line">            number--;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;：&quot;</span> + number);</span><br><span class="line">            condition.signalAll();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果，和 <code>synchronized</code>关键字无异</p><p><img src="https://gitee.com/ban-moon/blogImg/raw/master/image/20211219180547.png" alt="image-20211219180546212" /></p><h3 id="3）精准唤醒">3）精准唤醒</h3><p><code>Condition</code>类和传统的 <code>wait</code>方法、<code>notify</code>方法不同，它可以实现精准的唤醒。</p><p>比如上面的生产消费模式，让A线程生产完成后，让B线程进行消费；B线程消费完成后，让C进行生产。</p><p>这一点在 <code>Object</code>的 <code>notify</code>方法是做不到的，<code>notify</code>方法唤醒的虽然只有一条线程，但这是cpu进行调度的，人为并不可控制。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Condition;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用多个Condition实现精准唤醒</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo6</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyDemo6</span> <span class="variable">myDemo4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyDemo6</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) myDemo4.increment();</span><br><span class="line">        &#125;, <span class="string">&quot;线程A&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) myDemo4.decrement();</span><br><span class="line">        &#125;, <span class="string">&quot;线程B&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) myDemo4.increment();</span><br><span class="line">        &#125;, <span class="string">&quot;线程C&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) myDemo4.decrement();</span><br><span class="line">        &#125;, <span class="string">&quot;线程D&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyDemo6</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Lock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Condition</span> <span class="variable">condition1</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Condition</span> <span class="variable">condition2</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Condition</span> <span class="variable">condition3</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Condition</span> <span class="variable">condition4</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">increment</span><span class="params">()</span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (number==<span class="number">1</span>)</span><br><span class="line">                await();</span><br><span class="line">            number++;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;：&quot;</span> + number);</span><br><span class="line">            signal();</span><br><span class="line">        &#125;  <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">decrement</span><span class="params">()</span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (number==<span class="number">0</span>)</span><br><span class="line">                await();</span><br><span class="line">            number--;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;：&quot;</span> + number);</span><br><span class="line">            signal();</span><br><span class="line">        &#125;  <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断当前线程，并触发等待</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">await</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> Thread.currentThread().getName();</span><br><span class="line">            <span class="keyword">switch</span> (name)&#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;线程A&quot;</span>: condition1.await(); <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;线程B&quot;</span>: condition2.await(); <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;线程C&quot;</span>: condition3.await(); <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;线程D&quot;</span>: condition4.await(); <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断当前线程，并触发唤醒</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">signal</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> Thread.currentThread().getName();</span><br><span class="line">        <span class="keyword">switch</span> (name)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;线程A&quot;</span>: condition2.signal(); <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;线程B&quot;</span>: condition3.signal(); <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;线程C&quot;</span>: condition4.signal(); <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;线程D&quot;</span>: condition1.signal(); <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果，发现了确实按照了我们的顺序来进行唤醒</p><p><img src="https://gitee.com/ban-moon/blogImg/raw/master/image/20211219233202.png" alt="image-20211219233155451" /></p><p>根据锁创建出监视状态对象，用来判断线程的等待和唤醒</p><p>简单来说，就是用 <code>Condition</code>来做一个标记，我们需要做的就是，判断当前的条件，是否使用 <code>Condition</code>进行等待或者唤醒。</p><blockquote><p>上述代码会出现BUG，但我不说，哈哈哈哈哈。</p><p>大家可以把 <code>17行的线程B</code>和 <code>23行的线程D</code>位置互换，你会发现问题的。</p><p>可以试着解决一下这个BUG，可以更好理解 <code>Condition</code>的精准唤醒。</p></blockquote><h3 id="4）读写锁">4）读写锁</h3><p>上述使用的都是 <code>ReentrantLock</code>类，这次讲讲另外的两个。处于 <code>ReentrantReadWriteLock</code>类下的两个静态内部类，<code>ReadLock</code>和 <code>WriteLock</code></p><p>为什么会有读写锁呢，它解决了同步带来的效率低下问题。</p><p>在变量的使用上，我们无非就是读和写，只有多线程写入才会造成线程安全的问题，而多线程读永远不会修改变量值，也就不会造成线程的安全问题了。</p><p>正因为如此，读写锁出现了，它可以限制只能单线程写入，但可以允许多线程读取变量，由此来保证效率的最大化使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantReadWriteLock;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 读写锁</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo7</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyDemo7</span> <span class="variable">demo7</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyDemo7</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">                demo7.add(Thread.currentThread().getName());</span><br><span class="line">            &#125;, <span class="string">&quot;写线程&quot;</span> + i).start();</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">                demo7.toString(<span class="literal">true</span>);</span><br><span class="line">            &#125;, <span class="string">&quot;读线程&quot;</span> + i).start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyDemo7</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">ReentrantReadWriteLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantReadWriteLock</span>();</span><br><span class="line"><span class="comment">//    private ReentrantLock lock = new ReentrantLock();</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(String str)</span>&#123;</span><br><span class="line">        lock.writeLock().lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;：正在添加&quot;</span>);</span><br><span class="line">            list.add(str);</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;：添加成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.writeLock().unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">toString</span><span class="params">(<span class="type">boolean</span> b)</span>&#123;</span><br><span class="line">        lock.readLock().lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;：正在读取&quot;</span>);</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;：&quot;</span> + list);</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;：读取成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.readLock().unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果，主要查看与 <code>ReentrantLock</code>类的区别</p><p><img src="https://gitee.com/ban-moon/blogImg/raw/master/image/20211220230241.png" alt="image-20211220230240374" /></p><p>可以看到的是，写入线程不会被抢锁，而读线程能被其他读线程插入。</p><h2 id="四、辅助类">四、辅助类</h2><p>在juc并发包中，还有一些辅助工具类，让我们可以更好的使用多线程。</p><h3 id="1）CountDownLatch">1）CountDownLatch</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.date.DateUtil;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.StrUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CountDownLatchTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">CountDownLatch</span> <span class="variable">count</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(<span class="number">5</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.println(StrUtil.format(<span class="string">&quot;&#123;&#125;：&#123;&#125;&quot;</span>, Thread.currentThread().getName(), DateUtil.now()));</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">                    count.countDown();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, <span class="string">&quot;线程&quot;</span>+i).start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 等待上面几个线程完成，才能进行下面的逻辑</span></span><br><span class="line">        count.await();</span><br><span class="line">        System.out.println(<span class="string">&quot;主线程：&quot;</span> + DateUtil.now());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>CountDownLatch</code>对线程进行减法计数，计算还有多少线程没有完成任务。</p><p>直到指定的线程数，到达指定位置后，才进行下一步的操作。</p><p><img src="https://gitee.com/ban-moon/blogImg/raw/master/image/20211223212723.png" alt="image-20211223212721997" /></p><h3 id="2）CyclicBarrier">2）CyclicBarrier</h3><p>如果上述 <code>CountDownLatch</code>是通过减法计算来达到屏障，那么 <code>CyclicBarrier</code>就是通过加法计算来达到屏障。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.StrUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CyclicBarrierTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">CyclicBarrier</span> <span class="variable">cyclicBarrier</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CyclicBarrier</span>(<span class="number">3</span>, () -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;======= 当前阶段已完成 =======&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Demo</span>(cyclicBarrier), <span class="string">&quot;线程A&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Demo</span>(cyclicBarrier), <span class="string">&quot;线程B&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Demo</span>(cyclicBarrier), <span class="string">&quot;线程C&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Demo</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> CyclicBarrier cyclicBarrier;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Demo</span><span class="params">(CyclicBarrier cyclicBarrier)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.cyclicBarrier = cyclicBarrier;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">threadName</span> <span class="operator">=</span> Thread.currentThread().getName();</span><br><span class="line">            System.out.println(StrUtil.format(<span class="string">&quot;&#123;&#125;：准备就绪&quot;</span>, threadName));</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">            <span class="comment">// 等待所有线程都就绪</span></span><br><span class="line">            cyclicBarrier.await();</span><br><span class="line"></span><br><span class="line">            System.out.println(StrUtil.format(<span class="string">&quot;&#123;&#125;：上台发言&quot;</span>, threadName));</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">            <span class="comment">// 等待所有线程都上台发言</span></span><br><span class="line">            cyclicBarrier.await();</span><br><span class="line"></span><br><span class="line">            System.out.println(StrUtil.format(<span class="string">&quot;&#123;&#125;：散会回家&quot;</span>, threadName));</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与 <code>CountDownLatch</code>类似，当线程全部达到一个共同屏障时，从而再向下进行执行。</p><p>但和其不一样的是，<code>CyclicBarrier</code>可以执行多次，设立多点屏障。出现问题导致的计数异常后，也可以重新进行计数</p><p><img src="https://gitee.com/ban-moon/blogImg/raw/master/image/20211223212859.png" alt="image-20211223212858229" /></p><h3 id="3）Semaphore">3）Semaphore</h3><p><code>Semaphore</code>通常我们叫它信号量， 可以用来控制同时访问特定资源的线程数量，通过协调各个线程，以保证合理的使用资源。</p><p>比如去餐厅吃饭，没有座位需要进行等待，直到别人吃完有座位后，才能进入。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Semaphore;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SemaphoreTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Semaphore</span> <span class="variable">semaphore</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Semaphore</span>(<span class="number">3</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">6</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    semaphore.acquire();</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;：排队完成，抓紧吃饭&quot;</span>);</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;：吃完了离开&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    semaphore.release();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, <span class="string">&quot;线程&quot;</span> + i).start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>适用于有限的资源使用，对同一个资源最多允许几个线程可以访问它。直到访问结束后才释放，让其他线程进入可以访问。</p><p>和 <code>synchornized</code>包住一段代码块比较类似，但 <code>Semaphore</code>允许多个线程，而前者只有一个。</p><p><img src="https://gitee.com/ban-moon/blogImg/raw/master/image/20211223221947.png" alt="image-20211223221946293" /></p><h2 id="五、阻塞队列">五、阻塞队列</h2><p>在Java线程池的讲解中，我初步的讲了阻塞队列的功能。但在此，我还是得详细讲讲，什么是阻塞队列。</p><p>阻塞队列，顾名思义就是会阻塞的队列。而队列的基本操作就只有两个，存和取。所以阻塞就此产生，有些存会发生阻塞，有些取会发生阻塞。</p><p>下面就一起来看看juc包中的阻塞队列吧</p><h3 id="1）ArrayBlockingQueue">1）ArrayBlockingQueue</h3><p>Array结构，没问题吧，基于数组结构实现的队列。既然叫阻塞队列，那就必然会有阻塞，有阻塞会有锁吧。简单看看源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayBlockingQueue</span>&lt;E&gt; <span class="keyword">extends</span> <span class="title class_">AbstractQueue</span>&lt;E&gt;</span><br><span class="line">        <span class="keyword">implements</span> <span class="title class_">BlockingQueue</span>&lt;E&gt;, java.io.Serializable &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 内容存在这的</span></span><br><span class="line">    <span class="keyword">final</span> Object[] items;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 锁，保护所有的访问</span></span><br><span class="line">    <span class="keyword">final</span> ReentrantLock lock;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 关于取操作的 Condition</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Condition notEmpty;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 关于存操作的 Condition</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Condition notFull;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 构造方法，传入一个容量。还有两个重载，具体自己看源码吧</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ArrayBlockingQueue</span><span class="params">(<span class="type">int</span> capacity)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(capacity, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 取数</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">take</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="built_in">this</span>.lock;</span><br><span class="line">        <span class="comment">// 上锁</span></span><br><span class="line">        lock.lockInterruptibly();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 判断个数是否为0，是则阻塞进行等待</span></span><br><span class="line">            <span class="keyword">while</span> (count == <span class="number">0</span>)</span><br><span class="line">                notEmpty.await();</span><br><span class="line">            <span class="comment">// 返回取数结果</span></span><br><span class="line">            <span class="keyword">return</span> dequeue();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 解锁</span></span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 存数</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(E e)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="comment">// 检查元素是否为空，为空则会抛出空指针异常</span></span><br><span class="line">        checkNotNull(e);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="built_in">this</span>.lock;</span><br><span class="line">        <span class="comment">// 上锁</span></span><br><span class="line">        lock.lockInterruptibly();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 如果个数已经和队列容量相等了，则阻塞进行等待</span></span><br><span class="line">            <span class="keyword">while</span> (count == items.length)</span><br><span class="line">                notFull.await();</span><br><span class="line">            <span class="comment">// 存数</span></span><br><span class="line">            enqueue(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 解锁</span></span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>ArrayBlockingQueue</code>有一把 <code>Lock</code>锁以及它的两个 <code>Condition</code>监听器，分别来对队列为空或满的时候，进行阻塞操作。</p><p>上面源码只是一小部分，<code>dequeue</code>和 <code>enqueue</code>方法就交给你们去看啦，不要怕，挺简单的。</p><p>测试一下，取和存之间照成的阻塞</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.queue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.date.DateUtil;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.StrUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ArrayBlockingQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayBlockingQueueTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        putTest();</span><br><span class="line">        System.out.println(<span class="string">&quot;========= 分割线 =========&quot;</span>);</span><br><span class="line">        takeTest();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">putTest</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        ArrayBlockingQueue&lt;String&gt; queue = <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="number">3</span>);</span><br><span class="line"><span class="comment">//        LinkedBlockingQueue&lt;String&gt; queue = new LinkedBlockingQueue&lt;&gt;(3);</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 3秒后再取出</span></span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">ele</span> <span class="operator">=</span> queue.take();</span><br><span class="line">                System.out.println(ele + <span class="string">&quot;已取出：&quot;</span> + DateUtil.formatTime(<span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        queue.put(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        System.out.println(StrUtil.format(<span class="string">&quot;&#123;&#125;已插入，&#123;&#125;&quot;</span>, <span class="number">1</span>, DateUtil.formatTime(<span class="keyword">new</span> <span class="title class_">Date</span>())));</span><br><span class="line">        queue.put(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">        System.out.println(StrUtil.format(<span class="string">&quot;&#123;&#125;已插入，&#123;&#125;&quot;</span>, <span class="number">2</span>, DateUtil.formatTime(<span class="keyword">new</span> <span class="title class_">Date</span>())));</span><br><span class="line">        queue.put(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">        System.out.println(StrUtil.format(<span class="string">&quot;&#123;&#125;已插入，&#123;&#125;&quot;</span>, <span class="number">3</span>, DateUtil.formatTime(<span class="keyword">new</span> <span class="title class_">Date</span>())));</span><br><span class="line">        queue.put(<span class="string">&quot;4&quot;</span>);</span><br><span class="line">        System.out.println(StrUtil.format(<span class="string">&quot;&#123;&#125;已插入，&#123;&#125;&quot;</span>, <span class="number">4</span>, DateUtil.formatTime(<span class="keyword">new</span> <span class="title class_">Date</span>())));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">takeTest</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        ArrayBlockingQueue&lt;String&gt; queue = <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="number">3</span>);</span><br><span class="line"><span class="comment">//        LinkedBlockingQueue&lt;String&gt; queue = new LinkedBlockingQueue&lt;&gt;(3);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 其他线程插入数据</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">3</span>; i++) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> StrUtil.toString(i);</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">                    queue.put(str);</span><br><span class="line">                    System.out.println(StrUtil.format(<span class="string">&quot;&#123;&#125;已插入，&#123;&#125;&quot;</span>, str, DateUtil.formatTime(<span class="keyword">new</span> <span class="title class_">Date</span>())));</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 直接取数</span></span><br><span class="line">        System.out.println(queue.take() + <span class="string">&quot;已取出：&quot;</span> + DateUtil.formatTime(<span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line">        System.out.println(queue.take() + <span class="string">&quot;已取出：&quot;</span> + DateUtil.formatTime(<span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line">        System.out.println(queue.take() + <span class="string">&quot;已取出：&quot;</span> + DateUtil.formatTime(<span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果，不要问我为什么分割线下面取出插入搞反了，问就是打印慢了。在插入的结束的马上，就马上唤醒被阻塞的取的线程。</p><p>就这样会出现取出在前的打印问题。</p><p><img src="https://gitee.com/ban-moon/blogImg/raw/master/image/20211224221720.png" alt="image-20211224221719403" /></p><h3 id="2）LinkedBlockingQueue">2）LinkedBlockingQueue</h3><p>在简单查看了 <code>ArrayBlockingQueue</code>的源码，它只有一把 <code>Lock</code>锁，</p><p>但 <code>LinkedBlockingQueue</code>不同，它有两把锁。简单看看源码吧</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkedBlockingQueue</span>&lt;E&gt; <span class="keyword">extends</span> <span class="title class_">AbstractQueue</span>&lt;E&gt;</span><br><span class="line">        <span class="keyword">implements</span> <span class="title class_">BlockingQueue</span>&lt;E&gt;, java.io.Serializable &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 好的出现了，静态内部类，链表形式的指针引向。一个节点对象存一个元素，同时指向下一个节点对象</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span>&lt;E&gt; &#123;</span><br><span class="line">        E item;</span><br><span class="line">        Node&lt;E&gt; next;</span><br><span class="line">        Node(E x) &#123; item = x; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 容量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> capacity;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 当前的元素个数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">AtomicInteger</span> <span class="variable">count</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>();</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 头部节点</span></span><br><span class="line">    <span class="keyword">transient</span> Node&lt;E&gt; head;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 最后的节点</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> Node&lt;E&gt; last;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// take、poll、etc等方法，取操作持有的锁</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">ReentrantLock</span> <span class="variable">takeLock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不为空的状态Condition</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Condition</span> <span class="variable">notEmpty</span> <span class="operator">=</span> takeLock.newCondition();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// put、offer、etc等方法，存操作持有的锁</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">ReentrantLock</span> <span class="variable">putLock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 容量未满的状态Condition</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Condition</span> <span class="variable">notFull</span> <span class="operator">=</span> putLock.newCondition();</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应的取存操作方法都差不多，这边的测试代码就不贴了。和上面的 <code>ArrayBlockingQueue</code>差不多，把注释掉的代码打开换成 <code>LinkedBlockingQueue</code>就好。</p><h3 id="3）存取的4组API">3）存取的4组API</h3><p>在上述的阻塞队列中，只举例了一组存取的方法。不过除了这一组，还有其他存取操作的API。</p><p>这边以 <code>ArrayBlockingQueue</code>为例，总结进行测试一下。</p><table><thead><tr><th>功能说明</th><th>存</th><th>取</th></tr></thead><tbody><tr><td>队列空或者满的时候会抛出异常</td><td>add(E e)</td><td>remove()</td></tr><tr><td>满了还去存则直接返回false<br />空了还去取就会返回null</td><td>offer(E e)</td><td>poll()</td></tr><tr><td>满了还去存就会一直阻塞，直到被唤醒<br />空了还去取就会一直阻塞，直到被唤醒</td><td>put(E e)</td><td>take()</td></tr><tr><td>满了还去存就会阻塞一段时间，超过后就返回false<br />空了还去取就会阻塞一段时间，超过时间后就会返回null</td><td>offer(E e, long timeout, TimeUnit unit)</td><td>poll(long timeout, TimeUnit unit)</td></tr></tbody></table><p>简单测试下这四组API，可以根据自己业务需求来选择对应的API</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.queue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.date.DateUtil;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.StrUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ArrayBlockingQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FourApiTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"><span class="comment">//        test1();</span></span><br><span class="line"><span class="comment">//        test2();</span></span><br><span class="line"><span class="comment">//        test3();</span></span><br><span class="line">        test4();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 会抛出异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line">        ArrayBlockingQueue&lt;String&gt; queue = <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="number">2</span>);</span><br><span class="line">        System.out.println(queue.add(<span class="string">&quot;A&quot;</span>));</span><br><span class="line">        System.out.println(queue.add(<span class="string">&quot;B&quot;</span>));</span><br><span class="line"><span class="comment">//        System.out.println(queue.add(&quot;C&quot;));// 队列已满，将报错</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;======== 分割线 ========&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(queue.remove());</span><br><span class="line">        System.out.println(queue.remove());</span><br><span class="line"><span class="comment">//        System.out.println(queue.remove());// 队列已空，将报错</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 满了还去存则直接返回false，空了还去取就会返回null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> &#123;</span><br><span class="line">        ArrayBlockingQueue&lt;String&gt; queue = <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="number">2</span>);</span><br><span class="line">        System.out.println(queue.offer(<span class="string">&quot;A&quot;</span>));</span><br><span class="line">        System.out.println(queue.offer(<span class="string">&quot;B&quot;</span>));</span><br><span class="line">        System.out.println(queue.offer(<span class="string">&quot;C&quot;</span>));<span class="comment">// 队列已满，存失败就直接返回false</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;======== 分割线 ========&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(queue.poll());</span><br><span class="line">        System.out.println(queue.poll());</span><br><span class="line">        System.out.println(queue.poll());<span class="comment">// 队列已空，直接返回null</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 满了还去存就会一直阻塞，直到被唤醒，空了还去取就会一直阻塞，直到被唤醒</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InterruptedException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        ArrayBlockingQueue&lt;String&gt; queue = <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="number">2</span>);</span><br><span class="line">        queue.put(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;A已插入&quot;</span>);</span><br><span class="line">        queue.put(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;B已插入&quot;</span>);</span><br><span class="line"><span class="comment">//        queue.put(&quot;C&quot;);// 队列已满，到此将会阻塞</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;C已插入&quot;);</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;======== 分割线 ========&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(queue.take());</span><br><span class="line">        System.out.println(queue.take());</span><br><span class="line"><span class="comment">//        System.out.println(queue.take());// 队列已空，将会持续阻塞</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 满了还去存就会阻塞一段时间，超过后就返回false</span></span><br><span class="line"><span class="comment">     * 空了还去取就会阻塞一段时间，超过时间后就会返回null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        ArrayBlockingQueue&lt;String&gt; queue = <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="number">2</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">template</span> <span class="operator">=</span> <span class="string">&quot;&#123;&#125;：&#123;&#125;&quot;</span>;</span><br><span class="line">        System.out.println(StrUtil.format(template, queue.offer(<span class="string">&quot;A&quot;</span>, <span class="number">2</span>, TimeUnit.SECONDS), DateUtil.now()));</span><br><span class="line">        System.out.println(StrUtil.format(template, queue.offer(<span class="string">&quot;B&quot;</span>, <span class="number">2</span>, TimeUnit.SECONDS), DateUtil.now()));</span><br><span class="line">        System.out.println(StrUtil.format(template, queue.offer(<span class="string">&quot;C&quot;</span>, <span class="number">2</span>, TimeUnit.SECONDS), DateUtil.now()));<span class="comment">// 队列已满，等待2秒后返回false</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;======== 分割线 ========&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(StrUtil.format(template, queue.poll(<span class="number">2</span>, TimeUnit.SECONDS), DateUtil.now()));</span><br><span class="line">        System.out.println(StrUtil.format(template, queue.poll(<span class="number">2</span>, TimeUnit.SECONDS), DateUtil.now()));</span><br><span class="line">        System.out.println(StrUtil.format(template, queue.poll(<span class="number">2</span>, TimeUnit.SECONDS), DateUtil.now()));<span class="comment">// 队列已空，等待2秒后返回null</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>test1</code>执行结果，会抛出异常</p><p><img src="https://gitee.com/ban-moon/blogImg/raw/master/image/20211225114957.png" alt="image-20211225114945857" /></p><p><code>test2</code>执行结果，满了还去存则直接返回false，空了还去取就会返回null</p><p><img src="https://gitee.com/ban-moon/blogImg/raw/master/image/20211225115739.png" alt="image-20211225115737618" /></p><p><code>test3</code>执行结果，可以看到程序一直都没有关闭。存的在等待位置，取的在等元素</p><p><img src="https://gitee.com/ban-moon/blogImg/raw/master/image/20211225122144.png" alt="image-20211225122143643" /></p><p><code>test4</code>执行结果，注意看时间，不会死等</p><p><img src="https://gitee.com/ban-moon/blogImg/raw/master/image/20211225124813.png" alt="image-20211225124803048" /></p><h3 id="4）SynchronousQueue">4）SynchronousQueue</h3><p>这是一个比较特殊的阻塞队列，存取互相阻塞。生产者存入一个元素就马上阻塞，必须被另一个线程消费者取出这个元素，生产者才解锁。</p><p>简单测试一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.queue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.StrUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.SynchronousQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SynchronousQueueTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SynchronousQueue&lt;String&gt; queue = <span class="keyword">new</span> <span class="title class_">SynchronousQueue</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> Thread.currentThread().getName();</span><br><span class="line">                queue.put(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">                System.out.println(name + <span class="string">&quot;插入A成功&quot;</span>);</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">                queue.put(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">                System.out.println(name + <span class="string">&quot;插入B成功&quot;</span>);</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">                queue.put(<span class="string">&quot;C&quot;</span>);</span><br><span class="line">                System.out.println(name + <span class="string">&quot;插入C成功&quot;</span>);</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;线程A&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> Thread.currentThread().getName();</span><br><span class="line">                <span class="type">String</span> <span class="variable">template</span> <span class="operator">=</span> <span class="string">&quot;&#123;&#125;取出了&#123;&#125;&quot;</span>;</span><br><span class="line">                System.out.println(StrUtil.format(template, name, queue.take()));</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">                System.out.println(StrUtil.format(template, name, queue.take()));</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">                System.out.println(StrUtil.format(template, name, queue.take()));</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;线程B&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果，存取交替进行，没问题</p><p><img src="https://gitee.com/ban-moon/blogImg/raw/master/image/20211225160355.png" alt="image-20211225160353672" /></p><p>现在我们把线程B的代码注释掉，让其只有生产的线程。再次查看结果</p><p><img src="https://gitee.com/ban-moon/blogImg/raw/master/image/20211225160814.png" alt="image-20211225160559994" /></p><p>好的，被阻塞了。也就是在15行存入后，线程A直接阻塞了，要不然怎么连16行的插入成功信息都没有打印呢？</p><p>所以，我们需要进入 <code>SynchronousQueue</code>的源码，简单查看下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SynchronousQueue</span>&lt;E&gt; <span class="keyword">extends</span> <span class="title class_">AbstractQueue</span>&lt;E&gt;</span><br><span class="line">    <span class="keyword">implements</span> <span class="title class_">BlockingQueue</span>&lt;E&gt;, java.io.Serializable &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 首先出现了就是一个抽象静态内部类，还有它的两个子类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Transferer</span>&lt;E&gt; &#123;</span><br><span class="line">        <span class="keyword">abstract</span> E <span class="title function_">transfer</span><span class="params">(E e, <span class="type">boolean</span> timed, <span class="type">long</span> nanos)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// Transferer的子类，也是一个静态内部类。栈结构，后进先出</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">TransferStack</span>&lt;E&gt; <span class="keyword">extends</span> <span class="title class_">Transferer</span>&lt;E&gt; &#123;&#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// Transferer的子类，也是一个静态内部类。队列结构，先进先出</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">TransferQueue</span>&lt;E&gt; <span class="keyword">extends</span> <span class="title class_">Transferer</span>&lt;E&gt; &#123;&#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 转让器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> Transferer&lt;E&gt; transferer;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 无参构造器</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">SynchronousQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造器，传入是否公平，如果公平，则创建队列结构的转让器，否则创建栈结构的转让器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SynchronousQueue</span><span class="params">(<span class="type">boolean</span> fair)</span> &#123;</span><br><span class="line">        transferer = fair ? <span class="keyword">new</span> <span class="title class_">TransferQueue</span>&lt;E&gt;() : <span class="keyword">new</span> <span class="title class_">TransferStack</span>&lt;E&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">// 存方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(E e)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="comment">// 判断是否为空</span></span><br><span class="line">        <span class="keyword">if</span> (e == <span class="literal">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line"><span class="comment">// 直接通过转让器来存</span></span><br><span class="line">        <span class="keyword">if</span> (transferer.transfer(e, <span class="literal">false</span>, <span class="number">0</span>) == <span class="literal">null</span>) &#123;</span><br><span class="line">            Thread.interrupted();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InterruptedException</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 取方法</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">take</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="comment">// 又是通过转让器来取？还是同样的方法？</span></span><br><span class="line">        <span class="type">E</span> <span class="variable">e</span> <span class="operator">=</span> transferer.transfer(<span class="literal">null</span>, <span class="literal">false</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="comment">// 如果取到的元素为null，直接抛出打断异常</span></span><br><span class="line">        <span class="keyword">if</span> (e != <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> e;</span><br><span class="line">        Thread.interrupted();</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InterruptedException</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到这，我有点蒙，看来还是逃避不过要查看 <code>TransferStack</code>或者 <code>TransferQueue</code>这两个内部类啊。后续开个专章来讲述源码好了。简单说下它的流程，<code>transferer</code>方法</p><ol><li class="lvl-3"><p>根据实参是否为null来判断出是哪种操作，并为其打上标记，这边分为 <code>DATA</code>和 <code>REQUEST</code></p><ol><li class="lvl-6"><code>DATA</code>说明是存，<code>REQUEST</code>说明是取</li></ol></li><li class="lvl-3"><p>判断队列是否为空，为空就将此操作线程作为节点阻塞住</p></li><li class="lvl-3"><p>判断队列是否为空，不为空就判断队尾的节点模式和此操作的模式是否匹配</p><ol><li class="lvl-6">匹配的意思是指，一个 <code>DATA</code>操作就要匹配一个 <code>REQUEST</code></li></ol></li><li class="lvl-3"><p>如果模式相等，没有匹配上，就将此操作线程作为节点阻塞住</p></li><li class="lvl-3"><p>如果模式不相等，可以匹配上，则将 <code>DATA</code>操作的元素交给 <code>REQUEST</code>，然后进行消除。</p></li></ol><blockquote><p><code>TransferStack</code>和 <code>TransferQueue</code>的区别在与</p><p>判断队尾节点的模式是否相等，<code>TransferQueue</code>是将头部的节点进行匹配消除，而 <code>TransferStack</code>全部都是队尾的节点。这也体现的队列的栈的区别，一个是先进先出，一个是后进先出。</p><p>源码内部还使用到了CAS自旋锁，计划出一章关于锁类型的文章。</p></blockquote><h3 id="5）LinkedTransferQueue">5）LinkedTransferQueue</h3><p>如果理解了前面的 <code>SynchronousQueue</code>的话，那么 <code>LinkedTransferQueue</code>就很好理解了。</p><p>简单来说，<code>SynchronousQueue</code>中的 <code>TransferQueue</code>直接维护在 <code>LinkedTransferQueue</code>里面，少了一层抽象内部类。</p><p>如果 <code>SynchronousQueue</code>存取操作都会阻塞，只有配对上才会唤醒。那么 <code>LinkedTransferQueue</code>做了一定的简化和增强，其中一项就是可以自己决定是否阻塞存取操作。</p><p>一起来测试一下吧</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.queue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.date.DateUtil;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.StrUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.LinkedTransferQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkedTransferQueueTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        test1();</span><br><span class="line"><span class="comment">//        test2();</span></span><br><span class="line"><span class="comment">//        test3();</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 效果与SynchronousQueue基本一致</span></span><br><span class="line"><span class="comment">     * transfer插入时，没有匹配的取操作则会阻塞</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InterruptedException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        LinkedTransferQueue&lt;String&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedTransferQueue</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> queue.take();</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">                    System.out.println(StrUtil.format(<span class="string">&quot;取到了&#123;&#125;，&#123;&#125;&quot;</span>, str, DateUtil.formatTime(<span class="keyword">new</span> <span class="title class_">Date</span>())));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        queue.transfer(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;插入了A&quot;</span>);</span><br><span class="line">        queue.transfer(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;插入了B&quot;</span>);</span><br><span class="line">        queue.transfer(<span class="string">&quot;C&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;插入了C&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 存元素时</span></span><br><span class="line"><span class="comment">     * 如果有取操作阻塞的话，则进行匹配，返回true</span></span><br><span class="line"><span class="comment">     * 没有取操作的话，不阻塞，直接返回false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        LinkedTransferQueue&lt;String&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedTransferQueue</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.println(StrUtil.format(<span class="string">&quot;取到了&#123;&#125;，&#123;&#125;&quot;</span>, queue.take(), DateUtil.formatTime(<span class="keyword">new</span> <span class="title class_">Date</span>())));</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 等待三个取的操作都执行完</span></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(StrUtil.format(<span class="string">&quot;插入A：&#123;&#125;，&#123;&#125;&quot;</span>, queue.tryTransfer(<span class="string">&quot;A&quot;</span>), DateUtil.formatTime(<span class="keyword">new</span> <span class="title class_">Date</span>())));</span><br><span class="line">        System.out.println(StrUtil.format(<span class="string">&quot;插入B：&#123;&#125;，&#123;&#125;&quot;</span>, queue.tryTransfer(<span class="string">&quot;B&quot;</span>), DateUtil.formatTime(<span class="keyword">new</span> <span class="title class_">Date</span>())));</span><br><span class="line">        System.out.println(StrUtil.format(<span class="string">&quot;插入C：&#123;&#125;，&#123;&#125;&quot;</span>, queue.tryTransfer(<span class="string">&quot;C&quot;</span>), DateUtil.formatTime(<span class="keyword">new</span> <span class="title class_">Date</span>())));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 存操作时，没有取操作匹配，将会等待一段时间再进行返回</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InterruptedException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        LinkedTransferQueue&lt;String&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedTransferQueue</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">                    System.out.println(StrUtil.format(<span class="string">&quot;取到了&#123;&#125;，&#123;&#125;&quot;</span>, queue.take(), DateUtil.formatTime(<span class="keyword">new</span> <span class="title class_">Date</span>())));</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        System.out.println(StrUtil.format(<span class="string">&quot;插入A：&#123;&#125;，&#123;&#125;&quot;</span>, queue.tryTransfer(<span class="string">&quot;A&quot;</span>, <span class="number">3</span>, TimeUnit.SECONDS), DateUtil.formatTime(<span class="keyword">new</span> <span class="title class_">Date</span>())));</span><br><span class="line">        System.out.println(StrUtil.format(<span class="string">&quot;插入B：&#123;&#125;，&#123;&#125;&quot;</span>, queue.tryTransfer(<span class="string">&quot;B&quot;</span>, <span class="number">3</span>, TimeUnit.SECONDS), DateUtil.formatTime(<span class="keyword">new</span> <span class="title class_">Date</span>())));</span><br><span class="line">        System.out.println(StrUtil.format(<span class="string">&quot;插入C：&#123;&#125;，&#123;&#125;&quot;</span>, queue.tryTransfer(<span class="string">&quot;C&quot;</span>, <span class="number">3</span>, TimeUnit.SECONDS), DateUtil.formatTime(<span class="keyword">new</span> <span class="title class_">Date</span>())));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行 <code>test1</code>，<code>transfer</code>方法插入的操作会阻塞，直到有取的操作进入相匹配，这效果和 <code>SynchronousQueue</code>一样</p><p><img src="https://gitee.com/ban-moon/blogImg/raw/master/image/20211226123011.png" alt="image-20211226123010389" /></p><p>执行 <code>test2</code>。简单来说，存元素时，如果已有取操作阻塞了，将返回true。否则，直接返回false</p><p><img src="https://gitee.com/ban-moon/blogImg/raw/master/image/20211226123620.png" alt="image-20211226123619477" /></p><p>执行 <code>test3</code>，存操作时，没有取操作匹配，将会等待一段时间再进行返回</p><p><img src="https://gitee.com/ban-moon/blogImg/raw/master/image/20211226130017.png" alt="image-20211226130016488" /></p><h3 id="5）PriorityBlockingQueue">5）PriorityBlockingQueue</h3><p><code>PriorityBlockingQueue</code>优先级阻塞队列，存元素时不会阻塞，取元素时为空则阻塞。和其他阻塞队列相比，他的数组维护了一个二叉堆，对元素进行了优先级的排序。</p><p>测试下列代码，自定义实现比较器，这边就按照数字大小排序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.queue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.PriorityBlockingQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PriorityBlockingQueueTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        PriorityBlockingQueue&lt;Integer&gt; queue = <span class="keyword">new</span> <span class="title class_">PriorityBlockingQueue</span>&lt;Integer&gt;(<span class="number">3</span>, <span class="keyword">new</span> <span class="title class_">MyComparator</span>());</span><br><span class="line">        queue.put(<span class="number">1</span>);</span><br><span class="line">        queue.put(<span class="number">3</span>);</span><br><span class="line">        queue.put(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(queue.take());</span><br><span class="line">        System.out.println(queue.take());</span><br><span class="line">        System.out.println(queue.take());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyComparator</span> <span class="keyword">implements</span> <span class="title class_">Comparator</span>&lt;Integer&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Integer o1, Integer o2)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(o1==o2)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> o1&gt;o2? -<span class="number">1</span>: <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果</p><p><img src="https://gitee.com/ban-moon/blogImg/raw/master/image/20211228220933.png" alt="image-20211228220357330" /></p><h3 id="6）LinkedBlockingDeque">6）LinkedBlockingDeque</h3><p>这个和 <code>LinkedBlockingQueue</code>好像，我可以称其为 <code>LinkedBlockingQueue</code>的升级版。</p><p><code>LinkedBlockingDeque</code>被称为双端队列，是因为 <code>LinkedBlockingDeque</code>可以往链表两头插入元素。他的存储结构是链表，同 <code>LinkedBlockingQueue</code>一致，又因为存取可以在双端进行，所以不能像 <code>LinkedBlockingQueue</code>一样给两把锁，这里保持了和 <code>ArrayBlockingQueue</code>一样，仅有一把锁保持线程安全。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.queue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.LinkedBlockingDeque;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkedBlockingDequeTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        LinkedBlockingDeque&lt;String&gt; deque = <span class="keyword">new</span> <span class="title class_">LinkedBlockingDeque</span>&lt;&gt;(<span class="number">4</span>);</span><br><span class="line">        deque.put(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">        deque.put(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">        deque.put(<span class="string">&quot;C&quot;</span>);</span><br><span class="line">        deque.putFirst(<span class="string">&quot;D&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(deque.take());</span><br><span class="line">        System.out.println(deque.takeLast());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果，此队列中还有其他的api，都可以指定在队首或者队尾存元素，取元素同理</p><p><img src="https://gitee.com/ban-moon/blogImg/raw/master/image/20211228222756.png" alt="image-20211228222728181" /></p><h2 id="六、最后">六、最后</h2><p>在以前，并没有熟悉去使用过并发包的东西，在这次整理后，我对并发包有一定的了解。尤其是阻塞队列这一块，在看源码的时候还是挺有意思的。</p><p>当然本文没有列出所有使用 <code>Lock</code>锁的api方法，提供上<a href="https://www.matools.com/api/java8">jkd8在线文档</a>，学习要对着文档。</p><p>关于本文出现的代码示例，已提交至<a href="https://gitee.com/ban-moon/thread_learn/tree/master/">码云</a>，只看文章不懂时，一定要敲代码进行理解。</p><p>我是半月，祝你幸福！！！</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jdk </tag>
            
            <tag> 并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Valid注解使用及扩展</title>
      <link href="/archive/2b62f472/"/>
      <url>/archive/2b62f472/</url>
      
        <content type="html"><![CDATA[<h1>@Valid注解使用及扩展</h1><h2 id="一、-Vaild注解介绍">一、@Vaild注解介绍</h2><p>使用@Vaild注解可以简化入参的校验，配合统一异常实现简单快捷的入参校验，具体使用参照以下</p><h2 id="二、-Vaild具体使用">二、@Vaild具体使用</h2><h3 id="1、引入jar包">1、引入jar包</h3><p>如果你是springboot项目，此依赖内已经引入，无需再次引入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果没有，将依赖jar包引入到自己的项目中，maven依赖如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.validation<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>validation-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.0.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-validator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.5.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2、在入参请求类中添加限制注解">2、在入参请求类中添加限制注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.validator.constraints.Length;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.validator.constraints.NotBlank;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.validator.constraints.Range;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.NotNull;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserReq</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;用户名不能为空&quot;)</span></span><br><span class="line">    <span class="meta">@Length(message = &quot;用户名最大为&#123;max&#125;个字符&quot;, max = 20)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;密码不能为空&quot;)</span></span><br><span class="line">    <span class="meta">@Length(message = &quot;密码长度限制为&#123;min&#125;-&#123;max&#125;&quot;, min = 8, max = 16)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@NotNull(message = &quot;性别不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Byte sex;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Range(message = &quot;年龄范围为&#123;min&#125;-&#123;max&#125;&quot;, min = 0, max = 120)</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、控制器中使用-Vaild">3、控制器中使用@Vaild</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.validation.Valid;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user/post&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PostController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/create&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">createUser</span><span class="params">(<span class="meta">@Valid</span> <span class="meta">@RequestBody</span> UserReq req)</span>&#123;</span><br><span class="line">        log.info(JSON.toJSONString(req));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;成功&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、请求进行测试">4、请求进行测试</h3><p><img src="https://i.loli.net/2020/12/17/yBF27OPogrAqZJt.png" alt="vaild_error01.png" /></p><p><img src="https://i.loli.net/2020/12/17/NWbU3vLrgfSzc8T.png" alt="vaild_log01.png" /></p><blockquote><p>虽然拦截成功，但错误出参不知道所以然，一头雾水，需进行优化</p></blockquote><h2 id="三、优化出参">三、优化出参</h2><h3 id="1、修改控制器">1、修改控制器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.BindingResult;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.validation.Valid;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user/post&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PostController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/create&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">createUser</span><span class="params">(<span class="meta">@Valid</span> <span class="meta">@RequestBody</span> UserReq req, BindingResult result)</span>&#123;</span><br><span class="line">        <span class="comment">// 如果发生错误，则返回第一个错误信息，这里也可以自定义返回信息</span></span><br><span class="line">        <span class="keyword">if</span>(result.hasErrors())&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> result.getAllErrors().get(<span class="number">0</span>).getDefaultMessage();</span><br><span class="line">            log.error(message);</span><br><span class="line">            <span class="keyword">return</span> message;</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(JSON.toJSONString(req));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;成功&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、请求进行测试">2、请求进行测试</h3><p><img src="https://i.loli.net/2020/12/17/nudopJwEjGN7Iyl.png" alt="vaild_error02.png" /></p><h2 id="四、使用统一异常">四、使用统一异常</h2><h3 id="1、创建统一异常捕获类">1、创建统一异常捕获类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.MethodArgumentNotValidException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ControllerAdvice;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyExceptionHandler</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> ResultData <span class="title function_">exceptionHandler</span><span class="params">(Exception exception)</span>&#123;</span><br><span class="line">        log.error(<span class="string">&quot;统一异常&quot;</span>, exception);</span><br><span class="line">        <span class="comment">// 捕获对应异常进行处理，默认返回第一个错误信息，这里也可以自定义返回信息</span></span><br><span class="line">        <span class="keyword">if</span>(exception <span class="keyword">instanceof</span> MethodArgumentNotValidException)&#123;</span><br><span class="line">            <span class="type">MethodArgumentNotValidException</span> <span class="variable">ex</span> <span class="operator">=</span> (MethodArgumentNotValidException) exception;</span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> ex.getBindingResult().getAllErrors().get(<span class="number">0</span>).getDefaultMessage();</span><br><span class="line">            <span class="keyword">return</span> ResultData.getFailResult(message);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ResultData.getFailResult(<span class="string">&quot;服务器繁忙，请稍后再试！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、此时控制器不需要做额外处理">2、此时控制器不需要做额外处理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.validation.Valid;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user/post&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PostController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/create&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">createUser</span><span class="params">(<span class="meta">@Valid</span> <span class="meta">@RequestBody</span> UserReq req)</span>&#123;</span><br><span class="line">        log.info(JSON.toJSONString(req));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;成功&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、请求进行测试">3、请求进行测试</h3><p><img src="https://i.loli.net/2020/12/17/TcOieIlqQPRC4wU.png" alt="vaild_error03.png" /></p><p><img src="https://i.loli.net/2020/12/17/8tuqNROMkGfbegH.png" alt="vaild_log03.png" /></p><h2 id="五、验证注解">五、验证注解</h2><h3 id="1、官方的验证注解">1、官方的验证注解</h3><table><thead><tr><th>验证注解</th><th>说明</th></tr></thead><tbody><tr><td>@Null</td><td>只能为null</td></tr><tr><td>@NotNull</td><td>不能为null</td></tr><tr><td>@NotEmpty</td><td>不为null、不能为空字符串（字符串长度不为0、集合大小不为0）</td></tr><tr><td>@NotBlank</td><td>不为null、不能为空字符串，不同于@NotEmpty，@NotBlank会去掉空格再判断</td></tr><tr><td>@AssertFalse</td><td>必须为false</td></tr><tr><td>@AssertTrue</td><td>必须为true</td></tr><tr><td>@DecimalMax(value)</td><td>必须为一个不大于指定值的数字</td></tr><tr><td>@DecimalMin(value)</td><td>必须为一个不小于指定值的数字</td></tr><tr><td>@Max(value)</td><td>必须为一个不大于指定值的数字</td></tr><tr><td>@Min(value)</td><td>必须为一个不小于指定值的数字</td></tr><tr><td>@Digits(integer,fraction)</td><td>必须为一个小数，且整数部分的位数不能超过integer，小数部分的位数不能超过fraction</td></tr><tr><td>@Future</td><td>必须是一个将来的日期</td></tr><tr><td>@Past</td><td>必须是一个过去的日期</td></tr><tr><td>@Pattern(value)</td><td>必须符合指定的正则表达式</td></tr><tr><td>@Length(max,min)</td><td>字符长度必须在min到max之间</td></tr><tr><td>@Email</td><td>验证注解的元素值是Email</td></tr></tbody></table><h3 id="2、自定义验证注解">2、自定义验证注解</h3><h4 id="1）定义注解">1）定义注解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.validation.Constraint;</span><br><span class="line"><span class="keyword">import</span> javax.validation.Payload;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Constraint(validatedBy = &#123;SexConstraintValidator.class&#125;)</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD, ElementType.FIELD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SexConstraint &#123;</span><br><span class="line">    </span><br><span class="line">    String <span class="title function_">message</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;性别有误，请确认&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    Class&lt;?&gt;[] groups() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">    </span><br><span class="line">    Class&lt;? <span class="keyword">extends</span> <span class="title class_">Payload</span>&gt;[] payload() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2）定义校验器">2）定义校验器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.validation.ConstraintValidator;</span><br><span class="line"><span class="keyword">import</span> javax.validation.ConstraintValidatorContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SexConstraintValidator</span> <span class="keyword">implements</span> <span class="title class_">ConstraintValidator</span>&lt;SexConstraint, Byte&gt; &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initialize</span><span class="params">(SexConstraint sexConstraint)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;初始化信息&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(Byte sex, ConstraintValidatorContext constraintValidatorContext)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(sex==<span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(sex!=<span class="number">0</span> &amp;&amp; sex!=<span class="number">1</span> &amp;&amp; sex!=<span class="number">2</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3）使用注解">3）使用注解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.banmoon.lol.config.annotation.SexConstraint;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.validator.constraints.Length;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.validator.constraints.NotBlank;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.validator.constraints.Range;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserReq</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;用户名不能为空&quot;)</span></span><br><span class="line">    <span class="meta">@Length(message = &quot;用户名最大为&#123;max&#125;个字符&quot;, max = 20)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;密码不能为空&quot;)</span></span><br><span class="line">    <span class="meta">@Length(message = &quot;密码长度限制为&#123;min&#125;-&#123;max&#125;&quot;, min = 8, max = 16)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@SexConstraint</span></span><br><span class="line">    <span class="keyword">private</span> Byte sex;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Range(message = &quot;年龄范围为&#123;min&#125;-&#123;max&#125;&quot;, min = 0, max = 120)</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4）请求进行测试">4）请求进行测试</h4><p><img src="https://i.loli.net/2020/12/17/D3PRlsUTgjde4c1.png" alt="vaild_error04.png" /></p><p><img src="https://i.loli.net/2020/12/17/1QajW4ny7wUChYs.png" alt="vaild_log04.png" /></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> demo </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java线程池</title>
      <link href="/archive/2b9621c6/"/>
      <url>/archive/2b9621c6/</url>
      
        <content type="html"><![CDATA[<h1>Java线程池</h1><h2 id="一、介绍">一、介绍</h2><p>线程池，顾名思义，这是管理一堆线程而出现的对象。与数据库的连接池一致，它的出现解决了线程的频繁创建和销毁，从而浪费大量资源的问题。</p><p>所以，线程池中有提前创建好的线程，使用时直接分配获取，使用完再由线程池管理是否销毁。</p><p>优点</p><ul class="lvl-0"><li class="lvl-2"><p>降低资源消耗，也就是不需要重复多次的创建线程</p></li><li class="lvl-2"><p>更好的管理线程</p><ul class="lvl-2"><li class="lvl-4">比如可以获取当前运行的线程是什么</li><li class="lvl-4">还在等待执行的任务有什么</li></ul></li></ul><h2 id="二、使用线程池">二、使用线程池</h2><p>在JDK5起提供了线程池的对象，<code>ExecutorService</code>和<code>Executors</code></p><p>其中，<code>ExecutorService</code>和它的子类<code>ThreadPoolExecutor</code>是线程池的关键</p><p>而<code>Executors</code>是对应的工具类，里面有些工厂方法可以快速创建线程池</p><p>查看<code>ThreadPoolExecutor</code>的构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadPoolExecutor</span> <span class="keyword">extends</span> <span class="title class_">AbstractExecutorService</span> &#123;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ThreadPoolExecutor</span><span class="params">(<span class="type">int</span> corePoolSize,</span></span><br><span class="line"><span class="params">                              <span class="type">int</span> maximumPoolSize,</span></span><br><span class="line"><span class="params">                              <span class="type">long</span> keepAliveTime,</span></span><br><span class="line"><span class="params">                              TimeUnit unit,</span></span><br><span class="line"><span class="params">                              BlockingQueue&lt;Runnable&gt; workQueue,</span></span><br><span class="line"><span class="params">                              ThreadFactory threadFactory,</span></span><br><span class="line"><span class="params">                              RejectedExecutionHandler handler)</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>corePoolSize</td><td>核心线程数。就算目前空闲，也不会回收这几个线程</td></tr><tr><td>maximumPoolSize</td><td>最大线程数。当前线程池可以容纳的最大线程数量</td></tr><tr><td>keepAliveTime</td><td>线程保持存活时间。如果线程空间时间到达，将会进行销毁（除了核心线程）</td></tr><tr><td>unit</td><td>与<code>keepAliveTime</code>一起使用，仅是个时间单位</td></tr><tr><td>workQueue</td><td>工作等待队列。当线程池所有的线程都繁忙运行时，新添加的执行任务会暂时保留至此队列</td></tr><tr><td>threadFactory</td><td>创建线程的线程工厂</td></tr><tr><td>handler</td><td>拒绝策略。当队列满了后，还有执行任务进入时的策略</td></tr></tbody></table><hr /><p><code>workQueue</code>参数需要传入一个<code>BlockingQueue</code>，这是个双缓冲队列。BlockingQueue内部使用两条队列，允许两个线程同时向队列一个存储，一个取出操作。在保证并发安全的同时，提高了队列的存取效率，不能传入空对象，可设置容量大小，也可以不设置容量大小，那么它的容量就是<code>Integer.MAX_VALUE</code>。常用的几种实现类</p><table><thead><tr><th>类</th><th>说明</th></tr></thead><tbody><tr><td>ArrayBlockingQueue</td><td>规定容量大小的阻塞队列</td></tr><tr><td>LinkedBlockingQueue</td><td>既可以规定容量大小，也可以不规定的阻塞队列</td></tr><tr><td>SynchronizedQueue</td><td>一个特殊的队列，生产消费必须交替完成的队列<br />生产一个元素后，必须要有进行消费后，才能继续往队列内生产元素</td></tr></tbody></table><hr /><p><code>handler</code>拒绝策略</p><p>当线程池指定的队列容量满了时，将执行哪种拒绝任务的策略</p><table><thead><tr><th>策略类</th><th>说明</th></tr></thead><tbody><tr><td>AbortPolicy</td><td>默认，不执行新任务，直接抛出异常，提示线程池已满</td></tr><tr><td>DiscardPolicy</td><td>不执行新任务，也不抛出异常</td></tr><tr><td>DiscardOldestPolicy</td><td>它丢弃最老的未处理请求，然后重试执行，除非执行程序被关闭，在这种情况下任务被丢弃。</td></tr><tr><td>CallerRunsPolicy</td><td>直接在外层调用者的线程中调用新任务</td></tr></tbody></table><h3 id="1）小试牛刀">1）小试牛刀</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.pool;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">        executorService.execute(<span class="keyword">new</span> <span class="title class_">MyRunnable</span>());</span><br><span class="line">        executorService.execute(<span class="keyword">new</span> <span class="title class_">MyRunnable</span>());</span><br><span class="line">        executorService.execute(<span class="keyword">new</span> <span class="title class_">MyRunnable</span>());</span><br><span class="line">        executorService.execute(<span class="keyword">new</span> <span class="title class_">MyRunnable</span>());</span><br><span class="line">        executorService.execute(<span class="keyword">new</span> <span class="title class_">MyRunnable</span>());</span><br><span class="line">        <span class="comment">// lambda表达式</span></span><br><span class="line">        executorService.execute(() -&gt; &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName());</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 关闭线程池，如果不关闭，线程池将一直存在，池子内保留着核心线程，等待着调用</span></span><br><span class="line">        executorService.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyRunnable</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20211211195657.png" alt="image-20211211195656264" /></p><h3 id="2）Executors工具类">2）<code>Executors</code>工具类</h3><p>关于此的三个相关方法源码，其中还有一些他们的重载，这边就不细细讲了。</p><p>这些工具类方法，主要是快速创建<code>ThreadPoolExecutor</code>对象的方法，只是它们的参数各有所不同</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Executors</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title function_">newCachedThreadPool</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">0</span>, Integer.MAX_VALUE,</span><br><span class="line">                                      <span class="number">60L</span>, TimeUnit.SECONDS,</span><br><span class="line">                                      <span class="keyword">new</span> <span class="title class_">SynchronousQueue</span>&lt;Runnable&gt;());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title function_">newFixedThreadPool</span><span class="params">(<span class="type">int</span> nThreads)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(nThreads, nThreads,</span><br><span class="line">                                      <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                      <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;Runnable&gt;());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title function_">newSingleThreadExecutor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FinalizableDelegatedExecutorService</span></span><br><span class="line">            (<span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">                                    <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                    <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;Runnable&gt;()));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ScheduledExecutorService <span class="title function_">newScheduledThreadPool</span><span class="params">(</span></span><br><span class="line"><span class="params">            <span class="type">int</span> corePoolSize, ThreadFactory threadFactory)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ScheduledThreadPoolExecutor</span>(corePoolSize, threadFactory);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title function_">newWorkStealingPool</span><span class="params">(<span class="type">int</span> parallelism)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ForkJoinPool</span></span><br><span class="line">            (parallelism,</span><br><span class="line">             ForkJoinPool.defaultForkJoinWorkerThreadFactory,</span><br><span class="line">             <span class="literal">null</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>方法</th><th>参数说明</th><th>效果</th></tr></thead><tbody><tr><td>newCachedThreadPool</td><td>核心线程数为0<br />最大线程数已调到Integer.MAX_VALUE<br /></td><td>每提交一个线程任务，都将新创建一个新的线程来执行<br />如果需要执行的任务很多，这有可能会导致CPU100%的问题</td></tr><tr><td>newFixedThreadPool</td><td>核心线程数和最大线程数一致<br />但队列长度为Integer.MAX_VALUE</td><td>提交的任务将正常交给池子中的线程执行，执行完成也不会销毁，等待执行新的任务<br />如果执行的任务很多，队列会一直添加任务等待执行，可能会造成内存溢出的问题</td></tr><tr><td>newSingleThreadExecutor</td><td>核心线程数和最大线程数都为1<br />但队列长度为Integer.MAX_VALUE</td><td>和<code>newFixedThreadPool</code>类似，但池子中只有一个线程</td></tr><tr><td>newScheduledThreadPool</td><td>指定核心线程数，<br />使用的队列是<code>DelayedWorkQueue</code></td><td>用于处理延迟定时任务线程的线程池，可以定期执行</td></tr><tr><td>newWorkStealingPool</td><td>并行级别</td><td>这个线程池主要用于线程任务的拆分和合并，有更大资源利用效率</td></tr></tbody></table><p>根据需要来进行使用合适的线程池，测试下他们的执行方式和快慢</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.pool;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.date.DateUtil;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.StrUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">executorService1</span> <span class="operator">=</span> Executors.newCachedThreadPool();</span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">executorService2</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">executorService3</span> <span class="operator">=</span> Executors.newSingleThreadExecutor();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            executorService1.execute(<span class="keyword">new</span> <span class="title class_">MyDemo2</span>(i));</span><br><span class="line"><span class="comment">//            executorService2.execute(new MyDemo2(i));</span></span><br><span class="line"><span class="comment">//            executorService3.execute(new MyDemo2(i));</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        executorService1.shutdown();</span><br><span class="line">        executorService2.shutdown();</span><br><span class="line">        executorService3.shutdown();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyDemo2</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer i;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyDemo2</span><span class="params">(Integer i)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.i = i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(StrUtil.format(<span class="string">&quot;&#123;&#125;：&#123;&#125;，时间：&#123;&#125;&quot;</span>, Thread.currentThread().getName(), i, DateUtil.now()));</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>newCachedThreadPool</code>执行结果可以看到，一共有100个线程被创建出来</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20211212150432.png" alt="image-20211212150430276" /></p><p><code>newFixedThreadPool</code>执行结果，执行的永远都是那几个固定的线程，这里我们指定了10个线程，所以打印也是10个为一批来进行的。</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20211212150923.png" alt="image-20211212150922546" /></p><p><code>newSingleThreadExecutor</code>执行结果，从头到尾就只有一个线程在执行</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20211212154045.png" alt="image-20211212154044131" /></p><h3 id="3）线程工厂">3）线程工厂</h3><p>虽然有默认的线程工厂，但如果有需要进行处理的话，还是得记录一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.pool;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo3</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ThreadPoolExecutor</span> <span class="variable">executor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">10</span>, <span class="number">10</span>, <span class="number">60L</span>, TimeUnit.SECONDS,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">LinkedBlockingDeque</span>&lt;&gt;(), <span class="keyword">new</span> <span class="title class_">MyThreadFactory</span>(<span class="string">&quot;BANMOON-TEST&quot;</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            executor.execute(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName());</span><br><span class="line">                    Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        executor.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThreadFactory</span> <span class="keyword">implements</span> <span class="title class_">ThreadFactory</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ThreadGroup group;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">AtomicInteger</span> <span class="variable">threadNumber</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">private</span> String poolName;</span><br><span class="line"></span><br><span class="line">    MyThreadFactory(String poolName) &#123;</span><br><span class="line">        <span class="type">SecurityManager</span> <span class="variable">s</span> <span class="operator">=</span> System.getSecurityManager();</span><br><span class="line">        group = (s != <span class="literal">null</span>) ? s.getThreadGroup() :</span><br><span class="line">                Thread.currentThread().getThreadGroup();</span><br><span class="line">        <span class="built_in">this</span>.poolName = poolName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Thread <span class="title function_">newThread</span><span class="params">(Runnable r)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">threadName</span> <span class="operator">=</span> poolName + <span class="string">&quot;-&quot;</span> + threadNumber.getAndIncrement();</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(group, r, threadName, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (t.isDaemon())</span><br><span class="line">            t.setDaemon(<span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">if</span> (t.getPriority() != Thread.NORM_PRIORITY)</span><br><span class="line">            t.setPriority(Thread.NORM_PRIORITY);</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20211212163215.png" alt="image-20211212163007164" /></p><h3 id="4）拒绝策略">4）拒绝策略</h3><p>拒绝策略没什么好讲的，平常在使用时，注意下容量的大小，以及使用的策略。自己需要执行的任务数量多少，会不会照成内存溢出等，从这几个方面入手，选择最适合业务的队列容量和拒绝策略。</p><table><thead><tr><th>策略类</th><th>说明</th></tr></thead><tbody><tr><td>AbortPolicy</td><td>默认，不执行新任务，直接抛出异常，提示线程池已满</td></tr><tr><td>DiscardPolicy</td><td>不执行新任务，也不抛出异常</td></tr><tr><td>DiscardOldestPolicy</td><td>它丢弃最老的未处理请求，然后重试执行，除非执行程序被关闭，在这种情况下任务被丢弃。</td></tr><tr><td>CallerRunsPolicy</td><td>直接在外层调用者的线程中调用新任务</td></tr></tbody></table><p>演示<code>CallerRunsPolicy</code>，会在调用者的线程中，执行超出容量的任务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.pool;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo4</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30L</span>, TimeUnit.SECONDS,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="number">20</span>), <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.CallerRunsPolicy());</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">            executorService.execute(<span class="keyword">new</span> <span class="title class_">MyDemo4</span>(i));</span><br><span class="line">        &#125;</span><br><span class="line">        executorService.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyDemo4</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer i;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyDemo4</span><span class="params">(Integer i)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.i = i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;：&quot;</span> + i);</span><br><span class="line">            Thread.sleep(<span class="number">500</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果，上述线程池指定了最大线程数为20，队列容量为20。所以当执行第41个任务时，队列满了，将由调用者的线程来执行这个任务，此处是主线程</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20211212164524.png" alt="image-20211212164523094" /></p><h2 id="三、其他">三、其他</h2><h3 id="1）执行任务的优先级">1）执行任务的优先级</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadPoolExecutor</span> <span class="keyword">extends</span> <span class="title class_">AbstractExecutorService</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(Runnable command)</span> &#123;</span><br><span class="line">        <span class="comment">// 判断是否为空</span></span><br><span class="line">        <span class="keyword">if</span> (command == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 判断当前正在运行的线程数是否小于核心线程数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> ctl.get();</span><br><span class="line">        <span class="keyword">if</span> (workerCountOf(c) &lt; corePoolSize) &#123;</span><br><span class="line">            <span class="comment">// 添加任务至线程执行，成功添加则结束</span></span><br><span class="line">            <span class="keyword">if</span> (addWorker(command, <span class="literal">true</span>))</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            c = ctl.get();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果核心线程都有在运行，将任务放至队列中</span></span><br><span class="line">        <span class="keyword">if</span> (isRunning(c) &amp;&amp; workQueue.offer(command)) &#123;</span><br><span class="line">            <span class="comment">// 如果成功推入队列，将再次检查线程状态，有线程死亡则将当前任务添加至线程执行</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">recheck</span> <span class="operator">=</span> ctl.get();</span><br><span class="line">            <span class="keyword">if</span> (! isRunning(recheck) &amp;&amp; remove(command))</span><br><span class="line">                reject(command);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (workerCountOf(recheck) == <span class="number">0</span>)</span><br><span class="line">                addWorker(<span class="literal">null</span>, <span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果队列推入任务失败了，那将直接添加至线程执行</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (!addWorker(command, <span class="literal">false</span>))</span><br><span class="line">            <span class="comment">// 如果任务添加至线程失败，则将进行拒绝策略</span></span><br><span class="line">            reject(command);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 会从线程工厂获取线程，并添加执行任务</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> firstTask 执行的任务</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> core 是否可以添加至核心线程</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true：成功添加至线程执行</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">addWorker</span><span class="params">(Runnable firstTask, <span class="type">boolean</span> core)</span> &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20211212183818.png" alt="image-20211212183817010" /></p><h2 id="四、最后">四、最后</h2><p>线程池这东西干货还是挺多的，还有挺多没有整理完。比如说<code>addWorker</code>方法，线程池的执行调度等</p><p>后续有什么新的理解继续补上，未完待续</p><p>关于本文出现的代码示例，已提交至<a href="https://gitee.com/ban-moon/thread_learn/tree/master/">码云</a>，只看文章不懂时，一定要敲代码进行理解。</p><p>我是半月，祝你幸福！</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jdk </tag>
            
            <tag> 并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java多线程</title>
      <link href="/archive/a2c3ad19/"/>
      <url>/archive/a2c3ad19/</url>
      
        <content type="html"><![CDATA[<h1>Java多线程</h1><h2 id="一、介绍">一、介绍</h2><p>在了解线程之前，还需要简单了解进程的概念。简单的来说就是一心多用</p><p>在生活之中，我们常常可以一心多用。我可以一边打游戏，一边放着音乐听听歌，甚至可以再泡个脚。没错，这也可以理解成我的多线程生活。</p><p>而在计算机之中，也有以上同时进行的任务，这就可以叫做多线程，例如</p><ul class="lvl-0"><li class="lvl-2"><p>进程：比如说电脑上开着游戏，音乐等其他多款应用。这每一个应用姑且可以算作一个进程</p></li><li class="lvl-2"><p>线程：往往一款游戏，有伤害计算，有数据上传，图像音乐等等的步骤，这每个执行的细项也可以理解成一个线程</p></li></ul><p>所以总结来看，进程是一个应用运行的过程，可以包含多个线程运行，但至少必须要有一个线程，这样才能撑得起这是个进程。</p><p>线程是cpu对某个资源的调度计算的通道，这条通道下，cpu可以执行某些任务的调度。</p><blockquote><p>在java中，我们从Main方法运行，所以称其为主线程</p><p>除了主线程外，java还有一个后台线程在默默地工作着，这就是GC线程，也就是垃圾回收所处的线程</p></blockquote><h2 id="二、Java线程的实现">二、Java线程的实现</h2><h3 id="1）继承Thread类">1）继承<code>Thread</code>类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.mode;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现多线程方式</span></span><br><span class="line"><span class="comment"> * 1、继承类Thread</span></span><br><span class="line"><span class="comment"> * 2、实现其run方法</span></span><br><span class="line"><span class="comment"> * 3、创建该对象，调用start方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExtendsMode</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ExtendsModeA</span> <span class="variable">modeA</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ExtendsModeA</span>();</span><br><span class="line">        <span class="type">ExtendsModeB</span> <span class="variable">modeB</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ExtendsModeB</span>();</span><br><span class="line">        modeA.start();</span><br><span class="line">        modeB.start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++)</span><br><span class="line">            System.out.println(<span class="string">&quot;=========== 主线程 ===========&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ExtendsModeA</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;=========== 线程A ===========&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ExtendsModeB</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;=========== 线程B ===========&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>启动后就会发现，原本应该最后打印的主线程，居然夹杂在线程A和线程B之中了。</p><p>这也就是说这几条线程是交替执行的，计算机实际上不能做到真正的并发，但它的线程之间的切换人为感知不出来，所以就给人一种并发的错觉。</p><p>那一条线程优先执行，这和CPU的调度有关，后续会讲到。</p></blockquote><h3 id="2）实现Runnable接口">2）实现<code>Runnable</code>接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.mode;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现多线程方式</span></span><br><span class="line"><span class="comment"> * 1、实现接口Runnable</span></span><br><span class="line"><span class="comment"> * 2、构造Thread对象，将Runnable实现对象作为参数</span></span><br><span class="line"><span class="comment"> * 3、调用Thread对象的start方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RunnableMode</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">modeA</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">RunnableModeA</span>());</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">modeB</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">RunnableModeB</span>());</span><br><span class="line">        modeA.start();</span><br><span class="line">        modeB.start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++)</span><br><span class="line">            System.out.println(<span class="string">&quot;=========== 主线程 ===========&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RunnableModeA</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;=========== 线程A ===========&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RunnableModeB</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;=========== 线程B ===========&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行后效果与上方一致，打印的信息都是穿插打印的</p><blockquote><p>由于Java只支持单继承，为了使得线程实现更具有灵活性，推荐使用Runnable接口方式</p><p>此外，Runnable还有<code>Lanmbda</code>的简写方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.mode;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现多线程方式</span></span><br><span class="line"><span class="comment"> * 1、实现接口Runnable，Lambda简写方式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RunnableModeByLambda</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++)</span><br><span class="line">                System.out.println(<span class="string">&quot;=========== 线程A ===========&quot;</span>);</span><br><span class="line">        &#125;).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++)</span><br><span class="line">                System.out.println(<span class="string">&quot;=========== 线程B ===========&quot;</span>);</span><br><span class="line">        &#125;).start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++)</span><br><span class="line">            System.out.println(<span class="string">&quot;=========== 主线程 ===========&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h3 id="3）实现Callable接口">3）实现<code>Callable</code>接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.mode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现多线程方式</span></span><br><span class="line"><span class="comment"> * 1、实现Callable接口，了解</span></span><br><span class="line"><span class="comment"> * 2、需要定义返回值类型</span></span><br><span class="line"><span class="comment"> * 3、创建执行服务线程池，来进行执行</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CallableMode</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">service</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">2</span>);</span><br><span class="line">        Future&lt;String&gt; resultA = service.submit(<span class="keyword">new</span> <span class="title class_">CallableModeA</span>());</span><br><span class="line">        Future&lt;String&gt; resultB = service.submit(<span class="keyword">new</span> <span class="title class_">CallableModeB</span>());</span><br><span class="line">        System.out.println(<span class="string">&quot;结果A：&quot;</span> + resultA.get());</span><br><span class="line">        System.out.println(<span class="string">&quot;结果B：&quot;</span> + resultB.get());</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++)</span><br><span class="line">            System.out.println(<span class="string">&quot;=========== 主线程 ===========&quot;</span>);</span><br><span class="line">        service.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CallableModeA</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;String&gt;&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;=========== 线程A ===========&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++)</span><br><span class="line">            System.out.println(str);</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CallableModeB</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;String&gt;&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;=========== 线程B ===========&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++)</span><br><span class="line">            System.out.println(str);</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里使用到了一个执行服务工具类<code>Executors</code>，它可以创建线程池，后续会讲到</p></blockquote><h2 id="三、线程状态及方法">三、线程状态及方法</h2><h3 id="1）状态">1）状态</h3><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20211205001705.png" alt="image-20211205001704675" /></p><blockquote><p>其实，jdk中还有一个线程状态的枚举<code>Thread.State</code></p><p>和上图有些不同，但不影响理解，只是少了个就绪的状态</p></blockquote><h3 id="2）方法">2）方法</h3><table><thead><tr><th>Thread方法</th><th>是否静态</th><th>说明</th></tr></thead><tbody><tr><td>setPriority</td><td>否</td><td>设置线程的优先级，优先级高的更有机会优先被CPU调度，但这个不是绝对</td></tr><tr><td>sleep</td><td>是</td><td>让当前所处的线程进行休眠，可以用来模拟网络延迟，放大同步问题</td></tr><tr><td>join</td><td>否</td><td>插队，等待正在运行的线程终止</td></tr><tr><td>yield</td><td>是</td><td>暂停当前的线程，执行其他的线程，让CPU选择再次进行选择调度</td></tr></tbody></table><h4 id="1、setPriority">1、setPriority</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.status;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadPriorityMethods</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">threadA</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">MyThread</span>(), <span class="string">&quot;线程A&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">threadB</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">MyThread</span>(), <span class="string">&quot;线程B&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">threadC</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">MyThread</span>(), <span class="string">&quot;线程C&quot;</span>);</span><br><span class="line">        threadA.setPriority(<span class="number">9</span>);</span><br><span class="line">        threadB.setPriority(<span class="number">5</span>);</span><br><span class="line">        threadC.setPriority(<span class="number">1</span>);</span><br><span class="line">        threadC.start();</span><br><span class="line">        threadB.start();</span><br><span class="line">        threadA.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;============&quot;</span> + Thread.currentThread().getName() + <span class="string">&quot;============&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、sleep">2、sleep</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.status;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadSleepMethods</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;HH:mm:ss&quot;</span>);</span><br><span class="line">            <span class="keyword">while</span> (i++&lt;<span class="number">10</span>)&#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">dateStr</span> <span class="operator">=</span> sdf.format(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">                System.out.println(dateStr + <span class="string">&quot;============ 线程A ============&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、join">3、join</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.status;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadJoinMethods</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">200</span>; i++) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;============= 线程A&quot;</span>+ i +<span class="string">&quot; =============&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        thread.start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i==<span class="number">100</span>)</span><br><span class="line">                thread.join();</span><br><span class="line">            System.out.println(<span class="string">&quot;============= 主线程&quot;</span>+ i +<span class="string">&quot; =============&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="4、yield">4、yield</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.status;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadYieldMethods</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(i==<span class="number">200</span>)</span><br><span class="line">                    Thread.<span class="keyword">yield</span>();</span><br><span class="line">                System.out.println(<span class="string">&quot;============= 线程A&quot;</span>+ i +<span class="string">&quot; =============&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        thread.start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i==<span class="number">500</span>)</span><br><span class="line">                Thread.<span class="keyword">yield</span>();</span><br><span class="line">            System.out.println(<span class="string">&quot;============= 主线程&quot;</span>+ i +<span class="string">&quot; =============&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、synchronized关键字">四、<code>synchronized</code>关键字</h2><h3 id="1）并发数据问题">1）并发数据问题</h3><p>看下列代码，总共有10张票，创建3个线程，每个线程都去取票，直到票数小于0，则退出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.sync;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 不安全的买票服务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TicketServer</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">ticketNum</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 取票</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取当前线程名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> Thread.currentThread().getName();</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(ticketNum&lt;=<span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            System.out.println(name + <span class="string">&quot;：取到了第&quot;</span> + ticketNum + <span class="string">&quot;张票&quot;</span>);</span><br><span class="line">            <span class="comment">// 模拟网络延迟</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">200</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            ticketNum--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">TicketServer</span> <span class="variable">ticketServer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TicketServer</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(ticketServer, <span class="string">&quot;A&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(ticketServer, <span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(ticketServer, <span class="string">&quot;C&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>预期将会是，10，9，8，7…直到取完票，但真实的结果是</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20211204181758.png" alt="image-20211204181756933" /></p><p>我执行了很多遍，结果远远没有出现我预期的模样。</p><p>这是因为cpu调度线程太快了，当取票完成，但票数还没有减一的时候，其他的线程读取了没有减票前的票数，所以导致出现的问题，此类问题被称为并发问题，也称线程安全问题</p><h3 id="2）synchronized介绍">2）synchronized介绍</h3><p>此关键字保证了访问同个资源时出现的并发问题。</p><p>他的工作原理是对指定对象进行加锁，对此锁表示占有。导致其他线程进不来，可以查看下面示例的代码</p><p>用<code>synchronized</code>对取票检票进行限制，这把锁就是<code>ticketServer</code>。当A线程获取锁，进入代码执行时，其他线程必须进行等待，直到A线程完成逻辑释放锁后，CPU再重新进行调度，看谁运气好能获取到这一次的锁。</p><p>在这个等待锁的线程状态，也被称为同步阻塞状态。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.sync;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SyncTicketServer</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">ticketNum</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 取票</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 获取当前线程名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> Thread.currentThread().getName();</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="comment">// 注意，锁住的是this对象哦，也就是32行创建出来的ticketServer</span></span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="built_in">this</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(ticketNum&lt;=<span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                System.out.println(name + <span class="string">&quot;：取到了第&quot;</span> + ticketNum + <span class="string">&quot;张票&quot;</span>);</span><br><span class="line">                <span class="comment">// 模拟网络延迟</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">200</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                ticketNum--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">SyncTicketServer</span> <span class="variable">ticketServer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SyncTicketServer</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(ticketServer, <span class="string">&quot;A&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(ticketServer, <span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(ticketServer, <span class="string">&quot;C&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20211205164434.png" alt="image-20211205164432798" /></p><h3 id="3）死锁">3）死锁</h3><p>诚然，synchronized可以解决同步问题，但他的缺点需要了解</p><ul class="lvl-0"><li class="lvl-2"><p>效率：线程处于同步阻塞中，效率上不去，但这是没有办法的</p></li><li class="lvl-2"><p>死锁：当代码考虑不周时，将会出现死锁问题</p></li></ul><p>下列示例代码展示了死锁，有两个线程，手中持有自己的一把锁，这又想获取对方手中的锁时，两个线程相持不下，都处于同步阻塞阶段，导致出现的死锁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.sync;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeadLock</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">threadA</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">ThreadA</span>(), <span class="string">&quot;ThreadA&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">threadB</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">ThreadB</span>(), <span class="string">&quot;ThreadB&quot;</span>);</span><br><span class="line">        threadA.start();</span><br><span class="line">        threadB.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ThreadA</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (ThreadA.class)&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;已持有锁：ThreadA&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">synchronized</span> (ThreadB.class)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;已持有锁：ThreadA&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ThreadB</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (ThreadB.class)&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;已持有锁：ThreadB&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">synchronized</span> (ThreadA.class)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;已持有锁：ThreadA&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>真实的情况远比上述要复杂的多，但死锁的基本概念就是如此。</p><h3 id="4）不同的修饰位置">4）不同的修饰位置</h3><p>我们现在知道，synchronized锁住的是对象，也就是获取到了对象的锁，但处于不同的修饰位置，获取哪个对象的锁也是不一致的。</p><p>简单可以分为下面几个修饰位置</p><h4 id="1、修饰this时">1、修饰this时</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.sync;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.date.DateUtil;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.StrUtil;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * sync修饰对象时</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SyncDemo1</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">printOne</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="built_in">this</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">format</span> <span class="operator">=</span> StrUtil.format(<span class="string">&quot;&#123;&#125;：当前this对象：&#123;&#125;，时间：&#123;&#125;&quot;</span>, Thread.currentThread().getName(), <span class="built_in">this</span>, DateUtil.now());</span><br><span class="line">                System.out.println(format);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">printTwo</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="built_in">this</span>)&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">format</span> <span class="operator">=</span> StrUtil.format(<span class="string">&quot;&#123;&#125;：当前this对象：&#123;&#125;，时间：&#123;&#125;&quot;</span>, Thread.currentThread().getName(), <span class="built_in">this</span>, DateUtil.now());</span><br><span class="line">            System.out.println(format);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">SyncDemo1</span> <span class="variable">syncDemo1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SyncDemo1</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            syncDemo1.printOne();</span><br><span class="line">        &#125;, <span class="string">&quot;线程A&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            syncDemo1.printTwo();</span><br><span class="line">        &#125;, <span class="string">&quot;线程B&quot;</span>).start();</span><br><span class="line"><span class="comment">//        System.out.println(syncDemo1);// 指的就是31行创建出来的对象</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20211206231145.png" alt="image-20211206231143698" /></p><p>如上，因为只创建一个实例，所以他们锁定的只是<code>this</code></p><p>如果不信，可以再<code>new SyncDemo1()</code>，让线程B去调用这个实例对象的<code>printTwo()</code>，保证你看到不同的结果</p><h4 id="2、修饰XXX-class时">2、修饰XXX.class时</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.sync;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.date.DateUtil;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.StrUtil;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 当修饰class对象时</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SyncDemo2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">printOne</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (SyncDemo2.class)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">format</span> <span class="operator">=</span> StrUtil.format(<span class="string">&quot;&#123;&#125;：时间：&#123;&#125;&quot;</span>, Thread.currentThread().getName(), DateUtil.now());</span><br><span class="line">                System.out.println(format);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">printTwo</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (SyncDemo2.class)&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">format</span> <span class="operator">=</span> StrUtil.format(<span class="string">&quot;&#123;&#125;：时间：&#123;&#125;&quot;</span>, Thread.currentThread().getName(), DateUtil.now());</span><br><span class="line">            System.out.println(format);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">SyncDemo2</span> <span class="variable">syncDemo2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SyncDemo2</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            syncDemo2.printOne();</span><br><span class="line">        &#125;, <span class="string">&quot;线程A&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            syncDemo2.printTwo();</span><br><span class="line">        &#125;, <span class="string">&quot;线程B&quot;</span>).start();</span><br><span class="line"><span class="comment">//        System.out.println(SyncDemo2.class);// class对象具有唯一性</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个结果与上面一致，因为锁住的都是同一个对象</p><h4 id="3、修饰成员方法时">3、修饰成员方法时</h4><p>在这里我做了对比，判断修饰this和修饰成员方法时，锁住的对象是否是同一个</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.sync;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.date.DateUtil;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.StrUtil;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 修饰普通方法，锁住的到底是什么</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SyncDemo3</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">printOne</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">format</span> <span class="operator">=</span> StrUtil.format(<span class="string">&quot;&#123;&#125;：时间：&#123;&#125;&quot;</span>, Thread.currentThread().getName(), DateUtil.now());</span><br><span class="line">            System.out.println(format);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">printTwo</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="string">&quot;Don&#x27;t write that&quot;</span>)&#123;</span><br><span class="line"><span class="comment">//        synchronized (this)&#123;// 测试锁住的是否是this</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">format</span> <span class="operator">=</span> StrUtil.format(<span class="string">&quot;&#123;&#125;：时间：&#123;&#125;&quot;</span>, Thread.currentThread().getName(), DateUtil.now());</span><br><span class="line">            System.out.println(format);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">SyncDemo3</span> <span class="variable">syncDemo3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SyncDemo3</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            syncDemo3.printOne();</span><br><span class="line">        &#125;, <span class="string">&quot;线程A&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            syncDemo3.printTwo();</span><br><span class="line">        &#125;, <span class="string">&quot;线程B&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当23行放开进行使用，会发现线程B会被线程A卡住，说明修饰成员方法时，获取的就是当前对象的锁</p><h4 id="4、修饰静态方法时">4、修饰静态方法时</h4><p>在这里进行了对比，判断修饰静态方法、修饰this、修饰当前class对象时，获取的是什么对象的锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.sync;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.date.DateUtil;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.StrUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SyncDemo4</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">printOne</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">format</span> <span class="operator">=</span> StrUtil.format(<span class="string">&quot;&#123;&#125;：时间：&#123;&#125;&quot;</span>, Thread.currentThread().getName(), DateUtil.now());</span><br><span class="line">            System.out.println(format);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">printTwo</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="built_in">this</span>)&#123;</span><br><span class="line"><span class="comment">//        synchronized (SyncDemo4.class)&#123;// 判断获取的是否是SyncDemo4.class对象</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">format</span> <span class="operator">=</span> StrUtil.format(<span class="string">&quot;&#123;&#125;：时间：&#123;&#125;&quot;</span>, Thread.currentThread().getName(), DateUtil.now());</span><br><span class="line">            System.out.println(format);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">SyncDemo4</span> <span class="variable">syncDemo4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SyncDemo4</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            syncDemo4.printOne();</span><br><span class="line">        &#125;, <span class="string">&quot;线程A&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            syncDemo4.printTwo();</span><br><span class="line">        &#125;, <span class="string">&quot;线程B&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果线程B马上打印，那说明获取的不是同一把锁。要是线程B被线程A卡住了，那说明确实是一把锁了</p><blockquote><p>总结</p><ul class="lvl-1"><li class="lvl-2">修饰代码块时：锁住的是括号中的对象<ul class="lvl-3"><li class="lvl-4">this：指向的是当前对象，也就是实现重写run方法的类实例化出来的对象</li><li class="lvl-4">XXX.class：就是这个class对象，我比较喜欢使用，因为class对象具有唯一性</li></ul></li><li class="lvl-2">修饰方法时：<ul class="lvl-3"><li class="lvl-4">成员方法：成员方法所在的类所创建出来的对象，也就是谁调用了这个方法，获取的就是谁的锁</li><li class="lvl-4">静态方法：当前方法所在类的class对象，XXX.class</li></ul></li></ul><p>注意：不要修饰什么乱七八糟的对象，比如字符串对象，就像上面写的<code>Don't write that</code>。有时候，自己都分不清两个是不是同一个对象，还敢乱写在代码中。</p></blockquote><h3 id="5）异常释放锁">5）异常释放锁</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.sync;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SyncException</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (SyncException.class)&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(i==<span class="number">10</span>)</span><br><span class="line">                        i = <span class="number">1</span>/<span class="number">0</span>;<span class="comment">// 异常</span></span><br><span class="line">                    System.out.println(<span class="string">&quot;线程A：&quot;</span> + i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        <span class="keyword">synchronized</span> (SyncException.class)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;主线程&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如下运行结果，线程中出现异常时，当前持有的锁会立即释放。所以一定要准确的捕获异常，可以试试将异常捕获，保证线程的安全。</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20211208223226.png" alt="image-20211208223225143" /></p><h2 id="五、线程通信">五、线程通信</h2><p>在上述<code>synchronized</code>的代码案例中，线程获取了锁后，都是一条路走到黑的，除了异常没捕获的那次。</p><p>线程通信，主要是线程在获取锁后，主动将锁放弃，让其他线程也来喝喝汤，cpu大哥觉得你很懂事，cpu很欣慰。</p><h3 id="1）主要方法">1）主要方法</h3><p>由于<code>synchronized</code>获取的是对象的锁，所以有关线程之间的阻塞唤醒，都来自<code>Object</code>类</p><table><thead><tr><th>方法名</th><th>功能</th></tr></thead><tbody><tr><td>public final void wait()</td><td>释放当前锁，本线程进入睡眠，从运行状态进入阻塞状态<br />需要等待其他线程唤醒</td></tr><tr><td>public final native void wait(long timeout)</td><td>释放当前锁，本线程进入睡眠，从运行状态进入阻塞状态，<br />一段时间后本线程自动醒来</td></tr><tr><td>public final native void notify()</td><td>唤醒其他任意一个线程，将它从阻塞状态拉回到就绪状态</td></tr><tr><td>public final native void notifyAll()</td><td>唤醒其他所有线程，将它们从阻塞状态拉回到就绪状态</td></tr></tbody></table><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20211208230102.png" alt="image-20211208230101275" /></p><h3 id="2）简单示例">2）简单示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.wait;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.date.DateUtil;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.StrUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Demo1.class)&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        System.out.println(StrUtil.format(<span class="string">&quot;线程A：&#123;&#125;，时间：&#123;&#125;&quot;</span>, i, DateUtil.now()));</span><br><span class="line">                        <span class="keyword">if</span>(i==<span class="number">5</span>)&#123;</span><br><span class="line">                            System.out.println(<span class="string">&quot;睡一会，释放锁&quot;</span>);</span><br><span class="line">                            Demo1.class.wait();</span><br><span class="line">                        &#125;</span><br><span class="line">                        Thread.sleep(<span class="number">500</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 等待3秒</span></span><br><span class="line">        Thread.sleep(<span class="number">5000</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;主线程：唤醒&quot;</span>);</span><br><span class="line">        Demo1.class.notify();</span><br><span class="line">        <span class="keyword">synchronized</span> (Demo1.class)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;主线程：唤醒&quot;</span>);</span><br><span class="line">            Demo1.class.notify();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>执行结果，主线程唤醒后，线程A继续走他未走完的路<br /><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20211208223926.png" alt="image-20211208223918311" /></p><blockquote><p>大家可以放开上述代码的第29，30行，运行后惊奇的发现居然出了异常</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20211208224238.png" alt="image-20211208224223077" /></p><p>这个异常是什么原因呢，在执行wait()、notify()、notifyAll()方法时，必须要持有锁。而且唤醒还一定要持有相同对象的锁，也就是使用<code>synchronized</code>获取同样的对象的锁，并使用该对象进行唤醒其实很好理解，一个持有锁的线程，怎么可能会被没有持有同样锁的线程唤醒呢</p></blockquote><h3 id="3）生产者消费者模式">3）生产者消费者模式</h3><p>通过一个中间容器，来设置该容器的最大容量作为生产者线程的结束</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.wait;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.StrUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.Queue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">Container</span> <span class="variable">container</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Container</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Consumer</span>(container)).start();</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Producer</span>(container)).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生产者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Producer</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Container container;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Producer</span><span class="params">(Container container)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.container = container;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                container.put(i);</span><br><span class="line">                System.out.println(StrUtil.format(<span class="string">&quot;生产者：生产了&#123;&#125;，当前数量：&#123;&#125;&quot;</span>, i, container.queue.size()));</span><br><span class="line">                i++;</span><br><span class="line">                Thread.sleep(<span class="number">200</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消费者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Consumer</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Container container;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Consumer</span><span class="params">(Container container)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.container = container;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> container.get();</span><br><span class="line">                System.out.println(<span class="string">&quot;消费者：消费了&quot;</span> + i);</span><br><span class="line">                Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 容器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Container</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> Queue&lt;Integer&gt; queue;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="variable">MAX_SIZE</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Container</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> Integer <span class="title function_">get</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(queue.size()==<span class="number">0</span>)&#123;</span><br><span class="line">                notifyAll();</span><br><span class="line">                wait();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.queue.poll();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(Integer integer)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(queue.size()&gt;=MAX_SIZE)&#123;</span><br><span class="line">                notifyAll();</span><br><span class="line">                wait();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">this</span>.queue.add(integer);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20211209211137.png" alt="image-20211209211134749" /></p><h3 id="4）信号灯法">4）信号灯法</h3><p>设置一个标志位flag，来控制线程之间的通信状态。简单改造上面的生产消费者，使通过<code>flag</code>来进行通信。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.wait;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.date.DateUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo3</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Demo3Flag</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Demo3Flag</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Demo3Producer</span>(flag)).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Demo3Consumer</span>(flag)).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Demo3Producer</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Demo3Flag flag;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Demo3Producer</span><span class="params">(Demo3Flag flag)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.flag = flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++)&#123;</span><br><span class="line">            flag.production();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Demo3Consumer</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Demo3Flag flag;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Demo3Consumer</span><span class="params">(Demo3Flag flag)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.flag = flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++)&#123;</span><br><span class="line">            flag.consumption();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Demo3Flag</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 标志位 true：生成，false：消费</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> flag;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Demo3Flag</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.flag = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setFlag</span><span class="params">(<span class="type">boolean</span> flag)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.flag = flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">production</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">this</span>.flag)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException interruptedException) &#123;</span><br><span class="line">                interruptedException.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;：正在生产...&quot;</span> + DateUtil.now());</span><br><span class="line">        <span class="comment">// 生产完成，标志位设置为可以消费</span></span><br><span class="line">        <span class="built_in">this</span>.flag = <span class="literal">false</span>;</span><br><span class="line">        notifyAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">consumption</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span>.flag)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException interruptedException) &#123;</span><br><span class="line">                interruptedException.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;：正在消费...&quot;</span> + DateUtil.now());</span><br><span class="line">        <span class="comment">// 消费完成，标志位设置为可以继续生产</span></span><br><span class="line">        <span class="built_in">this</span>.flag = <span class="literal">true</span>;</span><br><span class="line">        notifyAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5）虚假唤醒问题">5）虚假唤醒问题</h3><p>在线程通信中，如果使用不当，将会出现虚假唤醒的问题，运行下列代码来进行查看</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.wait;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 虚假唤醒，问题演示</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo4</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyDemo4</span> <span class="variable">myDemo4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyDemo4</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) myDemo4.increment();</span><br><span class="line">        &#125;, <span class="string">&quot;线程A&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) myDemo4.decrement();</span><br><span class="line">        &#125;, <span class="string">&quot;线程B&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) myDemo4.increment();</span><br><span class="line">        &#125;, <span class="string">&quot;线程C&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) myDemo4.decrement();</span><br><span class="line">        &#125;, <span class="string">&quot;线程D&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyDemo4</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">increment</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(number==<span class="number">1</span>)</span><br><span class="line">                wait();</span><br><span class="line">            number++;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;：&quot;</span> + number);</span><br><span class="line">            notifyAll();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">decrement</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(number==<span class="number">0</span>)</span><br><span class="line">                wait();</span><br><span class="line">            number--;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;：&quot;</span> + number);</span><br><span class="line">            notifyAll();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正常预想的结果，ABCD四个线程使得number在0和1之间反复横跳，但实际上的结果，却大大出乎我所料</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20211214231424.png" alt="image-20211214231422847" /></p><p>这个原因很好解释，因为<code>wait</code>方法有个特性，在摔倒就在哪里爬起来，然后继续向前走。简单的描述下出现问题的步骤，</p><ol><li class="lvl-3"><p>A线程，number+1</p></li><li class="lvl-3"><p>C线程，判断后进行<code>wait</code></p></li><li class="lvl-3"><p>A线程，判断后进行<code>wait</code></p></li><li class="lvl-3"><p>B线程，number-1，唤醒其他线程，此时A，C被唤醒</p></li><li class="lvl-3"><p>A线程，number+1</p></li><li class="lvl-3"><p>C线程，number+1</p></li><li class="lvl-3"><p>一直持续下去…</p></li></ol><p>好的，到第6步就已经出现问题了，记住上面说的，在哪里摔倒就在哪里爬起来。</p><p>第二步时，C线程在判断完成后进入等待，直到第六步被CPU调度，因为判断已经完成，所以直接进入了number+1的逻辑。</p><p>像上述这种现象被称为虚假唤醒</p><blockquote><p>解决虚假唤醒</p><p>既然是由于被唤醒后没有判断导致，所以我们这里只需要将<code>if</code>改为<code>while</code>，让线程唤醒后的第一件事就是判断条件</p><p>修改为<code>while</code>后的执行结果</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20211214233354.png" alt="image-20211214233353115" /></p></blockquote><h2 id="六、经典笔试题">六、经典笔试题</h2><p>思考一下如何用3条线程循环输出ABC</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.question;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用线程循环输出ABC</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Question1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">        <span class="type">ABC</span> <span class="variable">A</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ABC</span>(<span class="string">&quot;A&quot;</span>, c, a);</span><br><span class="line">        <span class="type">ABC</span> <span class="variable">B</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ABC</span>(<span class="string">&quot;B&quot;</span>, a, b);</span><br><span class="line">        <span class="type">ABC</span> <span class="variable">C</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ABC</span>(<span class="string">&quot;C&quot;</span>, b, c);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(A).start();</span><br><span class="line">        Thread.sleep(<span class="number">10</span>);<span class="comment">// 保证初始ABC的启动顺序</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(B).start();</span><br><span class="line">        Thread.sleep(<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(C).start();</span><br><span class="line">        Thread.sleep(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ABC</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">// 下一个获取的对象</span></span><br><span class="line">    <span class="keyword">private</span> Object prev;</span><br><span class="line">    <span class="comment">// 当前对象</span></span><br><span class="line">    <span class="keyword">private</span> Object self;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ABC</span><span class="params">(String name, Object prev, Object self)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.prev = prev;</span><br><span class="line">        <span class="built_in">this</span>.self = self;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="comment">// 获取上个对象的锁</span></span><br><span class="line">            <span class="keyword">synchronized</span> (prev) &#123;</span><br><span class="line">                <span class="comment">// 获取当前对象的锁</span></span><br><span class="line">                <span class="keyword">synchronized</span> (self) &#123;</span><br><span class="line">                    System.out.print(name);</span><br><span class="line">                    <span class="comment">// 唤醒当前对象锁，也就是下个线程的上个对象锁</span></span><br><span class="line">                    self.notifyAll();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">50</span>);</span><br><span class="line">                    <span class="comment">// 释放上个对象的锁</span></span><br><span class="line">                    prev.wait();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="七、最后">七、最后</h2><p>多线程使用不是难点，而多线程的锁是面试的常客，<code>synchronized</code>关键字锁住的对象这一知识点必须要掌握。</p><p>关于其他什么轻量级锁，总量级锁，读写锁，重入锁等等的概念，后续会出个单章来进行理解。</p><p>关于本文出现的代码示例，已提交至<a href="https://gitee.com/ban-moon/thread_learn/tree/master/">码云</a>，只看文章不懂时，一定要敲代码进行理解。</p><p>我是半月，祝你幸福！</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jdk </tag>
            
            <tag> 并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java注解的介绍和反射使用</title>
      <link href="/archive/d24de37a/"/>
      <url>/archive/d24de37a/</url>
      
        <content type="html"><![CDATA[<h1>功能：Java注解的介绍和反射使用</h1><h2 id="一、注解">一、注解</h2><h3 id="1、注解介绍">1、注解介绍</h3><p>java注解==（Annotation）==，又称为java标注，是jdk5.0引入的一种机制。</p><p>Java 语言中的类、方法、变量、参数和包等都可以被标注，对这些代码段进行解释，编译时生成class时，标注也可以被编译。在运行时，java可以通过反射获取到注解内容，进行一些骚操作，进而简化开发。</p><h3 id="2、注解分类">2、注解分类</h3><blockquote><p>Java 定义了一些注解，有些比较常见</p><ol><li class="lvl-3"><code>@Override</code>：检查方法是否重写父类方法</li><li class="lvl-3"><code>@Deprecated</code>：标记方法过时</li><li class="lvl-3"><code>@SuppressWarnings</code>：忽略警告</li></ol><p>元注解，标注注解的注解，一切注解的开始</p><ol><li class="lvl-3"><p><code>@Retention</code>：使用范围，是只在代码中，还是编入class文件中，或者是在运行时可以通过反射访问</p></li><li class="lvl-3"><p><code>@Documented</code>：标记这些注解是否包含在用户文档中</p></li><li class="lvl-3"><p><code>@Target</code>：作用范围，可以标记哪些代码块，方法，类或者是字段等其他</p></li><li class="lvl-3"><p><code>@Inherited</code>：标记这个注解是继承于哪个注解类</p></li></ol><p>java7后加入的注解</p><ol><li class="lvl-3"><p><code>@SafeVarargs</code>：Java 7 开始支持，忽略任何使用参数为泛型变量的方法或构造函数调用产生的警告</p></li><li class="lvl-3"><p><code>@FunctionalInterface</code>：Java 8 开始支持，标识一个匿名函数或函数式接口</p></li><li class="lvl-3"><p><code>@Repeatable</code>：Java 8 开始支持，标识某注解可以在同一个声明上使用多次</p></li></ol></blockquote><h3 id="3、自定义注解">3、自定义注解</h3><h4 id="1）定义语法">1）定义语法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotation &#123;</span><br><span class="line">    </span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    String[] params() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如上：</p><ol><li class="lvl-3"><code>@Documented</code>：此注解将包含在用户文档中</li><li class="lvl-3"><code>@Target</code>： ElementType.Type是说，该注解可以在类、接口（包含注解）、枚举上使用</li><li class="lvl-3"><code>@Retention</code>：此注解将编译至class文件中，在运行时，会被虚拟机读取使用</li><li class="lvl-3">和定义接口不同的是，注解的定义前添加<code>@</code>号</li><li class="lvl-3">如果是字段名是value，则使用注解时可以省略字段名</li></ol></blockquote><h4 id="2）RetentionPolicy，作用范围枚举">2）RetentionPolicy，作用范围枚举</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.lang.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">RetentionPolicy</span> &#123;</span><br><span class="line">    SOURCE,  <span class="comment">// Annotation信息仅存在于编译器处理期间，编译后该注解不存在</span></span><br><span class="line">    CLASS,   <span class="comment">// 编译器将Annotation存储于类对应的class文件中</span></span><br><span class="line">    RUNTIME  <span class="comment">// 编译器将Annotation存储于class文件中，并且可由JVM读入 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3）ElementType，使用范围枚举">3）ElementType，使用范围枚举</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.lang.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">ElementType</span> &#123;</span><br><span class="line">    <span class="comment">// 类，接口（包括注解），枚举</span></span><br><span class="line">    TYPE,</span><br><span class="line">    <span class="comment">// 字段，包括枚举字段</span></span><br><span class="line">    FIELD,</span><br><span class="line">    <span class="comment">// 方法</span></span><br><span class="line">    METHOD,</span><br><span class="line">    <span class="comment">// 方法参数，括号内的形参</span></span><br><span class="line">    PARAMETER,</span><br><span class="line">    <span class="comment">// 构造方法</span></span><br><span class="line">    CONSTRUCTOR,</span><br><span class="line">    <span class="comment">// 局部变量</span></span><br><span class="line">    LOCAL_VARIABLE,</span><br><span class="line">    <span class="comment">// 注解</span></span><br><span class="line">    ANNOTATION_TYPE,</span><br><span class="line">    <span class="comment">// 包</span></span><br><span class="line">    PACKAGE,</span><br><span class="line">    <span class="comment">// Type parameter declaration，@since 1.8</span></span><br><span class="line">    TYPE_PARAMETER,</span><br><span class="line">    <span class="comment">// Use of a type，@since 1.8</span></span><br><span class="line">    TYPE_USE</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、java反射">二、java反射</h2><h3 id="1、反射介绍">1、反射介绍</h3><h4 id="1）反射是什么">1）反射是什么</h4><p>简单的来说，反射就是运行时才知道操作的类是什么，并且在运行阶段有虚拟机进行实例化，可知道<mark>内部所有的（包括private私有的）属性和方法</mark>，这种机制叫做反射</p><p>java之所以有了这种机制，才会成为一门准动态语言</p><blockquote><p>动态语言和静态语言的区别</p><ul class="lvl-1"><li class="lvl-2">动态语言：是指一类在运行时，也可以改变程序结构的语言，加入新的函数，对象，甚至是代码都可以被引入，可以根据某些条件改变自身结构<ul class="lvl-3"><li class="lvl-4">主要语言有：C#、JavaScript、PHP、Python</li></ul></li><li class="lvl-2">静态语言：相对于动态语言，在运行时结构不可改变的语言就是静态语言<ul class="lvl-3"><li class="lvl-4">主要语言有：Java、C、C++</li></ul></li></ul></blockquote><p>在java有了反射之后，java就可以称为<mark>准动态语言</mark>，反射使得java有了一定的动态性，我们可以通过这种机制，让编程更加灵活，玩出骚操作。</p><h4 id="2）简单明白反射作用">2）简单明白反射作用</h4><p>在程序开发之初，程序员往往都知道自己需要使用到某些类，这样<mark>实例化对象</mark>是没问题的，程序也是可以正常访问的，如下</p><p>程序员知道要把东西给学生，所以<code>new Student()</code>进行实例化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SomeThingTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        student.give(<span class="string">&quot;一个红包&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">give</span><span class="params">(String some)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">give</span><span class="params">(String some)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;给了学生：&quot;</span> + some);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Teacher</span> <span class="keyword">extends</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">give</span><span class="params">(String some)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;给了老师：&quot;</span> + some);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>==那程序员不知道要把东西交给谁呢？==程序进行不下去了，所以为了解决此类问题，反射机制诞生了，如下</p><p>运行结果相差不大，但内部实现机制完全不一致</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SomeThingTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.banmoon.something.Teacher&quot;</span>);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">giveMethod</span> <span class="operator">=</span> cls.getMethod(<span class="string">&quot;give&quot;</span>, String.class);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">teacher</span> <span class="operator">=</span> cls.newInstance();</span><br><span class="line">        giveMethod.invoke(teacher, <span class="string">&quot;一个苹果&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>问题：<code>com.banmoon.something.Teacher</code>，<mark>这段字符串还不是程序员写死的，就算内部是反射实现的，那这样岂不是多此一举？</mark></p><p>非也非也，我给大家看一段常用的配置文件，大家就明白了</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">datasource:</span></span><br><span class="line">     <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"> <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"> <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/test</span></span><br><span class="line"> <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line"> <span class="attr">password:</span> <span class="number">1234</span></span><br></pre></td></tr></table></figure><p>熟悉吗，那个<b>数据库连接驱动</b>和<b>数据库连接池</b>，那些开发框架的程序员，他们可不知道我们使用的是什么数据库和什么连接池，所以在我们指定对应的驱动路径后，java虚拟机才反射去获取对应的驱动实例。</p><p>这样一来，可以说反射机制是框架设计的灵魂，若没有反射，也没有如此丰富全面的java框架，庞大的java生态系统</p></blockquote><h3 id="2、反射使用">2、反射使用</h3><h4 id="1）反射获取Class对象">1）反射获取Class对象</h4><p>在java中，万物皆对象。所以类在反射出来后产生的对象便是Class</p><blockquote><p>获取反射的3种方式，其中2、3种方法的使用是在编码阶段都清楚类的前提下使用的</p><ol><li class="lvl-3">使用Class对象的静态方法，forName()，根据类的全路径进行加载</li><li class="lvl-3">通过类名.class获取该类的Class对象</li><li class="lvl-3">使用实例对象.getClass()获取该类的Class对象</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SomeThingTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">cla1</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.String&quot;</span>);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">cla2</span> <span class="operator">=</span> String.class;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">cla3</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>.getClass();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>问题：以下<code>cla3</code>和<code>cla4</code>是否为同个对象？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SomeThingTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">cla3</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>.getClass();</span><br><span class="line">        <span class="type">Class</span> <span class="variable">cla4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;123&quot;</span>).getClass();</span><br><span class="line">        System.out.println(cla3.hashCode());</span><br><span class="line">        System.out.println(cla4.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>哪些类型可以有Class对象</p><ol><li class="lvl-3">class：普通类，内部类，静态内部类，局部内部类，匿名内部类</li><li class="lvl-3">interface：接口</li><li class="lvl-3">[]：数组</li><li class="lvl-3">enum：枚举</li><li class="lvl-3">annotation：注解</li><li class="lvl-3">基本数据类型：int等</li><li class="lvl-3">void</li></ol></blockquote><h4 id="2）反射获取类的属性和方法">2）反射获取类的属性和方法</h4><h5 id="2-1）写几个类">2.1）写几个类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">give</span><span class="params">(String some)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">give</span><span class="params">(String some)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;给了学生：&quot;</span> + some);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">staticMothed</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;静态方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Teacher</span> <span class="keyword">extends</span> <span class="title class_">Person</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String subject;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPost</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> post;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPost</span><span class="params">(String post)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.post = post;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String post;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Teacher</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Teacher</span><span class="params">(String name, String subject, String post)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name);</span><br><span class="line">        <span class="built_in">this</span>.subject = subject;</span><br><span class="line">        <span class="built_in">this</span>.post = post;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">give</span><span class="params">(String some)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;给了老师：&quot;</span> + some);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">teach</span><span class="params">(String content)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;教学方法一&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">teach</span><span class="params">(String content, Person person)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;教学方法二&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-2）反射使用">2.2）反射使用</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SomeThingTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InstantiationException, InvocationTargetException &#123;</span><br><span class="line">        <span class="comment">// 获取Teacher类的class对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">teacherClass</span> <span class="operator">=</span> Teacher.class;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取Teacher类的名字</span></span><br><span class="line">        System.out.println(teacherClass.getName());</span><br><span class="line">        System.out.println(teacherClass.getSimpleName());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;============= 分割线 ==============&quot;</span>);</span><br><span class="line">        <span class="comment">// 获取Teacher类的属性，只能获取到public权限的</span></span><br><span class="line">        Field[] fieldArr = teacherClass.getFields();</span><br><span class="line">        <span class="keyword">for</span> (Field field : fieldArr) &#123;</span><br><span class="line">            System.out.println(field);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;============= 分割线 ==============&quot;</span>);</span><br><span class="line">        <span class="comment">// 获取Teacher类的属性，可以获取所有权限的属性</span></span><br><span class="line">        fieldArr = teacherClass.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (Field field : fieldArr) &#123;</span><br><span class="line">            System.out.println(field);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;============= 分割线 ==============&quot;</span>);</span><br><span class="line">        <span class="comment">// 获取Teacher类的方法，只能获取到public权限的，且可以获取到继承父类的方法</span></span><br><span class="line">        Method[] methodArr = teacherClass.getMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method method : methodArr) &#123;</span><br><span class="line">            System.out.println(method);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;============= 分割线 ==============&quot;</span>);</span><br><span class="line">        <span class="comment">// 获取Teacher类的方法，可以获取所有权限的方法，获取不到继承父类的方法</span></span><br><span class="line">        methodArr = teacherClass.getDeclaredMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method method : methodArr) &#123;</span><br><span class="line">            System.out.println(method);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;============= 分割线 ==============&quot;</span>);</span><br><span class="line">        <span class="comment">// 指定获取Teacher类的方法</span></span><br><span class="line">        System.out.println(teacherClass.getMethod(<span class="string">&quot;teach&quot;</span>, String.class));</span><br><span class="line">        System.out.println(teacherClass.getDeclaredMethod(<span class="string">&quot;teach&quot;</span>, String.class, Person.class));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;============= 分割线 ==============&quot;</span>);</span><br><span class="line">        <span class="comment">// 获取Teacher类的构造器，只能获取到public权限的</span></span><br><span class="line">        Constructor[] constructorArr = teacherClass.getConstructors();</span><br><span class="line">        <span class="keyword">for</span> (Constructor constructor : constructorArr) &#123;</span><br><span class="line">            System.out.println(constructor);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;============= 分割线 ==============&quot;</span>);</span><br><span class="line">        <span class="comment">// 获取Teacher类的构造器，可以获取所有权限的构造器</span></span><br><span class="line">        constructorArr = teacherClass.getDeclaredConstructors();</span><br><span class="line">        <span class="keyword">for</span> (Constructor constructor : constructorArr) &#123;</span><br><span class="line">            System.out.println(constructor);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;============= 分割线 ==============&quot;</span>);</span><br><span class="line">        <span class="comment">// 拥有无参构造器时，直接进行实例化，不推荐</span></span><br><span class="line">        <span class="type">Teacher</span> <span class="variable">teacher</span> <span class="operator">=</span> (Teacher) teacherClass.newInstance();</span><br><span class="line">        <span class="comment">// 指定获取Teacher类的构造器，并实例化对象</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> teacherClass.getConstructor();</span><br><span class="line">        teacher = (Teacher) constructor.newInstance();</span><br><span class="line">        System.out.println(String.format(<span class="string">&quot;姓名：%s，职务：%s，科目：%s&quot;</span>, teacher.getName(), teacher.getPost(), teacher.subject));</span><br><span class="line">        constructor = teacherClass.getDeclaredConstructor(String.class, String.class, String.class);</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);<span class="comment">// 设置访问权限，为true时可访问私有private</span></span><br><span class="line">        teacher = (Teacher) constructor.newInstance(<span class="string">&quot;半月无霜&quot;</span>, <span class="string">&quot;教导主任&quot;</span>, <span class="string">&quot;计算机&quot;</span>);</span><br><span class="line">        System.out.println(String.format(<span class="string">&quot;姓名：%s，职务：%s，科目：%s&quot;</span>, teacher.getName(), teacher.getPost(), teacher.subject));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;============= 分割线 ==============&quot;</span>);</span><br><span class="line">        <span class="comment">// 调用方法</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">teachMethod</span> <span class="operator">=</span> teacherClass.getDeclaredMethod(<span class="string">&quot;teach&quot;</span>, String.class, Person.class);</span><br><span class="line">        teachMethod.setAccessible(<span class="literal">true</span>);<span class="comment">// 设置访问权限，为true时可访问私有private</span></span><br><span class="line">        teachMethod.invoke(teacherClass.newInstance(), <span class="string">&quot;教学&quot;</span>, <span class="keyword">new</span> <span class="title class_">Student</span>());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3）反射获取注解">3）反射获取注解</h4><h5 id="3-1）写两个注解和类">3.1）写两个注解和类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@interface</span> MyClassInfo&#123;</span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(ElementType.FIELD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@interface</span> MyFieldInfo&#123;</span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span>;</span><br><span class="line">    String <span class="title function_">mappingType</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@MyClassInfo(&quot;用户类&quot;)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>&#123;</span><br><span class="line">    <span class="meta">@MyFieldInfo(value = &quot;主键ID&quot;, mappingType = &quot;int&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="meta">@MyFieldInfo(value = &quot;用户名&quot;, mappingType = &quot;varchar&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="meta">@MyFieldInfo(value = &quot;密码&quot;, mappingType = &quot;varchar&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-2）反射使用注解">3.2）反射使用注解</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SomeThingTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Class&lt;User&gt; userClass = User.class;</span><br><span class="line">        Annotation[] annotationArr = userClass.getDeclaredAnnotations();</span><br><span class="line">        <span class="keyword">for</span> (Annotation annotation : annotationArr) &#123;</span><br><span class="line">            System.out.println(annotation);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">MyClassInfo</span> <span class="variable">myClassInfo</span> <span class="operator">=</span> userClass.getAnnotation(MyClassInfo.class);</span><br><span class="line">        System.out.println(myClassInfo.value());</span><br><span class="line"></span><br><span class="line">        Field[] fieldArr = userClass.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (Field field : fieldArr) &#123;</span><br><span class="line">            <span class="type">MyFieldInfo</span> <span class="variable">myFieldInfo</span> <span class="operator">=</span> field.getDeclaredAnnotation(MyFieldInfo.class);</span><br><span class="line">            System.out.println(String.format(<span class="string">&quot;%s[value：%s，mappingType：%s]&quot;</span>, field.getName(), myFieldInfo.value(), myFieldInfo.mappingType()));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4）反射获取泛型">4）反射获取泛型</h4><h5 id="4-1）写两个泛型的方法">4.1）写两个泛型的方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setList</span><span class="params">(List&lt;String&gt; list)</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">returnMap</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-2）反射使用泛型">4.2）反射使用泛型</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SomeThingTest</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException &#123;</span><br><span class="line">        <span class="type">Method</span> <span class="variable">setList</span> <span class="operator">=</span> Person.class.getDeclaredMethod(<span class="string">&quot;setList&quot;</span>, List.class);</span><br><span class="line">        Type[] genericParameterTypes = setList.getGenericParameterTypes();</span><br><span class="line">        <span class="keyword">for</span> (Type genericParameterType : genericParameterTypes) &#123;</span><br><span class="line">            System.out.println(genericParameterType);</span><br><span class="line">            <span class="keyword">if</span> (genericParameterType <span class="keyword">instanceof</span> ParameterizedType)&#123;</span><br><span class="line">                <span class="comment">// 获取List中的泛型</span></span><br><span class="line">                Type[] actualTypeArguments = ((ParameterizedType) genericParameterType).getActualTypeArguments();</span><br><span class="line">                <span class="keyword">for</span> (Type actualTypeArgument : actualTypeArguments) &#123;</span><br><span class="line">                    System.out.println(actualTypeArgument.getTypeName());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;============= 分割线 ==============&quot;</span>);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">returnMap</span> <span class="operator">=</span> Person.class.getDeclaredMethod(<span class="string">&quot;returnMap&quot;</span>);</span><br><span class="line">        <span class="type">Type</span> <span class="variable">type</span> <span class="operator">=</span> returnMap.getGenericReturnType();</span><br><span class="line">        System.out.println(type);</span><br><span class="line">        <span class="keyword">if</span> (type <span class="keyword">instanceof</span> ParameterizedType)&#123;</span><br><span class="line">            <span class="comment">// 获取Map中的泛型</span></span><br><span class="line">            Type[] actualTypeArguments = ((ParameterizedType) type).getActualTypeArguments();</span><br><span class="line">            <span class="keyword">for</span> (Type actualTypeArgument : actualTypeArguments) &#123;</span><br><span class="line">                System.out.println(actualTypeArgument.getTypeName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5）在线JDK8API文档">5）在线JDK8API文档</h4><p>现在，已经知道了反射使用，去剖析框架源码时的你真帅</p><p>附上jdk8的<a href="https://www.matools.com/api/java8">在线API文档</a>，祝你前程似锦</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jdk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git企业级版本管理</title>
      <link href="/archive/db5348c8/"/>
      <url>/archive/db5348c8/</url>
      
        <content type="html"><![CDATA[<h1>git企业级版本管理</h1><h2 id="一、介绍">一、介绍</h2><p>git大家都知道，是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。它和SVN最大的不同，在与git分支的遍历。</p><p>但往往企业在使用git时，也仅仅把git当做SVN来使用，并没有很好的利用起git的分支，每个人都提交一堆commit，建立一堆杂乱无章的分支，导致项目的管理混乱。</p><p>所以需要企业根据实际的开发需要，定义一个git版本规范，是很有必要的。</p><h2 id="二、分支命名">二、分支命名</h2><ul class="lvl-0"><li class="lvl-2"><p>分支线</p><ul class="lvl-2"><li class="lvl-4">master：主分支，始终与线上发布的版本保持一致，只做合并，不做提交</li><li class="lvl-4">test：测试分支，对应测试环境的分支</li><li class="lvl-4">dev：开发分支，对应开发环境的分支</li><li class="lvl-4">hotfix：火速修复分支，当线上代码出现bug，基于master分支创建出一个新的分支，进行修复bug</li></ul></li><li class="lvl-2"><p>命名规则：[分支线]_[年月日 ]_信息</p><ul class="lvl-2"><li class="lvl-4">如开发权限代码：dev_20211128_auth</li><li class="lvl-4">如线上支付出现bug：hotfix_20211128_pay</li></ul></li></ul><h2 id="三、开发发布流程">三、开发发布流程</h2><h3 id="3-1）正常版本需求开发">3.1）正常版本需求开发</h3><ol><li class="lvl-3"><p>当开发人员需要开发新需求，开发人员需要基于master创建出一个新分支，注意分支名称要规范，例如<code>dev_20211128_auth</code></p></li><li class="lvl-3"><p>开发人员需要将分支拉取到本地开发，只拉取刚刚创建的<code>dev_20211128_auth</code></p><ol><li class="lvl-6">如果是组内共同开发的同个功能，同样拉取一样的分支</li></ol></li><li class="lvl-3"><p>开发人员完成开发后，上传代码远程分支至远程分支</p><ol><li class="lvl-6">根据自己业务开发需要，决定自己提交至远程的代码，例如一天一次提交等</li><li class="lvl-6">全部完成后，远程分支<code>dev_20211128_auth</code>拥有了你们所有功能代码，此时合并至<code>dev</code>分支</li><li class="lvl-6">然后将dev分支打包构建只开发环境</li></ol></li><li class="lvl-3"><p>当自测通过，将<code>dev_20211128_auth</code>合并至<code>test</code>分支</p><ol><li class="lvl-6">不能将<code>dev</code>合到<code>test</code>分支，因为<code>dev</code>上可能有其他小组还在联调的代码</li></ol></li><li class="lvl-3"><p>测试通过时，可以上线的情况下，将<code>dev_20211128_auth</code>合并至<code>master</code>分支，然后进行打包构建发布</p></li></ol><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20211128143206.png" alt="image-20211128143204677" /></p><h3 id="3-2）线上问题紧急修复">3.2）线上问题紧急修复</h3><ol><li class="lvl-3"><p>线上有bug，需要修复时，基于master创建出一个hotfix分支，例如<code>hotfix_20211128_pay</code></p></li><li class="lvl-3"><p>开发人员拉取分支进行修复</p></li><li class="lvl-3"><p>开发修复完成后，将<code>hotfix_20211128_pay</code>合并至<code>dev</code>进行联调或者自测</p></li><li class="lvl-3"><p>当自测通过，将<code>hotfix_20211128_pay</code>合并至<code>test</code>分支</p></li><li class="lvl-3"><p>测试通过时，可以上线的情况下，将<code>hotfix_20211128_pay</code>合并至<code>master</code>分支，然后进行打包构建发布</p></li></ol><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20211128143342.png" alt="image-20211128143320781" /></p><h3 id="3-3）dev、test分支测试有bug反馈">3.3）dev、test分支测试有bug反馈</h3><ol><li class="lvl-3"><p>当dev、test分支有bug反馈，需要在本地进行修复bug时</p></li><li class="lvl-3"><p>不能直接修改dev、test分支，应当从自己开发功能的分支上进行修改bug</p></li><li class="lvl-3"><p>修改完成后，再将自己的开发功能分支合并到dev、test分支上，重新进行测试</p></li></ol><h2 id="四、分支清理">四、分支清理</h2><ul class="lvl-0"><li class="lvl-2"><p>当每个版本上线后，自己的功能开发分支都将删除</p></li><li class="lvl-2"><p>每隔一段时间，dev、test分支都将删除，重新基于master创建</p><ul class="lvl-2"><li class="lvl-4">主要是避免代码污染，某些人没有按照规范，直接提交到dev、test分支了</li><li class="lvl-4">最好在没有功能需求的空窗期进行</li></ul></li></ul><h2 id="五、结语">五、结语</h2><p>上述就是git代码的管理，以前确实很乱，有了规范分支也清楚。</p><p>每个企业，开发的资源环境不同，比如有些没有统一的开发服务器，比如有的还有预发布环境。可以根据企业自身，进行适当的修改，但规范一定是要有的，本文仅供参考。</p><p><a href="https://gitee.com/all-about-git">git大全</a></p><p><a href="https://oschina.gitee.io/learn-git-branching/">git命令小游戏</a></p>]]></content>
      
      
      <categories>
          
          <category> 运维管理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java8新特性stream流</title>
      <link href="/archive/87c8a286/"/>
      <url>/archive/87c8a286/</url>
      
        <content type="html"><![CDATA[<h1>Java8新特性stream流</h1><h2 id="一、包装数据类型">一、包装数据类型</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">main22</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;()&#123;&#123;</span><br><span class="line">        add(<span class="number">7</span>); add(<span class="number">5</span>); add(<span class="number">1</span>); add(<span class="number">2</span>);</span><br><span class="line">        add(<span class="number">8</span>); add(<span class="number">4</span>); add(<span class="number">3</span>); add(<span class="number">6</span>);</span><br><span class="line">        add(<span class="number">3</span>); add(<span class="number">6</span>); add(<span class="number">3</span>); add(<span class="number">6</span>);</span><br><span class="line">    &#125;&#125;;</span><br><span class="line">    <span class="comment">// 过滤</span></span><br><span class="line">    List&lt;Integer&gt; filterList = list.stream().filter(a -&gt; a &lt; <span class="number">5</span>).collect(Collectors.toList());</span><br><span class="line">    <span class="comment">// 排序（正序）</span></span><br><span class="line">    List&lt;Integer&gt; sortList1 = list.stream().sorted().collect(Collectors.toList());</span><br><span class="line">    List&lt;Integer&gt; sortList2 = list.stream().sorted(Comparator.comparing(a -&gt; a, Comparator.naturalOrder())).collect(Collectors.toList());</span><br><span class="line">    <span class="comment">// 排序（倒序）</span></span><br><span class="line">    List&lt;Integer&gt; sortList3 = list.stream().sorted(Comparator.comparing(a -&gt; a, Comparator.reverseOrder())).collect(Collectors.toList());</span><br><span class="line">    <span class="comment">// 最大数</span></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">max</span> <span class="operator">=</span> list.stream().max(Comparator.comparing(a -&gt; a, Comparator.naturalOrder())).get();</span><br><span class="line">    <span class="comment">// 最小数</span></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">min</span> <span class="operator">=</span> list.stream().min(Comparator.comparing(a -&gt; a, Comparator.naturalOrder())).get();</span><br><span class="line">    <span class="comment">// 去重</span></span><br><span class="line">    List&lt;Integer&gt; distinctList = list.stream().distinct().collect(Collectors.toList());</span><br><span class="line">    <span class="comment">// 对每个元素进行操作</span></span><br><span class="line">    List&lt;Integer&gt; mapList = list.stream().map(a -&gt; a * a).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">    System.out.println(max);</span><br><span class="line">    System.out.println(min);</span><br><span class="line">    mapList.forEach(a -&gt; System.out.print(a+<span class="string">&quot; &quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、Map类型">二、Map类型</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.lang.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    HashMap&lt;String, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Integer&gt;()&#123;&#123;</span><br><span class="line">        put(<span class="string">&quot;A&quot;</span>, <span class="number">1</span>); put(<span class="string">&quot;B&quot;</span>, <span class="number">2</span>); put(<span class="string">&quot;C&quot;</span>, <span class="number">3</span>); put(<span class="string">&quot;D&quot;</span>, <span class="number">4</span>);</span><br><span class="line">        put(<span class="string">&quot;E&quot;</span>, <span class="number">1</span>); put(<span class="string">&quot;F&quot;</span>, <span class="number">1</span>); put(<span class="string">&quot;&quot;</span>, <span class="number">1</span>); put(<span class="string">&quot;&quot;</span>, <span class="number">1</span>);</span><br><span class="line">    &#125;&#125;;</span><br><span class="line">    <span class="comment">// key集合转list</span></span><br><span class="line">    List&lt;String&gt; keyList1 = map.keySet().stream().filter(a -&gt; StringUtils.isNotBlank(a)).collect(Collectors.toList());</span><br><span class="line">    List&lt;String&gt; keyList2 = map.entrySet().stream().map(entry -&gt; entry.getKey()).filter(a -&gt; StringUtils.isNotBlank(a)).collect(Collectors.toList());</span><br><span class="line">    <span class="comment">// value集合转list</span></span><br><span class="line">    List&lt;Integer&gt; valueList = map.entrySet().stream().map(entry -&gt; entry.getValue()).collect(Collectors.toList());</span><br><span class="line">    <span class="comment">// 处理value，同理可处理key</span></span><br><span class="line">    Map&lt;String, Integer&gt; newMap = map.entrySet().stream().collect(Collectors.toMap(Map.Entry::getKey, a -&gt; a.getValue() * a.getValue()));</span><br><span class="line">    <span class="comment">// key value换位，key冲突时，新value替换旧value</span></span><br><span class="line">    Map&lt;Integer, String&gt; reMap1 = map.entrySet().stream().collect(Collectors.toMap(Map.Entry::getValue,</span><br><span class="line">        Map.Entry::getKey,</span><br><span class="line">        (String val1, String val2) -&gt; val2</span><br><span class="line">    ));</span><br><span class="line">    <span class="comment">// key value换位，key冲突时，加入value列表中</span></span><br><span class="line">    Map&lt;Integer, List&lt;String&gt;&gt; reMap2 = map.entrySet().stream().collect(Collectors.toMap(Map.Entry::getValue, </span><br><span class="line">        a -&gt; <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;()&#123;&#123; add(a.getKey()); &#125;&#125;,</span><br><span class="line">        (List&lt;String&gt; v1, List&lt;String&gt; v2) -&gt; &#123;</span><br><span class="line">            v1.addAll(v2);</span><br><span class="line">            <span class="keyword">return</span> v1;</span><br><span class="line">        &#125;</span><br><span class="line">    ));</span><br><span class="line"></span><br><span class="line">    keyList2.forEach(a -&gt; System.out.printf(a + <span class="string">&quot; &quot;</span>));</span><br><span class="line">    System.out.println();</span><br><span class="line">    reMap2.entrySet().forEach(entry -&gt; System.out.println(<span class="string">&quot;key: &quot;</span> + entry.getKey() + <span class="string">&quot;, val: &quot;</span> + entry.getValue()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、对象List">三、对象List</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;User&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;User&gt;() &#123;&#123;</span><br><span class="line">        add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1</span>, <span class="string">&quot;半月&quot;</span>, <span class="number">18</span>));</span><br><span class="line">        add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">2</span>, <span class="string">&quot;无霜&quot;</span>, <span class="number">22</span>));</span><br><span class="line">        add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">3</span>, <span class="string">&quot;半月无霜&quot;</span>, <span class="number">24</span>));</span><br><span class="line">        add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">3</span>, <span class="string">&quot;半霜&quot;</span>, <span class="number">28</span>));</span><br><span class="line">        add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">4</span>, <span class="string">&quot;半霜&quot;</span>, <span class="number">28</span>));</span><br><span class="line">    &#125;&#125;;</span><br><span class="line">    <span class="comment">// 转Map&lt;id, user&gt;，如遇到key冲突，可参考第二段map解决办法</span></span><br><span class="line">    Map&lt;Integer, User&gt; map1 = list.stream().collect(Collectors.toMap(User::getId, Function.identity()));</span><br><span class="line">    Map&lt;Integer, User&gt; map2 = list.stream().collect(Collectors.toMap(User::getId, a -&gt; a));</span><br><span class="line">    <span class="comment">// 查找</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> list.stream().filter(a -&gt; <span class="string">&quot;半月&quot;</span>.equals(a.getName())).findFirst().get();</span><br><span class="line">    <span class="comment">// 过滤计数</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">count</span> <span class="operator">=</span> list.stream().filter(a -&gt; a.getAge() &gt;= <span class="number">22</span>).count();</span><br><span class="line">    <span class="comment">// 排序（通过年龄排正序）</span></span><br><span class="line">    List&lt;User&gt; orderList = list.stream().sorted(Comparator.comparing(User::getAge, Comparator.naturalOrder())).collect(Collectors.toList());</span><br><span class="line">    <span class="comment">// 排序（通过年龄排倒序）</span></span><br><span class="line">    List&lt;User&gt; reorderList = list.stream().sorted(Comparator.comparing(User::getAge, Comparator.reverseOrder())).collect(Collectors.toList());</span><br><span class="line">    <span class="comment">// 对象去重（通过ID去重）</span></span><br><span class="line">    List&lt;User&gt; unionUser = list.stream().collect(</span><br><span class="line">        Collectors.collectingAndThen(Collectors.toCollection(() -&gt; <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;(Comparator.comparing(o -&gt; o.getId()))), ArrayList::<span class="keyword">new</span>));</span><br><span class="line">    <span class="comment">// 属性集合（此处为名字集合）</span></span><br><span class="line">    List&lt;String&gt; nameList = list.stream().map(User::getName).collect(Collectors.toList());    </span><br><span class="line">    <span class="comment">// 截取，skip：跳过前n个，limit：取n个</span></span><br><span class="line">    List&lt;User&gt; limitList = list.stream().skip(<span class="number">1</span>).limit(<span class="number">2</span>).collect(Collectors.toList());</span><br><span class="line">    <span class="comment">// 判断是否存在（半月是否存在）</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">isHave1</span> <span class="operator">=</span> list.stream().anyMatch(a -&gt; <span class="string">&quot;半月&quot;</span>.equals(a.getName()));</span><br><span class="line">    <span class="comment">// 判断所有是否满足（是否都大于16岁）</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">fullAge</span> <span class="operator">=</span> list.stream().allMatch(a -&gt; a.getAge() &gt; <span class="number">16</span>);</span><br><span class="line">    <span class="comment">// 判断是否不存在（里面没有ID为10的用户）</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">isHave2</span> <span class="operator">=</span> list.stream().noneMatch(a -&gt; <span class="string">&quot;10&quot;</span>.equals(a.getId()));</span><br><span class="line"></span><br><span class="line">    limitList.forEach(System.out::println);</span><br><span class="line">    System.out.println(isHave2? <span class="string">&quot;没有ID为10的用户&quot;</span>: <span class="string">&quot;有ID为10的用户&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、分组">四、分组</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    List&lt;User&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;User&gt;() &#123;&#123;</span><br><span class="line">        add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;半月1&quot;</span>, <span class="number">18</span>, <span class="number">90</span>));</span><br><span class="line">        add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;半月2&quot;</span>, <span class="number">18</span>, <span class="number">80</span>));</span><br><span class="line">        add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;半月3&quot;</span>, <span class="number">18</span>, <span class="number">70</span>));</span><br><span class="line">        add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;半月4&quot;</span>, <span class="number">18</span>, <span class="number">60</span>));</span><br><span class="line">        add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;半月无霜1&quot;</span>, <span class="number">20</span>, <span class="number">90</span>));</span><br><span class="line">        add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;半月无霜2&quot;</span>, <span class="number">20</span>, <span class="number">80</span>));</span><br><span class="line">        add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;半月无霜3&quot;</span>, <span class="number">20</span>, <span class="number">70</span>));</span><br><span class="line">        add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;半月无霜4&quot;</span>, <span class="number">20</span>, <span class="number">60</span>));</span><br><span class="line">    &#125;&#125;;</span><br><span class="line">    <span class="comment">// 分组，通过分数对用户进行分组</span></span><br><span class="line">    Map&lt;Integer, List&lt;User&gt;&gt; groupByScore = list.stream().collect(Collectors.groupingBy(</span><br><span class="line">        User::getScore,</span><br><span class="line">        Collectors.mapping(Function.identity(), Collectors.toList())</span><br><span class="line">    ));</span><br><span class="line">    <span class="comment">// 分组计算，通过年龄分组计算最大的分数值</span></span><br><span class="line">    Map&lt;Integer, Optional&lt;Integer&gt;&gt; maxScoreByAge = list.stream().collect(Collectors.groupingBy(</span><br><span class="line">        User::getAge,</span><br><span class="line">        Collectors.mapping(User::getScore, Collectors.maxBy(Integer::compareTo))</span><br><span class="line">    ));</span><br><span class="line">    <span class="comment">// 按照条件分组，及格和不及格的两批人的最高分</span></span><br><span class="line">    Map&lt;Boolean, Optional&lt;Integer&gt;&gt; maxScoreByPassMark = list.stream().collect(Collectors.partitioningBy(</span><br><span class="line">        user -&gt; user.getScore() &gt;= <span class="number">60</span>,</span><br><span class="line">        Collectors.mapping(User::getScore, Collectors.maxBy(Integer::compareTo))</span><br><span class="line">    ));</span><br><span class="line"></span><br><span class="line">    maxScoreByPassMark.keySet().forEach(a -&gt; System.out.println(<span class="string">&quot;是否及格：&quot;</span> + a + <span class="string">&quot;：&quot;</span> + maxScoreByPassMark.get(a)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Integer score;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> demo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot日志配置详情</title>
      <link href="/archive/57bc63e7/"/>
      <url>/archive/57bc63e7/</url>
      
        <content type="html"><![CDATA[<h1>SpringBoot日志配置详情</h1><h2 id="一、介绍">一、介绍</h2><p>在所有的项目中，日志是必不可少的，为了高效清晰的查找日志，可以配置日志输出的等级和格式。</p><p>在配置后，可以自定义输出日志到指定目录，可以按照天数来分割日志，可以按照日志级别分割日志，可以按照大小来进行分割日志。</p><p>输出的日志方式，可以说五花八门，但总有一款适合你的项目</p><h2 id="二、简单配置">二、简单配置</h2><h3 id="1、日志的级别">1、日志的级别</h3><p>关于日志的级别打印，需要搞清楚日志等级的优先级</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.Scheduled;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoggerTask</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;0/30 * * * * ?&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">logTask</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 日志级别，由低到高，trace &lt; debug &lt; info &lt; warn &lt; error</span></span><br><span class="line">        log.trace(<span class="string">&quot;TRACE&quot;</span>);</span><br><span class="line">        log.debug(<span class="string">&quot;DEBUG日志&quot;</span>);</span><br><span class="line">        log.info(<span class="string">&quot;INFO日志&quot;</span>);</span><br><span class="line">        log.warn(<span class="string">&quot;WARN日志&quot;</span>);</span><br><span class="line">        log.error(<span class="string">&quot;ERROR日志&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在SpringBoot的yaml配置文件中，添加相关日志的配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 日志配置</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">    <span class="attr">level:</span></span><br><span class="line">        <span class="comment"># 代表工程所有类的日志等级</span></span><br><span class="line">        <span class="attr">root:</span> <span class="string">info</span></span><br></pre></td></tr></table></figure><p>以下是日志的打印，发现比info级别低的debug和trace级别的日志没有打印出来。</p><p>在实际项目中，除了日志输出的规范，合理利用日志等级，也可以达到清晰日志的规范，排查问题会变得高效</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20210125140750.png" alt="image-20210123164025295" /></p><blockquote><p>除了<code>logging.level.root</code>，还可以指定对应包和类的日志级别</p><p>配置文件和测试代码</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 日志配置</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line"> <span class="attr">level:</span></span><br><span class="line">     <span class="comment"># 代表工程所有包的日志等级</span></span><br><span class="line">     <span class="attr">root:</span> <span class="string">info</span></span><br><span class="line">     <span class="comment"># 指定包下的日志等级</span></span><br><span class="line">     <span class="attr">com.banmoon.spring_boot_logger.mapper:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.banmoon.spring_boot_logger.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.Scheduled;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoggerTask</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定时去查询数据库表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;10 * * * * ?&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dbDemonstration</span><span class="params">()</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;=====================&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> userMapper.countByExample(<span class="literal">null</span>);</span><br><span class="line">        log.info(<span class="string">&quot;用户条数：&#123;&#125;&quot;</span>, count);</span><br><span class="line">        log.info(<span class="string">&quot;=====================&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20210125140800.png" alt="image-20210125133637550" /></p></blockquote><h3 id="2、日志的打印格式">2、日志的打印格式</h3><p>虽然springBoot的日志打印格式足够清晰明了，但它支持自定义打印格式，还是记录一波吧</p><p>配置文件指定格式</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 日志配置</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">    <span class="attr">pattern:</span></span><br><span class="line">        <span class="comment"># 格式化控制台输出的日志</span></span><br><span class="line">        <span class="attr">console:</span> <span class="string">&quot;%red(%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;) %green([%thread]) %blue([%-5level]) %cyan(%logger&#123;36&#125;:%line) %msg%n&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20210125141435.png" alt="image-20210125141435366" /></p><p>简单说明一下这段格式化的意思，学会大家就可以配置自己喜欢的格式了</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">%red:</span> <span class="string">指定颜色，记得用小括号将内容包裹起来</span></span><br><span class="line"><span class="string">%d:</span> <span class="string">日期时间，后面的是日期格式化</span></span><br><span class="line"><span class="string">%thred:</span> <span class="string">线程名</span></span><br><span class="line"><span class="string">%-5level:</span> <span class="string">日志级别，%-5表示的是打印字符个数，如果个数不足则用空格补上</span></span><br><span class="line"><span class="string">%logger&#123;36&#125;:</span> <span class="string">输出日志的包名，最长36字符，超过则会简化，只会输出后面几个包名和类名</span></span><br><span class="line"><span class="string">%line:</span> <span class="string">输出日志的行数</span></span><br><span class="line"><span class="string">%msg:</span> <span class="string">输出的日志信息</span></span><br><span class="line"><span class="string">%n:</span> <span class="string">换行</span></span><br></pre></td></tr></table></figure><h3 id="3、日志的持久化输出">3、日志的持久化输出</h3><p>在日常的开发中，控制台输出的日志就满足开发的需求了。但是在测试生产环境下，日志的持久化保存就显得格外的重要，springBoot也考虑到了这一点，也拥有相对应的配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 日志配置</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">    <span class="comment"># 输出日志文件的路径，log=相对路径，D:/log=绝对路径，文件名默认为spring.log</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">D:/log</span></span><br><span class="line">    <span class="comment"># 输出到指定的文件中，同样可以指定相对路径</span></span><br><span class="line">    <span class="attr">file:</span> <span class="string">log/spring-boot-logger.log</span></span><br><span class="line">    <span class="attr">pattern:</span></span><br><span class="line">        <span class="comment"># 持久化输出日志的格式，颜色不起作用，需要区别于控制台</span></span><br><span class="line">        <span class="attr">file:</span> <span class="string">&quot;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] [%-5level] %logger&#123;36&#125;:%line %msg%n&quot;</span></span><br></pre></td></tr></table></figure><p>相对路径，指定<code>logging.file</code>输出</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20210125163638.png" alt="相对路径" /></p><p>绝对路径，指定<code>logging.path</code>输出</p><p><img src="https://banmoon-pic.oss-cn-guangzhou.aliyuncs.com/images/20210125164042.png" alt="绝对路径" /></p><blockquote><p>注意：<code>logging.path</code>和<code>logging.file</code>只需指定一个便可，两个都指定时，仅会输出<code>logging.file</code>的日志</p></blockquote><h2 id="三、高级配置">三、高级配置</h2><p>在创建springBoot项目后，简单的日志配置可以满足我们大部分的需求，但我们有时需要高度自定义的日志，比如说</p><ul class="lvl-0"><li class="lvl-2"><p>按天生成日志：一天一份日志，排查问题就方便的多</p></li><li class="lvl-2"><p>按日志大小来切割日志：假如日志超过存储大小，它会自动将日志写入新的文件中</p></li><li class="lvl-2"><p>按日志等级输出独立的日志：一般选择ERROR级别的日志单独输出</p></li></ul><h3 id="1、配置模板">1、配置模板</h3><p>在<code>resources</code>目录下，创建文件<code>logback/logback.xml</code>，并在配置文件指定logback的配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">    <span class="attr">config:</span> <span class="string">classpath:logback/logback.xml</span></span><br></pre></td></tr></table></figure><p>logback.xml文件配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">scan</span>=<span class="string">&quot;true&quot;</span> <span class="attr">scanPeriod</span>=<span class="string">&quot;30 seconds&quot;</span> <span class="attr">debug</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 获取日志文件的输出路径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProperty</span> <span class="attr">scope</span>=<span class="string">&quot;context&quot;</span> <span class="attr">name</span>=<span class="string">&quot;LOG_PATH&quot;</span> <span class="attr">source</span>=<span class="string">&quot;logging.log_path&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 获取该应用的名称 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProperty</span> <span class="attr">scope</span>=<span class="string">&quot;context&quot;</span> <span class="attr">name</span>=<span class="string">&quot;APPLICATION_NAME&quot;</span> <span class="attr">source</span>=<span class="string">&quot;spring.application.name&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 定义日志输出格式和颜色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;LOG_FORMAT_ONE&quot;</span> <span class="attr">value</span>=<span class="string">&quot;%red(%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;) %green([%thread]) %blue([%-5level]) %cyan(%logger&#123;36&#125;:%line) %msg%n&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;LOG_FORMAT_TWO&quot;</span> <span class="attr">value</span>=<span class="string">&quot;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] [%-5level] %logger&#123;36&#125;:%line %msg%n&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 输出到控制台 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;CONSOLE&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 日志输出编码格式化 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Pattern</span>&gt;</span>$&#123;LOG_FORMAT_ONE&#125;<span class="tag">&lt;/<span class="name">Pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 过滤器，此过滤器低于阈值的不再显示 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>info<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 时间日期滚动日志 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;FILE_INFO&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 输出的日志远程，当天的日志名称 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;LOG_PATH&#125;/info.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 策略配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 保存归纳的日志 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;LOG_PATH&#125;/%d&#123;yyyy-MM-dd&#125;/info_%i.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 日志文件最大尺寸 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>50MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--日志文件保留天数--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">MaxHistory</span>&gt;</span>90<span class="tag">&lt;/<span class="name">MaxHistory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 日志输出编码格式化 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;LOG_FORMAT_TWO&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 时间日期滚动日志，只记录error级别的日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;FILE_ERROR&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;LOG_PATH&#125;/$&#123;APPLICATION_NAME&#125;/$&#123;APPLICATION_NAME&#125;_error.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;LOG_PATH&#125;/$&#123;APPLICATION_NAME&#125;/%d&#123;yyyy-MM-dd&#125;/$&#123;APPLICATION_NAME&#125;_error.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>180<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">totalSizeCap</span>&gt;</span>10GB<span class="tag">&lt;/<span class="name">totalSizeCap</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;LOG_FORMAT_TWO&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 过滤器，日志级别过滤，仅输出error日志 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>ERROR<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 指定输出的日志等级，root代表工程所有包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;CONSOLE&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;FILE_INFO&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;FILE_ERROR&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 指定输出的日志等级，指定包路径，此包下都以设置的等级输出 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- additivity表示日志是否向上传递，如果为true，日志在root可能会再次打印 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;com.banmoon.spring_boot_logger.mapper&quot;</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span> <span class="attr">additivity</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;CONSOLE&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;FILE_INFO&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;FILE_ERROR&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2、通过运行环境来指定对应的输出策略">2、通过运行环境来指定对应的输出策略</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">scan</span>=<span class="string">&quot;true&quot;</span> <span class="attr">scanPeriod</span>=<span class="string">&quot;30 seconds&quot;</span> <span class="attr">debug</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 或者通过环境来指定输出的策略 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">&quot;dev&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">resource</span>=<span class="string">&quot;logback/logback-dev.xml&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">&quot;test | prod&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">resource</span>=<span class="string">&quot;logback/logback-prod.xml&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>logback-dev.xml</code>文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">included</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 开发环境，日志只至控制台 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;CONSOLE&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;com.banmoon.spring_boot_logger.mapper&quot;</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span> <span class="attr">additivity</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;CONSOLE&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">included</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>logback-prod.xml</code>文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">included</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 测试，生产环境，持久化日志文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;CONSOLE&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;FILE_INFO&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;FILE_ERROR&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;com.banmoon.spring_boot_logger.mapper&quot;</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span> <span class="attr">additivity</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;CONSOLE&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;FILE_INFO&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;FILE_ERROR&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">included</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3、相关配置标签">3、相关配置标签</h3><table><thead><tr><th>标签名</th><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>configuration</td><td>scan：是否扫描日志配置文件，默认为<code>true</code><br />scanPeriod：扫描时间间隔，默认为<code>60 seconds</code><br />debug：是否打印出logback的日志，默认为<code>false</code></td><td>logback配置，当<code>scan</code>启用时，配置文件会定时检查并重新加载</td></tr><tr><td>property</td><td>name：属性名<br />value：属性值<br />file：可以引入<code>properties</code>文件的属性</td><td>定义参数常量，可以使用<code>$&#123;属性名&#125;</code>进行使用</td></tr><tr><td>springProperty</td><td>name：属性名<br />source：取项目配置文件的属性源<br />scope：作用域</td><td>springBoot的扩展，将读取springBoot的配置文件，获取参数常量</td></tr><tr><td>appender</td><td>name：自定义的策略名<br />class：指定输出策略的输出类，控制台输出或文件输出</td><td>输出策略</td></tr><tr><td>appender.file</td><td></td><td>此策略输出的文件路径，可以绝对路径，也可以相对路径</td></tr><tr><td>appender.rollingPolicy</td><td>class：指定回滚策略类</td><td>日志输出回滚策略配置</td></tr><tr><td>appender.rollingPolicy.fileNamePattern</td><td></td><td>日志输出回滚的日志保存路径</td></tr><tr><td>appender.rollingPolicy.maxHistory</td><td></td><td>日志最大保存天数</td></tr><tr><td>appender.rollingPolicy.totalSizeCap</td><td></td><td>总日志最大的容量，指的不是单个文件</td></tr><tr><td>appender.encoder</td><td></td><td>编码策略</td></tr><tr><td>appender.encoder.pattern</td><td></td><td>指定输出的日志格式，控制台可以有颜色，但文件输出不行</td></tr><tr><td>appender.encoder.charset</td><td></td><td>编码格式，一般都取utf-8</td></tr><tr><td>appender.filter</td><td>class：指定过滤器类<br /><mark>注意：每个过滤器，子节点都不完全相同，建议查看源码和官方文档，也可以实现自己的过滤器</mark></td><td>日志输出的过滤策略</td></tr><tr><td>root</td><td>level：指定日志等级</td><td>该项目所有包的等级，比此等级高的日志信息会显示</td></tr><tr><td>logger</td><td>level：指定日志等级<br />name：指定的包名或类名<br />additivity：true/false，表示日志是否向上传递，如果为true，日志在root可能会再次打印</td><td>功能与root基本一致，区别在于<br /><code>root</code>是指定工程的所有包的，而<code>logger</code>需要自己指定包或类</td></tr><tr><td>root.appender-ref<br />logger.appender-ref</td><td>ref：指定定义的appender策略的名字</td><td>指定输出的策略<br /><mark>建议在最上层指定控制台，不然启动控制台就一个springBoot的Logo</mark></td></tr><tr><td>springProfile</td><td></td><td>springBoot的扩展，可以通过环境指定，实现标签内的内容</td></tr></tbody></table><h2 id="四、官方配置文档和git地址">四、官方配置文档和git地址</h2><ul class="lvl-0"><li class="lvl-2"><p><a href="http://logback.qos.ch/manual/configuration.html">logback</a></p></li><li class="lvl-2"><p><a href="https://docs.spring.io/spring-boot/docs/2.5.x/reference/html/spring-boot-features.html#boot-features-logging">springBoot日志配置</a></p></li><li class="lvl-2"><p><a href="https://gitee.com/ban-moon/spring_boot_logger">gitee</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot整合rabbitMq</title>
      <link href="/archive/4f422a63/"/>
      <url>/archive/4f422a63/</url>
      
        <content type="html"><![CDATA[<h1>SpringBoot整合rabbitMq</h1><h2 id="一、介绍">一、介绍</h2><p>消息队列（Message Queue）简称mq，本文将介绍SpringBoot整合rabbitmq的功能使用</p><p>队列是一种数据结构，就像排队一样，遵循先进先出的原则。</p><p>而消息队列是一种消息中间件，在项目中我们可以将消息打包放入队列，再由消费者监听进行处理数据，再进行业务的处理</p><p>那么使用队列可以带来哪些好处呢</p><ol><li class="lvl-3"><p>解耦</p></li><li class="lvl-3"><p>异步</p></li><li class="lvl-3"><p>流量削峰/限流</p></li></ol><p>原本的程序再装上了消息中间件后，有哪些事需要特别注意的呢</p><ol><li class="lvl-3"><p>高可用：简单点就是说，要保证消息中间件不要那么容易崩溃。作为桥梁的消息中间件崩溃了，那整个系统就相当于崩溃的情况的</p></li><li class="lvl-3"><p>数据丢失</p></li><li class="lvl-3"><p>重复消费</p></li><li class="lvl-3"><p>顺序性</p></li></ol><p>话不多说，优缺点的例子以后补上，先来开始使用rabbitmq吧</p><h2 id="二、rabbitmq的安装，项目依赖和相关配置">二、rabbitmq的安装，项目依赖和相关配置</h2><p>安装我就不多说了，我是通过这篇<a href="https://www.cnblogs.com/xiaoyaojinzhazhadehangcheng/p/14138089.html">博客</a>安装成功的，大家可以试试。</p><p>本文rabbitmq使用的版本是3.8.5，在不同版本下可能会出现与本文不同的结果，甚至是报错</p><p>创建springBoot项目，引入项目依赖，本文使用的springBoot版本为<code>2.4.2</code>，算是比较新的了</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.73<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置yaml文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">8011</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">application:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">rabbitmq_learn</span></span><br><span class="line">    <span class="attr">rabbitmq:</span></span><br><span class="line">        <span class="attr">host:</span> <span class="string">主机名</span></span><br><span class="line">        <span class="attr">port:</span> <span class="string">端口</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">帐号</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">密码</span></span><br></pre></td></tr></table></figure><h2 id="三、队列类型">三、队列类型</h2><h3 id="3-1、简单模式">3.1、简单模式</h3><p>首先创建队列常量类<code>RabbitmqConstant</code>，声明常量为队列名称，当然也可以写在配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitmqConstant</span> &#123;    </span><br><span class="line">    <span class="comment">/** ================  简单模式 begin  ================ */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LEARN_SIMPLE_QUEUE</span> <span class="operator">=</span> <span class="string">&quot;LEARN.SIMPLE.QUEUE&quot;</span>;</span><br><span class="line">    <span class="comment">/** ================  简单模式  end  ================ */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建队列配置类<code>SimpleRabbitmqConfig</code>，声明创建队列</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.learn.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.learn.constants.RabbitmqConstant;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Queue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleRabbitmqConfig</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean(name = RabbitmqConstant.LEARN_SIMPLE_QUEUE)</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">queue</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(RabbitmqConstant.LEARN_SIMPLE_QUEUE, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>简单说明一下，这几个参数的意思</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>name</td><td>定义队列的名称</td></tr><tr><td>durable</td><td>是否持久化，重启rabbitmq队列是否还存在，默认为true</td></tr><tr><td>exclusive</td><td>是否排他，是否仅保持一个连接，且该连接断线后，此队列会被删除，默认为false</td></tr><tr><td>autoDelete</td><td>是否自动删除，当队列没有消息一段时间后自动删除，默认为false</td></tr><tr><td>arguments</td><td>参数，可以设置队列的最大消息数等</td></tr></tbody></table></blockquote><p>创建此队列的生产者类<code>SimpleMsgProducer</code>，提供send方法进行生产消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.learn.rabbitmq.producer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.learn.constants.RabbitmqConstant;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.learn.req.SendBaseMsgReq;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.AmqpTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleMsgProducer</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AmqpTemplate amqpTemplate;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">(SendBaseMsgReq req)</span>&#123;</span><br><span class="line">        amqpTemplate.convertAndSend(RabbitmqConstant.LEARN_SIMPLE_QUEUE, JSON.toJSONString(req));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建此队列的消费者类<code>SimpleMsgConsumer</code>，监听队列进行消费</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.learn.rabbitmq.consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.learn.constants.RabbitmqConstant;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.learn.req.SendBaseMsgReq;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleMsgConsumer</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="meta">@RabbitListener(queues = RabbitmqConstant.LEARN_SIMPLE_QUEUE)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">simpleMsgConsumerListener</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="type">SendBaseMsgReq</span> <span class="variable">req</span> <span class="operator">=</span> JSON.parseObject(message, SendBaseMsgReq.class);</span><br><span class="line">        log.info(<span class="string">&quot;简单模式消费：&#123;&#125;&quot;</span>, req.getContent());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建一个控制类<code>TestController</code>，用来测试生产消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.learn.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.learn.rabbitmq.producer.*;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.learn.req.SendBaseMsgReq;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SimpleMsgProducer simpleMsgProducer;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/sendSimpleMsg&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sendSimpleMsg</span><span class="params">(<span class="meta">@RequestParam</span> String content)</span>&#123;</span><br><span class="line">        <span class="type">SendBaseMsgReq</span> <span class="variable">req</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SendBaseMsgReq</span>();</span><br><span class="line">        req.setContent(content);</span><br><span class="line">        simpleMsgProducer.send(req);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;发送成功&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进行测试，请求3次</p><p><img src="https://gitee.com/ban-moon/blogImg/raw/master/image/20210205154207.png" alt="image-20210205154206520" /></p><p><img src="https://gitee.com/ban-moon/blogImg/raw/master/image/20210205154529.png" alt="image-20210205154529033" /></p><h3 id="3-2、work模式">3.2、work模式</h3><p>队列常量类<code>RabbitmqConstant</code>，声明常量为队列名称</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitmqConstant</span> &#123;    </span><br><span class="line">    <span class="comment">/** ================  工作模式 begin  ================ */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LEARN_WORK_QUEUE</span> <span class="operator">=</span> <span class="string">&quot;LEARN.WORK.QUEUE&quot;</span>;</span><br><span class="line">    <span class="comment">/** ================  工作模式  end  ================ */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建队列配置类<code>WorkRabbitmqConfig</code>，声明创建队列</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.learn.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.learn.constants.RabbitmqConstant;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Queue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WorkRabbitmqConfig</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean(name = RabbitmqConstant.LEARN_WORK_QUEUE)</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">queue</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(RabbitmqConstant.LEARN_WORK_QUEUE, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建此队列的生产者类<code>WorkMsgProducer</code>，提供send方法进行生产消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.learn.rabbitmq.producer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.learn.constants.RabbitmqConstant;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.learn.req.SendBaseMsgReq;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.AmqpTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WorkMsgProducer</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AmqpTemplate amqpTemplate;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">(SendBaseMsgReq req)</span>&#123;</span><br><span class="line">        amqpTemplate.convertAndSend(RabbitmqConstant.LEARN_WORK_QUEUE, JSON.toJSONString(req));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建此队列的消费者类<code>WorkMsgConsumer</code>，监听队列进行消费</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.learn.rabbitmq.consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.learn.constants.RabbitmqConstant;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.learn.req.SendBaseMsgReq;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WorkMsgConsumer</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="meta">@RabbitListener(queues = RabbitmqConstant.LEARN_WORK_QUEUE)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">workMsgConsumerListenerA</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="type">SendBaseMsgReq</span> <span class="variable">req</span> <span class="operator">=</span> JSON.parseObject(message, SendBaseMsgReq.class);</span><br><span class="line">        log.info(<span class="string">&quot;工作模式消费A：&#123;&#125;&quot;</span>, req.getContent());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="meta">@RabbitListener(queues = RabbitmqConstant.LEARN_WORK_QUEUE)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">workMsgConsumerListenerB</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="type">SendBaseMsgReq</span> <span class="variable">req</span> <span class="operator">=</span> JSON.parseObject(message, SendBaseMsgReq.class);</span><br><span class="line">        log.info(<span class="string">&quot;工作模式消费B：&#123;&#125;&quot;</span>, req.getContent());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="meta">@RabbitListener(queues = RabbitmqConstant.LEARN_WORK_QUEUE)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">workMsgConsumerListenerC</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="type">SendBaseMsgReq</span> <span class="variable">req</span> <span class="operator">=</span> JSON.parseObject(message, SendBaseMsgReq.class);</span><br><span class="line">        log.info(<span class="string">&quot;工作模式消费C：&#123;&#125;&quot;</span>, req.getContent());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建一个控制类<code>TestController</code>，用来测试生产消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.learn.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.learn.rabbitmq.producer.*;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.learn.req.SendBaseMsgReq;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> WorkMsgProducer workMsgProducer;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/sendWorkMsg&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sendWorkMsg</span><span class="params">(<span class="meta">@RequestParam</span> String content)</span>&#123;</span><br><span class="line">        <span class="type">SendBaseMsgReq</span> <span class="variable">req</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SendBaseMsgReq</span>();</span><br><span class="line">        req.setContent(content);</span><br><span class="line">        workMsgProducer.send(req);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;发送成功&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进行测试，请求6次</p><p><img src="https://gitee.com/ban-moon/blogImg/raw/master/image/20210205155415.png" alt="image-20210205155415437" /></p><p><img src="https://gitee.com/ban-moon/blogImg/raw/master/image/20210205155328.png" alt="image-20210205155328374" /></p><blockquote><p>可以看到，如果正常消费的情况下，多个消费者会轮循进行消费</p></blockquote><h3 id="3-3、Direct直连模式">3.3、Direct直连模式</h3><blockquote><p>在使用Direct之前，我们先得了解rabbitmq的Exchange交换机，这个交换机扮演了什么样的角色，在消息队列中处到了什么样的作用</p><p>生产者生产的消息会先到交换机Exchange，再通过router_key和路由策略分发到相对应的队列，再通过消费者监听队列消费消息</p><p>以下是官方的图</p><p><img src="https://gitee.com/ban-moon/blogImg/raw/master/image/20210206091238.png" alt="image-20210206091237735" /></p></blockquote><p>队列常量类<code>RabbitmqConstant</code>，声明常量为队列名称</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitmqConstant</span> &#123;    </span><br><span class="line">    <span class="comment">/** ================  直连模式 begin  ================ */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LEARN_DIRECT_QUEUE</span> <span class="operator">=</span> <span class="string">&quot;LEARN.DIRECT.QUEUE&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LEARN_DIRECT_EXCHANGE</span> <span class="operator">=</span> <span class="string">&quot;LEARN.DIRECT.EXCHANGE&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LEARN_DIRECT_ROUTER_KEY</span> <span class="operator">=</span> <span class="string">&quot;LEARN.DIRECT.ROUTER_KEY&quot;</span>;</span><br><span class="line">    <span class="comment">/** ================  直连模式  end  ================ */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建队列配置类<code>DirectRabbitmqConfig</code>，声明创建队列，声明创建交换机，将交换机和队列进行绑定</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.learn.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.learn.constants.RabbitmqConstant;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Binding;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.BindingBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.DirectExchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Queue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 直连模式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DirectRabbitmqConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(name = RabbitmqConstant.LEARN_DIRECT_QUEUE)</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">directQueue</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(RabbitmqConstant.LEARN_DIRECT_QUEUE, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(name = RabbitmqConstant.LEARN_DIRECT_EXCHANGE)</span></span><br><span class="line">    <span class="keyword">public</span> DirectExchange <span class="title function_">directExchange</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DirectExchange</span>(RabbitmqConstant.LEARN_DIRECT_EXCHANGE, <span class="literal">true</span>, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">bindingDirect</span><span class="params">(<span class="meta">@Qualifier(RabbitmqConstant.LEARN_DIRECT_QUEUE)</span> Queue directQueue,</span></span><br><span class="line"><span class="params">                                 <span class="meta">@Qualifier(RabbitmqConstant.LEARN_DIRECT_EXCHANGE)</span> DirectExchange directExchange)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(directQueue).to(directExchange).with(RabbitmqConstant.LEARN_DIRECT_ROUTER_KEY);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建此队列的生产者类<code>DirectMsgProducer</code>，提供send方法进行生产消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.learn.rabbitmq.producer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.learn.constants.RabbitmqConstant;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.learn.req.SendBaseMsgReq;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DirectMsgProducer</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">(SendBaseMsgReq req)</span>&#123;</span><br><span class="line">        rabbitTemplate.convertAndSend(RabbitmqConstant.LEARN_DIRECT_EXCHANGE,</span><br><span class="line">                RabbitmqConstant.LEARN_DIRECT_ROUTER_KEY,</span><br><span class="line">                JSON.toJSONString(req));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建此队列的消费者类<code>DirectMsgConsumer</code>，监听队列进行消费</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.learn.rabbitmq.consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.learn.constants.RabbitmqConstant;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.learn.req.SendBaseMsgReq;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DirectMsgConsumer</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="meta">@RabbitListener(queues = RabbitmqConstant.LEARN_DIRECT_QUEUE)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">directMsgConsumerListener</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="type">SendBaseMsgReq</span> <span class="variable">req</span> <span class="operator">=</span> JSON.parseObject(message, SendBaseMsgReq.class);</span><br><span class="line">        log.info(<span class="string">&quot;直连模式消费：&#123;&#125;&quot;</span>, req.getContent());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="meta">@RabbitListener(queues = RabbitmqConstant.LEARN_DIRECT_QUEUE)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">newDirectMsgConsumerListener</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="type">SendBaseMsgReq</span> <span class="variable">req</span> <span class="operator">=</span> JSON.parseObject(message, SendBaseMsgReq.class);</span><br><span class="line">        log.info(<span class="string">&quot;新的消费：直连模式消费：&#123;&#125;&quot;</span>, req.getContent());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建一个控制类<code>TestController</code>，用来测试生产消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.learn.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.learn.rabbitmq.producer.*;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.learn.req.SendBaseMsgReq;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DirectMsgProducer directMsgProducer;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/sendDirectMsg&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sendDirectMsg</span><span class="params">(<span class="meta">@RequestParam</span> String content)</span>&#123;</span><br><span class="line">        <span class="type">SendBaseMsgReq</span> <span class="variable">req</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SendBaseMsgReq</span>();</span><br><span class="line">        req.setContent(content);</span><br><span class="line">        directMsgProducer.send(req);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;发送成功&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进行测试，请求4次</p><p><img src="https://gitee.com/ban-moon/blogImg/raw/master/image/20210206092238.png" alt="image-20210206092238800" /></p><p><img src="https://gitee.com/ban-moon/blogImg/raw/master/image/20210206092325.png" alt="image-20210206092325315" /></p><blockquote><p>在看到一个消费者监听了队列后，我在想，能不能可以使用多个消费者监听同个队列，会造成什么样的结果</p><p>修改下消费者类<code>DirectMsgConsumer</code>，使此队列拥有两个消费者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.learn.rabbitmq.consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.learn.constants.RabbitmqConstant;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.learn.req.SendBaseMsgReq;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DirectMsgConsumer</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="meta">@RabbitListener(queues = RabbitmqConstant.LEARN_DIRECT_QUEUE)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">directMsgConsumerListener</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="type">SendBaseMsgReq</span> <span class="variable">req</span> <span class="operator">=</span> JSON.parseObject(message, SendBaseMsgReq.class);</span><br><span class="line">        log.info(<span class="string">&quot;直连模式消费：&#123;&#125;&quot;</span>, req.getContent());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="meta">@RabbitListener(queues = RabbitmqConstant.LEARN_DIRECT_QUEUE)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">newDirectMsgConsumerListener</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="type">SendBaseMsgReq</span> <span class="variable">req</span> <span class="operator">=</span> JSON.parseObject(message, SendBaseMsgReq.class);</span><br><span class="line">        log.info(<span class="string">&quot;新的消费：直连模式消费：&#123;&#125;&quot;</span>, req.getContent());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再测试，请求4次，查看日志</p><p><img src="https://gitee.com/ban-moon/blogImg/raw/master/image/20210206092942.png" alt="image-20210206092942848" /></p><p>照样是消费者轮循处理消息的，且不会重复消费</p></blockquote><blockquote><p>在经过以上的测试，我对于前面写的简单模式和work模式有了一个猜想，会不会<mark>没有指定交换机的这两个模式，本质上就是直连模式</mark>，而交换机使用的默认的交换机名字。</p><p>带着这个猜想，我打开了rabbitmq的web管理后台，查看交换机，在简单模式和work模式上再发送几条请求</p><p><img src="https://gitee.com/ban-moon/blogImg/raw/master/image/20210206093745.png" alt="image-20210206093745691" /></p><p>果然，这个<code>AMQP default</code>交换机有消息进入，证明了我的猜想，为了更加一步的求实，我翻阅了官方文档</p><p><img src="https://gitee.com/ban-moon/blogImg/raw/master/image/20210206094132.png" alt="image-20210206094132562" /></p><blockquote><p>– 简单翻译一下默认交换机</p><p>默认交换机是一个由&quot;broker&quot;预先声明好的没有名字（空字符串）的直连交换机。他有一个特殊的属性，这会使得它对于简单的应用程序变得十分有用。创建的每个队列都会使用队列名作为router_key自动绑定到它。</p><p>例如，当你声明名称为&quot;search-indexing-online&quot;的队列时，&quot;broker&quot;将使用&quot;search-indexing-online&quot;作为router_key将它绑定到default exchange。因此，一条被发布到default exchange并且routing_key为&quot;search-indexing-online&quot;将被路由到名称为&quot;search-indexing-online&quot;的queue。换句话说，default exchange使直接传送消息到queue成为可能，即使从技术角度上而言，事实并不是这样。</p></blockquote><p>所以，平常程序若是简单，我们可以直接使用默认交换机，这样可以省略少些点代码不是吗</p></blockquote><h3 id="3-4、Fanout扇形模式">3.4、Fanout扇形模式</h3><p>此类模式，我更习惯称呼为广播模式。因为，交换机上可以绑定多个队列，router_key不生效，默认向绑定的所有队列进行发送消息，就像广播一样。</p><p>队列常量类<code>RabbitmqConstant</code>，声明常量为队列名称</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitmqConstant</span> &#123;    </span><br><span class="line">    <span class="comment">/** ================  扇形模式 begin  ================ */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LEARN_FANOUT_QUEUE_A</span> <span class="operator">=</span> <span class="string">&quot;LEARN.FANOUT.QUEUE.A&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LEARN_FANOUT_QUEUE_B</span> <span class="operator">=</span> <span class="string">&quot;LEARN.FANOUT.QUEUE.B&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LEARN_FANOUT_QUEUE_C</span> <span class="operator">=</span> <span class="string">&quot;LEARN.FANOUT.QUEUE.C&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LEARN_FANOUT_EXCHANGE</span> <span class="operator">=</span> <span class="string">&quot;LEARN.FANOUT.EXCHANGE&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LEARN_FANOUT_ROUTER_KEY</span> <span class="operator">=</span> <span class="string">&quot;LEARN.FANOUT.ROUTER_KEY&quot;</span>;<span class="comment">// 扇形模式，路由键无用</span></span><br><span class="line">    <span class="comment">/** ================  扇形模式  end  ================ */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建队列配置类<code>FanoutRabbitConfig</code>，声明创建队列，声明创建交换机，将交换机和队列进行绑定</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.learn.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.learn.constants.RabbitmqConstant;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Binding;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.BindingBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.FanoutExchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Queue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 扇形模式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FanoutRabbitConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(name = RabbitmqConstant.LEARN_FANOUT_QUEUE_A)</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">queueA</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(RabbitmqConstant.LEARN_FANOUT_QUEUE_A, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean(name = RabbitmqConstant.LEARN_FANOUT_QUEUE_B)</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">queueB</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(RabbitmqConstant.LEARN_FANOUT_QUEUE_B, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean(name = RabbitmqConstant.LEARN_FANOUT_QUEUE_C)</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">queueC</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(RabbitmqConstant.LEARN_FANOUT_QUEUE_C, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean(name = RabbitmqConstant.LEARN_FANOUT_EXCHANGE)</span></span><br><span class="line">    <span class="keyword">public</span> FanoutExchange <span class="title function_">fanoutExchange</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FanoutExchange</span>(RabbitmqConstant.LEARN_FANOUT_EXCHANGE, <span class="literal">true</span>, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">bindingFanoutQueueA</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queueA()).to(fanoutExchange());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">bindingFanoutQueueB</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queueB()).to(fanoutExchange());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">bindingFanoutQueueC</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queueC()).to(fanoutExchange());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建此队列的生产者类<code>FanoutMsgProducer</code>，提供send方法进行生产消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.learn.rabbitmq.producer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.learn.constants.RabbitmqConstant;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.learn.req.SendBaseMsgReq;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FanoutMsgProducer</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">(SendBaseMsgReq req)</span>&#123;</span><br><span class="line">        rabbitTemplate.convertAndSend(RabbitmqConstant.LEARN_FANOUT_EXCHANGE, <span class="literal">null</span>, JSON.toJSONString(req));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>创建此队列的消费者类<code>FanoutMsgConsumer</code>，监听队列进行消费</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.learn.rabbitmq.consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.learn.constants.RabbitmqConstant;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.learn.req.SendBaseMsgReq;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Message;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FanoutMsgConsumer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="meta">@RabbitListener(queues = RabbitmqConstant.LEARN_FANOUT_QUEUE_A)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fanoutMsgConsumerListenerA</span><span class="params">(Message message, Channel channel)</span>&#123;</span><br><span class="line">        <span class="type">SendBaseMsgReq</span> <span class="variable">req</span> <span class="operator">=</span> JSON.parseObject(message.getBody(), SendBaseMsgReq.class);</span><br><span class="line">        log.info(<span class="string">&quot;扇形模式消费A: &#123;&#125;&quot;</span>, req.getContent());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="meta">@RabbitListener(queues = RabbitmqConstant.LEARN_FANOUT_QUEUE_B)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fanoutMsgConsumerListenerB</span><span class="params">(Message message, Channel channel)</span>&#123;</span><br><span class="line">        <span class="type">SendBaseMsgReq</span> <span class="variable">req</span> <span class="operator">=</span> JSON.parseObject(message.getBody(), SendBaseMsgReq.class);</span><br><span class="line">        log.info(<span class="string">&quot;扇形模式消费B: &#123;&#125;&quot;</span>, req.getContent());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="meta">@RabbitListener(queues = RabbitmqConstant.LEARN_FANOUT_QUEUE_C)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fanoutMsgConsumerListenerC</span><span class="params">(Message message, Channel channel)</span>&#123;</span><br><span class="line">        <span class="type">SendBaseMsgReq</span> <span class="variable">req</span> <span class="operator">=</span> JSON.parseObject(message.getBody(), SendBaseMsgReq.class);</span><br><span class="line">        log.info(<span class="string">&quot;扇形模式消费C: &#123;&#125;&quot;</span>, req.getContent());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建一个控制类<code>TestController</code>，用来测试生产消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.learn.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.learn.rabbitmq.producer.*;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.learn.req.SendBaseMsgReq;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> FanoutMsgProducer fanoutMsgProducer;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/sendFanoutMsg&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sendFanoutMsg</span><span class="params">(<span class="meta">@RequestParam</span> String content)</span>&#123;</span><br><span class="line">        <span class="type">SendBaseMsgReq</span> <span class="variable">req</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SendBaseMsgReq</span>();</span><br><span class="line">        req.setContent(content);</span><br><span class="line">        fanoutMsgProducer.send(req);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;发送成功&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进行测试，请求2次</p><p><img src="https://gitee.com/ban-moon/blogImg/raw/master/image/20210206100923.png" alt="image-20210206100923029" /></p><p><img src="https://gitee.com/ban-moon/blogImg/raw/master/image/20210206100906.png" alt="image-20210206100905950" /></p><h3 id="3-5、Topic主题模式">3.5、Topic主题模式</h3><p>在主题模式中，路由键的匹配规则将成为重点，符合匹配规则的消息会发送到指定的队列</p><ul class="lvl-0"><li class="lvl-2"><p><code>*</code>：匹配一个单词</p></li><li class="lvl-2"><p><code>#</code>：匹配0-n个单词</p></li></ul><table><thead><tr><th>交换机与队列绑定的router_key</th><th>推送消息的router_key</th><th>是否推送到此队列</th></tr></thead><tbody><tr><td>topic.#</td><td>topic.A</td><td>是</td></tr><tr><td>topic.#</td><td>topic.A.B</td><td>是</td></tr><tr><td>topic.#</td><td>A.topic</td><td>否</td></tr><tr><td>*.topic</td><td>A.B.topic</td><td>否</td></tr><tr><td>*.topic</td><td>A.topic</td><td>是</td></tr></tbody></table><p>队列常量类<code>RabbitmqConstant</code>，声明常量为队列名称</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitmqConstant</span> &#123;    </span><br><span class="line">    <span class="comment">/** ================  主题模式 begin  ================ */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LEARN_TOPIC_QUEUE_LOG</span> <span class="operator">=</span> <span class="string">&quot;LEARN.TOPIC.QUEUE.LOG&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LEARN_TOPIC_QUEUE_TEXT</span> <span class="operator">=</span> <span class="string">&quot;LEARN.TOPIC.QUEUE.TEXT&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LEARN_TOPIC_QUEUE_IMAGE</span> <span class="operator">=</span> <span class="string">&quot;LEARN.TOPIC.QUEUE.IMAGE&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LEARN_TOPIC_QUEUE_VOICE</span> <span class="operator">=</span> <span class="string">&quot;LEARN.TOPIC.QUEUE.VOICE&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LEARN_TOPIC_EXCHANGE</span> <span class="operator">=</span> <span class="string">&quot;LEARN.TOPIC.EXCHANGE&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LEARN_TOPIC_ROUTER_KEY_LOG</span> <span class="operator">=</span> <span class="string">&quot;LEARN.TOPIC.ROUTER_KEY.#&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LEARN_TOPIC_ROUTER_KEY_TEXT</span> <span class="operator">=</span> <span class="string">&quot;LEARN.TOPIC.ROUTER_KEY.TEXT&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LEARN_TOPIC_ROUTER_KEY_IMAGE</span> <span class="operator">=</span> <span class="string">&quot;LEARN.TOPIC.ROUTER_KEY.IMAGE&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LEARN_TOPIC_ROUTER_KEY_VOICE</span> <span class="operator">=</span> <span class="string">&quot;LEARN.TOPIC.ROUTER_KEY.VOICE&quot;</span>;</span><br><span class="line">    <span class="comment">/** ================  主题模式  end  ================ */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建队列配置类<code>TopicRabbitmqConfig</code>，声明创建队列，声明创建交换机，将交换机和队列进行绑定</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.learn.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.learn.constants.RabbitmqConstant;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Binding;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.BindingBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Queue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.TopicExchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 主题模式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TopicRabbitmqConfig</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean(name = RabbitmqConstant.LEARN_TOPIC_QUEUE_LOG)</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">queueLog</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(RabbitmqConstant.LEARN_TOPIC_QUEUE_LOG, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean(name = RabbitmqConstant.LEARN_TOPIC_QUEUE_TEXT)</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">queueText</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(RabbitmqConstant.LEARN_TOPIC_QUEUE_TEXT, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean(name = RabbitmqConstant.LEARN_TOPIC_QUEUE_IMAGE)</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">queueImage</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(RabbitmqConstant.LEARN_TOPIC_QUEUE_IMAGE, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean(name = RabbitmqConstant.LEARN_TOPIC_QUEUE_VOICE)</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">queueVoice</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(RabbitmqConstant.LEARN_TOPIC_QUEUE_VOICE, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(name = RabbitmqConstant.LEARN_TOPIC_EXCHANGE)</span></span><br><span class="line">    <span class="keyword">public</span> TopicExchange <span class="title function_">topicExchange</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TopicExchange</span>(RabbitmqConstant.LEARN_TOPIC_EXCHANGE, <span class="literal">true</span>, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">bindingQueueLog</span><span class="params">(<span class="meta">@Qualifier(RabbitmqConstant.LEARN_TOPIC_EXCHANGE)</span> TopicExchange topicExchange)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queueLog()).to(topicExchange).with(RabbitmqConstant.LEARN_TOPIC_ROUTER_KEY_LOG);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">bindingQueueText</span><span class="params">(<span class="meta">@Qualifier(RabbitmqConstant.LEARN_TOPIC_EXCHANGE)</span> TopicExchange topicExchange)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queueText()).to(topicExchange).with(RabbitmqConstant.LEARN_TOPIC_ROUTER_KEY_TEXT);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">bindingQueueImage</span><span class="params">(<span class="meta">@Qualifier(RabbitmqConstant.LEARN_TOPIC_EXCHANGE)</span> TopicExchange topicExchange)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queueImage()).to(topicExchange).with(RabbitmqConstant.LEARN_TOPIC_ROUTER_KEY_IMAGE);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">bindingQueueVoice</span><span class="params">(<span class="meta">@Qualifier(RabbitmqConstant.LEARN_TOPIC_EXCHANGE)</span> TopicExchange topicExchange)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queueVoice()).to(topicExchange).with(RabbitmqConstant.LEARN_TOPIC_ROUTER_KEY_VOICE);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>创建此队列的生产者类<code>TopicMsgProducer</code>，提供send方法进行生产消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.learn.rabbitmq.producer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.learn.constants.RabbitmqConstant;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.learn.req.SendBaseMsgReq;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TopicMsgProducer</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendText</span><span class="params">(SendBaseMsgReq req)</span>&#123;</span><br><span class="line">        rabbitTemplate.convertAndSend(RabbitmqConstant.LEARN_TOPIC_EXCHANGE,</span><br><span class="line">                RabbitmqConstant.LEARN_TOPIC_ROUTER_KEY_TEXT,</span><br><span class="line">                JSON.toJSONString(req));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendImage</span><span class="params">(SendBaseMsgReq req)</span>&#123;</span><br><span class="line">        rabbitTemplate.convertAndSend(RabbitmqConstant.LEARN_TOPIC_EXCHANGE,</span><br><span class="line">                RabbitmqConstant.LEARN_TOPIC_ROUTER_KEY_IMAGE,</span><br><span class="line">                JSON.toJSONString(req));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendVoice</span><span class="params">(SendBaseMsgReq req)</span>&#123;</span><br><span class="line">        rabbitTemplate.convertAndSend(RabbitmqConstant.LEARN_TOPIC_EXCHANGE,</span><br><span class="line">                RabbitmqConstant.LEARN_TOPIC_ROUTER_KEY_VOICE,</span><br><span class="line">                JSON.toJSONString(req));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建此队列的消费者类<code>TopicConsumer</code>，监听队列进行消费</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.learn.rabbitmq.consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.learn.constants.RabbitmqConstant;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.learn.req.SendBaseMsgReq;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.handler.annotation.Headers;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TopicConsumer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="meta">@RabbitListener(queues = RabbitmqConstant.LEARN_TOPIC_QUEUE_LOG)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">topicMsgConsumerListenerLog</span><span class="params">(String message, Channel channel, <span class="meta">@Headers</span> Map&lt;String, Object&gt; headerMap)</span>&#123;</span><br><span class="line">        <span class="type">SendBaseMsgReq</span> <span class="variable">req</span> <span class="operator">=</span> JSON.parseObject(message, SendBaseMsgReq.class);</span><br><span class="line">        log.info(<span class="string">&quot;主题模式消费，日志队列: &#123;&#125;&quot;</span>, req.getContent());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="meta">@RabbitListener(queues = RabbitmqConstant.LEARN_TOPIC_QUEUE_TEXT)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">topicMsgConsumerListenerText</span><span class="params">(String message, Channel channel, <span class="meta">@Headers</span> Map&lt;String, Object&gt; headerMap)</span>&#123;</span><br><span class="line">        <span class="type">SendBaseMsgReq</span> <span class="variable">req</span> <span class="operator">=</span> JSON.parseObject(message, SendBaseMsgReq.class);</span><br><span class="line">        log.info(<span class="string">&quot;主题模式消费，文本队列: &#123;&#125;&quot;</span>, req.getContent());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="meta">@RabbitListener(queues = RabbitmqConstant.LEARN_TOPIC_QUEUE_IMAGE)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">topicMsgConsumerListenerImage</span><span class="params">(String message, Channel channel, <span class="meta">@Headers</span> Map&lt;String, Object&gt; headerMap)</span>&#123;</span><br><span class="line">        <span class="type">SendBaseMsgReq</span> <span class="variable">req</span> <span class="operator">=</span> JSON.parseObject(message, SendBaseMsgReq.class);</span><br><span class="line">        log.info(<span class="string">&quot;主题模式消费，图片队列: &#123;&#125;&quot;</span>, req.getContent());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="meta">@RabbitListener(queues = RabbitmqConstant.LEARN_TOPIC_QUEUE_VOICE)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">topicMsgConsumerListenerVoice</span><span class="params">(String message, Channel channel, <span class="meta">@Headers</span> Map&lt;String, Object&gt; headerMap)</span>&#123;</span><br><span class="line">        <span class="type">SendBaseMsgReq</span> <span class="variable">req</span> <span class="operator">=</span> JSON.parseObject(message, SendBaseMsgReq.class);</span><br><span class="line">        log.info(<span class="string">&quot;主题模式消费，语音队列: &#123;&#125;&quot;</span>, req.getContent());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建一个控制类<code>TestController</code>，用来测试生产消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.learn.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.learn.rabbitmq.producer.*;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.learn.req.SendBaseMsgReq;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TopicMsgProducer topicMsgProducer;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/sendTopicMsg&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sendTopicMsg</span><span class="params">(<span class="meta">@RequestParam</span> String content, <span class="meta">@RequestParam</span> String type)</span>&#123;</span><br><span class="line">        <span class="type">SendBaseMsgReq</span> <span class="variable">req</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SendBaseMsgReq</span>();</span><br><span class="line">        req.setContent(content);</span><br><span class="line">        <span class="keyword">switch</span> (type)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;TEXT&quot;</span>:</span><br><span class="line">                topicMsgProducer.sendText(req);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;IMAGE&quot;</span>:</span><br><span class="line">                topicMsgProducer.sendImage(req);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;VOICE&quot;</span>:</span><br><span class="line">                topicMsgProducer.sendVoice(req);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;不明确的消息类型，请确认！&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;发送成功&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进行测试，TEXT、IMAGE、VOICE各请求两次。可见，日志队列消费了其他所有的消息</p><p><img src="https://gitee.com/ban-moon/blogImg/raw/master/image/20210206103648.png" alt="image-20210206103648865" /></p><h3 id="3-6、Headers头部交换机">3.6、Headers头部交换机</h3><p>header交换机为在多个属性进行路由而设计的，这些属性更容易描述为消息头，而不是routing key。headers交换机忽略routing key属性，相反用于路由的属性是从headers属性中获取的。如果消息头的值等于指定的绑定值，则认为消息是匹配的。</p><p>队列常量类<code>RabbitmqConstant</code>，声明常量为队列名称</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitmqConstant</span> &#123;    </span><br><span class="line">    <span class="comment">/** ================  头部模式 begin  ================ */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LEARN_HEADERS_QUEUE_ANY</span> <span class="operator">=</span> <span class="string">&quot;LEARN.HEADERS.QUEUE.ANY&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LEARN_HEADERS_QUEUE_ALL</span> <span class="operator">=</span> <span class="string">&quot;LEARN.HEADERS.QUEUE.ALL&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LEARN_HEADERS_EXCHANGE</span> <span class="operator">=</span> <span class="string">&quot;LEARN.HEADERS.EXCHANGE&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LEARN_HEADERS_ROUTER_KEY</span> <span class="operator">=</span> <span class="string">&quot;LEARN.HEADERS.ROUTER_KEY&quot;</span>;<span class="comment">// 路由键无用，头部模式通过消息头来进行路由</span></span><br><span class="line">    <span class="comment">/** ================  头部模式  end  ================ */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建队列配置类<code>HeadersRabbitmqConfig</code>，声明创建队列，声明创建交换机，将交换机和队列进行绑定</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.learn.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.learn.constants.RabbitmqConstant;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Binding;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.BindingBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.HeadersExchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Queue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 头部模式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HeadersRabbitmqConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(name = RabbitmqConstant.LEARN_HEADERS_QUEUE_ANY)</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">queueAny</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(RabbitmqConstant.LEARN_HEADERS_QUEUE_ANY, <span class="literal">false</span>, <span class="literal">true</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean(name = RabbitmqConstant.LEARN_HEADERS_QUEUE_ALL)</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">queueAll</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(RabbitmqConstant.LEARN_HEADERS_QUEUE_ALL, <span class="literal">false</span>, <span class="literal">true</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean(name = RabbitmqConstant.LEARN_HEADERS_EXCHANGE)</span></span><br><span class="line">    <span class="keyword">public</span> HeadersExchange <span class="title function_">headersExchange</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HeadersExchange</span>(RabbitmqConstant.LEARN_HEADERS_EXCHANGE, <span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">bindingHeadersQueueAny</span><span class="params">()</span>&#123;</span><br><span class="line">        HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;banmoon&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queueAny()).to(headersExchange()).whereAny(map).match();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">bindingHeadersQueueAll</span><span class="params">()</span>&#123;</span><br><span class="line">        HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;banmoon&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;sex&quot;</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queueAll()).to(headersExchange()).whereAll(map).match();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建此队列的生产者类<code>HeadersMsgProducer</code>，提供send方法进行生产消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.learn.rabbitmq.producer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.learn.constants.RabbitmqConstant;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.learn.req.SendBaseMsgReq;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Message;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.MessageProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HeadersMsgProducer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">(SendBaseMsgReq req, Map&lt;String, Object&gt; headerMap)</span>&#123;</span><br><span class="line">        <span class="type">MessageProperties</span> <span class="variable">messageProperties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MessageProperties</span>();</span><br><span class="line">        messageProperties.getHeaders().putAll(headerMap);</span><br><span class="line">        <span class="type">Message</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Message</span>(JSON.toJSONBytes(req), messageProperties);</span><br><span class="line">        rabbitTemplate.send(RabbitmqConstant.LEARN_HEADERS_EXCHANGE, <span class="literal">null</span>, message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建此队列的消费者类<code>HeadersMsgConsumer</code>，监听队列进行消费</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.learn.rabbitmq.consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.learn.constants.RabbitmqConstant;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.learn.req.SendBaseMsgReq;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.handler.annotation.Headers;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HeadersMsgConsumer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="meta">@RabbitListener(queues = RabbitmqConstant.LEARN_HEADERS_QUEUE_ANY)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">headersMsgConsumerListenerAny</span><span class="params">(String message, Channel channel, <span class="meta">@Headers</span> Map&lt;String, Object&gt; headerMap)</span>&#123;</span><br><span class="line">        <span class="type">SendBaseMsgReq</span> <span class="variable">req</span> <span class="operator">=</span> JSON.parseObject(message, SendBaseMsgReq.class);</span><br><span class="line">        log.info(<span class="string">&quot;headers模式消费，任一匹配队列: &#123;&#125;&quot;</span>, req.getContent());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="meta">@RabbitListener(queues = RabbitmqConstant.LEARN_HEADERS_QUEUE_ALL)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">headersMsgConsumerListenerAll</span><span class="params">(String message, Channel channel, <span class="meta">@Headers</span> Map&lt;String, Object&gt; headerMap)</span>&#123;</span><br><span class="line">        <span class="type">SendBaseMsgReq</span> <span class="variable">req</span> <span class="operator">=</span> JSON.parseObject(message, SendBaseMsgReq.class);</span><br><span class="line">        log.info(<span class="string">&quot;headers模式消费，全匹配队列: &#123;&#125;&quot;</span>, req.getContent());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建一个控制类<code>TestController</code>，用来测试生产消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.learn.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.learn.rabbitmq.producer.*;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.learn.req.SendBaseMsgReq;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DirectMsgProducer directMsgProducer;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@PostMapping(&quot;/sendHeadersMsg&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sendHeadersMsg</span><span class="params">(<span class="meta">@RequestParam</span> String content, <span class="meta">@RequestBody</span> Map&lt;String, Object&gt; headersMap)</span>&#123;</span><br><span class="line">        <span class="type">SendBaseMsgReq</span> <span class="variable">req</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SendBaseMsgReq</span>();</span><br><span class="line">        req.setContent(content);</span><br><span class="line">        headersMsgProducer.send(req, headersMap);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;发送成功&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试三组，各请求1次</p><ul class="lvl-0"><li class="lvl-2"><p>第一组：仅进入任一匹配的队列<br /><img src="https://gitee.com/ban-moon/blogImg/raw/master/image/20210206152030.png" alt="image-20210206152029541" /><br /><img src="https://gitee.com/ban-moon/blogImg/raw/master/image/20210206153026.png" alt="image-20210206153026146" /></p></li><li class="lvl-2"><p>第二组：两个队列皆进入<br /><img src="https://gitee.com/ban-moon/blogImg/raw/master/image/20210206153326.png" alt="image-20210206153326889" /><br /><img src="https://gitee.com/ban-moon/blogImg/raw/master/image/20210206153203.png" alt="image-20210206153203587" /></p></li><li class="lvl-2"><p>第三组：没有进队列<br /><img src="https://gitee.com/ban-moon/blogImg/raw/master/image/20210206153456.png" alt="image-20210206153456386" /><br /><img src="https://gitee.com/ban-moon/blogImg/raw/master/image/20210206153527.png" alt="image-20210206153527066" /></p></li></ul><h3 id="3-7、延迟队列TTL">3.7、延迟队列TTL</h3><p>在许多业务场景中，消息需要延迟进行处理，如以下</p><ul class="lvl-0"><li class="lvl-2"><p>订单在创建完成后，一小时未支付时通知用户及时支付</p></li><li class="lvl-2"><p>订单在创建完成后，24小时未支付后，自动关闭订单</p></li><li class="lvl-2"><p>到点秒杀，前15分钟通知用户进行准备</p></li></ul><p>在以上业务中，可以使用定时任务去查询数据库来进行实现，但这样的延迟不精确，且代码极度不优雅。我见过几个工程，里面定时任务一大堆，每天打印的日志起码都在150MB左右。而且，这样的程序会给数据库和服务器带来很大的压力，不是明智的选择。</p><p>而现在，rabbitmq可以实现延迟队列，可以解决以上的业务场景</p><p>延迟队列TTL（Time To Live）是rabbitmq中的一个高级特性，是<mark>消息或者队列的一个属性</mark>，<mark>此属性的作用是本消息或本队列中的消息最大存活的时间</mark>。如果时间一到，这条消息没有被消费，此消息将会进入死信交换机，再通过对应的路由策略进入队列，进行消费</p><blockquote><p>死信交换机和普通的交换机没有任何区别，可以是任何一种类型，也可以用普通常用的方式进行声明，与队列进行绑定</p></blockquote><p>队列常量类<code>RabbitmqConstant</code>，声明常量为队列名称</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitmqConstant</span> &#123;    </span><br><span class="line">    <span class="comment">/** ================  延迟队列 begin  ================ */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LEARN_TTL_QUEUE_GLOBAL</span> <span class="operator">=</span> <span class="string">&quot;LEARN.TTL.QUEUE.GLOBAL&quot;</span>;<span class="comment">// 将设置队列中的消息最大存活时间</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LEARN_TTL_QUEUE_LOCAL</span> <span class="operator">=</span> <span class="string">&quot;LEARN.TTL.QUEUE.LOCAL&quot;</span>;<span class="comment">// 将单独设置消息的过期时间</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LEARN_TTL_EXCHANGE</span> <span class="operator">=</span> <span class="string">&quot;LEARN.TTL.EXCHANGE&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LEARN_TTL_ROUTER_KEY_GLOBAL</span> <span class="operator">=</span> <span class="string">&quot;LEARN.DIRECT.ROUTER_KEY.GLOBAL&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LEARN_TTL_ROUTER_KEY_LOCAL</span> <span class="operator">=</span> <span class="string">&quot;LEARN.DIRECT.ROUTER_KEY.LOCAL&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LEARN_TTL_DEATH_QUEUE</span> <span class="operator">=</span> <span class="string">&quot;LEARN.TTL.DEATH.QUEUE.GLOBAL&quot;</span>;<span class="comment">// 死信交换机绑定的队列</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LEARN_TTL_DEATH_EXCHANGE</span> <span class="operator">=</span> <span class="string">&quot;LEARN.TTL.DEATH.EXCHANGE&quot;</span>;<span class="comment">// 死信交换机</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LEARN_TTL_DEATH_ROUTER_KEY</span> <span class="operator">=</span> <span class="string">&quot;LEARN.TTL.DEATH.ROUTER_KEY&quot;</span>;</span><br><span class="line">    <span class="comment">/** ================  延迟队列  end  ================ */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建队列配置类<code>TtlRabbitmqConfig</code>，声明创建队列，声明创建交换机，将交换机和队列进行绑定</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.learn.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.learn.constants.RabbitmqConstant;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * TTL 延迟队列</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TtlRabbitmqConfig</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean(name = RabbitmqConstant.LEARN_TTL_QUEUE_GLOBAL)</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">queueGlobal</span><span class="params">()</span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; arguments = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 有效时间过后转发的死信交换机</span></span><br><span class="line">        arguments.put(<span class="string">&quot;x-dead-letter-exchange&quot;</span>, RabbitmqConstant.LEARN_TTL_DEATH_EXCHANGE);</span><br><span class="line">        <span class="comment">// 死信交换机绑定队列的routingKey</span></span><br><span class="line">        arguments.put(<span class="string">&quot;x-dead-letter-routing-key&quot;</span>, RabbitmqConstant.LEARN_TTL_DEATH_ROUTER_KEY);</span><br><span class="line">        <span class="comment">// 设置最大存活时间，此处全局设置</span></span><br><span class="line">        arguments.put(<span class="string">&quot;x-message-ttl&quot;</span>, <span class="number">7000</span>);</span><br><span class="line">        <span class="type">Queue</span> <span class="variable">queue</span> <span class="operator">=</span> QueueBuilder.durable(RabbitmqConstant.LEARN_TTL_QUEUE_GLOBAL)</span><br><span class="line">                .withArguments(arguments)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">return</span> queue;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean(name = RabbitmqConstant.LEARN_TTL_QUEUE_LOCAL)</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">queueLocal</span><span class="params">()</span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; arguments = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 有效时间过后转发的死信交换机</span></span><br><span class="line">        arguments.put(<span class="string">&quot;x-dead-letter-exchange&quot;</span>, RabbitmqConstant.LEARN_TTL_DEATH_EXCHANGE);</span><br><span class="line">        <span class="comment">// 死信交换机绑定队列的routingKey</span></span><br><span class="line">        arguments.put(<span class="string">&quot;x-dead-letter-routing-key&quot;</span>, RabbitmqConstant.LEARN_TTL_DEATH_ROUTER_KEY);</span><br><span class="line">        <span class="type">Queue</span> <span class="variable">queue</span> <span class="operator">=</span> QueueBuilder.durable(RabbitmqConstant.LEARN_TTL_QUEUE_LOCAL)</span><br><span class="line">                .withArguments(arguments)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">return</span> queue;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean(name = RabbitmqConstant.LEARN_TTL_EXCHANGE)</span></span><br><span class="line">    <span class="keyword">public</span> DirectExchange <span class="title function_">directExchange</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DirectExchange</span>(RabbitmqConstant.LEARN_TTL_EXCHANGE, <span class="literal">true</span>, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">bindingQueueGlobal</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queueGlobal()).to(directExchange()).with(RabbitmqConstant.LEARN_TTL_ROUTER_KEY_GLOBAL);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">bindingQueueLocal</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queueLocal()).to(directExchange()).with(RabbitmqConstant.LEARN_TTL_ROUTER_KEY_LOCAL);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** ================  死信队列和交换机 begin  ================ */</span></span><br><span class="line">    <span class="meta">@Bean(name = RabbitmqConstant.LEARN_TTL_DEATH_QUEUE)</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">queueDeath</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(RabbitmqConstant.LEARN_TTL_DEATH_QUEUE, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean(name = RabbitmqConstant.LEARN_TTL_DEATH_EXCHANGE)</span></span><br><span class="line">    <span class="keyword">public</span> DirectExchange <span class="title function_">deathExchange</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DirectExchange</span>(RabbitmqConstant.LEARN_TTL_DEATH_EXCHANGE, <span class="literal">true</span>, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">bindingQueueDeath</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queueDeath()).to(deathExchange()).with(RabbitmqConstant.LEARN_TTL_DEATH_ROUTER_KEY);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/** ================  死信队列和交换机 end  ================ */</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建此队列的生产者类<code>TtlMsgProducer</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.learn.rabbitmq.producer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.learn.constants.RabbitmqConstant;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.learn.req.SendBaseMsgReq;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Message;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.MessageBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TtlMsgProducer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendGlobal</span><span class="params">(SendBaseMsgReq req)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;发送消息, 设置队列处的最大存活时间，7s：&#123;&#125;&quot;</span>, JSON.toJSONString(req));</span><br><span class="line">        rabbitTemplate.convertAndSend(RabbitmqConstant.LEARN_TTL_EXCHANGE, RabbitmqConstant.LEARN_TTL_ROUTER_KEY_GLOBAL, JSON.toJSONString(req));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendLocal</span><span class="params">(SendBaseMsgReq req, String expiration)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;发送消息, 设置消息处的最大存活时间：&#123;&#125;&quot;</span>, JSON.toJSONString(req));</span><br><span class="line">        <span class="type">Message</span> <span class="variable">message</span> <span class="operator">=</span> MessageBuilder</span><br><span class="line">                .withBody(JSON.toJSONBytes(req))</span><br><span class="line">                .setExpiration(expiration)</span><br><span class="line">                .build();</span><br><span class="line">        rabbitTemplate.convertAndSend(RabbitmqConstant.LEARN_TTL_EXCHANGE, RabbitmqConstant.LEARN_TTL_ROUTER_KEY_LOCAL, message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建此队列的消费者类<code>TtlMsgConsumer</code>，监听队列进行消费，<mark>注意这里消费的队列是死信队列，普通队列根本没有消费者进行消费，队列里的消息存活超时后将会进入死信队列</mark></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.learn.rabbitmq.consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.learn.constants.RabbitmqConstant;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.learn.req.SendBaseMsgReq;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TtlMsgConsumer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="meta">@RabbitListener(queues = RabbitmqConstant.LEARN_TTL_DEATH_QUEUE)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ttlMsgConsumerListener</span><span class="params">(String message)</span>&#123;</span><br><span class="line">        <span class="type">SendBaseMsgReq</span> <span class="variable">req</span> <span class="operator">=</span> JSON.parseObject(message, SendBaseMsgReq.class);</span><br><span class="line">        log.info(<span class="string">&quot;TTL延迟队列，消费消息: &#123;&#125;&quot;</span>, req.getContent());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建一个控制类<code>TestController</code>，用来测试生产消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.learn.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.learn.rabbitmq.producer.*;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.learn.req.SendBaseMsgReq;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TtlMsgProducer ttlMsgProducer;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/sendTtlMsg&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sendTtlMsg</span><span class="params">(<span class="meta">@RequestParam</span> String content, <span class="meta">@RequestParam</span> String type,</span></span><br><span class="line"><span class="params">                             <span class="meta">@RequestParam(required = false)</span> String expiration)</span>&#123;</span><br><span class="line">        <span class="type">SendBaseMsgReq</span> <span class="variable">req</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SendBaseMsgReq</span>();</span><br><span class="line">        req.setContent(content);</span><br><span class="line">        <span class="keyword">switch</span> (type)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;GLOBAL&quot;</span>:</span><br><span class="line">                ttlMsgProducer.sendGlobal(req);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;LOCAL&quot;</span>:</span><br><span class="line">                ttlMsgProducer.sendLocal(req, expiration);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;不明确的消息类型，请确认！&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;发送成功&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进行测试，队列设置和消息设置的各请求一次</p><p><img src="https://gitee.com/ban-moon/blogImg/raw/master/image/20210211232347.png" alt="image-20210211231256762" /></p><p><img src="https://gitee.com/ban-moon/blogImg/raw/master/image/20210211232418.png" alt="image-20210211232415975" /></p><p>查看日志消费，<mark>发送消息打印的日志和消费的日志时间间隔正好是设置的存活时间</mark></p><p><img src="https://gitee.com/ban-moon/blogImg/raw/master/image/20210211232730.png" alt="image-20210211232728883" /></p><blockquote><p>以上的队列可以解决固定的延迟业务场景，可当出现延迟时间不一致的时候，就会出现以下的情况</p><p>第一次请求20秒延迟的消息，马上请求第二次3秒的<br /><img src="https://gitee.com/ban-moon/blogImg/raw/master/image/20210212000020.png" alt="image-20210212000019166" /></p><p>可以看到，先进队列的20s的延迟消息会卡着3秒的延迟消息，所以TTL的延迟队列只适合相同延迟时间的业务场景那如果是不同时间的消息呢，自然不可能设置多条队列，这时就得用到了TXL延迟队列</p></blockquote><h3 id="3-8、延迟队列TXL">3.8、延迟队列TXL</h3><p>TXL延迟队列，主要用到了rabbitmq的一个插件，<code>rabbitmq_delayed_message_exchange</code></p><p>插件的下载地址：<a href="https://www.rabbitmq.com/community-plugins.html">https://www.rabbitmq.com/community-plugins.html</a></p><blockquote><p>下载后将插件放入rabbitmq/plugins目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看插件列表</span></span><br><span class="line">rabbitmq-plugins list</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启用延迟插件</span></span><br><span class="line">rabbitmq-plugins enable rabbitmq_delayed_message_exchange</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启rabbitmq</span></span><br></pre></td></tr></table></figure><p>如果顺利的话，插件就会启用成功；如果报错，那就需要检查下erlang运行环境和插件的版本号了。</p></blockquote><p>队列常量类<code>RabbitmqConstant</code>，声明常量为队列名称</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitmqConstant</span> &#123;    </span><br><span class="line">    <span class="comment">/** ================  延迟队列 begin  ================ */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LEARN_TXL_QUEUE</span> <span class="operator">=</span> <span class="string">&quot;LEARN.TXL.QUEUE&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LEARN_TXL_EXCHANGE</span> <span class="operator">=</span> <span class="string">&quot;LEARN.TXL.EXCHANGE&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LEARN_TXL_ROUTER_KEY</span> <span class="operator">=</span> <span class="string">&quot;LEARN.TXL.ROUTER_KEY&quot;</span>;</span><br><span class="line">    <span class="comment">/** ================  延迟队列  end  ================ */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建队列配置类<code>TxlRabbitmqConfig</code>，声明创建队列，声明创建交换机，将交换机和队列进行绑定</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.learn.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.learn.constants.RabbitmqConstant;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Binding;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.BindingBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.CustomExchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Queue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TxlRabbitmqConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(name = RabbitmqConstant.LEARN_TXL_QUEUE)</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">queue</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(RabbitmqConstant.LEARN_TXL_QUEUE, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(name = RabbitmqConstant.LEARN_TXL_EXCHANGE)</span></span><br><span class="line">    <span class="keyword">public</span> CustomExchange <span class="title function_">customExchange</span><span class="params">()</span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; args = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        args.put(<span class="string">&quot;x-delayed-type&quot;</span>, <span class="string">&quot;direct&quot;</span>);<span class="comment">// 设置成直连模式</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CustomExchange</span>(RabbitmqConstant.LEARN_TXL_EXCHANGE, <span class="string">&quot;x-delayed-message&quot;</span>, <span class="literal">true</span>, <span class="literal">false</span>, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">bindingTxlQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queue()).to(customExchange()).with(RabbitmqConstant.LEARN_TXL_ROUTER_KEY).noargs();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建此队列的生产者类<code>TxlMsgProducer</code>，提供send方法进行生产消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.learn.rabbitmq.producer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.learn.constants.RabbitmqConstant;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.learn.req.SendBaseMsgReq;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TxlMsgProducer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">(SendBaseMsgReq req, Integer delayTime)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;发送消息, 延迟时间：&#123;&#125;，消息内容：&#123;&#125;&quot;</span>, delayTime, JSON.toJSONString(req));</span><br><span class="line">        rabbitTemplate.convertAndSend(RabbitmqConstant.LEARN_TXL_EXCHANGE, RabbitmqConstant.LEARN_TXL_ROUTER_KEY,</span><br><span class="line">            JSON.toJSONString(req), a -&gt; &#123;</span><br><span class="line">                a.getMessageProperties().setDelay(delayTime);</span><br><span class="line">                <span class="keyword">return</span> a;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建此队列的消费者类<code>TxlMsgConsumer</code>，监听队列进行消费</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.learn.rabbitmq.consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.learn.constants.RabbitmqConstant;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.learn.req.SendBaseMsgReq;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Message;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TxlMsgConsumer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="meta">@RabbitListener(queues = RabbitmqConstant.LEARN_TXL_QUEUE)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">txlMsgConsumerListener</span><span class="params">(Message message, Channel channel)</span>&#123;</span><br><span class="line">        <span class="type">SendBaseMsgReq</span> <span class="variable">req</span> <span class="operator">=</span> JSON.parseObject(message.getBody(), SendBaseMsgReq.class);</span><br><span class="line">        log.info(<span class="string">&quot;TXL延迟队列，消费消息: &#123;&#125;&quot;</span>, req.getContent());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建一个控制类<code>TestController</code>，用来测试生产消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.learn.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.banmoon.learn.rabbitmq.producer.*;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.learn.req.SendBaseMsgReq;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TxlMsgProducer txlMsgProducer;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/sendTxlMsg&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sendTxlMsg</span><span class="params">(<span class="meta">@RequestParam</span> String content, <span class="meta">@RequestParam</span> Integer delayTime)</span>&#123;</span><br><span class="line">        <span class="type">SendBaseMsgReq</span> <span class="variable">req</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SendBaseMsgReq</span>();</span><br><span class="line">        req.setContent(content);</span><br><span class="line">        txlMsgProducer.send(req, delayTime);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;发送成功&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进行测试，第一次请求20秒，第二次请求3秒</p><p><img src="https://gitee.com/ban-moon/blogImg/raw/master/image/20210213113753.png" alt="image-20210213113752246" /></p><p><img src="https://gitee.com/ban-moon/blogImg/raw/master/image/20210213113901.png" alt="image-20210213113900501" /></p><p>查看日志消费的消息，已达到预期的效果</p><p><img src="https://gitee.com/ban-moon/blogImg/raw/master/image/20210213113940.png" alt="image-20210213113939279" /></p><h2 id="四、Exchange交换机类型">四、Exchange交换机类型</h2><p>在上文中，虽然列出了这么多项类型，但实际上交换机类型仅有4种，分别是</p><table><thead><tr><th style="text-align:left">交换机类型</th><th style="text-align:left">默认预先设定的交换机名字</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:left">Direct exchange</td><td style="text-align:left">(Empty string) and amq.direct</td><td>直连交换机，如果省略指定交换机，rabbitmq会使用默认的，这可以使开发省下一些时间</td></tr><tr><td style="text-align:left">Fanout exchange</td><td style="text-align:left">amq.fanout</td><td>扇形交换机，在此交换机中，router_key是失效的，消息会转到绑定在该交换机下的所有队列</td></tr><tr><td style="text-align:left">Topic exchange</td><td style="text-align:left">amq.topic</td><td>主题交换机，此交换机可以完成直连交换机和扇形交换机的功能，十分强大<br />当router_key为<code>#</code>时，它便成为了扇形交换机<br />当router_key没有出现<code>*</code>和<code>#</code>时，它便成为了直连交换机</td></tr><tr><td style="text-align:left">Headers exchange</td><td style="text-align:left">amq.match (and amq.headers in RabbitMQ)</td><td>头部交换机，与主题交换机类似，主要区别是此交换机的router_key失效，是通过消息头来进行路由的。<br />此交换机也十分强大，但由于配置比较繁琐，一般项目中都使用主题交换机</td></tr></tbody></table><h2 id="五、消息确认机制">五、消息确认机制</h2><p>在使用上，以上的队列使用，已完全满足日常的需求。</p><p>在扩展上，消息加入队列，或被消费的时候，使用消息的回调，可以使业务更加丰富。这就是消息的确认机制，分为<mark>生产消息确认</mark>和<mark>消费消息确认</mark>。</p><h3 id="5-1、生产消息确认机制">5.1、生产消息确认机制</h3><p>有时候，消息发送后没有被消费可能是<mark>没有发送成功</mark>，这时候就出现了生产消息确认。成功失败的消息都会进行回调，我们就可以对其做出进一步的处理。</p><p>首先，修改配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">8011</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">application:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">rabbitmq_learn</span></span><br><span class="line">    <span class="attr">rabbitmq:</span></span><br><span class="line">        <span class="attr">host:</span> <span class="string">主机名</span></span><br><span class="line">        <span class="attr">port:</span> <span class="string">端口</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">帐号</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">密码</span></span><br><span class="line">        <span class="comment"># 确认消息是否发送至交换机</span></span><br><span class="line">        <span class="attr">publisher-confirm-type:</span> <span class="string">correlated</span></span><br><span class="line">        <span class="comment"># 确认消息是否发送至队列</span></span><br><span class="line">        <span class="attr">publisher-returns:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><blockquote><p>本文使用的springBoot版本是<code>2.4.2</code>，旧版本的配置应该将（具体多旧这得翻文档了<code>o(╯□╰)o</code>）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将 publisher-confirm-type: correlated 改为</span></span><br><span class="line"><span class="attr">publisher-confirms:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></blockquote><p>创建<code>RabbitmqConfig</code>，作为生产消息确认的配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.learn.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConfirmListener;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.ReturnedMessage;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.connection.ConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.connection.CorrelationData;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitmqConfig</span> <span class="keyword">implements</span> <span class="title class_">RabbitTemplate</span>.ConfirmCallback, RabbitTemplate.ReturnsCallback&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RabbitTemplate <span class="title function_">rabbitTemplate</span><span class="params">(ConnectionFactory connectionFactory)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">RabbitTemplate</span> <span class="variable">rabbitTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RabbitTemplate</span>();</span><br><span class="line">        rabbitTemplate.setConnectionFactory(connectionFactory);</span><br><span class="line">        rabbitTemplate.setMandatory(<span class="literal">true</span>);<span class="comment">// 无论成功失败，都会确认信息</span></span><br><span class="line">        rabbitTemplate.setConfirmCallback(<span class="built_in">this</span>);</span><br><span class="line">        rabbitTemplate.setReturnsCallback(<span class="built_in">this</span>);</span><br><span class="line">        <span class="keyword">return</span> rabbitTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">confirm</span><span class="params">(CorrelationData correlationData, <span class="type">boolean</span> ack, String cause)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(ack)&#123;</span><br><span class="line">            log.info(<span class="string">&quot;【confirm】消息发送成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> correlationData==<span class="literal">null</span>? <span class="literal">null</span>: correlationData.getId();</span><br><span class="line">            log.error(<span class="string">&quot;【confirm】消息发送失败，相关数据：&#123;&#125;，原因：&#123;&#125;&quot;</span>, id, cause);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">returnedMessage</span><span class="params">(ReturnedMessage returnedMessage)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;【ReturnCallback】消息：&quot;</span> + returnedMessage.getMessage());</span><br><span class="line">        log.info(<span class="string">&quot;【ReturnCallback】回应码：&quot;</span> + returnedMessage.getReplyCode());</span><br><span class="line">        log.info(<span class="string">&quot;【ReturnCallback】回应信息：&quot;</span> + returnedMessage.getReplyText());</span><br><span class="line">        log.info(<span class="string">&quot;【ReturnCallback】交换机：&quot;</span> + returnedMessage.getExchange());</span><br><span class="line">        log.info(<span class="string">&quot;【ReturnCallback】路由键：&quot;</span> + returnedMessage.getRoutingKey());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码已编写完毕，我们再来看看出现的情况种类</p><p>以下测试使用直连模式的交换机，创建交换机、队列、绑定的代码我就不贴出来了，大家可以参考3.4进行测试使用，也可以进入我的<a href="https://gitee.com/ban-moon/rabbitmq_learn">gitee</a></p><p>生产者代码有些许不同，需要给定相关数据信息，生产者<code>ConfirmMsgProducer</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.learn.rabbitmq.producer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.learn.constants.RabbitmqConstant;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.learn.req.SendBaseMsgReq;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.connection.CorrelationData;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfirmMsgProducer</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">(SendBaseMsgReq req)</span>&#123;</span><br><span class="line">        <span class="type">CorrelationData</span> <span class="variable">data</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CorrelationData</span>(JSON.toJSONString(req));</span><br><span class="line">        rabbitTemplate.convertAndSend(RabbitmqConstant.LEARN_CONFIRM_EXCHANGE, RabbitmqConstant.LEARN_CONFIRM_ROUTER_KEY,</span><br><span class="line">                JSON.toJSONString(req), data);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本单元仅将生产消息确认，消费者暂时可以不监听指定</p><h4 id="1）消息推送，找不到交换机">1）消息推送，找不到交换机</h4><p>交换机，队列，绑定不用声明，仅留下一个生产者就行</p><p><img src="https://gitee.com/ban-moon/blogImg/raw/master/image/20210220110811.png" alt="image-20210220110809761" /></p><p>走的<code>confirm</code>方法的回调，在自己输出的同时，上面有串源码中输出的，但进去后没发现<code>confirm</code>方法，没收获什么。</p><h4 id="2）消息推送，找到了交换机，但找不到队列">2）消息推送，找到了交换机，但找不到队列</h4><p>交换机，队列可以声明，但不用绑定。这样就算找到了交换机，也找不到队列</p><p><img src="https://gitee.com/ban-moon/blogImg/raw/master/image/20210220112044.png" alt="image-20210220112044428" /></p><p>可以看到，<code>confirm</code>和<code>returnedMessage</code>的方法都进行了调用</p><h4 id="3）消息推送，交换机和队列都没有找到">3）消息推送，交换机和队列都没有找到</h4><p>和第一种情况一致，交换机都找不到了，还会去找队列吗？</p><h4 id="4）消息推送成功">4）消息推送成功</h4><p><img src="https://gitee.com/ban-moon/blogImg/raw/master/image/20210220112434.png" alt="image-20210220112434030" /></p><p>仅推送了<code>confirm</code>方法</p><blockquote><p><b>小结</b>：</p><ol><li class="lvl-3"><code>confirm</code>方法，消息是否到达交换机，无论成功还是失败都会调用</li><li class="lvl-3"><code>returnedMessage</code>方法，仅当没有找到队列时，才会调用</li></ol><p>在上面的示例中，仅打印了日志，在实际的开发中，可以根据自己的业务需求将失败的消息持久化到数据库中，以便排查问题</p></blockquote><h3 id="5-2、消费消息确认机制">5.2、消费消息确认机制</h3><p>消息被消费后，我们将进行确认，消息是否被成功消费，这就是消费消息的确认机制。</p><p>主要有以下两种</p><ol><li class="lvl-3"><p>无消息确认：在以上的代码示例中，都是无消费消息的确认，这也是没有指定<mark>默认的消费确认模式</mark></p></li><li class="lvl-3"><p>手动确认：这种机制是最关键的，许多业务都会使用到，消息消费不成功，不符合预期，将会打回队列重新消费</p></li><li class="lvl-3"><p>自动确认：消费出现异常就会重发，正常则就消费成功。这种模式有丢失消息的风险，且重复消费可能会阻塞队列，在平常项目中不会经常使用</p></li></ol><h4 id="1）无消息确认">1）无消息确认</h4><p>在没有消息确认的情况下，只要消息已经进入了消费者，那便立即被认定为消费成功。</p><p>所以，无论消费者有没有成功消费消息，还是消费者抛出异常后，消息都会默认处理完毕，也就是丢失了。</p><p>那么，在此模式，一定要保证消息是一次性的。异常一定得捕获，打印日志或持久化消息，以便排查问题。</p><p>消费者<code>ConfirmMsgConsumer</code>，捕获异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.learn.rabbitmq.consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.learn.constants.RabbitmqConstant;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.learn.req.SendBaseMsgReq;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Message;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfirmMsgConsumer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="meta">@RabbitListener(queues = RabbitmqConstant.LEARN_CONFIRM_QUEUE)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ConfirmMsgConsumerListener</span><span class="params">(Message message, Channel channel)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">SendBaseMsgReq</span> <span class="variable">req</span> <span class="operator">=</span> JSON.parseObject(message.getBody(), SendBaseMsgReq.class);</span><br><span class="line">            <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line">            log.info(<span class="string">&quot;消息确认消费：&#123;&#125;&quot;</span>, req.getContent());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception exception) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;消息确认消费异常：消息内容：&#123;&#125;&quot;</span>, <span class="keyword">new</span> <span class="title class_">String</span>(message.getBody()), exception);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请求测试，发送的消息被捕获后，就再也没有这条消息的影子了</p><p><img src="https://gitee.com/ban-moon/blogImg/raw/master/image/20210220134607.png" alt="image-20210220134607359" /></p><h4 id="2）手动确认">2）手动确认</h4><p>修改下配置文件，添加手动确认的配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">8011</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">application:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">rabbitmq_learn</span></span><br><span class="line">    <span class="attr">rabbitmq:</span></span><br><span class="line">        <span class="attr">host:</span> <span class="string">主机名</span></span><br><span class="line">        <span class="attr">port:</span> <span class="string">端口</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">帐号</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">密码</span></span><br><span class="line">        <span class="comment"># 确认消息是否发送至交换机</span></span><br><span class="line">        <span class="attr">publisher-confirm-type:</span> <span class="string">correlated</span></span><br><span class="line">        <span class="comment"># 确认消息是否发送至队列</span></span><br><span class="line">        <span class="attr">publisher-returns:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">listener:</span></span><br><span class="line">            <span class="attr">simple:</span></span><br><span class="line">                <span class="comment"># 消费消息确认，none(无)，auto(自动确认)，manual(手动确认)</span></span><br><span class="line">                <span class="attr">acknowledge-mode:</span> <span class="string">manual</span></span><br><span class="line">                <span class="comment"># 消费者最小数量</span></span><br><span class="line">                <span class="attr">concurrency:</span> <span class="number">1</span></span><br><span class="line">                <span class="comment"># 消费者最大数量</span></span><br><span class="line">                <span class="attr">max-concurrency:</span> <span class="number">1</span></span><br><span class="line">                <span class="attr">retry:</span></span><br><span class="line">                    <span class="comment"># 是否支持重试</span></span><br><span class="line">                    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">                    <span class="comment"># 最大重试次数，包括第一次消费的次数</span></span><br><span class="line">                    <span class="attr">max-attempts:</span> <span class="number">4</span></span><br><span class="line">                    <span class="comment"># 重试的最大时间间隔</span></span><br><span class="line">                    <span class="attr">max-interval:</span> <span class="number">10000</span></span><br><span class="line">                    <span class="comment"># 重试的初始时间间隔</span></span><br><span class="line">                    <span class="attr">initial-interval:</span> <span class="number">2000</span></span><br><span class="line">                    <span class="comment"># 重试的时间间隔因子</span></span><br><span class="line">                    <span class="attr">multiplier:</span> <span class="number">1.5</span></span><br></pre></td></tr></table></figure><blockquote><p>其中在此模式下，retry的配置是不起作用的，手动进行确认重回队列，具体可查看消费者的代码使用</p></blockquote><p>编写消费者<code>ConfirmMsgConsumer</code>，手动判断重试次数，再进行确认，确认次数可以存到redis缓存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.learn.rabbitmq.consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.learn.constants.RabbitmqConstant;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.learn.req.SendBaseMsgReq;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Message;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfirmMsgConsumer</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">AtomicInteger</span> <span class="variable">reCount</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.rabbitmq.listener.simple.retry.max-attempts&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer maxReCount;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="meta">@RabbitListener(queues = RabbitmqConstant.LEARN_CONFIRM_QUEUE)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ConfirmMsgConsumerListener</span><span class="params">(Message message, Channel channel)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">SendBaseMsgReq</span> <span class="variable">req</span> <span class="operator">=</span> JSON.parseObject(message.getBody(), SendBaseMsgReq.class);</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">a</span> <span class="operator">=</span> Integer.valueOf(req.getContent());</span><br><span class="line">            log.info(<span class="string">&quot;消息确认消费：&#123;&#125;&quot;</span>, a);</span><br><span class="line">            channel.basicAck(message.getMessageProperties().getDeliveryTag(), <span class="literal">false</span>);</span><br><span class="line">            reCount.set(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception exception) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;消息确认消费异常：消息内容：&#123;&#125;&quot;</span>, <span class="keyword">new</span> <span class="title class_">String</span>(message.getBody()));</span><br><span class="line">            <span class="keyword">if</span>(reCount.get()&lt;maxReCount)&#123;</span><br><span class="line">                reCount.incrementAndGet();</span><br><span class="line">                channel.basicNack(message.getMessageProperties().getDeliveryTag(), <span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="comment">//                channel.basicReject(message.getMessageProperties().getDeliveryTag(), true);</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            reCount.set(<span class="number">1</span>);</span><br><span class="line">            channel.basicNack(message.getMessageProperties().getDeliveryTag(), <span class="literal">false</span>, <span class="literal">false</span>);</span><br><span class="line"><span class="comment">//            channel.basicReject(message.getMessageProperties().getDeliveryTag(), false);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>确认消息共有三种</p><ol><li class="lvl-3"><code>basicAck</code>：肯定确认<ol><li class="lvl-6">deliveryTag：消息的标识ID</li><li class="lvl-6">multiple：是否批量，true为小于deliveryTag的消息也会被确认处理，false为只处理这一条消息</li></ol></li><li class="lvl-3"><code>basicNack</code>：否定确认<ol><li class="lvl-6">deliveryTag：同上</li><li class="lvl-6">multiple：同上</li><li class="lvl-6">requeue：是否重发队列</li></ol></li><li class="lvl-3"><code>basicReject</code>：否定确认，但和<code>basicNack</code>不同的是，<code>basicReject</code>一次只能拒绝单条消息<ol><li class="lvl-6">deliveryTag：同上</li><li class="lvl-6">requeue：是否重发队列</li></ol></li></ol></blockquote><p>请求测试，会报异常的请求，可以看到一共消费了4次</p><p><img src="https://gitee.com/ban-moon/blogImg/raw/master/image/20210220170151.png" alt="image-20210220170151252" /></p><p>请求测试，无异常的请求</p><p><img src="https://gitee.com/ban-moon/blogImg/raw/master/image/20210220170307.png" alt="image-20210220170307156" /></p><blockquote><p>在有次项目开发中，需要手动确认的消息，我并没有确认消息的代码，导致消息卡死。</p><p>查看后台，明明有消息在准备进行消费了，可就是没有消费，开发的时候好好的，可以正常消费，上测试生产后消费几条后就走不动了，重启工程又有消息进行了消费。</p><p>所以，既然选择了手动消费确认的模式，就必须要进行确认，不然就会出现以上诡异的问题。</p></blockquote><h4 id="3）自动确认">3）自动确认</h4><p>修改下配置文件，添加手动确认的配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">8011</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">application:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">rabbitmq_learn</span></span><br><span class="line">    <span class="attr">rabbitmq:</span></span><br><span class="line">        <span class="attr">host:</span> <span class="string">主机名</span></span><br><span class="line">        <span class="attr">port:</span> <span class="string">端口</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">帐号</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">密码</span></span><br><span class="line">        <span class="comment"># 确认消息是否发送至交换机</span></span><br><span class="line">        <span class="attr">publisher-confirm-type:</span> <span class="string">correlated</span></span><br><span class="line">        <span class="comment"># 确认消息是否发送至队列</span></span><br><span class="line">        <span class="attr">publisher-returns:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">listener:</span></span><br><span class="line">            <span class="attr">simple:</span></span><br><span class="line">                <span class="comment"># 消费消息确认，none(无)，auto(自动确认)，manual(手动确认)</span></span><br><span class="line">                <span class="attr">acknowledge-mode:</span> <span class="string">auto</span></span><br><span class="line">                <span class="comment"># 消费者最小数量</span></span><br><span class="line">                <span class="attr">concurrency:</span> <span class="number">1</span></span><br><span class="line">                <span class="comment"># 消费者最大数量</span></span><br><span class="line">                <span class="attr">max-concurrency:</span> <span class="number">1</span></span><br><span class="line">                <span class="attr">retry:</span></span><br><span class="line">                    <span class="comment"># 是否支持重试</span></span><br><span class="line">                    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">                    <span class="comment"># 最大重试次数，包括第一次消费的次数</span></span><br><span class="line">                    <span class="attr">max-attempts:</span> <span class="number">4</span></span><br><span class="line">                    <span class="comment"># 重试的最大时间间隔</span></span><br><span class="line">                    <span class="attr">max-interval:</span> <span class="number">10000</span></span><br><span class="line">                    <span class="comment"># 重试的初始时间间隔</span></span><br><span class="line">                    <span class="attr">initial-interval:</span> <span class="number">2000</span></span><br><span class="line">                    <span class="comment"># 重试的时间间隔因子</span></span><br><span class="line">                    <span class="attr">multiplier:</span> <span class="number">1.5</span></span><br></pre></td></tr></table></figure><p>编写消费者<code>ConfirmMsgConsumer</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.banmoon.learn.rabbitmq.consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.learn.constants.RabbitmqConstant;</span><br><span class="line"><span class="keyword">import</span> com.banmoon.learn.req.SendBaseMsgReq;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Message;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfirmMsgConsumer</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="meta">@RabbitListener(queues = RabbitmqConstant.LEARN_CONFIRM_QUEUE)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ConfirmMsgConsumerListener</span><span class="params">(Message message, Channel channel)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">SendBaseMsgReq</span> <span class="variable">req</span> <span class="operator">=</span> JSON.parseObject(message.getBody(), SendBaseMsgReq.class);</span><br><span class="line">        log.info(<span class="string">&quot;消息确认消费：&#123;&#125;&quot;</span>, req.getContent());</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">a</span> <span class="operator">=</span> Integer.valueOf(req.getContent());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请求测试，会报异常的请求</p><p><img src="https://gitee.com/ban-moon/blogImg/raw/master/image/20210221112729.png" alt="image-20210221112729077" /></p><p>请求测试，正常请求</p><p><img src="https://gitee.com/ban-moon/blogImg/raw/master/image/20210221112821.png" alt="image-20210221112821882" /></p><h2 id="六、最后">六、最后</h2><p>在以前，对rabbitmq的使用也是一知半解，通过编写此篇博客，有了许多清晰的了解。</p><p>此博客篇幅过长，请耐心观看</p><p>如有错误和不解的地方，请在评论区评论</p><p>在编写此博客过程中，我查阅了许多博客，也翻阅了官方文档，在此感谢其他博主的博客，给予了我很大的帮助，感谢</p><p><a href="https://blog.csdn.net/qq_35387940/article/details/100514134">小目标青年</a></p><p><a href="https://www.cnblogs.com/mfrank/p/11260355.html">弗兰克的猫</a></p><p><a href="https://www.rabbitmq.com/documentation.html">rabbitmq官方文档</a></p><p><a href="https://docs.spring.io/spring-amqp/docs/2.2.x/reference/html/">spring-amqp官方文档</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 消息队列 </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
